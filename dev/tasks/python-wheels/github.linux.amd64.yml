# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

{% import 'macros.jinja' as macros with context %}

{{ macros.github_header() }}

jobs:
  build:
    name: "Build wheel for manylinux {{ manylinux_version }}"
    runs-on: ubuntu-latest
    env:
      # archery uses these environment variables
      ARCH: amd64
      PYTHON: "{{ python_version }}"

    steps:
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.github_install_archery()|indent }}

      - name: Build wheel
        shell: bash
        run: archery docker run -e SETUPTOOLS_SCM_PRETEND_VERSION={{ arrow.no_rc_version }} python-wheel-manylinux-{{ manylinux_version }}

      - uses: actions/upload-artifact@v3
        with:
          name: wheel
          path: arrow/python/repaired_wheels/*.whl

      # TODO(kszucs): auditwheel show
      - name: Test wheel
        shell: bash
        run: |
          archery docker run python-wheel-manylinux-test-imports
          archery docker run python-wheel-manylinux-test-unittests

      {{ macros.github_upload_releases("arrow/python/repaired_wheels/*.whl")|indent }}
      {{ macros.github_upload_gemfury("arrow/python/repaired_wheels/*.whl")|indent }}

      {% if arrow.is_default_branch() %}
      {{ macros.github_login_dockerhub()|indent }}
      - name: Push Docker Image
        shell: bash
        run: |
          archery docker push python-wheel-manylinux-{{ manylinux_version }}
          archery docker push python-wheel-manylinux-test-unittests
      {% endif %}

  test:
    name: "Test wheel for manylinux {{ manylinux_version }} on {{ '${{ matrix.distribution }}' }} {{ '${{ matrix.version }}' }}"
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      # archery uses these environment variables
      ARCH: amd64
      PYTHON: "{{ python_version }}"
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - distribution: conda
            version: latest
          - distribution: almalinux
            version: "8"
          - distribution: ubuntu
            version: "18.04"
          - distribution: ubuntu
            version: "20.04"
          - distribution: ubuntu
            version: "22.04"

    steps:
      {{ macros.github_checkout_arrow(1, false)|indent }}
      {{ macros.github_install_archery()|indent }}

      - uses: actions/download-artifact@v3
        with:
          name: wheel

      - name: Prepare
        shell: bash
        run: |
          {% raw %}
          echo '${{ matrix.distribution }}=${{ matrix.version }}' | \
            tr 'a-z' 'A-Z' >> $GITHUB_ENV
          mkdir -p arrow/binaries/wheels/
          mv *.whl arrow/binaries/wheels/
          {% endraw %}
      - name: Test wheel
        shell: bash
        run: |
          pyarrow_version={{ arrow.no_rc_version }}
          {% raw %}
          case "${PYTHON}" in
            3.7)
              python_version=${PYTHON}m
              ;;
            *)
              python_version=${PYTHON}
              ;;
          esac
          archery docker run \
            -e TEST_DEFAULT=0 \
            -e TEST_PYARROW_VERSION=${pyarrow_version} \
            -e TEST_PYTHON_VERSIONS=${python_version} \
            -e TEST_WHEELS=1 \
            ${{ matrix.distribution }}-verify-rc
          {% endraw %}

      {% if arrow.is_default_branch() %}
      {{ macros.github_login_dockerhub()|indent }}
      - name: Push Docker Image
        shell: bash
        run: |
          {% raw %}
          archery docker push ${{ matrix.distribution }}-verify-rc
          {% endraw %}
      {% endif %}
