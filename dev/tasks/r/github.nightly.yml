# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

{% import 'macros.jinja' as macros with context %}
{% set r_root = "nightly/r" %}
{% set webdav_domain = "https://nightly.wujciak.de:8080" %}
{% set repo_domain = "https://nightly.wujciak.de/r" %}

{{ macros.github_header() }}

jobs:
  source:
    name: Source Package
    runs-on: ubuntu-latest
    steps:
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.change_r_pkg_version()|indent }}

      - uses: r-lib/actions/setup-r@v2
        with:
          install-r: false

      - name: Build R source package
        shell: bash
        run: |
          cd arrow/r
          # Copy in the Arrow C++ source
          make sync-cpp
          R CMD build --no-build-vignettes .

      - name: Install davfs2 & Mount Repo
        run: | 
          sudo apt update && sudo apt install davfs2
          mkdir nightly
          sudo bash -c 'echo "{{ webdav_domain }} {{ '${{ secrets.CROSSBOW_NIGHTLIES_USER }} ${{ secrets.CROSSBOW_NIGHTLIES_TOKEN }}' }}" >> /etc/davfs2/secrets'
          sudo mount -t davfs {{ webdav_domain }} nightly -o rw

      - name: Upload Source Package
        run: | 
          # ensure repo structure is set up, this job is the fastest and should fix any issue before the other jobs try
          # to push into non existent folder with curl, which would fail silently. 
          sudo mkdir -p {{ r_root }}/src/contrib 
        {% for os in ["ubuntu-18.04", 
                      "centos-7",
                      "windows"] %}     
          sudo mkdir -p {{ r_root }}/libarrow/bin/{{ os }}
        {% endfor %}
        {% for os in ["windows", "macosx", "macosx/big-sur-arm64"] %}     
          {% for r_version in ["4.1", "4.2"] %}
          sudo mkdir -p {{ r_root }}/bin/{{ os }}/contrib/{{ r_version }}
          {% endfor %}
        {% endfor %}
        
          sudo cp arrow/r/arrow_*.tar.gz {{ r_root }}/src/contrib
      - name: Update Repo
        shell: sudo Rscript {0}
        run: |
          if(file.exists("{{ r_root }}/src/contrib/PACKAGES")) {
            tools::update_PACKAGES("{{ r_root }}/src/contrib" , type = "source", latestOnly = FALSE)
          } else {
            tools::write_PACKAGES("{{ r_root }}/src/contrib" , type = "source", latestOnly = FALSE)
          }

      # ensures all changes are written
      - run: sudo umount nightly 
      - name: Upload binary artifact (temp)
        uses: actions/upload-artifact@v3
        with:
          name: r-src-pkg
          path: arrow/r/arrow_*.tar.gz

  linux-cpp:
    name: C++ Binary {{ '${{ matrix.config.os }}-${{ matrix.config.version }}' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu, version: "18.04" }
          - { os: centos, version: "7" }
    env:
      UBUNTU: {{ '${{ matrix.config.version }}' }}
      R: 3.6
    steps:
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.change_r_pkg_version()|indent }}
      {{ macros.github_install_archery()|indent }}
      - name: Build libarrow
        shell: bash
        run: |
          sudo sysctl -w kernel.core_pattern="core.%e.%p"
          ulimit -c unlimited
          archery docker run  {{ '${{ matrix.config.os}}' }}-cpp-static
      - name: Bundle and upload
        shell: bash
        env:
          USER: {{ '${{ secrets.CROSSBOW_NIGHTLIES_USER }}' }}
          PW: {{ '${{ secrets.CROSSBOW_NIGHTLIES_TOKEN }}' }}
        run: |
          cd arrow/r
          VERSION=$(grep ^Version DESCRIPTION | sed s/Version:\ //)
          export PKG_FILE="arrow-${VERSION}.zip"
          cd libarrow/dist
          # These files were created by the docker user so we have to sudo to get them
          sudo -E zip -r $PKG_FILE lib/ include/
          export REPO_PATH={{ 'r/libarrow/bin/${{ matrix.config.os }}-${{ matrix.config.version }}' }}

          curl -s --fail --show-error -u $USER:$PW -T $PKG_FILE  {{ webdav_domain }}/$REPO_PATH/
      - name: Upload binary artifact (temp)
        uses: actions/upload-artifact@v3
        with:
          name: r-{{ '${{ matrix.config.os}}' }}-libarrow
          path: arrow/r/libarrow/dist/arrow-*.zip

  windows-cpp:
    name: C++ Binary Windows RTools (40 only)
    runs-on: windows-latest
    steps:
      - run: git config --global core.autocrlf false
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.change_r_pkg_version()|indent }}

      - uses: r-lib/actions/setup-r@v2
        with:
          rtools-version: 40
          r-version: "4.0"
          Ncpus: 2

      - name: Build Arrow C++ with rtools40
        shell: bash
        env:
          ARROW_HOME: "arrow"
        run: arrow/ci/scripts/r_windows_build.sh

      - name: Upload Binary
        shell: bash
        env:
          USER: {{ '${{ secrets.CROSSBOW_NIGHTLIES_USER }}' }}
          PW: {{ '${{ secrets.CROSSBOW_NIGHTLIES_TOKEN }}' }}
        run: |
          VERSION=$(grep ^Version arrow/r/DESCRIPTION | sed s/Version:\ //)
          cd build
          curl -s --fail --show-error -u $USER:$PW -T arrow-$VERSION.zip  {{ webdav_domain }}/r/libarrow/bin/windows/

      - name: Upload binary artifact (temp)
        uses: actions/upload-artifact@v3
        with:
          name: r-windows-libarrow
          path: build/arrow-*.zip 

  r-packages:
    if: true
    needs: [source, windows-cpp]
    name: {{ '${{ matrix.platform }} ${{ matrix.r_version.r }}' }}
    runs-on: {{ '${{ matrix.platform }}' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - windows-latest
          # This is newer than what CRAN builds on, but Travis is no longer an option for us, so...
          - macos-10.15
          # - devops-managed # No M1 until the runner application runs native
        r_version:
          - { rtools: 40, r: "4.1" }
          - { rtools: 42, r: "4.2" }
    steps:
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: {{ '${{ matrix.r_version.r }}' }}
          rtools-version: {{ '${{ matrix.r_version.rtools }}' }}
          Ncpus: 2
      - name: Build Binary
        shell: Rscript {0}
        run: |
          on_windows <- tolower(Sys.info()[["sysname"]]) == "windows"

          # Install dependencies by installing (yesterday's) binary, then removing it
          install.packages(c("arrow", "cpp11"),
            type = "binary",
            # TODO replace with {{ repo_domain }}
            repos = c("https://arrow-r-nightly.s3.amazonaws.com", "https://cloud.r-project.org")
          )
          remove.packages("arrow")

          # Build
          Sys.setenv(MAKEFLAGS = paste0("-j", parallel::detectCores()))
          INSTALL_opts <- "--build"
          if (!on_windows) {
            # Windows doesn't support the --strip arg
            INSTALL_opts <- c(INSTALL_opts, "--strip")
          }
          install.packages(
            "arrow",
            type = "source",
            repos = "{{ repo_domain }}",
            INSTALL_opts = INSTALL_opts
          )

          # Test
          library(arrow)
          read_parquet(system.file("v0.7.1.parquet", package = "arrow"))
      - name: Upload package
        shell: bash
        env:
          USER: {{ '${{ secrets.CROSSBOW_NIGHTLIES_USER }}' }}
          PW: {{ '${{ secrets.CROSSBOW_NIGHTLIES_TOKEN }}' }}
          
        run: |
          VERSION=$(grep ^Version arrow/r/DESCRIPTION | sed s/Version:\ //)
          REPO_PATH=r$(Rscript -e "cat(contrib.url('', type = 'binary'))")
          EXT=$(if [[ {{ '${{ matrix.platform }}' }} == windows* ]]; then echo zip; else echo tgz; fi)

          curl -s --fail --show-error -u $USER:$PW -T arrow_$VERSION.$EXT {{ webdav_domain }}/$REPO_PATH/
      - name: Upload binary artifact (temp)
        uses: actions/upload-artifact@v3
        with:
          name: r-{{ '${{ matrix.config.os}}' }}-pkg
          path: arrow_*.zip 

  test-linux-binary:
    if: true
    needs: [source, linux-cpp]
    name: Test binary {{ '${{ matrix.image }}' }}
    runs-on: ubuntu-latest
    container: {{ '${{ matrix.image }}' }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - "rhub/ubuntu-gcc-release" # ubuntu-20.04 (focal)
          - "rstudio/r-base:4.1-bionic"
          - "rstudio/r-base:4.2-centos7"
          - "rocker/r-ver:3.6.3" # for debian:buster (10)
          - "rocker/r-ver" # ubuntu-20.04
          - "rhub/fedora-clang-devel" # tests distro-map.csv, mapped t
    steps:
      - name: Install system requirements
        shell: bash
        run: |
          if [ "`which dnf`" ]; then
            dnf install -y libcurl-devel openssl-devel
          elif [ "`which yum`" ]; then
            yum install -y libcurl-devel openssl-devel
          elif [ "`which zypper`" ]; then
            zypper install -y libcurl-devel libopenssl-devel
          else
            apt-get update
            apt-get install -y libcurl4-openssl-dev libssl-dev
          fi

          # Add R-devel to PATH
          echo "/opt/R-devel/bin" >> $GITHUB_PATH

      - name: Install arrow from our repo
        env:
          LIBARROW_BUILD: "FALSE"
          LIBARROW_BINARY: "TRUE"
        shell: Rscript {0}
        run: |
          {{  macros.test_r_src_pkg() }}

  test-source:
    #TODO Make sure we don't install arrow from CRAN if the repo fails
    if: true
    needs: source
    name: Test linux source build
    runs-on: ubuntu-latest
    steps:
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          install-r: false
      - name: Install arrow from nightly repo
        env:
          # Test source build so be sure not to download a binary
          LIBARROW_BINARY: "FALSE"
        shell: Rscript {0}
        run: |
          {{ macros.test_r_src_pkg() }}

      - name: Retry with verbosity if that failed
        if: failure()
        env:
          LIBARROW_BINARY: "FALSE"
          ARROW_R_DEV: "TRUE"
        run: |
          {{ macros.test_r_src_pkg() }}
  update-repo:
    needs: r-packages
    name: Update PACKAGES
    runs-on: ubuntu-latest
    steps:

      - uses: r-lib/actions/setup-r@v2
        with:
          install-r: false

      - name: Install davfs2 & Mount Repo
        run: | 
          sudo apt update && sudo apt install davfs2
          mkdir nightly
          sudo bash -c 'echo "{{ webdav_domain }} {{ '${{ secrets.CROSSBOW_NIGHTLIES_USER }} ${{ secrets.CROSSBOW_NIGHTLIES_TOKEN }}' }}" >> /etc/davfs2/secrets'
          sudo mount -t davfs {{ webdav_domain }} nightly -o rw

      - name: Update Repo
        shell: sudo Rscript {0}
        run: |
          on_windows <- tolower(Sys.info()[["sysname"]]) == "windows"

          bin_dirs <- paste0("{{ r_root }}/", dir("{{ r_root }}/bin", recursive = TRUE, include.dirs = TRUE, pattern = "\\d\\.\\d"))

          for(dir in bin_dirs) {
            if(file.exists(paste0(dir,"/PACKAGES"))) {
              tools::update_PACKAGES(dir , type = ifelse(on_windows, "win.binary", "mac.binary"), latestOnly = FALSE)
            } else {
              tools::write_PACKAGES(dir , type = ifelse(on_windows, "win.binary", "mac.binary"), latestOnly = FALSE)
            }
          }

      - run: sudo umount nightly
