From 5ef559bb17786cf4c57908ca086651a93577407f Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Sun, 21 Feb 2021 22:05:23 +0100
Subject: [PATCH] ARROW-11724: [C++] Resolve namespace collisions with protobuf
 3.15

---
 cpp/src/arrow/flight/client.cc                 | 4 ++--
 cpp/src/arrow/flight/flight_test.cc            | 4 ++--
 cpp/src/arrow/flight/serialization_internal.cc | 4 ++--
 cpp/src/arrow/flight/server.cc                 | 4 ++--
 4 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/cpp/src/arrow/flight/client.cc b/cpp/src/arrow/flight/client.cc
index f42fbdaa9..724f999fa 100644
--- a/cpp/src/arrow/flight/client.cc
+++ b/cpp/src/arrow/flight/client.cc
@@ -58,12 +58,12 @@
 #include "arrow/flight/serialization_internal.h"
 #include "arrow/flight/types.h"
 
-namespace pb = arrow::flight::protocol;
-
 namespace arrow {
 
 namespace flight {
 
+namespace pb = arrow::flight::protocol;
+
 const char* kWriteSizeDetailTypeId = "flight::FlightWriteSizeStatusDetail";
 
 FlightCallOptions::FlightCallOptions()
diff --git a/cpp/src/arrow/flight/flight_test.cc b/cpp/src/arrow/flight/flight_test.cc
index 663fead62..2cea4c490 100644
--- a/cpp/src/arrow/flight/flight_test.cc
+++ b/cpp/src/arrow/flight/flight_test.cc
@@ -51,11 +51,11 @@
 #include "arrow/flight/middleware_internal.h"
 #include "arrow/flight/test_util.h"
 
-namespace pb = arrow::flight::protocol;
-
 namespace arrow {
 namespace flight {
 
+namespace pb = arrow::flight::protocol;
+
 const char kValidUsername[] = "flight_username";
 const char kValidPassword[] = "flight_password";
 const char kInvalidUsername[] = "invalid_flight_username";
diff --git a/cpp/src/arrow/flight/serialization_internal.cc b/cpp/src/arrow/flight/serialization_internal.cc
index cf5f4140c..8c6b737c7 100644
--- a/cpp/src/arrow/flight/serialization_internal.cc
+++ b/cpp/src/arrow/flight/serialization_internal.cc
@@ -53,14 +53,14 @@
 #include "arrow/util/bit_util.h"
 #include "arrow/util/logging.h"
 
-namespace pb = arrow::flight::protocol;
-
 static constexpr int64_t kInt32Max = std::numeric_limits<int32_t>::max();
 
 namespace arrow {
 namespace flight {
 namespace internal {
 
+namespace pb = arrow::flight::protocol;
+
 using arrow::ipc::IpcPayload;
 
 using google::protobuf::internal::WireFormatLite;
diff --git a/cpp/src/arrow/flight/server.cc b/cpp/src/arrow/flight/server.cc
index 4e35950c8..d1b4e0fa8 100644
--- a/cpp/src/arrow/flight/server.cc
+++ b/cpp/src/arrow/flight/server.cc
@@ -60,11 +60,11 @@ using ServerContext = grpc::ServerContext;
 template <typename T>
 using ServerWriter = grpc::ServerWriter<T>;
 
-namespace pb = arrow::flight::protocol;
-
 namespace arrow {
 namespace flight {
 
+namespace pb = arrow::flight::protocol;
+
 // Macro that runs interceptors before returning the given status
 #define RETURN_WITH_MIDDLEWARE(CONTEXT, STATUS) \
   do {                                          \
-- 
2.24.3 (Apple Git-128)

