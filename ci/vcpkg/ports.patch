diff --git a/ports/aws-c-auth/vcpkg.json b/ports/aws-c-auth/vcpkg.json
index dc8f75e8ae..be7033248d 100644
--- a/ports/aws-c-auth/vcpkg.json
+++ b/ports/aws-c-auth/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "C99 library implementation of AWS client-side authentication: standard credentials providers and signing.",
   "homepage": "https://github.com/awslabs/aws-c-auth",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-c-common",
     "aws-c-http",
diff --git a/ports/aws-c-cal/vcpkg.json b/ports/aws-c-cal/vcpkg.json
index 48c7406ced..40e284dd0f 100644
--- a/ports/aws-c-cal/vcpkg.json
+++ b/ports/aws-c-cal/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "C99 wrapper for cryptography primitives.",
   "homepage": "https://github.com/awslabs/aws-c-cal",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-c-common",
     {
diff --git a/ports/aws-c-common/vcpkg.json b/ports/aws-c-common/vcpkg.json
index 67d5832072..3c8e96f7d3 100644
--- a/ports/aws-c-common/vcpkg.json
+++ b/ports/aws-c-common/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "AWS common library for C",
   "homepage": "https://github.com/awslabs/aws-c-common",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "openssl",
     {
diff --git a/ports/aws-c-compression/vcpkg.json b/ports/aws-c-compression/vcpkg.json
index 8b62d03897..7aa75eda2e 100644
--- a/ports/aws-c-compression/vcpkg.json
+++ b/ports/aws-c-compression/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "C99 implementation of huffman encoding/decoding",
   "homepage": "https://github.com/awslabs/aws-c-compression",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-c-common",
     {
diff --git a/ports/aws-c-event-stream/vcpkg.json b/ports/aws-c-event-stream/vcpkg.json
index 7018ea0b29..df3f85af9f 100644
--- a/ports/aws-c-event-stream/vcpkg.json
+++ b/ports/aws-c-event-stream/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "C99 implementation of the vnd.amazon.event-stream content-type.",
   "homepage": "https://github.com/awslabs/aws-c-event-stream",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-c-cal",
     "aws-c-common",
diff --git a/ports/aws-c-http/vcpkg.json b/ports/aws-c-http/vcpkg.json
index f7cf65478f..20ee8be716 100644
--- a/ports/aws-c-http/vcpkg.json
+++ b/ports/aws-c-http/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "C99 implementation of the HTTP/1.1 and HTTP/2 specifications",
   "homepage": "https://github.com/awslabs/aws-c-http",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-c-cal",
     "aws-c-common",
diff --git a/ports/aws-c-io/vcpkg.json b/ports/aws-c-io/vcpkg.json
index 60a1fb934a..b695deb52a 100644
--- a/ports/aws-c-io/vcpkg.json
+++ b/ports/aws-c-io/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "Handles all IO and TLS work for application protocols.",
   "homepage": "https://github.com/awslabs/aws-c-io",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-c-cal",
     "aws-c-common",
diff --git a/ports/aws-c-mqtt/vcpkg.json b/ports/aws-c-mqtt/vcpkg.json
index de7e464efb..3f459a79e3 100644
--- a/ports/aws-c-mqtt/vcpkg.json
+++ b/ports/aws-c-mqtt/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "C99 implementation of the MQTT 3.1.1 specification.",
   "homepage": "https://github.com/awslabs/aws-c-mqtt",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     {
       "name": "s2n",
diff --git a/ports/aws-c-s3/vcpkg.json b/ports/aws-c-s3/vcpkg.json
index 31dba92566..902c07f98d 100644
--- a/ports/aws-c-s3/vcpkg.json
+++ b/ports/aws-c-s3/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 1,
   "description": "C99 library implementation for communicating with the S3 service, designed for maximizing throughput on high bandwidth EC2 instances.",
   "homepage": "https://github.com/awslabs/aws-c-s3",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-c-auth",
     "aws-c-cal",
diff --git a/ports/aws-checksums/vcpkg.json b/ports/aws-checksums/vcpkg.json
index 3cdea45345..1cbed512f2 100644
--- a/ports/aws-checksums/vcpkg.json
+++ b/ports/aws-checksums/vcpkg.json
@@ -4,7 +4,6 @@
   "port-version": 2,
   "description": "Cross-Platform HW accelerated CRC32c and CRC32 with fallback to efficient SW implementations.",
   "homepage": "https://github.com/awslabs/aws-checksums",
-  "supports": "!arm",
   "dependencies": [
     "aws-c-common",
     {
diff --git a/ports/aws-crt-cpp/vcpkg.json b/ports/aws-crt-cpp/vcpkg.json
index 3b8cfafde8..38c37ec973 100644
--- a/ports/aws-crt-cpp/vcpkg.json
+++ b/ports/aws-crt-cpp/vcpkg.json
@@ -4,7 +4,7 @@
   "port-version": 2,
   "description": "Cross-Platform HW accelerated CRC32c and CRC32 with fallback to efficient SW implementations.",
   "homepage": "https://github.com/awslabs/aws-crt-cpp",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-c-auth",
     "aws-c-cal",
diff --git a/ports/aws-sdk-cpp/fix-find-crypto.patch b/ports/aws-sdk-cpp/fix-find-crypto.patch
new file mode 100644
index 0000000000..aafc631e93
--- /dev/null
+++ b/ports/aws-sdk-cpp/fix-find-crypto.patch
@@ -0,0 +1,20 @@
+diff --git a/cmake/setup_cmake_find_module.cmake b/cmake/setup_cmake_find_module.cmake
+index f5f147a0f..4561b8c39 100644
+--- a/cmake/setup_cmake_find_module.cmake
++++ b/cmake/setup_cmake_find_module.cmake
+@@ -30,15 +30,6 @@ file(WRITE
+     "set(AWSSDK_INSTALL_BINDIR ${BINARY_DIRECTORY})\n"
+     "set(AWSSDK_INSTALL_INCLUDEDIR ${INCLUDE_DIRECTORY})\n"
+     "set(AWSSDK_INSTALL_ARCHIVEDIR ${ARCHIVE_DIRECTORY})\n"
+-    "if (NOT LibCrypto_INCLUDE_DIR)\n"
+-    "    set(LibCrypto_INCLUDE_DIR ${OPENSSL_INCLUDE_DIR} CACHE INTERNAL \"The OpenSSL include directory\")\n"
+-    "endif()\n"
+-    "if (NOT LibCrypto_STATIC_LIBRARY)\n"
+-    "    set(LibCrypto_STATIC_LIBRARY ${OPENSSL_CRYPTO_LIBRARY} CACHE INTERNAL \"The OpenSSL crypto static library\")\n"
+-    "endif()\n"
+-    "if (NOT LibCrypto_SHARED_LIBRARY)\n"
+-    "    set(LibCrypto_SHARED_LIBRARY ${OPENSSL_CRYPTO_LIBRARY} CACHE INTERNAL \"The OpenSSL crypto shared library\")\n"
+-    "endif()\n"
+     )
+
+ if (NOT SIMPLE_INSTALL)
diff --git a/ports/aws-sdk-cpp/portfile.cmake b/ports/aws-sdk-cpp/portfile.cmake
index 42c09123d3..f9b4e4e440 100644
--- a/ports/aws-sdk-cpp/portfile.cmake
+++ b/ports/aws-sdk-cpp/portfile.cmake
@@ -1,100 +1,101 @@
-vcpkg_buildpath_length_warning(37)
-
-vcpkg_from_github(
-    OUT_SOURCE_PATH SOURCE_PATH
-    REPO aws/aws-sdk-cpp
-    REF 26fa78673ec93dc703e80b741d8b437237798297 # 1.9.160
-    SHA512 dfc6c1017dd1e76196861f0bd7e270736c2e74d55da1e394f7d64d8b1e2d978ad21f273ba4cd5d476d5f7dbe21eb0e3f170017dff97d3c3cca951f3ac68cf6f8
-    PATCHES
-        fix-config.patch
-        patch-relocatable-rpath.patch
-        fix-aws-root.patch
-)
-
-string(COMPARE EQUAL "${VCPKG_CRT_LINKAGE}" "dynamic" FORCE_SHARED_CRT)
-
-set(EXTRA_ARGS)
-if(VCPKG_TARGET_IS_OSX OR VCPKG_TARGET_IS_IOS)
-    set(rpath "@loader_path")
-elseif (VCPKG_TARGET_IS_ANDROID)
-    set(EXTRA_ARGS "-DTARGET_ARCH=ANDROID"
-            "-DGIT_EXECUTABLE=--invalid-git-executable--"
-            "-DGIT_FOUND=TRUE"
-            "-DNDK_DIR=$ENV{ANDROID_NDK_HOME}"
-            "-DANDROID_BUILD_ZLIB=FALSE"
-            "-DANDROID_BUILD_CURL=FALSE"
-            "-DANDROID_BUILD_OPENSSL=FALSE"
-            )
-else()
-    set(rpath "\$ORIGIN")
-endif()
-
-set(BUILD_ONLY core)
-include(${CMAKE_CURRENT_LIST_DIR}/compute_build_only.cmake)
-vcpkg_cmake_configure(
-    SOURCE_PATH "${SOURCE_PATH}"
-    DISABLE_PARALLEL_CONFIGURE
-    OPTIONS
-        ${EXTRA_ARGS}
-        "-DENABLE_UNITY_BUILD=ON"
-        "-DENABLE_TESTING=OFF"
-        "-DFORCE_SHARED_CRT=${FORCE_SHARED_CRT}"
-        "-DBUILD_ONLY=${BUILD_ONLY}"
-        "-DBUILD_DEPS=OFF"
-        "-DBUILD_SHARED_LIBS=OFF"
-        "-DCMAKE_INSTALL_RPATH=${rpath}"
-        "-DCMAKE_MODULE_PATH=${CURRENT_INSTALLED_DIR}/share/aws-c-common" # use extra cmake files
-)
-vcpkg_cmake_install()
-
-foreach(TARGET IN LISTS BUILD_ONLY)
-    vcpkg_cmake_config_fixup(PACKAGE_NAME "aws-cpp-sdk-${TARGET}" CONFIG_PATH "lib/cmake/aws-cpp-sdk-${TARGET}" DO_NOT_DELETE_PARENT_CONFIG_PATH)
-endforeach() 
-vcpkg_cmake_config_fixup(PACKAGE_NAME "AWSSDK" CONFIG_PATH "lib/cmake/AWSSDK")
-
-vcpkg_copy_pdbs()
-
-file(GLOB_RECURSE AWS_TARGETS "${CURRENT_PACKAGES_DIR}/share/*/*-targets-*.cmake")
-foreach(AWS_TARGET IN LISTS AWS_TARGETS)
-    file(READ ${AWS_TARGET} _contents)
-    string(REGEX REPLACE
-        "bin\\/([A-Za-z0-9_.-]+\\.lib)"
-        "lib/\\1"
-        _contents "${_contents}")
-    file(WRITE ${AWS_TARGET} "${_contents}")
-endforeach()
-
-file(GLOB AWS_CONFIGS "${CURRENT_PACKAGES_DIR}/share/*/aws-cpp-sdk-*-config.cmake")
-list(FILTER AWS_CONFIGS EXCLUDE REGEX "aws-cpp-sdk-core-config\\.cmake\$")
-foreach(AWS_CONFIG IN LISTS AWS_CONFIGS)
-    file(READ "${AWS_CONFIG}" _contents)
-    file(WRITE "${AWS_CONFIG}" "include(CMakeFindDependencyMacro)\nfind_dependency(aws-cpp-sdk-core)\n${_contents}")
-endforeach()
-
-file(REMOVE_RECURSE
-    "${CURRENT_PACKAGES_DIR}/debug/include"
-    "${CURRENT_PACKAGES_DIR}/debug/share"
-    "${CURRENT_PACKAGES_DIR}/lib/pkgconfig"
-    "${CURRENT_PACKAGES_DIR}/debug/lib/pkgconfig"
-    "${CURRENT_PACKAGES_DIR}/nuget"
-    "${CURRENT_PACKAGES_DIR}/debug/nuget"
-)
-
-if(VCPKG_LIBRARY_LINKAGE STREQUAL dynamic)
-    file(GLOB LIB_FILES ${CURRENT_PACKAGES_DIR}/bin/*.lib)
-    if(LIB_FILES)
-        file(COPY ${LIB_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/lib)
-        file(REMOVE ${LIB_FILES})
-    endif()
-    file(GLOB DEBUG_LIB_FILES ${CURRENT_PACKAGES_DIR}/debug/bin/*.lib)
-    if(DEBUG_LIB_FILES)
-        file(COPY ${DEBUG_LIB_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/debug/lib)
-        file(REMOVE ${DEBUG_LIB_FILES})
-    endif()
-
-    file(APPEND "${CURRENT_PACKAGES_DIR}/include/aws/core/SDKConfig.h" "#ifndef USE_IMPORT_EXPORT\n#define USE_IMPORT_EXPORT\n#endif")
-endif()
-
-configure_file("${CURRENT_PORT_DIR}/usage" "${CURRENT_PACKAGES_DIR}/share/${PORT}/usage" @ONLY)
-
-file(INSTALL "${SOURCE_PATH}/LICENSE" DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}" RENAME copyright)
+vcpkg_buildpath_length_warning(37)
+
+vcpkg_from_github(
+    OUT_SOURCE_PATH SOURCE_PATH
+    REPO aws/aws-sdk-cpp
+    REF 26fa78673ec93dc703e80b741d8b437237798297 # 1.9.160
+    SHA512 dfc6c1017dd1e76196861f0bd7e270736c2e74d55da1e394f7d64d8b1e2d978ad21f273ba4cd5d476d5f7dbe21eb0e3f170017dff97d3c3cca951f3ac68cf6f8
+    PATCHES
+        fix-config.patch
+        patch-relocatable-rpath.patch
+        fix-aws-root.patch
+        fix-find-crypto.patch
+)
+
+string(COMPARE EQUAL "${VCPKG_CRT_LINKAGE}" "dynamic" FORCE_SHARED_CRT)
+
+set(EXTRA_ARGS)
+if(VCPKG_TARGET_IS_OSX OR VCPKG_TARGET_IS_IOS)
+    set(rpath "@loader_path")
+elseif (VCPKG_TARGET_IS_ANDROID)
+    set(EXTRA_ARGS "-DTARGET_ARCH=ANDROID"
+            "-DGIT_EXECUTABLE=--invalid-git-executable--"
+            "-DGIT_FOUND=TRUE"
+            "-DNDK_DIR=$ENV{ANDROID_NDK_HOME}"
+            "-DANDROID_BUILD_ZLIB=FALSE"
+            "-DANDROID_BUILD_CURL=FALSE"
+            "-DANDROID_BUILD_OPENSSL=FALSE"
+            )
+else()
+    set(rpath "\$ORIGIN")
+endif()
+
+set(BUILD_ONLY core)
+include(${CMAKE_CURRENT_LIST_DIR}/compute_build_only.cmake)
+vcpkg_cmake_configure(
+    SOURCE_PATH "${SOURCE_PATH}"
+    DISABLE_PARALLEL_CONFIGURE
+    OPTIONS
+        ${EXTRA_ARGS}
+        "-DENABLE_UNITY_BUILD=ON"
+        "-DENABLE_TESTING=OFF"
+        "-DFORCE_SHARED_CRT=${FORCE_SHARED_CRT}"
+        "-DBUILD_ONLY=${BUILD_ONLY}"
+        "-DBUILD_DEPS=OFF"
+        "-DBUILD_SHARED_LIBS=OFF"
+        "-DCMAKE_INSTALL_RPATH=${rpath}"
+        "-DCMAKE_MODULE_PATH=${CURRENT_INSTALLED_DIR}/share/aws-c-common" # use extra cmake files
+)
+vcpkg_cmake_install()
+
+foreach(TARGET IN LISTS BUILD_ONLY)
+    vcpkg_cmake_config_fixup(PACKAGE_NAME "aws-cpp-sdk-${TARGET}" CONFIG_PATH "lib/cmake/aws-cpp-sdk-${TARGET}" DO_NOT_DELETE_PARENT_CONFIG_PATH)
+endforeach()
+vcpkg_cmake_config_fixup(PACKAGE_NAME "AWSSDK" CONFIG_PATH "lib/cmake/AWSSDK")
+
+vcpkg_copy_pdbs()
+
+file(GLOB_RECURSE AWS_TARGETS "${CURRENT_PACKAGES_DIR}/share/*/*-targets-*.cmake")
+foreach(AWS_TARGET IN LISTS AWS_TARGETS)
+    file(READ ${AWS_TARGET} _contents)
+    string(REGEX REPLACE
+        "bin\\/([A-Za-z0-9_.-]+\\.lib)"
+        "lib/\\1"
+        _contents "${_contents}")
+    file(WRITE ${AWS_TARGET} "${_contents}")
+endforeach()
+
+file(GLOB AWS_CONFIGS "${CURRENT_PACKAGES_DIR}/share/*/aws-cpp-sdk-*-config.cmake")
+list(FILTER AWS_CONFIGS EXCLUDE REGEX "aws-cpp-sdk-core-config\\.cmake\$")
+foreach(AWS_CONFIG IN LISTS AWS_CONFIGS)
+    file(READ "${AWS_CONFIG}" _contents)
+    file(WRITE "${AWS_CONFIG}" "include(CMakeFindDependencyMacro)\nfind_dependency(aws-cpp-sdk-core)\n${_contents}")
+endforeach()
+
+file(REMOVE_RECURSE
+    "${CURRENT_PACKAGES_DIR}/debug/include"
+    "${CURRENT_PACKAGES_DIR}/debug/share"
+    "${CURRENT_PACKAGES_DIR}/lib/pkgconfig"
+    "${CURRENT_PACKAGES_DIR}/debug/lib/pkgconfig"
+    "${CURRENT_PACKAGES_DIR}/nuget"
+    "${CURRENT_PACKAGES_DIR}/debug/nuget"
+)
+
+if(VCPKG_LIBRARY_LINKAGE STREQUAL dynamic)
+    file(GLOB LIB_FILES ${CURRENT_PACKAGES_DIR}/bin/*.lib)
+    if(LIB_FILES)
+        file(COPY ${LIB_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/lib)
+        file(REMOVE ${LIB_FILES})
+    endif()
+    file(GLOB DEBUG_LIB_FILES ${CURRENT_PACKAGES_DIR}/debug/bin/*.lib)
+    if(DEBUG_LIB_FILES)
+        file(COPY ${DEBUG_LIB_FILES} DESTINATION ${CURRENT_PACKAGES_DIR}/debug/lib)
+        file(REMOVE ${DEBUG_LIB_FILES})
+    endif()
+
+    file(APPEND "${CURRENT_PACKAGES_DIR}/include/aws/core/SDKConfig.h" "#ifndef USE_IMPORT_EXPORT\n#define USE_IMPORT_EXPORT\n#endif")
+endif()
+
+configure_file("${CURRENT_PORT_DIR}/usage" "${CURRENT_PACKAGES_DIR}/share/${PORT}/usage" @ONLY)
+
+file(INSTALL "${SOURCE_PATH}/LICENSE" DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}" RENAME copyright)
diff --git a/ports/aws-sdk-cpp/vcpkg.json b/ports/aws-sdk-cpp/vcpkg.json
index 64459ef4e1..bba54b41c0 100644
--- a/ports/aws-sdk-cpp/vcpkg.json
+++ b/ports/aws-sdk-cpp/vcpkg.json
@@ -4,7 +4,7 @@
   "version": "1.9.160",
   "description": "AWS SDK for C++",
   "homepage": "https://github.com/aws/aws-sdk-cpp",
-  "supports": "!arm & !uwp",
+  "supports": "!uwp",
   "dependencies": [
     "aws-crt-cpp",
     {
diff --git a/ports/curl/portfile.cmake b/ports/curl/portfile.cmake
index ce8b757054..8255ba2448 100644
--- a/ports/curl/portfile.cmake
+++ b/ports/curl/portfile.cmake
@@ -92,6 +92,10 @@ vcpkg_cmake_configure(
         -DCMAKE_DISABLE_FIND_PACKAGE_Perl=ON
         -DENABLE_DEBUG=ON
         -DCURL_CA_FALLBACK=ON
+        -DCURL_CA_PATH=none
+        -DCURL_CA_BUNDLE=none
+    OPTIONS_DEBUG
+        ${EXTRA_ARGS_DEBUG}
     OPTIONS_RELEASE
         ${OPTIONS_RELEASE}
     OPTIONS_DEBUG
diff --git a/ports/snappy/portfile.cmake b/ports/snappy/portfile.cmake
index 45b8c706db..b409d8a7be 100644
--- a/ports/snappy/portfile.cmake
+++ b/ports/snappy/portfile.cmake
@@ -4,6 +4,7 @@ vcpkg_from_github(
     REF 1.1.9
     SHA512 f1f8a90f5f7f23310423574b1d8c9acb84c66ea620f3999d1060395205e5760883476837aba02f0aa913af60819e34c625d8308c18a5d7a9c4e190f35968b024
     HEAD_REF master
+    PATCHES "snappy-disable-bmi.patch"
 )
 
 vcpkg_cmake_configure(
diff --git a/ports/snappy/snappy-disable-bmi.patch b/ports/snappy/snappy-disable-bmi.patch
new file mode 100644
index 0000000000..a8e6ee573d
--- /dev/null
+++ b/ports/snappy/snappy-disable-bmi.patch
@@ -0,0 +1,19 @@
+diff --git a/snappy.cc b/snappy.cc
+index 79dc0e8..f3153ea 100644
+--- a/snappy.cc
++++ b/snappy.cc
+@@ -965,14 +965,10 @@ static inline void Report(const char *algorithm, size_t compressed_size,
+ static inline uint32_t ExtractLowBytes(uint32_t v, int n) {
+   assert(n >= 0);
+   assert(n <= 4);
+-#if SNAPPY_HAVE_BMI2
+-  return _bzhi_u32(v, 8 * n);
+-#else
+   // This needs to be wider than uint32_t otherwise `mask << 32` will be
+   // undefined.
+   uint64_t mask = 0xffffffff;
+   return v & ~(mask << (8 * n));
+-#endif
+ }
+
+ static inline bool LeftShiftOverflows(uint8_t value, uint32_t shift) {
