# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# substrait::{ExtensionTypeVariation, ExtensionType}s
# for wrapping types which appear in the arrow type system but
# are not first-class in substrait. These include:
# - null
# - unsigned integers
# - half-precision floating point numbers
# - 32-bit times and 64-bit dates
# - timestamps with units other than microseconds
# - timestamps with timezones other than UTC
# - 256-bit decimals
# - sparse and dense unions
# - dictionary encoded types
# - durations
# - string and binary with 64 bit offsets
# - list with 64-bit offsets
# - interval<months: i32>
# - interval<days: i32, millis: i32>
# - interval<months: i32, days: i32, nanos: i64>
# - arrow::ExtensionTypes
#
# Note that not all of these are currently implemented. In particular, these
# extension types are currently not parameterizable in Substrait, which means
# among other things that we can't declare dictionary type here at all since
# we'd have to declare a different dictionary type for all encoded types
# (but that is an infinite space). Similarly, we would have to declare a
# timestamp variation for all possible timezone strings.

# Certain Arrow data types are, from Substrait's point of view, encodings.
# These include dictionary, the view types (e.g. binary view, list view),
# and REE.
#
# These types are not logically distinct from the type they are encoding.
# Specifically:
#  *  There is no column of the decoded type that cannot be represented
#     as a column the encoded type and vice versa.
#  *  Functions have the same meaning when applied to the encoded type
# 
# These types will never have a Substrait equivalent.  In the Substrait point
# of view these are execution details.

# The following types are encodings:

# binary_view
# list_view
# dictionary
# ree

# Arrow-cpp's Substrait serde does not yet handle parameterized UDTs.  This means
# the following types are not yet supported but may be supported in the future.
# We define them below in case other implementations support them in the meantime.

# decimal256
# large_list
# fixed_size_list
# duration
# time32 - not technically a parameterized type, but unsupported for similar reasons

# Other types are not encodings, but are not first-class in Substrait.  These
# types are often similar to existing Substrait types but define a different range
# of values.  For example, unsigned integer types are very similar to their integer
# counterparts, but have a different range of values.  These types are defined here
# as extension types.
#
# A full description of the types, along with their specified range, can be found
# in Schema.fbs
#
# Consumers should take care when supporting the below types.  Should Substrait decide
# later to support these types, the consumer will need to make sure to continue supporting
# the extension type names as aliases for proper backwards compatibility.
types:
  - name: "null"
    structure: {}
  - name: interval_month
    structure:
      months: i32
  - name: interval_day_milli
    structure:
      days: i32
      millis: i32
  - name: interval_month_day_nano
    structure:
      months: i32
      days: i32
      nanos: i64
  # All signed integer literals are encoded as user defined literals with
  # a google.protobuf.UInt64Value message.
  - name: i8
    structure: {}
  - name: i16
    structure: {}
  - name: i32
    structure: {}
  - name: i64
    structure: {}
  # fp16 literals are encoded as user defined literals with
  # a google.protobuf.UInt32Value message where the lower 16 bits are
  # the fp16 value.
  - name: fp16
    structure: {}
  # 64-bit integers are big.  Even though date64 stores ms and not days it
  # can still represent about 50x more dates than date32.  Since it has a
  # different range of values, it is an extension type.
  #
  # date64 literals are encoded as user defined literals with
  # a google.protobuf.UInt64Value message.
  - name: date_millis
    structure: {}
  # We cannot generate `time` today for reasons similar to parameterized
  # UDTs.
  - name: time_seconds
    structure: {}
  - name: time_millis
    structure: {}
  - name: time_nanos
    structure: {}
  # Large string literals are encoded using a
  # google.protobuf.StringValue message.
  - name: large_string
    structure: {}
  # Large binary literals are encoded using a
  # google.protobuf.BytesValue message.
  - name: large_binary
    structure: {}
  # We cannot generate these today because they are parameterized UDTs and
  # substrait-cpp does not yet support parameterized UDTs.
  - name: decimal256
    structure: {}
    parameters:
     - name: precision
       type: integer
       min: 0
       max: 76
     - name: scale
       type: integer
       min: 0
       max: 76
  - name: large_list
    structure: {}
    parameters:
      - name: value_type
        type: dataType
  - name: fixed_size_list
    structure: {}
    parameters:
      - name: value_type
        type: dataType
      - name: dimension
        type: integer
        min: 0
  - name: duration
    structure: {}
    parameters:
      - name: unit
        type: string

