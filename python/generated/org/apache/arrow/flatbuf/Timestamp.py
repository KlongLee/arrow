# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding
# leap seconds, as a 64-bit integer. Note that UNIX time does not include
# leap seconds.
#
# Date & time libraries often have multiple different data types for temporal
# data.  In order to ease interoperability between different implementations the
# Arrow project has some recommendations for encoding these types into a Timestamp
# column.
#
# An "instant" represents a single moment in time that has no meaningful time zone
# or the time zone is unknown.  A column of instants can also contain values from
# multiple time zones.  To encode an instant set the timezone string to "UTC".
#
# A "zoned date-time" represents a single moment in time that has a meaningful
# reference time zone.  To encode a zoned date-time as a Timestamp set the timezone
# string to the name of the timezone.  There is some ambiguity between an instant
# and a zoned date-time with the UTC time zone.  Both of these are stored the same.
# Typically, this distinction does not matter.  If it does, then an application should
# use custom metadata or an extension type to distinguish between the two cases.
#
# An "offset date-time" represents a single moment in time combined with a meaningful
# offset from UTC.  To encode an offset date-time as a Timestamp set the timezone string
# to the numeric time zone offset string (e.g. "+03:00").
#
# A "local date-time" does not represent a single moment in time.  It represents a wall
# clock time combined with a date.  Because of daylight savings time there may multiple
# instants that correspond to a single local date-time in any given time zone.  A
# local date-time is often stored as a struct or a Date32/Time64 pair.  However, it can
# also be encoded into a Timestamp column.  To do so the value should be the the time
# elapsed from the Unix epoch so that a wall clock in UTC would display the desired time.
# The timezone string should be set to null or the empty string.
class Timestamp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTimestamp(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Timestamp()
        x.Init(buf, n + offset)
        return x

    # Timestamp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Timestamp
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # The time zone is a string indicating the name of a time zone, one of:
    #
    # * As used in the Olson time zone database (the "tz database" or
    #   "tzdata"), such as "America/New_York"
    # * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30
    #
    # Whether a timezone string is present indicates different semantics about
    # the data:
    #
    # * If the time zone is null or an empty string, the data is a local date-time
    #   and does not represent a single moment in time.  Instead it represents a wall clock
    #   time and care should be taken to avoid interpreting it semantically as an instant.
    #
    # * If the time zone is set to a valid value, values can be displayed as
    #   "localized" to that time zone, even though the underlying 64-bit
    #   integers are identical to the same data stored in UTC. Converting
    #   between time zones is a metadata-only operation and does not change the
    #   underlying values
    # Timestamp
    def Timezone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TimestampStart(builder): builder.StartObject(2)
def TimestampAddUnit(builder, unit): builder.PrependInt16Slot(0, unit, 0)
def TimestampAddTimezone(builder, timezone): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timezone), 0)
def TimestampEnd(builder): return builder.EndObject()
