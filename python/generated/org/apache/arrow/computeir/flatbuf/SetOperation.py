# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A set operation on two or more relations
class SetOperation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSetOperation(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SetOperation()
        x.Init(buf, n + offset)
        return x

    # SetOperation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SetOperation
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.RelBase import RelBase
            obj = RelBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SetOperation
    def SetOpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # The kind of set operation
    # SetOperation
    def SetOp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def SetOperationStart(builder): builder.StartObject(3)
def SetOperationAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def SetOperationAddSetOpType(builder, setOpType): builder.PrependUint8Slot(1, setOpType, 0)
def SetOperationAddSetOp(builder, setOp): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(setOp), 0)
def SetOperationEnd(builder): return builder.EndObject()
