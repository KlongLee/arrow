# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# An inline replacement for org.apache.arrow.Buffer because that
# requires a sidecar block of bytes into which offsets can point.
# A union of buffers of each primitive type is provided to avoid
# the need for reinterpret_cast, std::mem::transmute, ...
# The final member of the union is a bytes buffer aligned suitably
# to hold any flatbuffer Table.
class InlineBuffer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInlineBuffer(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InlineBuffer()
        x.Init(buf, n + offset)
        return x

    # InlineBuffer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InlineBuffer
    def ImplType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # InlineBuffer
    def Impl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def InlineBufferStart(builder): builder.StartObject(2)
def InlineBufferAddImplType(builder, implType): builder.PrependUint8Slot(0, implType, 0)
def InlineBufferAddImpl(builder, impl): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(impl), 0)
def InlineBufferEnd(builder): return builder.EndObject()
