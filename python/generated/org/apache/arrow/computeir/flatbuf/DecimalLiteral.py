# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DecimalLiteral(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDecimalLiteral(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DecimalLiteral()
        x.Init(buf, n + offset)
        return x

    # DecimalLiteral
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DecimalLiteral
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DecimalLiteral
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DecimalLiteral
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DecimalLiteral
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DecimalLiteral
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # DecimalLiteral
    def Precision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def DecimalLiteralStart(builder): builder.StartObject(3)
def DecimalLiteralAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def DecimalLiteralStartValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def DecimalLiteralAddScale(builder, scale): builder.PrependUint8Slot(1, scale, 0)
def DecimalLiteralAddPrecision(builder, precision): builder.PrependUint8Slot(2, precision, 0)
def DecimalLiteralEnd(builder): return builder.EndObject()
