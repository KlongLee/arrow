# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Extract(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsExtract(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Extract()
        x.Init(buf, n + offset)
        return x

    # Extract
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Expression from which to extract components.
    # Extract
    def Expression(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.Expression import Expression
            obj = Expression()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Field to extract from `expression`.
    # Extract
    def Field(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Parameters for `function_name`; content/format may be unique to each
    # value of `function_name`.
    # Extract
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.InlineBuffer import InlineBuffer
            obj = InlineBuffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ExtractStart(builder): builder.StartObject(3)
def ExtractAddExpression(builder, expression): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(expression), 0)
def ExtractAddField(builder, field): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(field), 0)
def ExtractAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def ExtractEnd(builder): return builder.EndObject()
