# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Aggregate operation
class Aggregate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAggregate(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Aggregate()
        x.Init(buf, n + offset)
        return x

    # Aggregate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Common options
    # Aggregate
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.RelBase import RelBase
            obj = RelBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Child relation
    # Aggregate
    def Rel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.Relation import Relation
            obj = Relation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Expressions which will be evaluated to produce to
    # the rows of the aggregate relation's output.
    # Aggregate
    def Measures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from org.apache.arrow.computeir.flatbuf.Expression import Expression
            obj = Expression()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Aggregate
    def MeasuresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Aggregate
    def MeasuresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Keys by which `aggregations` will be grouped.
    #
    # The nested list here is to support grouping sets
    # eg
    #
    # SELECT a, b, c, sum(d)
    # FROM t
    # GROUP BY
    #   GROUPING SETS (
    #     (a, b, c),
    #     (a, b),
    #     (a),
    #     ()
    #   );
    # Aggregate
    def Groupings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from org.apache.arrow.computeir.flatbuf.Grouping import Grouping
            obj = Grouping()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Aggregate
    def GroupingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Aggregate
    def GroupingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def AggregateStart(builder): builder.StartObject(4)
def AggregateAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AggregateAddRel(builder, rel): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rel), 0)
def AggregateAddMeasures(builder, measures): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(measures), 0)
def AggregateStartMeasuresVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AggregateAddGroupings(builder, groupings): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(groupings), 0)
def AggregateStartGroupingsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AggregateEnd(builder): return builder.EndObject()
