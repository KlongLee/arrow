# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A data type indicating a different mapping of columns
# should occur in the output.
#
# For example:
#
# Given a query `SELECT a, b FROM t` where `t` has columns a, b, c
# the mapping value for the projection would equal [0, 1].
class Remap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRemap(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Remap()
        x.Init(buf, n + offset)
        return x

    # Remap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Remap
    def Mapping(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Remap
    def MappingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Remap
    def MappingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Remap
    def MappingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def RemapStart(builder): builder.StartObject(1)
def RemapAddMapping(builder, mapping): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mapping), 0)
def RemapStartMappingVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RemapEnd(builder): return builder.EndObject()
