# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Fields common to every relational operator
class RelBase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRelBase(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RelBase()
        x.Init(buf, n + offset)
        return x

    # RelBase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The arguments passed to `operation`.
    # RelBase
    def Arguments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from org.apache.arrow.computeir.flatbuf.Relation import Relation
            obj = Relation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RelBase
    def ArgumentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RelBase
    def ArgumentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # RelBase
    def OutputMappingType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Output remapping of ordinals for a given operation
    # RelBase
    def OutputMapping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Arguments for custom operations
    # RelBase
    def Options(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.InlineBuffer import InlineBuffer
            obj = InlineBuffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RelBaseStart(builder): builder.StartObject(4)
def RelBaseAddArguments(builder, arguments): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(arguments), 0)
def RelBaseStartArgumentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RelBaseAddOutputMappingType(builder, outputMappingType): builder.PrependUint8Slot(1, outputMappingType, 0)
def RelBaseAddOutputMapping(builder, outputMapping): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outputMapping), 0)
def RelBaseAddOptions(builder, options): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)
def RelBaseEnd(builder): return builder.EndObject()
