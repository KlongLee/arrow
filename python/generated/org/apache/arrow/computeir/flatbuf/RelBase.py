# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Fields common to every relational operator
class RelBase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRelBase(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RelBase()
        x.Init(buf, n + offset)
        return x

    # RelBase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RelBase
    def OutputMappingType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Output remapping of ordinal columns for a given operation
    # RelBase
    def OutputMapping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def RelBaseStart(builder): builder.StartObject(2)
def RelBaseAddOutputMappingType(builder, outputMappingType): builder.PrependUint8Slot(0, outputMappingType, 0)
def RelBaseAddOutputMapping(builder, outputMapping): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(outputMapping), 0)
def RelBaseEnd(builder): return builder.EndObject()
