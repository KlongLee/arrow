# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ext

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# The contents of Relation.options will be Arrow_StreamOutOptions
# if Relation.operation = NonCanonicalOperation{
#   .name_space = "arrow",
#   .name = "stream_out",
# }
class Arrow_StreamOutOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArrow_StreamOutOptions(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Arrow_StreamOutOptions()
        x.Init(buf, n + offset)
        return x

    # Arrow_StreamOutOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The URI to which RecordBatches of output should be streamed.
    # Arrow_StreamOutOptions
    def Destination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.ext.Uri import Uri
            obj = Uri()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Arrow_StreamOutOptionsStart(builder): builder.StartObject(1)
def Arrow_StreamOutOptionsAddDestination(builder, destination): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(destination), 0)
def Arrow_StreamOutOptionsEnd(builder): return builder.EndObject()
