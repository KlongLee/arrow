# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ext

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# The contents of Relation.options will be Arrow_FileSystemDatasetScanOptions
# if Relation.operation = NonCanonicalOperation{
#   .name_space = "arrow",
#   .name = "filesystem_dataset_scan",
# }
class Arrow_FileSystemDatasetScanOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArrow_FileSystemDatasetScanOptions(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Arrow_FileSystemDatasetScanOptions()
        x.Init(buf, n + offset)
        return x

    # Arrow_FileSystemDatasetScanOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The base directory of a dataset which should be scanned
    # as a source relation. A URI is used to accommodate potentially
    # remote file systems.
    # Arrow_FileSystemDatasetScanOptions
    def BaseDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.ext.Uri import Uri
            obj = Uri()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # The format of files in this dataset.
    # Arrow_FileSystemDatasetScanOptions
    def Format(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.ext.FileFormat import FileFormat
            obj = FileFormat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # A partitioning scheme in use in this dataset.
    # Arrow_FileSystemDatasetScanOptions
    def Partitioning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.ext.Partitioning import Partitioning
            obj = Partitioning()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Arrow_FileSystemDatasetScanOptionsStart(builder): builder.StartObject(3)
def Arrow_FileSystemDatasetScanOptionsAddBaseDir(builder, baseDir): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(baseDir), 0)
def Arrow_FileSystemDatasetScanOptionsAddFormat(builder, format): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(format), 0)
def Arrow_FileSystemDatasetScanOptionsAddPartitioning(builder, partitioning): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(partitioning), 0)
def Arrow_FileSystemDatasetScanOptionsEnd(builder): return builder.EndObject()
