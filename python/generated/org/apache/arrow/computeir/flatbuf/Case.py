# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Case statement-style expression.
class Case(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCase(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Case()
        x.Init(buf, n + offset)
        return x

    # Case
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Case
    def Cases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from org.apache.arrow.computeir.flatbuf.CaseFragment import CaseFragment
            obj = CaseFragment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Case
    def CasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Case
    def CasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # The default value if no cases match. This is typically NULL in SQL
    #
    # Defaulting to NULL is a frontend choice, so producers must specify NULL
    # if that's their desired behavior.
    # Case
    def Default(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.Expression import Expression
            obj = Expression()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Parameters for `function_name`; content/format may be unique to each
    # value of `function_name`.
    # Case
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.InlineBuffer import InlineBuffer
            obj = InlineBuffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CaseStart(builder): builder.StartObject(3)
def CaseAddCases(builder, cases): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cases), 0)
def CaseStartCasesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CaseAddDefault(builder, default): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(default), 0)
def CaseAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def CaseEnd(builder): return builder.EndObject()
