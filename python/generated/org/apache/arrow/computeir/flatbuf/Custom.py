# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A user-defined relation.
class Custom(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCustom(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Custom()
        x.Init(buf, n + offset)
        return x

    # Custom
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Custom
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.RelBase import RelBase
            obj = RelBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NB: the schema is optional here, since a custom relation
    # may or may not need it.
    # Custom
    def Schema(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.flatbuf.Schema import Schema
            obj = Schema()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CustomStart(builder): builder.StartObject(2)
def CustomAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def CustomAddSchema(builder, schema): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(schema), 0)
def CustomEnd(builder): return builder.EndObject()
