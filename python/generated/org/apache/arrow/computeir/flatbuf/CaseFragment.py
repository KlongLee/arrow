# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A single WHEN x THEN y fragment.
class CaseFragment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCaseFragment(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CaseFragment()
        x.Init(buf, n + offset)
        return x

    # CaseFragment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CaseFragment
    def When(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.Expression import Expression
            obj = Expression()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CaseFragment
    def Then(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from org.apache.arrow.computeir.flatbuf.Expression import Expression
            obj = Expression()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CaseFragmentStart(builder): builder.StartObject(2)
def CaseFragmentAddWhen(builder, when): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(when), 0)
def CaseFragmentAddThen(builder, then): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(then), 0)
def CaseFragmentEnd(builder): return builder.EndObject()
