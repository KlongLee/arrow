syntax = "proto3";

option java_package = "org.apache.arrow.flight.impl";

/*
 * A flight service is an endpoint for retrieving or storing Arrow data. A flight service can expose
 * one or more predefined endpoints that can be access using the Arrow Flight Protocol.
 * Additionally, the a flight service and expose a set of actions that are available.
 */
service FlightService {
  
  /*
   * Handshake between client and server. Server expects to receive handshake message before 
   * responding to any message types.
   */
  rpc Handshake(HandshakeRequest) returns (HandshakeResponse) {}
  
  /*
   * Get a list of available streams given a particular criteria. Most flight services will expose one
   * or more streams that are readily available for retrieval. This api allows listing the streams
   * available for consumption. A user can also provide a criteria. The criteria can limit the subset
   * of streams that can be listed via this interface. Each flight service allows its own definition
   * of how to consume criteria.
   */
  rpc ListFlights(Criteria) returns (stream FlightGetInfo) {}
  
  /*
   * For a given FlightDescriptor, get information about how the flight can be consumed. This is a
   * useful interface if the consumer of the interface already can identify the specific flight to
   * consume. This interface can also allow a consumer to generate a flight stream through a specified
   * descriptor. For example, a flight descriptor might be something that includes a SQL statement or
   * a Pickled Python operation that will be executed. In those cases, the descriptor will not be
   * previously available within the list of available streams provided by ListFlights but will be
   * available for consumption for the duration defined by the specific flight service.
   */  
  rpc GetFlightInfo(FlightDescriptor) returns (FlightGetInfo) {}
  
  /*
   * Retrieve a single stream associated with a particular descriptor associated with the referenced
   * ticket. A Flight can be composed of one or more streams where each stream can be retrieved using
   * a separate opaque ticket that the flight service uses for managing a collection of streams.
   */
  rpc DoGet(Ticket) returns (stream FlightData) {}

  /*
   * Push a stream to the flight service using associated with a particular flight stream. This allows
   * a client of a flight service to upload a stream of data. Depending on the particular flight
   * service, a client consumer could be allowed to upload a single stream per descriptor or an
   * unlimited number. (In the latter, the service might implement a 'seal' action that can be applied
   * to a descriptor once all streams are uploaded.
   */  
  rpc DoPut(stream FlightData) returns (PutResult) {}
  
  /*
   * Flight services can support an arbitrary number of simple actions in addition to the possible
   * ListFlights, GetFlightInfo, DoGet, DoPut operations that are potentially available. DoAction
   * allows a flight client to do a specific action against a flight service. An action includes
   * opaque request and response objects that are specific to the type action being undertaken.
   */  
  rpc DoAction(Action) returns (stream Result) {}
  
  /*
   * A flight service exposes all of the available action types that it has along with descriptions.
   * This allows different flight consumers to understand the capabilities of the flight servic
   */
  rpc ListActions(Empty) returns (stream ActionType) {}
  
}

/*
 * The request that a client provides to a server on handshake.
 */
message HandshakeRequest {

  /*
   * A defined protocol version
   */
  uint64 protocol_version = 1;
  Credential credential = 2;
  bytes payload = 3;
}

message HandshakeResponse {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

message Credential {
  enum CredentialType {
    UNKNOWN = 0;
    BASIC = 1;
    OPAQUE = 2;
  }
  
  CredentialType type = 1;
  string username = 2;
  string password = 3;
  bytes opaque_value = 4;
}

message Empty {}

/*
 * Describes an available action, including both the name used for execution along with a short
 * description of the purpose of the action.
 */
message ActionType {
  string type = 1;
  string description = 2;
}

/*
 * A service specific expression that can be used to return a limited the set of available Arrow
 * Flight streams.
 */
message Criteria {
  bytes expression = 1;
}

/*
 * An opaque action specific for the service.
 */
message Action {
  string type = 1;
  bytes body = 2;
}

/*
 * An opaque result returned after execution an action. 
 */
message Result {
  bytes body = 1;
}

/*
 * The name or tag for a Flight. May be used as a way to retrieve or generate 
 * a flight or be used to expose a set of previously defined flights.
 */
message FlightDescriptor {

  /* 
   * Describes what type of descriptor is defined.
   */
  enum DescriptorType {
  
    // Protobuf pattern, not used.
    UNKNOWN = 0;
    
    /*
     * A named path that identifies a dataset. A path is composed of a string 
     * or list of strings describing a particular dataset. This is conceptually
     *  similar to a path inside a filesystem.
     */
    PATH = 1;
    
    /*
     * An opaque command to generate a dataset. 
     */
    CMD = 2;
  }
  
  DescriptorType type = 1;
  
  /*
   * Opaque value used to express a command. Should only be defined when 
   * type = CMD.
   */
  bytes cmd = 2;
  
  /*
   * List of strings identifying a particular dataset. Should only be defined 
   * when type = PATH.
   */
  repeated string path = 3;
}

/*
 * The access coordinates for retrieval of a dataset. With a FlightGetInfo, a
 * consumer is able to determine how to retrieve a dataset.
 */
message FlightGetInfo {
  // schema of the dataset as described in Schema.fbs::Schema
  bytes schema = 1;
  
  /*
   * The descriptor associated with this info.
   */
  FlightDescriptor flight_descriptor = 2;
  
  /*
   * A list of endpoints associated with the flight. To consume the whole 
   * flight, all endpoints must be consumed.
   */ 
  repeated FlightEndpoint endpoint = 3;
  
  uint64 total_records = 4;
  uint64 total_bytes = 5;
}

/*
 * A particular stream or split associated with a flight.
 */
message FlightEndpoint {

  /*
   * Token used to retrieve this stream.
   */
  Ticket ticket = 1;
  
  /*
   * A list of locations where this ticket can be redeemed. If the list is 
   * empty, the expectation is that the ticket can only be redeemed on the 
   * current service where the ticket was generated. 
   */
  repeated Location location = 2;
}

/*
 * A location where a flight service will accept retrieval of a particular
 *  stream given a ticket.
 */
message Location {
  string host = 1;
  int32 port = 2;
}

/*
 * An opaque identifier that the service can use to retrieve a particular 
 * portion of a stream.
 */
message Ticket {
  bytes ticket = 1;
}

/*
 * A batch of Arrow data as part of a stream of batches.
 */
message FlightData {

  /*
   * The descriptor of the data. This is only relevant when a client is starting a new DoPut stream
   */
  FlightDescriptor flight_descriptor = 1;
  
  /*
   * Header for message data as described in Message.fbs::Message
   */
  bytes data_header = 2;
  
  /*
   * The actual batch of Arrow data. Preferrably handled with minimal-copies
   * comes last in the definition to help with sidecar patterns.
   */
  bytes data_body = 1000;
}

/**
 * The response message (currently empty) associated with the submission of a DoPut.
 */
message PutResult {}
