syntax = "proto3";

option java_package = "org.apache.arrow.flight.impl";

A flight service is a endpoint for retrieving or storing Arrow data. The flight service can expose one or more predefined endpoints that can be access using the Arrow Flight Protocol. Additionally, the a flight service and expose a set of actions that are available.   

/*
 * A flight service is an endpoint for retrieving or storing Arrow data. A flight service can expose
 * one or more predefined endpoints that can be access using the Arrow Flight Protocol.
 * Additionally, the a flight service and expose a set of actions that are available.
 */
service FlightService {

  /*
   * Get a list of available streams given a particular criteria. Most flight services will expose one
   * or more streams that are readily available for retrieval. This api allows listing the streams
   * available for consumption. A user can also provide a criteria. The criteria can limit the subset
   * of streams that can be listed via this interface. Each flight service allows its own definition
   * of how to consume criteria.
   */
  rpc ListFlights(Criteria) returns (stream FlightGetInfo) {}
  
  /*
   * For a given FlightDescriptor, get information about how the flight can be consumed. This is a
   * useful interface if the consumer of the interface already can identify the specific flight to
   * consume. This interface can also allow a consumer to generate a flight stream through a specified
   * descriptor. For example, a flight descriptor might be something that includes a SQL statement or
   * a Pickled Python operation that will be executed. In those cases, the descriptor will not be
   * previously available within the list of available streams provided by ListFlights but will be
   * available for consumption for the duration defined by the specific flight service.
   */  
  rpc GetFlightInfo(FlightDescriptor) returns (FlightGetInfo) {}
  
  /*
   * Retrieve a single stream associated with a particular descriptor associated with the referenced
   * ticket. A Flight can be composed of one or more streams where each stream can be retrieved using
   * a separate opaque ticket that the flight service uses for managing a collection of streams.
   */
  rpc DoGet(Ticket) returns (stream FlightData) {}

  /*
   * Push a stream to the flight service using associated with a particular flight stream. This allows
   * a client of a flight service to upload a stream of data. Depending on the particular flight
   * service, a client consumer could be allowed to upload a single stream per descriptor or an
   * unlimited number. (In the latter, the service might implement a 'seal' action that can be applied
   * to a descriptor once all streams are uploaded.
   */  
  rpc DoPut(stream FlightData) returns (PutResult) {}
  
  /*
   * Flight services can support an arbitrary number of simple actions in addition to the possible
   * ListFlights, GetFlightInfo, DoGet, DoPut operations that are potentially available. DoAction
   * allows a flight client to do a specific action against a flight service. An action includes
   * opaque request and response objects that are specific to the type action being undertaken.
   */  
  rpc DoAction(Action) returns (Result) {}
  
  /*
   * A flight service exposes all of the available action types that it has along with descriptions.
   * This allows different flight consumers to understand the capabilities of the flight servic
   */
  rpc ListActions(Empty) returns (stream ActionType) {}
  
}

message Empty {}

/*
 * Describes each available action, including both the name used for execution along with a short
 * description of the purpose of the action.
 */
message ActionType {
  string type = 1;
  string description = 2;
}

message Criteria {
  int64 slice_target = 1; 
  bytes pattern = 2;
}

message Action {
  string type = 1;
  bytes body = 2;
}

message Result {
  string type = 1;
  bytes body = 2;
}

message FlightDescriptor {
  enum DescriptorType {
    UNKNOWN = 0;
    PATH = 1;
    CMD = 2;
  }
  
  DescriptorType type = 1;
  string cmd = 2;
  repeated string path = 3;
}

message FlightGetInfo {
  // schema of the dataset as described in Schema.fbs::Schema
  bytes schema = 1;
  
  FlightDescriptor flight_descriptor = 2;
  
  repeated FlightEndpoint endpoint = 3;
  
  uint64 total_records = 4;
  uint64 total_bytes = 5;
}

message FlightPutRequest {
  FlightDescriptor flight_descriptor = 1;
  
  // schema of the dataset as described in Schema.fbs::Schema
  bytes schema = 2;
  
  int32 ticket_count = 3;
}

message FlightPutInstruction {
  repeated Ticket ticket = 1;
}

message FlightEndpoint {
  Ticket ticket = 1;
  Location location = 2;
}

message Location {
  string host = 1;
  int32 port = 2;
}

// An opaque, split identifier.
message Ticket {
  bytes ticket = 1;
}

message FlightData {
  // included only when putting data.
  FlightDescriptor flight_descriptor = 1;
  
  // header for message data as described in Message.fbs::Message
  bytes data_header = 2;
  
  // the actual data. preferrably handled with minimal-copies
  // comes last in the definition to help with sidecar patterns.
  bytes data_body = 1000;
}

message PutResult {}
