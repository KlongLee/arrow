# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

prelude: |-
  require 'arrow'
  require 'faker'
  require 'bigdecimal'

  state = ENV.fetch('FAKER_RANDOM_SEED', 17).to_i
  Faker::Config.random = Random.new(state)

  nrows = 1000
  ncols = 10
  type = Arrow::Decimal128DataType.new(10, 5)
  fields = ncols.times.map {|i| ["col_#{i}".to_sym, type] }.to_h
  schema = Arrow::Schema.new(**fields)
  arrays = ncols.times.map do
    Arrow::Decimal128Array.new(
      type,
      nrows.times.map { Faker::Number.decimal(10, 5) }
    )
  end
  record_batch = Arrow::RecordBatch.new(schema, nrows, arrays)

  def pure_ruby_raw_records(record_batch)
    [].tap do |ary|
      record_batch.n_rows.times do |i|
        record = []
        record_batch.n_columns.times do |j|
          record << record_batch.find_column(j)[i]
        end
        ary << record
      end
    end
  end

  def pure_ruby_raw_records_convert(record_batch)
    [].tap do |ary|
      record_batch.n_rows.times do |i|
        record = []
        record_batch.n_columns.times do |j|
          x = record_batch.find_column(j)[i]
          record << BigDecimal(x.to_s)
        end
        ary << record
      end
    end
  end
benchmark:
  pure_ruby: |-
    raw_records = pure_ruby_raw_records(record_batch)
  pure_ruby_convert: |-
    raw_records = pure_ruby_raw_records_convert(record_batch)
  raw_records: |-
    raw_records = record_batch.raw_records(convert_decimal: false)
  raw_records_convert: |-
    raw_records = record_batch.raw_records(convert_decimal: true)
