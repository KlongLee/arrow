#!/bin/env python3

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

'''
This script generates feather table files for the AsOfJoin Benchmarks.
The content of these files, after being generated by datagen and transformed by 
our utility, will have the following schema:
    time - int64
    id - int64
    [timestamp][random_num] + ms_0
    [timestamp1][random_num1] + ms_1
    ...
    [timestampN][random_numN] + ms_N
These files will vary in time frequency, key density and width.
This script is automatically called at the beginning of the asof join benchmark, but can 
be manually called by calling

python3 generate_benchmark_files [directory_for_benchmark_files/]

'''

import sys
from pyarrow import feather
import os
from datetime import datetime
import random
from batch_process import generate_data

def_start_date = "2020-01-01"
def_end_date = "2020-01-31"
def_table_freq = "30m"
def_table_freq_value = "1800s"
def_table_cols = "20_cols"
def_table_cols_value = 20
def_table_ids = "100_ids"
def_table_ids_value = 100

def transform_table_for_benchmarks(filename, outname = None):
    random.seed()
    df = feather.read_feather(filename)
    df = df.assign(time=df["time"].astype('i8'))

    # make each column name unique
    # to prevent table join conflicts
    new_cols = []
    current_timestamp = datetime.now()
    random_int = random.randint(0, 300)
    for col in df.columns:
        if col != "time" and col != "id":
            col = str(current_timestamp) + str(random_int) + col
        new_cols.append(col)
    df.columns = new_cols
    feather.write_feather(df, outname, compression = "uncompressed")
    
def generate(files_generated, output_dir):
    def generate_if(output_dir, name_freq, name_cols, name_ids, index, freq_val, col_val, id_val):
        file_name = f"{name_freq}_{name_cols}_{name_ids}{i}.feather"
        if file_name not in files_generated:
            print('needs write', name_freq, name_cols, name_ids, index, file = sys.stderr)
            dgen_json = f'''{{"begin_date":"{def_start_date}", "end_date":"{def_end_date}", "freq":"{freq_val}", "cols" : {col_val}, "ids" : {id_val}}}'''
            generate_data("BatchStreamFeatherFileWriter", output_dir + file_name, "TableMSDataGenerator", dgen_json)
    for name_freq, freq in [("5m", "300s"), ("30m", "1800s"), ("1d","1d")]:
        for i in range(2):
            generate_if(output_dir, name_freq, def_table_cols, def_table_ids, i, freq, def_table_cols_value, def_table_ids_value)
    for name_col, col in [("20_cols", 20), ("100_cols", 100), ("500_cols", 500)]:
        for i in range(2):
            generate_if(output_dir, def_table_freq, name_col, def_table_ids, i, def_table_freq_value, col, def_table_ids_value)
    for name_ids, num_ids in [("100_ids", 100), ("5000_ids", 5000), ("10000_ids", 10000)]:
        for i in range(2):
            generate_if(output_dir, def_table_freq, def_table_cols, name_ids, i, def_table_freq_value, def_table_cols_value, num_ids)
    for i in range(32):
        for name_freq, freq in [("5m", "300s"), ("30m", "1800s"), ("1d","1d")]:
            generate_if(output_dir, name_freq, def_table_cols, def_table_ids, i, freq, def_table_cols_value, def_table_ids_value)

if __name__ == "__main__":
    files_generated = set()
    dir_path = sys.argv[1]
    for _, _, files in os.walk(dir_path):
        for f in files:
            if f.endswith('feather'): 
                files_generated.add(f)
        break
    generate(files_generated, dir_path)
    print('finished generating benchmark files', file = sys.stderr)
    for root, dirs, files in os.walk(dir_path):
        for f in files:
            if f.endswith('feather') and f not in files_generated:
                new_f = f"{dir_path}/{f}"
                transform_table_for_benchmarks(new_f, new_f)
        break
    print('finished transforming benchmark files', file = sys.stderr)
    exit()

    