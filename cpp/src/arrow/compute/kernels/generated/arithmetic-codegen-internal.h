// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT
// Generated by codegen.py script
#define ARITHMETIC_TYPESWITCH(OUT, TYPE, T1, T2, T3) \
  switch(T1->id()) { \
    case Type::INT8: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int8_t, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int8_t, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int8_t, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int8_t, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int8_t, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int8_t, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int8_t, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int8_t, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int8_t, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int8_t, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::UINT8: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint8_t, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint8_t, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint8_t, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint8_t, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint8_t, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint8_t, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint8_t, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint8_t, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint8_t, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint8_t, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::INT16: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int16_t, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int16_t, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int16_t, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int16_t, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int16_t, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int16_t, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int16_t, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int16_t, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int16_t, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int16_t, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::UINT16: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint16_t, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint16_t, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint16_t, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint16_t, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint16_t, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint16_t, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint16_t, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint16_t, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint16_t, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint16_t, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::INT32: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int32_t, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int32_t, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int32_t, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int32_t, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int32_t, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int32_t, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int32_t, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int32_t, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int32_t, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int32_t, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::UINT32: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint32_t, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint32_t, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint32_t, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint32_t, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint32_t, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint32_t, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint32_t, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint32_t, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint32_t, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint32_t, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::INT64: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<int64_t, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<int64_t, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<int64_t, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<int64_t, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<int64_t, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<int64_t, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<int64_t, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<int64_t, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<int64_t, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<int64_t, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::UINT64: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<uint64_t, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<uint64_t, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<uint64_t, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<uint64_t, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<uint64_t, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<uint64_t, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<uint64_t, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<uint64_t, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<uint64_t, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<uint64_t, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::FLOAT: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<float, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<float, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<float, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<float, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<float, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<float, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<float, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<float, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<float, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<float, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    case Type::DOUBLE: \
      switch(T2->id()) { \
        case Type::INT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, int8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, int8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, int8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, int8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, int8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, int8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, int8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, int8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, int8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, int8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT8: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, uint8_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, uint8_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, uint8_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, uint8_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, uint8_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, uint8_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, uint8_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, uint8_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, uint8_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, uint8_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, int16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, int16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, int16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, int16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, int16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, int16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, int16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, int16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, int16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, int16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT16: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, uint16_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, uint16_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, uint16_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, uint16_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, uint16_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, uint16_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, uint16_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, uint16_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, uint16_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, uint16_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, int32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, int32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, int32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, int32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, int32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, int32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, int32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, int32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, int32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, int32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT32: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, uint32_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, uint32_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, uint32_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, uint32_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, uint32_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, uint32_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, uint32_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, uint32_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, uint32_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, uint32_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::INT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, int64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, int64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, int64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, int64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, int64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, int64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, int64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, int64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, int64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, int64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::UINT64: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, uint64_t, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, uint64_t, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, uint64_t, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, uint64_t, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, uint64_t, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, uint64_t, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, uint64_t, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, uint64_t, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, uint64_t, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, uint64_t, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::FLOAT: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, float, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, float, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, float, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, float, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, float, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, float, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, float, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, float, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, float, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, float, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        case Type::DOUBLE: \
          switch(T3->id()) { \
            case Type::INT8: \
              OUT = new TYPE<double, double, int8_t>(T1); \
              break; \
            case Type::UINT8: \
              OUT = new TYPE<double, double, uint8_t>(T1); \
              break; \
            case Type::INT16: \
              OUT = new TYPE<double, double, int16_t>(T1); \
              break; \
            case Type::UINT16: \
              OUT = new TYPE<double, double, uint16_t>(T1); \
              break; \
            case Type::INT32: \
              OUT = new TYPE<double, double, int32_t>(T1); \
              break; \
            case Type::UINT32: \
              OUT = new TYPE<double, double, uint32_t>(T1); \
              break; \
            case Type::INT64: \
              OUT = new TYPE<double, double, int64_t>(T1); \
              break; \
            case Type::UINT64: \
              OUT = new TYPE<double, double, uint64_t>(T1); \
              break; \
            case Type::FLOAT: \
              OUT = new TYPE<double, double, float>(T1); \
              break; \
            case Type::DOUBLE: \
              OUT = new TYPE<double, double, double>(T1); \
              break; \
            default: \
              OUT = NULLPTR; \
            break; \
          } \
          break; \
        default: \
          OUT = NULLPTR; \
        break; \
      } \
      break; \
    default: \
      OUT = NULLPTR; \
    break; \
  } \

