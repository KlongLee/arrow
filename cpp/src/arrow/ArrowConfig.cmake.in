# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# This config sets the following variables in your project::
#
#   ARROW_FULL_SO_VERSION - full shared library version of the found Arrow
#   ARROW_SO_VERSION - shared library version of the found Arrow
#   ARROW_VERSION - version of the found Arrow
#   ARROW_* - options used when the found Arrow is build such as ARROW_COMPUTE
#   Arrow_FOUND - true if Arrow found on the system
#
# This config sets the following targets in your project::
#
#   Arrow::arrow_shared - for linked as shared library if shared library is built
#   Arrow::arrow_static - for linked as static library if static library is built

@PACKAGE_INIT@

set(ARROW_VERSION "@ARROW_VERSION@")
set(ARROW_SO_VERSION "@ARROW_SO_VERSION@")
set(ARROW_FULL_SO_VERSION "@ARROW_FULL_SO_VERSION@")

set(ARROW_LIBRARY_PATH_SUFFIXES "@ARROW_LIBRARY_PATH_SUFFIXES@")
set(ARROW_INCLUDE_PATH_SUFFIXES "@ARROW_INCLUDE_PATH_SUFFIXES@")
set(ARROW_SYSTEM_DEPENDENCIES "@ARROW_SYSTEM_DEPENDENCIES@")
set(ARROW_BUNDLED_STATIC_LIBS "@ARROW_BUNDLED_STATIC_LIBS@")

include("${CMAKE_CURRENT_LIST_DIR}/ArrowOptions.cmake")

if(ARROW_BUILD_STATIC)
  include(CMakeFindDependencyMacro)

  set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
  set(THREADS_PREFER_PTHREAD_FLAG TRUE)
  find_dependency(Threads)

  if(DEFINED CMAKE_MODULE_PATH)
    set(_CMAKE_MODULE_PATH_OLD ${CMAKE_MODULE_PATH})
  endif()
  set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

  foreach(_DEPENDENCY ${ARROW_SYSTEM_DEPENDENCIES})
    find_dependency(${_DEPENDENCY})
  endforeach()

  if(DEFINED _CMAKE_MODULE_PATH_OLD)
    set(CMAKE_MODULE_PATH ${_CMAKE_MODULE_PATH_OLD})
    unset(_CMAKE_MODULE_PATH_OLD)
  else()
    unset(CMAKE_MODULE_PATH)
  endif()
endif()

include("${CMAKE_CURRENT_LIST_DIR}/ArrowTargets.cmake")

if(TARGET Arrow::arrow_static AND NOT TARGET Arrow::arrow_bundled_dependencies)
  add_library(Arrow::arrow_bundled_dependencies STATIC IMPORTED)
  get_target_property(arrow_static_location Arrow::arrow_static LOCATION)
  get_filename_component(arrow_lib_dir ${arrow_static_location} DIRECTORY)
  set_target_properties(Arrow::arrow_bundled_dependencies
    PROPERTIES
    IMPORTED_LOCATION ${arrow_lib_dir}/${CMAKE_STATIC_LIBRARY_PREFIX}arrow_bundled_dependencies${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()

# For backward compatibility
if(CMAKE_VERSION VERSION_GREATER 3.17)
  if(TARGET Arrow::arrow_shared AND NOT TARGET arrow_shared)
    add_library(arrow_shared ALIAS Arrow::arrow_shared)
  endif()
  if(TARGET Arrow::arrow_static AND NOT TARGET arrow_static)
    add_library(arrow_static ALIAS Arrow::arrow_static)
  endif()
endif()

# For backward compatibility
if(TARGET Arrow::arrow_shared)
  get_target_property(ARROW_INCLUDE_DIR Arrow::arrow_shared
    INTERFACE_INCLUDE_DIRECTORIES)
else()
  get_target_property(ARROW_INCLUDE_DIR Arrow::arrow_static
    INTERFACE_INCLUDE_DIRECTORIES)
endif()

check_required_components(Arrow)
