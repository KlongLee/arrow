// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ComputeIR

#include "ComputeIR_generated.h"
#include "ComputeIR.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace org {
namespace apache {
namespace arrow {
namespace flatbuf {
namespace computeir {

static const char* Interactive_method_names[] = {
  "/org.apache.arrow.flatbuf.computeir.Interactive/explain",
  "/org.apache.arrow.flatbuf.computeir.Interactive/execute",
};

std::unique_ptr< Interactive::Stub> Interactive::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Interactive::Stub> stub(new Interactive::Stub(channel));
  return stub;
}

Interactive::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_explain_(Interactive_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_execute_(Interactive_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}
  
::grpc::Status Interactive::Stub::explain(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Plan>& request, flatbuffers::grpc::Message<Plan>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_explain_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Plan>>* Interactive::Stub::AsyncexplainRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Plan>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Plan>>::Create(channel_.get(), cq, rpcmethod_explain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Plan>>* Interactive::Stub::PrepareAsyncexplainRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Plan>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Plan>>::Create(channel_.get(), cq, rpcmethod_explain_, context, request, false);
}

::grpc::ClientReader< flatbuffers::grpc::Message<Message>>* Interactive::Stub::executeRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Plan>& request) {
  return ::grpc::internal::ClientReaderFactory< flatbuffers::grpc::Message<Message>>::Create(channel_.get(), rpcmethod_execute_, context, request);
}

::grpc::ClientAsyncReader< flatbuffers::grpc::Message<Message>>* Interactive::Stub::AsyncexecuteRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Plan>& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< flatbuffers::grpc::Message<Message>>::Create(channel_.get(), cq, rpcmethod_execute_, context, request, true, tag);
}

::grpc::ClientAsyncReader< flatbuffers::grpc::Message<Message>>* Interactive::Stub::PrepareAsyncexecuteRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<Plan>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< flatbuffers::grpc::Message<Message>>::Create(channel_.get(), cq, rpcmethod_execute_, context, request, false, nullptr);
}

Interactive::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interactive_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interactive::Service, flatbuffers::grpc::Message<Plan>, flatbuffers::grpc::Message<Plan>>(
          std::mem_fn(&Interactive::Service::explain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interactive_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Interactive::Service, flatbuffers::grpc::Message<Plan>, flatbuffers::grpc::Message<Message>>(
          std::mem_fn(&Interactive::Service::execute), this)));
}

Interactive::Service::~Service() {
}

::grpc::Status Interactive::Service::explain(::grpc::ServerContext* context, const flatbuffers::grpc::Message<Plan>* request, flatbuffers::grpc::Message<Plan>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interactive::Service::execute(::grpc::ServerContext* context, const flatbuffers::grpc::Message<Plan>* request, ::grpc::ServerWriter< flatbuffers::grpc::Message<Message>>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace org
}  // namespace apache
}  // namespace arrow
}  // namespace flatbuf
}  // namespace computeir

