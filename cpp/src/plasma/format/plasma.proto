syntax = "proto3";

package plasma.rpc;

option cc_generic_services = true;

enum PlasmaError {
  // Operation was successful.
  OK = 0;
  // Trying to create an object that already exists.
  ObjectExists = 1;
  // Trying to access an object that doesn't exist.
  ObjectNonexistent = 2;
  // Trying to create an object but there isn't enough space in the store.
  OutOfMemory = 3;
  // Trying to delete an object but it's not sealed.
  ObjectNotSealed = 4;
  // Trying to delete an object but it's in use.
  ObjectInUse = 5;
}

message PlasmaObjectSpec {
  // Index of the memory segment (= memory mapped file) that
  // this object is allocated in.
  int32 segment_index = 1;
  // The offset in bytes in the memory mapped file of the data.
  int64 data_offset = 2;
  // The size in bytes of the data.
  int64 data_size = 3;
  // The offset in bytes in the memory mapped file of the metadata.
  int64 metadata_offset = 4;
  // The size in bytes of the metadata.
  int64 metadata_size = 5;
  // Device to create buffer on.
  int32 device_num = 6;
}

message ConnectRequest {
}

message ConnectReply {
  // The memory capacity of the store.
  int64 memory_capacity = 1;
}

message CreateRequest {
  // ID of the object to be created.
  bytes object_id = 1;
  // The size of the object's data in bytes.
  int64 data_size = 2;
  // The size of the object's metadata in bytes.
  int64 metadata_size = 3;
  // Device to create buffer on.
  int32 device_num = 4;
}

message CreateReply {
  // ID of the object that was created.
  bytes object_id = 1;
  // The object that is returned with this reply.
  PlasmaObjectSpec plasma_object = 2;
  // Error that occurred for this call.
  PlasmaError error = 3;
  // The file descriptor in the store that corresponds to the file descriptor
  // being sent to the client right after this message.
  int32 store_fd = 4;
  // The size in bytes of the segment for the store file descriptor (needed to
  // call mmap).
  int64 mmap_size = 5;
}

message SealRequest {
  // ID of the object to be sealed.
  bytes object_id = 1;
  // Hash of the object data.
  bytes digest = 2;
}

message SealReply {
  // ID of the object that was sealed.
  bytes object_id = 1;
  // Error code.
  PlasmaError error = 2;
}

message GetRequest {
}

message GetReply {
}

message ReleaseRequest {
  // ID of the object to be released.
  bytes object_id = 1;
}

message ReleaseReply {
  // ID of the object that was released.
  bytes object_id = 1;
  // Error code.
  PlasmaError error = 2;
}

message DeleteRequest {
}

message DeleteReply {
}

message StatusRequest {
}

message StatusReply {
}

message ContainsRequest {
}

message ContainsReply {
}

message EvictRequest {
}

message EvictReply {
}

message FetchRequest {
}

message ObjectRequestSpecT {
}

message WaitRequest {
}

message ObjectReplyT {
}

message WaitReply {
}

message SubscribeRequest {
}

message DataRequest {
}

message DataReply {
}

message VOID {
}

service PlasmaStore {
  rpc Connect (ConnectRequest) returns (ConnectReply);

  rpc Create (CreateRequest) returns (CreateReply);

  rpc Get (GetRequest) returns (GetReply);

  rpc Release (ReleaseRequest) returns (ReleaseReply);

  rpc Contains (ContainsRequest) returns (ContainsReply);

  rpc Seal (SealRequest) returns (SealReply);

  rpc Evict (EvictRequest) returns (EvictReply);

  rpc Subscribe (SubscribeRequest) returns (VOID);
}
