# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C++

on:
  push:
    paths:
      - '.github/workflows/cpp.yml'
      - 'ci/docker/**'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
  pull_request:
    paths:
      - '.github/workflows/cpp.yml'
      - 'ci/docker/**'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  ARROW_ENABLE_TIMING_TESTS: OFF
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:
  docker-targets:
    name: Docker targets
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.detect-targets.outputs.targets }}
    steps:
      - name: Detect targets
        id: detect-targets
        run: |
          echo "targets<<JSON" >> "$GITHUB_OUTPUT"
          echo "[" >> "$GITHUB_OUTPUT"
          cat <<JSON >> "$GITHUB_OUTPUT"
          {
            "arch": "amd64",
            "clang-tools": "14",
            "image": "ubuntu-cpp-sanitizer",
            "llvm": "14",
            "runs-on": "ubuntu-latest",
            "title": "AMD64 Ubuntu 22.04 C++ ASAN UBSAN",
            "ubuntu": "22.04"
          }
          JSON
          if [ "$GITHUB_REPOSITORY_OWNER" = "apache" ]; then
            echo "," >> "$GITHUB_OUTPUT"
            cat <<JSON >> "$GITHUB_OUTPUT"
          {
            "arch": "arm64v8",
            "clang-tools": "10",
            "image": "ubuntu-cpp",
            "llvm": "10",
            "runs-on": ["self-hosted", "arm", "linux"],
            "title": "ARM64 Ubuntu 20.04 C++",
            "ubuntu": "20.04"
          }
          JSON
          fi
          echo "]" >> "$GITHUB_OUTPUT"
          echo "JSON" >> "$GITHUB_OUTPUT"

  docker:
    name: ${{ matrix.title }}
    needs: docker-targets
    runs-on: ${{ matrix.runs-on }}
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 75
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.docker-targets.outputs.targets) }}
    env:
      ARCH: ${{ matrix.arch }}
      ARROW_SIMD_LEVEL: ${{ matrix.simd-level }}
      CLANG_TOOLS: ${{ matrix.clang-tools }}
      LLVM: ${{ matrix.llvm }}
      UBUNTU: ${{ matrix.ubuntu }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Cache Docker Volumes
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: .docker
          key: ${{ matrix.image }}-${{ hashFiles('cpp/**') }}
          restore-keys: ${{ matrix.image }}-
      - name: Setup Python
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends python3 python3-dev python3-pip
      - name: Setup Archery
        run: python3 -m pip install -e dev/archery[docker]
      - name: Execute Docker Build
        env:
          ARCHERY_DOCKER_USER: ${{ secrets.DOCKERHUB_USER }}
          ARCHERY_DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          sudo sysctl -w kernel.core_pattern="core.%e.%p"
          ulimit -c unlimited
          archery docker run ${{ matrix.image }}
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
