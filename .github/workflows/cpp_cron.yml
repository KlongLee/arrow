
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C++ Cron

on:
  push:
    paths:
      - '.github/workflows/cpp_cron.yml'
  pull_request:
    paths:
      - '.github/workflows/cpp_cron.yml'
  schedule:
    - cron: |
        0 */12 * * *

env:
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 1
  ARROW_ENABLE_TIMING_TESTS: OFF
  ARCHERY_DOCKER_USER: ${{ secrets.DOCKERHUB_USER }}
  ARCHERY_DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:

  docker:
    name: ${{ matrix.title }}
    runs-on: ${{ matrix.runner }}
    # if: ${{ !contains(github.event.pull_request.title, 'WIP') && github.repository == 'apache/arrow' }}
    strategy:
      fail-fast: false
      matrix:
        name:
          # - amd64-debian-10-cpp
          # - amd64-fedora-32-cpp
          # - amd64-ubuntu-16.04-cpp
          # - amd64-ubuntu-18.04-cpp
          # - amd64-ubuntu-18.04-cpp-cmake32
          - arm64v8-ubuntu-16.04-cpp
          - arm64v8-ubuntu-18.04-cpp
        include:
          # - name: amd64-debian-10-cpp
          #   arch: amd64
          #   image: debian-cpp
          #   title: AMD64 Debian 10 C++
          #   debian: 10
          #   runner: ubuntu-latest
          # - name: amd64-fedora-32-cpp
          #   arch: amd64
          #   image: fedora-cpp
          #   title: AMD64 Fedora 32 C++
          #   fedora: 32
          #   runner: ubuntu-latest
          # - name: amd64-ubuntu-16.04-cpp
          #   arch: amd64
          #   image: ubuntu-cpp
          #   title: AMD64 Ubuntu 16.04 C++
          #   ubuntu: 16.04
          #   runner: ubuntu-latest
          # - name: amd64-ubuntu-18.04-cpp
          #   arch: amd64
          #   image: ubuntu-cpp
          #   title: AMD64 Ubuntu 18.04 C++
          #   ubuntu: 18.04
          #   runner: ubuntu-latest
          # - name: amd64-ubuntu-18.04-cpp-cmake32
          #   arch: amd64
          #   image: ubuntu-cpp-cmake32
          #   title: AMD64 Ubuntu 18.04 C++ CMake 3.2
          #   ubuntu: 18.04
          #   runner: ubuntu-latest
          # parallelism is reduced because the ARM builders are low on memory
          - name: arm64v8-ubuntu-16.04-cpp
            ubuntu: 16.04
            arch: arm64v8
            title: ARM64v8 Ubuntu 16.04 C++
            runner: [self-hosted, linux, ARM64]
            image: -e CPP_MAKE_PARALLELISM=2 ubuntu-cpp
          - name: arm64v8-ubuntu-18.04-cpp
            ubuntu: 18.04
            arch: arm64v8
            title: ARM64v8 Ubuntu 18.04 C++
            runner: [self-hosted, linux, ARM64]
            image: -e CPP_MAKE_PARALLELISM=2 ubuntu-cpp
    env:
      # the defaults here should correspond to the values in .env
      ARCH: ${{ matrix.arch || 'amd64' }}
      DEBIAN: ${{ matrix.debian || 10 }}
      FEDORA: ${{ matrix.fedora || 32 }}
      UBUNTU: ${{ matrix.ubuntu || 18.04 }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        run: ci/scripts/util_checkout.sh
      # - name: Free Up Disk Space
      #   run: ci/scripts/util_cleanup.sh
      - name: Cache Docker Volumes
        uses: actions/cache@v1
        with:
          path: .docker
          key: ${{ matrix.name }}-${{ hashFiles('cpp/**') }}
          restore-keys: ${{ matrix.name }}-
      - name: Setup Python
        uses: actions/setup-python@v1
        # no distrubutions are build for arm machines by the github actions team
        continue-on-error: true
        with:
          python-version: 3.6
      - name: Setup Core Pattern
        # no sudo is available on sel-hosted machines
        continue-on-error: true
        run: sudo sysctl -w kernel.core_pattern="core.%e.%p"
      - name: Setup Archery
        shell: bash
        run: |
          pip install -U -e dev/archery[docker]
          echo $PATH
          ls /home/actions/.local/bin
      - name: Execute Docker Build
        shell: bash -l {0}
        run: |
          ulimit -c unlimited
          echo $PATH
          ls /home/actions/.local/bin
          archery docker run ${{ matrix.image }}
      - name: Docker Push
        shell: bash
        if: success() && github.event_name == 'push' && github.repository == 'apache/arrow'
        continue-on-error: true
        run: archery docker push ${{ matrix.image }}

  oss-fuzz:
    name: OSS-Fuzz build check
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') && github.repository == 'apache/arrow' }}
    strategy:
      fail-fast: false
      matrix:
        ubuntu: [18.04]
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        shell: bash
        run: ci/scripts/util_checkout.sh
      - name: Free Up Disk Space
        shell: bash
        run: ci/scripts/util_cleanup.sh
      - name: Checkout OSS-Fuzz
        uses: actions/checkout@v1
        with:
          path: oss-fuzz
          repository: google/oss-fuzz
          ref: master
      - name: Install dependencies
        shell: bash
        working-directory: ../oss-fuzz
        run: |
          python3 -m pip install setuptools
          python3 -m pip install -r infra/ci/requirements.txt
      - name: Build image
        shell: bash
        working-directory: ../oss-fuzz
        run: |
          python3 infra/helper.py build_image --pull arrow
      - name: Build fuzzers
        shell: bash
        working-directory: ../oss-fuzz
        run: |
          python3 infra/helper.py build_fuzzers arrow `pwd`/../arrow
      - name: Check build
        shell: bash
        working-directory: ../oss-fuzz
        run: |
          python3 infra/helper.py check_build arrow
