//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_bytes_to_bools(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ out+16(FP), DX

	WORD $0xf685             // test    esi, esi
	JLE  LBB0_3
	WORD $0x8941; BYTE $0xf0 // mov    r8d, esi
	WORD $0xc931             // xor    ecx, ecx

LBB0_2:
	WORD $0x6348; BYTE $0xc9 // movsxd    rcx, ecx
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0x0124             // and    al, 1
	WORD $0x0488; BYTE $0x0a // mov    byte [rdx + rcx], al
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x01ce8348         // or    rsi, 1
	WORD $0xe8d0             // shr    al, 1
	WORD $0x0124             // and    al, 1
	WORD $0x0488; BYTE $0x32 // mov    byte [rdx + rsi], al
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x02ce8348         // or    rsi, 2
	WORD $0xe8c0; BYTE $0x02 // shr    al, 2
	WORD $0x0124             // and    al, 1
	WORD $0x0488; BYTE $0x32 // mov    byte [rdx + rsi], al
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x03ce8348         // or    rsi, 3
	WORD $0xe8c0; BYTE $0x03 // shr    al, 3
	WORD $0x0124             // and    al, 1
	WORD $0x0488; BYTE $0x32 // mov    byte [rdx + rsi], al
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x04ce8348         // or    rsi, 4
	WORD $0xe8c0; BYTE $0x04 // shr    al, 4
	WORD $0x0124             // and    al, 1
	WORD $0x0488; BYTE $0x32 // mov    byte [rdx + rsi], al
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x05ce8348         // or    rsi, 5
	WORD $0xe8c0; BYTE $0x05 // shr    al, 5
	WORD $0x0124             // and    al, 1
	WORD $0x0488; BYTE $0x32 // mov    byte [rdx + rsi], al
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x06ce8348         // or    rsi, 6
	WORD $0xe8c0; BYTE $0x06 // shr    al, 6
	WORD $0x0124             // and    al, 1
	WORD $0x0488; BYTE $0x32 // mov    byte [rdx + rsi], al
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	LONG $0x07ce8348         // or    rsi, 7
	WORD $0xe8c0; BYTE $0x07 // shr    al, 7
	WORD $0x0488; BYTE $0x32 // mov    byte [rdx + rsi], al
	WORD $0xc183; BYTE $0x08 // add    ecx, 8
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0xff49; BYTE $0xc8 // dec    r8
	JNE  LBB0_2

LBB0_3:
	RET
