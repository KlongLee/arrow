//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x008(SB)/8, $0x0101010101010101
GLOBL LCDATA1<>(SB), 8, $16

TEXT Â·_bytes_to_bools_sse4(SB), $24-24

	MOVQ in+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ out+16(FP), DX
	ADDQ $8, SP
	LEAQ LCDATA1<>(SB), BP

	WORD $0xf685                   // test    esi, esi
	JLE  LBB0_11
	WORD $0x8941; BYTE $0xf0       // mov    r8d, esi
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d
	WORD $0xfe83; BYTE $0x10       // cmp    esi, 16
	JB   LBB0_9
	LONG $0xff408d49               // lea    rax, [r8 - 1]
	LONG $0xffff3d48; WORD $0x1fff // cmp    rax, 536870911
	JA   LBB0_9
	LONG $0xc2048d4a               // lea    rax, [rdx + 8*r8]
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JBE  LBB0_6
	LONG $0x07048d4a               // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xd0       // cmp    rax, rdx
	JBE  LBB0_6
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d
	JMP  LBB0_9

LBB0_6:
	WORD $0x8945; BYTE $0xc2 // mov    r10d, r8d
	LONG $0xf0e28341         // and    r10d, -16
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0xc031             // xor    eax, eax

LBB0_7:
	LONG $0x346f0ff3; BYTE $0x07               // movdqu    xmm6, oword [rdi + rax]
	LONG $0x6f0f4466; BYTE $0xee               // movdqa    xmm13, xmm6
	LONG $0x456f0f66; BYTE $0x00               // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xdb0f4466; BYTE $0xe8               // pand    xmm13, xmm0
	LONG $0x6f0f4466; BYTE $0xe6               // movdqa    xmm12, xmm6
	LONG $0x710f4166; WORD $0x01d4             // psrlw    xmm12, 1
	LONG $0xdb0f4466; BYTE $0xe0               // pand    xmm12, xmm0
	LONG $0x6f0f4466; BYTE $0xc6               // movdqa    xmm8, xmm6
	LONG $0x710f4166; WORD $0x02d0             // psrlw    xmm8, 2
	LONG $0xdb0f4466; BYTE $0xc0               // pand    xmm8, xmm0
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0x710f4166; WORD $0x03d6             // psrlw    xmm14, 3
	LONG $0xdb0f4466; BYTE $0xf0               // pand    xmm14, xmm0
	LONG $0x6f0f4466; BYTE $0xde               // movdqa    xmm11, xmm6
	LONG $0x710f4166; WORD $0x04d3             // psrlw    xmm11, 4
	LONG $0xdb0f4466; BYTE $0xd8               // pand    xmm11, xmm0
	LONG $0x6f0f4466; BYTE $0xfe               // movdqa    xmm15, xmm6
	LONG $0x710f4166; WORD $0x05d7             // psrlw    xmm15, 5
	LONG $0xdb0f4466; BYTE $0xf8               // pand    xmm15, xmm0
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xd4710f66; BYTE $0x06               // psrlw    xmm4, 6
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd6710f66; BYTE $0x07               // psrlw    xmm6, 7
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xee600f66                           // punpcklbw    xmm5, xmm6
	LONG $0xc5700ff2; BYTE $0x60               // pshuflw    xmm0, xmm5, 96
	LONG $0xc0700f66; BYTE $0x60               // pshufd    xmm0, xmm0, 96
	LONG $0x6f0f4166; BYTE $0xdb               // movdqa    xmm3, xmm11
	LONG $0x600f4166; BYTE $0xdf               // punpcklbw    xmm3, xmm15
	LONG $0xd3700ff2; BYTE $0xd4               // pshuflw    xmm2, xmm3, 212
	LONG $0x700f4466; WORD $0x60d2             // pshufd    xmm10, xmm2, 96
	LONG $0x3a0f4466; WORD $0xd00e; BYTE $0x88 // pblendw    xmm10, xmm0, 136
	LONG $0x6f0f4166; BYTE $0xc5               // movdqa    xmm0, xmm13
	LONG $0x600f4166; BYTE $0xc4               // punpcklbw    xmm0, xmm12
	LONG $0x34380f66; BYTE $0xc8               // pmovzxwq    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xd0               // movdqa    xmm2, xmm8
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xfa700ff2; BYTE $0x60               // pshuflw    xmm7, xmm2, 96
	LONG $0xff700f66; BYTE $0xd4               // pshufd    xmm7, xmm7, 212
	LONG $0x0e3a0f66; WORD $0xddf9             // pblendw    xmm7, xmm1, 221
	LONG $0x3a0f4166; WORD $0xfa0e; BYTE $0xcc // pblendw    xmm7, xmm10, 204
	LONG $0x3c7f0f66; BYTE $0x24               // movdqa    oword [rsp], xmm7
	LONG $0xfd700ff2; BYTE $0xe8               // pshuflw    xmm7, xmm5, 232
	LONG $0x700f4466; WORD $0x60d7             // pshufd    xmm10, xmm7, 96
	LONG $0xfb700ff2; BYTE $0xf6               // pshuflw    xmm7, xmm3, 246
	LONG $0xff700f66; BYTE $0x60               // pshufd    xmm7, xmm7, 96
	LONG $0x3a0f4166; WORD $0xfa0e; BYTE $0x88 // pblendw    xmm7, xmm10, 136
	LONG $0xca700ff2; BYTE $0xe8               // pshuflw    xmm1, xmm2, 232
	LONG $0x700f4466; WORD $0xd4c9             // pshufd    xmm9, xmm1, 212
	LONG $0xc8700f66; BYTE $0xe5               // pshufd    xmm1, xmm0, 229
	LONG $0x380f4466; WORD $0xd134             // pmovzxwq    xmm10, xmm1
	LONG $0x3a0f4566; WORD $0xd10e; BYTE $0x22 // pblendw    xmm10, xmm9, 34
	LONG $0x3a0f4466; WORD $0xd70e; BYTE $0xcc // pblendw    xmm10, xmm7, 204
	LONG $0xcd700ff3; BYTE $0x60               // pshufhw    xmm1, xmm5, 96
	LONG $0xc9700f66; BYTE $0xe8               // pshufd    xmm1, xmm1, 232
	LONG $0xfb700ff3; BYTE $0xd4               // pshufhw    xmm7, xmm3, 212
	LONG $0xff700f66; BYTE $0xe8               // pshufd    xmm7, xmm7, 232
	LONG $0x0e3a0f66; WORD $0x88f9             // pblendw    xmm7, xmm1, 136
	LONG $0xca700ff3; BYTE $0x60               // pshufhw    xmm1, xmm2, 96
	LONG $0x700f4466; WORD $0xf6c9             // pshufd    xmm9, xmm1, 246
	LONG $0xc8700f66; BYTE $0x4e               // pshufd    xmm1, xmm0, 78
	LONG $0x34380f66; BYTE $0xc9               // pmovzxwq    xmm1, xmm1
	LONG $0x3a0f4166; WORD $0xc90e; BYTE $0x22 // pblendw    xmm1, xmm9, 34
	LONG $0x0e3a0f66; WORD $0xcccf             // pblendw    xmm1, xmm7, 204
	LONG $0xed700ff3; BYTE $0xe8               // pshufhw    xmm5, xmm5, 232
	LONG $0xed700f66; BYTE $0xe8               // pshufd    xmm5, xmm5, 232
	LONG $0xdb700ff3; BYTE $0xf6               // pshufhw    xmm3, xmm3, 246
	LONG $0xdb700f66; BYTE $0xe8               // pshufd    xmm3, xmm3, 232
	LONG $0x0e3a0f66; WORD $0x88dd             // pblendw    xmm3, xmm5, 136
	LONG $0xd2700ff3; BYTE $0xe8               // pshufhw    xmm2, xmm2, 232
	LONG $0xd2700f66; BYTE $0xf6               // pshufd    xmm2, xmm2, 246
	LONG $0xc0700f66; BYTE $0xe7               // pshufd    xmm0, xmm0, 231
	LONG $0x34380f66; BYTE $0xe8               // pmovzxwq    xmm5, xmm0
	LONG $0x0e3a0f66; WORD $0x22ea             // pblendw    xmm5, xmm2, 34
	LONG $0x0e3a0f66; WORD $0xcceb             // pblendw    xmm5, xmm3, 204
	LONG $0xe6680f66                           // punpckhbw    xmm4, xmm6
	LONG $0xc4700ff2; BYTE $0x60               // pshuflw    xmm0, xmm4, 96
	LONG $0xc0700f66; BYTE $0x60               // pshufd    xmm0, xmm0, 96
	LONG $0x680f4566; BYTE $0xdf               // punpckhbw    xmm11, xmm15
	LONG $0x700f41f2; WORD $0xd4d3             // pshuflw    xmm2, xmm11, 212
	LONG $0xd2700f66; BYTE $0x60               // pshufd    xmm2, xmm2, 96
	LONG $0x0e3a0f66; WORD $0x88d0             // pblendw    xmm2, xmm0, 136
	LONG $0x680f4566; BYTE $0xec               // punpckhbw    xmm13, xmm12
	LONG $0x380f4166; WORD $0xdd34             // pmovzxwq    xmm3, xmm13
	LONG $0x680f4566; BYTE $0xc6               // punpckhbw    xmm8, xmm14
	LONG $0x700f41f2; WORD $0x60c0             // pshuflw    xmm0, xmm8, 96
	LONG $0xc0700f66; BYTE $0xd4               // pshufd    xmm0, xmm0, 212
	LONG $0x0e3a0f66; WORD $0xddc3             // pblendw    xmm0, xmm3, 221
	LONG $0x0e3a0f66; WORD $0xccc2             // pblendw    xmm0, xmm2, 204
	LONG $0xd4700ff2; BYTE $0xe8               // pshuflw    xmm2, xmm4, 232
	LONG $0xd2700f66; BYTE $0x60               // pshufd    xmm2, xmm2, 96
	LONG $0x700f41f2; WORD $0xf6db             // pshuflw    xmm3, xmm11, 246
	LONG $0xdb700f66; BYTE $0x60               // pshufd    xmm3, xmm3, 96
	LONG $0x0e3a0f66; WORD $0x88da             // pblendw    xmm3, xmm2, 136
	LONG $0x700f41f2; WORD $0xe8d0             // pshuflw    xmm2, xmm8, 232
	LONG $0xf2700f66; BYTE $0xd4               // pshufd    xmm6, xmm2, 212
	LONG $0x700f4166; WORD $0xe5d5             // pshufd    xmm2, xmm13, 229
	LONG $0x34380f66; BYTE $0xd2               // pmovzxwq    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0x22d6             // pblendw    xmm2, xmm6, 34
	LONG $0x0e3a0f66; WORD $0xccd3             // pblendw    xmm2, xmm3, 204
	LONG $0xdc700ff3; BYTE $0x60               // pshufhw    xmm3, xmm4, 96
	LONG $0xdb700f66; BYTE $0xe8               // pshufd    xmm3, xmm3, 232
	LONG $0x700f41f3; WORD $0xd4f3             // pshufhw    xmm6, xmm11, 212
	LONG $0xf6700f66; BYTE $0xe8               // pshufd    xmm6, xmm6, 232
	LONG $0x0e3a0f66; WORD $0x88f3             // pblendw    xmm6, xmm3, 136
	LONG $0x700f41f3; WORD $0x60d8             // pshufhw    xmm3, xmm8, 96
	LONG $0xdb700f66; BYTE $0xf6               // pshufd    xmm3, xmm3, 246
	LONG $0x700f4166; WORD $0x4efd             // pshufd    xmm7, xmm13, 78
	LONG $0x34380f66; BYTE $0xff               // pmovzxwq    xmm7, xmm7
	LONG $0x0e3a0f66; WORD $0x22fb             // pblendw    xmm7, xmm3, 34
	LONG $0x0e3a0f66; WORD $0xccfe             // pblendw    xmm7, xmm6, 204
	LONG $0xdc700ff3; BYTE $0xe8               // pshufhw    xmm3, xmm4, 232
	LONG $0xdb700f66; BYTE $0xe8               // pshufd    xmm3, xmm3, 232
	LONG $0x700f41f3; WORD $0xf6e3             // pshufhw    xmm4, xmm11, 246
	LONG $0xe4700f66; BYTE $0xe8               // pshufd    xmm4, xmm4, 232
	LONG $0x0e3a0f66; WORD $0x88e3             // pblendw    xmm4, xmm3, 136
	LONG $0x700f41f3; WORD $0xe8d8             // pshufhw    xmm3, xmm8, 232
	LONG $0xdb700f66; BYTE $0xf6               // pshufd    xmm3, xmm3, 246
	LONG $0x700f4166; WORD $0xe7f5             // pshufd    xmm6, xmm13, 231
	LONG $0x34380f66; BYTE $0xf6               // pmovzxwq    xmm6, xmm6
	LONG $0x0e3a0f66; WORD $0x22f3             // pblendw    xmm6, xmm3, 34
	LONG $0x0e3a0f66; WORD $0xccf4             // pblendw    xmm6, xmm4, 204
	WORD $0x8944; BYTE $0xce                   // mov    esi, r9d
	WORD $0xe683; BYTE $0x80                   // and    esi, -128
	LONG $0x747f0ff3; WORD $0x7032             // movdqu    oword [rdx + rsi + 112], xmm6
	LONG $0x7c7f0ff3; WORD $0x6032             // movdqu    oword [rdx + rsi + 96], xmm7
	LONG $0x547f0ff3; WORD $0x5032             // movdqu    oword [rdx + rsi + 80], xmm2
	LONG $0x447f0ff3; WORD $0x4032             // movdqu    oword [rdx + rsi + 64], xmm0
	LONG $0x6c7f0ff3; WORD $0x3032             // movdqu    oword [rdx + rsi + 48], xmm5
	LONG $0x4c7f0ff3; WORD $0x2032             // movdqu    oword [rdx + rsi + 32], xmm1
	LONG $0x7f0f44f3; WORD $0x3254; BYTE $0x10 // movdqu    oword [rdx + rsi + 16], xmm10
	LONG $0x2404280f                           // movaps    xmm0, oword [rsp]
	LONG $0x3204110f                           // movups    oword [rdx + rsi], xmm0
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x80e98349                           // sub    r9, -128
	WORD $0x3949; BYTE $0xc2                   // cmp    r10, rax
	JNE  LBB0_7
	WORD $0x394d; BYTE $0xc2                   // cmp    r10, r8
	JE   LBB0_11

LBB0_9:
	QUAD $0x00000000d5048d4a // lea    rax, [8*r10]

LBB0_10:
	WORD $0xc689                 // mov    esi, eax
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	WORD $0x0c88; BYTE $0x32     // mov    byte [rdx + rsi], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9d0                 // shr    cl, 1
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x01324c88             // mov    byte [rdx + rsi + 1], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x02     // shr    cl, 2
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x02324c88             // mov    byte [rdx + rsi + 2], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x03     // shr    cl, 3
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x03324c88             // mov    byte [rdx + rsi + 3], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x04     // shr    cl, 4
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x04324c88             // mov    byte [rdx + rsi + 4], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x05     // shr    cl, 5
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x05324c88             // mov    byte [rdx + rsi + 5], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x06     // shr    cl, 6
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x06324c88             // mov    byte [rdx + rsi + 6], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x07     // shr    cl, 7
	LONG $0x07324c88             // mov    byte [rdx + rsi + 7], cl
	LONG $0x01c28349             // add    r10, 1
	LONG $0x08c08348             // add    rax, 8
	WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE  LBB0_10

LBB0_11:
	SUBQ $8, SP
	RET
