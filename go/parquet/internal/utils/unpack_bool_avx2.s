//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x008(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x010(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x018(SB)/8, $0x0101010101010101
GLOBL LCDATA1<>(SB), 8, $32

TEXT Â·_bytes_to_bools_avx2(SB), $200-24

	MOVQ in+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ out+16(FP), DX
	ADDQ $8, SP
	LEAQ LCDATA1<>(SB), BP

	WORD $0xf685                   // test    esi, esi
	JLE  LBB0_11
	WORD $0x8941; BYTE $0xf0       // mov    r8d, esi
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d
	WORD $0xfe83; BYTE $0x20       // cmp    esi, 32
	JB   LBB0_9
	LONG $0xff408d49               // lea    rax, [r8 - 1]
	LONG $0xffff3d48; WORD $0x1fff // cmp    rax, 536870911
	JA   LBB0_9
	LONG $0xc2048d4a               // lea    rax, [rdx + 8*r8]
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JBE  LBB0_6
	LONG $0x07048d4a               // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xd0       // cmp    rax, rdx
	JBE  LBB0_6
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d
	JMP  LBB0_9

LBB0_6:
	WORD $0x8945; BYTE $0xc2 // mov    r10d, r8d
	LONG $0xe0e28341         // and    r10d, -32
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0xc031             // xor    eax, eax

LBB0_7:
	LONG $0x046ffec5; BYTE $0x07               // vmovdqu    ymm0, yword [rdi + rax]
	LONG $0x556ffdc5; BYTE $0x00               // vmovdqa    ymm2, yword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xeadb7dc5                           // vpand    ymm13, ymm0, ymm2
	LONG $0xd071f5c5; BYTE $0x01               // vpsrlw    ymm1, ymm0, 1
	LONG $0xf2dbf5c5                           // vpand    ymm6, ymm1, ymm2
	LONG $0xd071f5c5; BYTE $0x02               // vpsrlw    ymm1, ymm0, 2
	LONG $0xeadbf5c5                           // vpand    ymm5, ymm1, ymm2
	LONG $0xd071f5c5; BYTE $0x03               // vpsrlw    ymm1, ymm0, 3
	LONG $0xf2db75c5                           // vpand    ymm14, ymm1, ymm2
	LONG $0xd071f5c5; BYTE $0x04               // vpsrlw    ymm1, ymm0, 4
	LONG $0xc2db75c5                           // vpand    ymm8, ymm1, ymm2
	LONG $0xd071f5c5; BYTE $0x05               // vpsrlw    ymm1, ymm0, 5
	LONG $0xcadb75c5                           // vpand    ymm9, ymm1, ymm2
	LONG $0xd071f5c5; BYTE $0x06               // vpsrlw    ymm1, ymm0, 6
	LONG $0xdadb75c5                           // vpand    ymm11, ymm1, ymm2
	LONG $0xd071fdc5; BYTE $0x07               // vpsrlw    ymm0, ymm0, 7
	LONG $0xe2db7dc5                           // vpand    ymm12, ymm0, ymm2
	LONG $0x6021c1c4; BYTE $0xc4               // vpunpcklbw    xmm0, xmm11, xmm12
	LONG $0xc870fbc5; BYTE $0x60               // vpshuflw    xmm1, xmm0, 96
	LONG $0xd070fbc5; BYTE $0xe8               // vpshuflw    xmm2, xmm0, 232
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc970fdc5; BYTE $0x60               // vpshufd    ymm1, ymm1, 96
	LONG $0x6039c1c4; BYTE $0xd1               // vpunpcklbw    xmm2, xmm8, xmm9
	LONG $0xfa70fbc5; BYTE $0xd4               // vpshuflw    xmm7, xmm2, 212
	LONG $0xda70fbc5; BYTE $0xf6               // vpshuflw    xmm3, xmm2, 246
	LONG $0x3845e3c4; WORD $0x01db             // vinserti128    ymm3, ymm7, xmm3, 1
	LONG $0xdb70fdc5; BYTE $0x60               // vpshufd    ymm3, ymm3, 96
	LONG $0x0e65e3c4; WORD $0x88c9             // vpblendw    ymm1, ymm3, ymm1, 136
	LONG $0xde6091c5                           // vpunpcklbw    xmm3, xmm13, xmm6
	LONG $0x3479e2c4; BYTE $0xfb               // vpmovzxwq    xmm7, xmm3
	LONG $0xe370f9c5; BYTE $0xe5               // vpshufd    xmm4, xmm3, 229
	LONG $0x3479e2c4; BYTE $0xe4               // vpmovzxwq    xmm4, xmm4
	LONG $0x3845e3c4; WORD $0x01e4             // vinserti128    ymm4, ymm7, xmm4, 1
	LONG $0x6051c1c4; BYTE $0xfe               // vpunpcklbw    xmm7, xmm5, xmm14
	LONG $0x2c7ffdc5; BYTE $0x24               // vmovdqa    yword [rsp], ymm5
	LONG $0xd7707bc5; BYTE $0x60               // vpshuflw    xmm10, xmm7, 96
	LONG $0xff707bc5; BYTE $0xe8               // vpshuflw    xmm15, xmm7, 232
	LONG $0x382d43c4; WORD $0x01d7             // vinserti128    ymm10, ymm10, xmm15, 1
	LONG $0x707d41c4; WORD $0xd4d2             // vpshufd    ymm10, ymm10, 212
	LONG $0x0e5dc3c4; WORD $0x22e2             // vpblendw    ymm4, ymm4, ymm10, 34
	LONG $0x025de3c4; WORD $0xaac9             // vpblendd    ymm1, ymm4, ymm1, 170
	QUAD $0x000080248c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 128], ymm1
	LONG $0xc870fac5; BYTE $0x60               // vpshufhw    xmm1, xmm0, 96
	LONG $0xc070fac5; BYTE $0xe8               // vpshufhw    xmm0, xmm0, 232
	LONG $0x3875e3c4; WORD $0x01c0             // vinserti128    ymm0, ymm1, xmm0, 1
	LONG $0xc070fdc5; BYTE $0xe8               // vpshufd    ymm0, ymm0, 232
	LONG $0xca70fac5; BYTE $0xd4               // vpshufhw    xmm1, xmm2, 212
	LONG $0xd270fac5; BYTE $0xf6               // vpshufhw    xmm2, xmm2, 246
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc970fdc5; BYTE $0xe8               // vpshufd    ymm1, ymm1, 232
	LONG $0x0e75e3c4; WORD $0x88c0             // vpblendw    ymm0, ymm1, ymm0, 136
	LONG $0xcb70f9c5; BYTE $0x4e               // vpshufd    xmm1, xmm3, 78
	LONG $0x3479e2c4; BYTE $0xc9               // vpmovzxwq    xmm1, xmm1
	LONG $0xd370f9c5; BYTE $0xe7               // vpshufd    xmm2, xmm3, 231
	LONG $0x3479e2c4; BYTE $0xd2               // vpmovzxwq    xmm2, xmm2
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xd770fac5; BYTE $0x60               // vpshufhw    xmm2, xmm7, 96
	LONG $0xdf70fac5; BYTE $0xe8               // vpshufhw    xmm3, xmm7, 232
	LONG $0x386de3c4; WORD $0x01d3             // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd270fdc5; BYTE $0xf6               // vpshufd    ymm2, ymm2, 246
	LONG $0x0e75e3c4; WORD $0x22ca             // vpblendw    ymm1, ymm1, ymm2, 34
	LONG $0x0275e3c4; WORD $0xaac0             // vpblendd    ymm0, ymm1, ymm0, 170
	LONG $0x447ffdc5; WORD $0x6024             // vmovdqa    yword [rsp + 96], ymm0
	LONG $0x6821c1c4; BYTE $0xc4               // vpunpckhbw    xmm0, xmm11, xmm12
	LONG $0xc870fbc5; BYTE $0x60               // vpshuflw    xmm1, xmm0, 96
	LONG $0xd070fbc5; BYTE $0xe8               // vpshuflw    xmm2, xmm0, 232
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc970fdc5; BYTE $0x60               // vpshufd    ymm1, ymm1, 96
	LONG $0x6839c1c4; BYTE $0xd1               // vpunpckhbw    xmm2, xmm8, xmm9
	LONG $0xda70fbc5; BYTE $0xd4               // vpshuflw    xmm3, xmm2, 212
	LONG $0xe270fbc5; BYTE $0xf6               // vpshuflw    xmm4, xmm2, 246
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0xdb70fdc5; BYTE $0x60               // vpshufd    ymm3, ymm3, 96
	LONG $0x0e65e3c4; WORD $0x88c9             // vpblendw    ymm1, ymm3, ymm1, 136
	LONG $0xde6891c5                           // vpunpckhbw    xmm3, xmm13, xmm6
	LONG $0x3479e2c4; BYTE $0xe3               // vpmovzxwq    xmm4, xmm3
	LONG $0xfb70f9c5; BYTE $0xe5               // vpshufd    xmm7, xmm3, 229
	LONG $0x3479e2c4; BYTE $0xff               // vpmovzxwq    xmm7, xmm7
	LONG $0x385de3c4; WORD $0x01e7             // vinserti128    ymm4, ymm4, xmm7, 1
	LONG $0x6851c1c4; BYTE $0xfe               // vpunpckhbw    xmm7, xmm5, xmm14
	LONG $0xd7707bc5; BYTE $0x60               // vpshuflw    xmm10, xmm7, 96
	LONG $0xef70fbc5; BYTE $0xe8               // vpshuflw    xmm5, xmm7, 232
	LONG $0x382de3c4; WORD $0x01ed             // vinserti128    ymm5, ymm10, xmm5, 1
	LONG $0xed70fdc5; BYTE $0xd4               // vpshufd    ymm5, ymm5, 212
	LONG $0x0e5de3c4; WORD $0x22e5             // vpblendw    ymm4, ymm4, ymm5, 34
	LONG $0x025de3c4; WORD $0xaac9             // vpblendd    ymm1, ymm4, ymm1, 170
	LONG $0x4c7ffdc5; WORD $0x4024             // vmovdqa    yword [rsp + 64], ymm1
	LONG $0xc870fac5; BYTE $0x60               // vpshufhw    xmm1, xmm0, 96
	LONG $0xc070fac5; BYTE $0xe8               // vpshufhw    xmm0, xmm0, 232
	LONG $0x3875e3c4; WORD $0x01c0             // vinserti128    ymm0, ymm1, xmm0, 1
	LONG $0xc070fdc5; BYTE $0xe8               // vpshufd    ymm0, ymm0, 232
	LONG $0xca70fac5; BYTE $0xd4               // vpshufhw    xmm1, xmm2, 212
	LONG $0xd270fac5; BYTE $0xf6               // vpshufhw    xmm2, xmm2, 246
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc970fdc5; BYTE $0xe8               // vpshufd    ymm1, ymm1, 232
	LONG $0x0e75e3c4; WORD $0x88c0             // vpblendw    ymm0, ymm1, ymm0, 136
	LONG $0xcb70f9c5; BYTE $0x4e               // vpshufd    xmm1, xmm3, 78
	LONG $0x3479e2c4; BYTE $0xc9               // vpmovzxwq    xmm1, xmm1
	LONG $0xd370f9c5; BYTE $0xe7               // vpshufd    xmm2, xmm3, 231
	LONG $0x3479e2c4; BYTE $0xd2               // vpmovzxwq    xmm2, xmm2
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xd770fac5; BYTE $0x60               // vpshufhw    xmm2, xmm7, 96
	LONG $0xdf70fac5; BYTE $0xe8               // vpshufhw    xmm3, xmm7, 232
	LONG $0x386de3c4; WORD $0x01d3             // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd270fdc5; BYTE $0xf6               // vpshufd    ymm2, ymm2, 246
	LONG $0x0e75e3c4; WORD $0x22ca             // vpblendw    ymm1, ymm1, ymm2, 34
	LONG $0x0275e3c4; WORD $0xaac0             // vpblendd    ymm0, ymm1, ymm0, 170
	LONG $0x447ffdc5; WORD $0x2024             // vmovdqa    yword [rsp + 32], ymm0
	LONG $0x397d43c4; WORD $0x01e4             // vextracti128    xmm12, ymm12, 1
	LONG $0x397d43c4; WORD $0x01db             // vextracti128    xmm11, ymm11, 1
	LONG $0x6021c1c4; BYTE $0xcc               // vpunpcklbw    xmm1, xmm11, xmm12
	LONG $0xc170fbc5; BYTE $0x60               // vpshuflw    xmm0, xmm1, 96
	LONG $0xd970fbc5; BYTE $0xe8               // vpshuflw    xmm3, xmm1, 232
	LONG $0x387de3c4; WORD $0x01db             // vinserti128    ymm3, ymm0, xmm3, 1
	LONG $0x397d43c4; WORD $0x01cf             // vextracti128    xmm15, ymm9, 1
	LONG $0x397d63c4; WORD $0x01c0             // vextracti128    xmm0, ymm8, 1
	LONG $0x6079c1c4; BYTE $0xd7               // vpunpcklbw    xmm2, xmm0, xmm15
	LONG $0xe270fbc5; BYTE $0xd4               // vpshuflw    xmm4, xmm2, 212
	LONG $0xea70fbc5; BYTE $0xf6               // vpshuflw    xmm5, xmm2, 246
	LONG $0x385de3c4; WORD $0x01e5             // vinserti128    ymm4, ymm4, xmm5, 1
	LONG $0xdb70fdc5; BYTE $0x60               // vpshufd    ymm3, ymm3, 96
	LONG $0xe470fdc5; BYTE $0x60               // vpshufd    ymm4, ymm4, 96
	LONG $0x0e5d63c4; WORD $0x88c3             // vpblendw    ymm8, ymm4, ymm3, 136
	LONG $0x397d43c4; WORD $0x01ed             // vextracti128    xmm13, ymm13, 1
	LONG $0x397de3c4; WORD $0x01f6             // vextracti128    xmm6, ymm6, 1
	LONG $0xfe6091c5                           // vpunpcklbw    xmm7, xmm13, xmm6
	LONG $0xdf70f9c5; BYTE $0xe5               // vpshufd    xmm3, xmm7, 229
	LONG $0x3479e2c4; BYTE $0xdb               // vpmovzxwq    xmm3, xmm3
	LONG $0x3479e2c4; BYTE $0xe7               // vpmovzxwq    xmm4, xmm7
	LONG $0x385d63c4; WORD $0x01cb             // vinserti128    ymm9, ymm4, xmm3, 1
	LONG $0x397d63c4; WORD $0x01f4             // vextracti128    xmm4, ymm14, 1
	LONG $0x1c6ffdc5; BYTE $0x24               // vmovdqa    ymm3, yword [rsp]
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0xec60e1c5                           // vpunpcklbw    xmm5, xmm3, xmm4
	LONG $0xf5707bc5; BYTE $0x60               // vpshuflw    xmm14, xmm5, 96
	LONG $0xd5707bc5; BYTE $0xe8               // vpshuflw    xmm10, xmm5, 232
	LONG $0x380d43c4; WORD $0x01d2             // vinserti128    ymm10, ymm14, xmm10, 1
	LONG $0x707d41c4; WORD $0xd4d2             // vpshufd    ymm10, ymm10, 212
	LONG $0x0e3543c4; WORD $0x22ca             // vpblendw    ymm9, ymm9, ymm10, 34
	LONG $0x023543c4; WORD $0xaac8             // vpblendd    ymm9, ymm9, ymm8, 170
	LONG $0xc1707ac5; BYTE $0x60               // vpshufhw    xmm8, xmm1, 96
	LONG $0xc970fac5; BYTE $0xe8               // vpshufhw    xmm1, xmm1, 232
	LONG $0x383de3c4; WORD $0x01c9             // vinserti128    ymm1, ymm8, xmm1, 1
	LONG $0xc2707ac5; BYTE $0xd4               // vpshufhw    xmm8, xmm2, 212
	LONG $0xd270fac5; BYTE $0xf6               // vpshufhw    xmm2, xmm2, 246
	LONG $0x383de3c4; WORD $0x01d2             // vinserti128    ymm2, ymm8, xmm2, 1
	LONG $0xc970fdc5; BYTE $0xe8               // vpshufd    ymm1, ymm1, 232
	LONG $0xd270fdc5; BYTE $0xe8               // vpshufd    ymm2, ymm2, 232
	LONG $0x0e6de3c4; WORD $0x88c9             // vpblendw    ymm1, ymm2, ymm1, 136
	LONG $0xd770f9c5; BYTE $0x4e               // vpshufd    xmm2, xmm7, 78
	LONG $0x3479e2c4; BYTE $0xd2               // vpmovzxwq    xmm2, xmm2
	LONG $0xff70f9c5; BYTE $0xe7               // vpshufd    xmm7, xmm7, 231
	LONG $0x3479e2c4; BYTE $0xff               // vpmovzxwq    xmm7, xmm7
	LONG $0x386de3c4; WORD $0x01d7             // vinserti128    ymm2, ymm2, xmm7, 1
	LONG $0xfd70fac5; BYTE $0x60               // vpshufhw    xmm7, xmm5, 96
	LONG $0xed70fac5; BYTE $0xe8               // vpshufhw    xmm5, xmm5, 232
	LONG $0x3845e3c4; WORD $0x01ed             // vinserti128    ymm5, ymm7, xmm5, 1
	LONG $0xed70fdc5; BYTE $0xf6               // vpshufd    ymm5, ymm5, 246
	LONG $0x0e6de3c4; WORD $0x22d5             // vpblendw    ymm2, ymm2, ymm5, 34
	LONG $0x026d63c4; WORD $0xaac1             // vpblendd    ymm8, ymm2, ymm1, 170
	LONG $0x6821c1c4; BYTE $0xcc               // vpunpckhbw    xmm1, xmm11, xmm12
	LONG $0xd170fbc5; BYTE $0x60               // vpshuflw    xmm2, xmm1, 96
	LONG $0xe970fbc5; BYTE $0xe8               // vpshuflw    xmm5, xmm1, 232
	LONG $0x386de3c4; WORD $0x01d5             // vinserti128    ymm2, ymm2, xmm5, 1
	LONG $0x6879c1c4; BYTE $0xc7               // vpunpckhbw    xmm0, xmm0, xmm15
	LONG $0xe870fbc5; BYTE $0xd4               // vpshuflw    xmm5, xmm0, 212
	LONG $0xf870fbc5; BYTE $0xf6               // vpshuflw    xmm7, xmm0, 246
	LONG $0x3855e3c4; WORD $0x01ef             // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0xd270fdc5; BYTE $0x60               // vpshufd    ymm2, ymm2, 96
	LONG $0xed70fdc5; BYTE $0x60               // vpshufd    ymm5, ymm5, 96
	LONG $0x0e55e3c4; WORD $0x88d2             // vpblendw    ymm2, ymm5, ymm2, 136
	LONG $0xee6891c5                           // vpunpckhbw    xmm5, xmm13, xmm6
	LONG $0x3479e2c4; BYTE $0xf5               // vpmovzxwq    xmm6, xmm5
	LONG $0xfd70f9c5; BYTE $0xe5               // vpshufd    xmm7, xmm5, 229
	LONG $0x3479e2c4; BYTE $0xff               // vpmovzxwq    xmm7, xmm7
	LONG $0x384de3c4; WORD $0x01f7             // vinserti128    ymm6, ymm6, xmm7, 1
	LONG $0xdc68e1c5                           // vpunpckhbw    xmm3, xmm3, xmm4
	LONG $0xe370fbc5; BYTE $0x60               // vpshuflw    xmm4, xmm3, 96
	LONG $0xfb70fbc5; BYTE $0xe8               // vpshuflw    xmm7, xmm3, 232
	LONG $0x385de3c4; WORD $0x01e7             // vinserti128    ymm4, ymm4, xmm7, 1
	LONG $0xe470fdc5; BYTE $0xd4               // vpshufd    ymm4, ymm4, 212
	LONG $0x0e4de3c4; WORD $0x22e4             // vpblendw    ymm4, ymm6, ymm4, 34
	LONG $0x025de3c4; WORD $0xaad2             // vpblendd    ymm2, ymm4, ymm2, 170
	LONG $0xe170fac5; BYTE $0x60               // vpshufhw    xmm4, xmm1, 96
	LONG $0xc970fac5; BYTE $0xe8               // vpshufhw    xmm1, xmm1, 232
	LONG $0x385de3c4; WORD $0x01c9             // vinserti128    ymm1, ymm4, xmm1, 1
	LONG $0xe070fac5; BYTE $0xd4               // vpshufhw    xmm4, xmm0, 212
	LONG $0xc070fac5; BYTE $0xf6               // vpshufhw    xmm0, xmm0, 246
	LONG $0x385de3c4; WORD $0x01c0             // vinserti128    ymm0, ymm4, xmm0, 1
	LONG $0xc970fdc5; BYTE $0xe8               // vpshufd    ymm1, ymm1, 232
	LONG $0xc070fdc5; BYTE $0xe8               // vpshufd    ymm0, ymm0, 232
	LONG $0x0e7de3c4; WORD $0x88c1             // vpblendw    ymm0, ymm0, ymm1, 136
	LONG $0xcd70f9c5; BYTE $0x4e               // vpshufd    xmm1, xmm5, 78
	LONG $0x3479e2c4; BYTE $0xc9               // vpmovzxwq    xmm1, xmm1
	LONG $0xe570f9c5; BYTE $0xe7               // vpshufd    xmm4, xmm5, 231
	LONG $0x3479e2c4; BYTE $0xe4               // vpmovzxwq    xmm4, xmm4
	LONG $0x3875e3c4; WORD $0x01cc             // vinserti128    ymm1, ymm1, xmm4, 1
	LONG $0xe370fac5; BYTE $0x60               // vpshufhw    xmm4, xmm3, 96
	LONG $0xdb70fac5; BYTE $0xe8               // vpshufhw    xmm3, xmm3, 232
	LONG $0x385de3c4; WORD $0x01db             // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0xdb70fdc5; BYTE $0xf6               // vpshufd    ymm3, ymm3, 246
	LONG $0x0e75e3c4; WORD $0x22cb             // vpblendw    ymm1, ymm1, ymm3, 34
	LONG $0x0275e3c4; WORD $0xaac0             // vpblendd    ymm0, ymm1, ymm0, 170
	WORD $0x8944; BYTE $0xce                   // mov    esi, r9d
	LONG $0xff00e681; WORD $0xffff             // and    esi, -256
	QUAD $0x0000e032847ffec5; BYTE $0x00       // vmovdqu    yword [rdx + rsi + 224], ymm0
	QUAD $0x0000c032947ffec5; BYTE $0x00       // vmovdqu    yword [rdx + rsi + 192], ymm2
	QUAD $0x0000a032847f7ec5; BYTE $0x00       // vmovdqu    yword [rdx + rsi + 160], ymm8
	QUAD $0x000080328c7f7ec5; BYTE $0x00       // vmovdqu    yword [rdx + rsi + 128], ymm9
	LONG $0x4428fcc5; WORD $0x2024             // vmovaps    ymm0, yword [rsp + 32]
	LONG $0x4411fcc5; WORD $0x6032             // vmovups    yword [rdx + rsi + 96], ymm0
	LONG $0x4428fcc5; WORD $0x4024             // vmovaps    ymm0, yword [rsp + 64]
	LONG $0x4411fcc5; WORD $0x4032             // vmovups    yword [rdx + rsi + 64], ymm0
	LONG $0x4428fcc5; WORD $0x6024             // vmovaps    ymm0, yword [rsp + 96]
	LONG $0x4411fcc5; WORD $0x2032             // vmovups    yword [rdx + rsi + 32], ymm0
	QUAD $0x000080248428fcc5; BYTE $0x00       // vmovaps    ymm0, yword [rsp + 128]
	LONG $0x0411fcc5; BYTE $0x32               // vmovups    yword [rdx + rsi], ymm0
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x00c18149; WORD $0x0001; BYTE $0x00 // add    r9, 256
	WORD $0x3949; BYTE $0xc2                   // cmp    r10, rax
	JNE  LBB0_7
	WORD $0x394d; BYTE $0xc2                   // cmp    r10, r8
	JE   LBB0_11

LBB0_9:
	QUAD $0x00000000d5048d4a // lea    rax, [8*r10]

LBB0_10:
	WORD $0xc689                 // mov    esi, eax
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	WORD $0x0c88; BYTE $0x32     // mov    byte [rdx + rsi], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9d0                 // shr    cl, 1
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x01324c88             // mov    byte [rdx + rsi + 1], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x02     // shr    cl, 2
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x02324c88             // mov    byte [rdx + rsi + 2], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x03     // shr    cl, 3
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x03324c88             // mov    byte [rdx + rsi + 3], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x04     // shr    cl, 4
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x04324c88             // mov    byte [rdx + rsi + 4], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x05     // shr    cl, 5
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x05324c88             // mov    byte [rdx + rsi + 5], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x06     // shr    cl, 6
	WORD $0xe180; BYTE $0x01     // and    cl, 1
	LONG $0x06324c88             // mov    byte [rdx + rsi + 6], cl
	LONG $0x0cb60f42; BYTE $0x17 // movzx    ecx, byte [rdi + r10]
	WORD $0xe9c0; BYTE $0x07     // shr    cl, 7
	LONG $0x07324c88             // mov    byte [rdx + rsi + 7], cl
	LONG $0x01c28349             // add    r10, 1
	LONG $0x08c08348             // add    rax, 8
	WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE  LBB0_10

LBB0_11:
	SUBQ $8, SP
	VZEROUPPER
	RET
