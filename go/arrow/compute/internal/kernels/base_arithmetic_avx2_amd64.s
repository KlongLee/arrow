//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x008(SB)/8, $0x7fffffffffffffff
DATA LCDATA1<>+0x010(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x018(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x020(SB)/8, $0x000000000c080400
DATA LCDATA1<>+0x028(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x030(SB)/8, $0x7fffffff80000000
DATA LCDATA1<>+0x038(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x040(SB)/8, $0x0d0c090805040100
DATA LCDATA1<>+0x048(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA1<>+0x050(SB)/8, $0x1d1c191815141110
DATA LCDATA1<>+0x058(SB)/8, $0x1f1e1d1c1d1c1918
DATA LCDATA1<>+0x060(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x068(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x070(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x078(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA1<>(SB), 8, $128

TEXT Â·_arithmetic_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA1<>(SB), BP

	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB0_13
	LONG $0x01fe8040         // cmp    sil, 1
	JLE  LBB0_25
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB0_53
	LONG $0x04fe8040         // cmp    sil, 4
	JE   LBB0_65
	LONG $0x05fe8040         // cmp    sil, 5
	JNE  LBB0_1533
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_117
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_211
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_359
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_362
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_12
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1095
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1095

LBB0_12:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1301:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1303

LBB0_1302:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1302

LBB0_1303:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1304:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1304
	JMP  LBB0_1533

LBB0_13:
	LONG $0x08fe8040         // cmp    sil, 8
	JLE  LBB0_39
	LONG $0x09fe8040         // cmp    sil, 9
	JE   LBB0_73
	LONG $0x0bfe8040         // cmp    sil, 11
	JE   LBB0_85
	LONG $0x0cfe8040         // cmp    sil, 12
	JNE  LBB0_1533
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_124
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_216
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_365
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_368
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_686
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB0_1104

LBB0_25:
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB0_93
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB0_1533
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_131
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_221
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_371
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_378
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_688
	WORD $0xf631             // xor    esi, esi

LBB0_35:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_37

LBB0_36:
	WORD $0x3c8b; BYTE $0xb2 // mov    edi, dword [rdx + 4*rsi]
	WORD $0x3c2b; BYTE $0xb1 // sub    edi, dword [rcx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_36

LBB0_37:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_38:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_38
	JMP  LBB0_1533

LBB0_39:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB0_105
	LONG $0x08fe8040         // cmp    sil, 8
	JNE  LBB0_1533
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_142
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_230
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_385
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_392
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_693
	WORD $0xf631             // xor    esi, esi

LBB0_49:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_51

LBB0_50:
	WORD $0x3c8b; BYTE $0xb2 // mov    edi, dword [rdx + 4*rsi]
	WORD $0x3c2b; BYTE $0xb1 // sub    edi, dword [rcx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_50

LBB0_51:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_52:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_52
	JMP  LBB0_1533

LBB0_53:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_153
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_239
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_399
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_406
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_698
	WORD $0xf631             // xor    esi, esi

LBB0_61:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_63

LBB0_62:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	LONG $0xb23caf0f         // imul    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_62

LBB0_63:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_64:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_64
	JMP  LBB0_1533

LBB0_65:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_164
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_248
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_413
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_416
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_72
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1105
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1105

LBB0_72:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1309:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1311

LBB0_1310:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1310

LBB0_1311:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1312:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1312
	JMP  LBB0_1533

LBB0_73:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_171
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_253
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_419
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_426
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_706
	WORD $0xf631             // xor    esi, esi

LBB0_81:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_83

LBB0_82:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	LONG $0xb23caf0f         // imul    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_82

LBB0_83:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_84:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_84
	JMP  LBB0_1533

LBB0_85:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_182
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_262
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_433
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_436
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_92
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1108
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1108

LBB0_92:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1317:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1319

LBB0_1318:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1318

LBB0_1319:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1320:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1320
	JMP  LBB0_1533

LBB0_93:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_189
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_267
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_439
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_446
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_714
	WORD $0xf631             // xor    esi, esi

LBB0_101:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_103

LBB0_102:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	WORD $0x3c03; BYTE $0xb2 // add    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_102

LBB0_103:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_104:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_104
	JMP  LBB0_1533

LBB0_105:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_200
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_276
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_453
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_460
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_719
	WORD $0xf631             // xor    esi, esi

LBB0_113:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_115

LBB0_114:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	WORD $0x3c03; BYTE $0xb2 // add    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_114

LBB0_115:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_116:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_116
	JMP  LBB0_1533

LBB0_117:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_285
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_467
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_470
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_123
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1111
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1111

LBB0_123:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1325:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1328
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1327:
	LONG $0x0c7efac5; BYTE $0xca   // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_1327

LBB0_1328:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB0_1533
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1330:
	LONG $0x0c7efac5; BYTE $0xca               // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c             // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7efac5; WORD $0x08ca             // vmovq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x08 // vmovq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7efac5; WORD $0x10ca             // vmovq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x10 // vmovq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7efac5; WORD $0x18ca             // vmovq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x18 // vmovq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1330
	JMP  LBB0_1533

LBB0_124:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_290
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_473
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_476
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_130
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1114
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1114

LBB0_130:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1335:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1338
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1337:
	LONG $0x0c7efac5; BYTE $0xca   // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_1337

LBB0_1338:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB0_1533
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1340:
	LONG $0x0c7efac5; BYTE $0xca               // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c             // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7efac5; WORD $0x08ca             // vmovq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x08 // vmovq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7efac5; WORD $0x10ca             // vmovq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x10 // vmovq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7efac5; WORD $0x18ca             // vmovq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x18 // vmovq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1340
	JMP  LBB0_1533

LBB0_131:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_295
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_479
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_486
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_730
	WORD $0xf631             // xor    esi, esi

LBB0_138:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_140

LBB0_139:
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1   // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_139

LBB0_140:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_141:
	LONG $0x0410fbc5; BYTE $0xf2               // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1               // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445cfbc5; WORD $0x08f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445cfbc5; WORD $0x10f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445cfbc5; WORD $0x18f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_141
	JMP  LBB0_1533

LBB0_142:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_304
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_493
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_500
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_735
	WORD $0xf631             // xor    esi, esi

LBB0_149:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_151

LBB0_150:
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1   // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_150

LBB0_151:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_152:
	LONG $0x0410fbc5; BYTE $0xf2               // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1               // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445cfbc5; WORD $0x08f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445cfbc5; WORD $0x10f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445cfbc5; WORD $0x18f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_152
	JMP  LBB0_1533

LBB0_153:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_313
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_507
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_514
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_740
	WORD $0xf631             // xor    esi, esi

LBB0_160:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_162

LBB0_161:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0459fbc5; BYTE $0xf2   // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_161

LBB0_162:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_163:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0459fbc5; BYTE $0xf2               // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4459fbc5; WORD $0x08f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4459fbc5; WORD $0x10f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4459fbc5; WORD $0x18f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_163
	JMP  LBB0_1533

LBB0_164:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_322
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_521
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_524
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_170
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1117
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1117

LBB0_170:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1345:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB0_1347

LBB0_1346:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_1346

LBB0_1347:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1348:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1348
	JMP  LBB0_1533

LBB0_171:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_327
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_527
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_534
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_748
	WORD $0xf631             // xor    esi, esi

LBB0_178:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_180

LBB0_179:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0459fbc5; BYTE $0xf2   // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_179

LBB0_180:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_181:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0459fbc5; BYTE $0xf2               // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4459fbc5; WORD $0x08f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4459fbc5; WORD $0x10f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4459fbc5; WORD $0x18f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_181
	JMP  LBB0_1533

LBB0_182:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_336
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_541
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_544
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_188
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1120
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1120

LBB0_188:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1353:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB0_1355

LBB0_1354:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_1354

LBB0_1355:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1356:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1356
	JMP  LBB0_1533

LBB0_189:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_341
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_547
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_554
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_756
	WORD $0xf631             // xor    esi, esi

LBB0_196:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_198

LBB0_197:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2   // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_197

LBB0_198:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_199:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2               // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4458fbc5; WORD $0x08f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4458fbc5; WORD $0x10f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4458fbc5; WORD $0x18f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_199
	JMP  LBB0_1533

LBB0_200:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_350
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_561
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_568
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_761
	WORD $0xf631             // xor    esi, esi

LBB0_207:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_209

LBB0_208:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2   // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_208

LBB0_209:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_210:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2               // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4458fbc5; WORD $0x08f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4458fbc5; WORD $0x10f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4458fbc5; WORD $0x18f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_210
	JMP  LBB0_1533

LBB0_211:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_575
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB0_215
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB0_1123
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB0_1123

LBB0_215:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1361:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1363

LBB0_1362:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1362

LBB0_1363:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1364:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1364
	JMP  LBB0_1533

LBB0_216:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_578
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB0_220
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB0_1126
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB0_1126

LBB0_220:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1369:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1371

LBB0_1370:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1370

LBB0_1371:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1372:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1372
	JMP  LBB0_1533

LBB0_221:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_581
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_772
	WORD $0xf631                               // xor    esi, esi

LBB0_226:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_228

LBB0_227:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_227

LBB0_228:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_229:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_229
	JMP  LBB0_1533

LBB0_230:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_588
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_777
	WORD $0xf631                               // xor    esi, esi

LBB0_235:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_237

LBB0_236:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_236

LBB0_237:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_238:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_238
	JMP  LBB0_1533

LBB0_239:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_595
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_782
	WORD $0xff31             // xor    edi, edi

LBB0_244:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_246

LBB0_245:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_245

LBB0_246:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_247:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_247
	JMP  LBB0_1533

LBB0_248:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_602
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_252
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1129
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1129

LBB0_252:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1132:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1134
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB0_1134:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1533

LBB0_1135:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1135
	JMP  LBB0_1533

LBB0_253:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_605
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_789
	WORD $0xff31             // xor    edi, edi

LBB0_258:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_260

LBB0_259:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_259

LBB0_260:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_261:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_261
	JMP  LBB0_1533

LBB0_262:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_612
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_266
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1136
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1136

LBB0_266:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1139:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1141
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB0_1141:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1533

LBB0_1142:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1142
	JMP  LBB0_1533

LBB0_267:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_615
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_796
	WORD $0xf631                               // xor    esi, esi

LBB0_272:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_274

LBB0_273:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_273

LBB0_274:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_275:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_275
	JMP  LBB0_1533

LBB0_276:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_622
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_801
	WORD $0xf631                               // xor    esi, esi

LBB0_281:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_283

LBB0_282:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_282

LBB0_283:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_284:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_284
	JMP  LBB0_1533

LBB0_285:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_629
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_289
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1143
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1143

LBB0_289:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1377:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1379

LBB0_1378:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1378

LBB0_1379:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1380:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1380
	JMP  LBB0_1533

LBB0_290:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_632
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_809
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB0_1152

LBB0_295:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_635
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_811
	WORD $0xf631             // xor    esi, esi

LBB0_300:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_302

LBB0_301:
	LONG $0xf23c8b48 // mov    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c2b48 // sub    rdi, qword [rcx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_301

LBB0_302:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_303:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_303
	JMP  LBB0_1533

LBB0_304:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_642
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_816
	WORD $0xf631             // xor    esi, esi

LBB0_309:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_311

LBB0_310:
	LONG $0xf23c8b48 // mov    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c2b48 // sub    rdi, qword [rcx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_310

LBB0_311:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_312:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_312
	JMP  LBB0_1533

LBB0_313:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_649
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_821
	WORD $0xf631             // xor    esi, esi

LBB0_318:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_320

LBB0_319:
	LONG $0xf13c8b48             // mov    rdi, qword [rcx + 8*rsi]
	LONG $0x3caf0f48; BYTE $0xf2 // imul    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949             // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_319

LBB0_320:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_321:
	LONG $0xf1048b48               // mov    rax, qword [rcx + 8*rsi]
	LONG $0x04af0f48; BYTE $0xf2   // imul    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949               // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0x44af0f48; WORD $0x08f2 // imul    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08   // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0x44af0f48; WORD $0x10f2 // imul    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10   // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0x44af0f48; WORD $0x18f2 // imul    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18   // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_321
	JMP  LBB0_1533

LBB0_322:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_656
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_326
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1153
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1153

LBB0_326:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1385:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1387

LBB0_1386:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1386

LBB0_1387:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1388:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1388
	JMP  LBB0_1533

LBB0_327:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_659
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_829
	WORD $0xf631             // xor    esi, esi

LBB0_332:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_334

LBB0_333:
	LONG $0xf13c8b48             // mov    rdi, qword [rcx + 8*rsi]
	LONG $0x3caf0f48; BYTE $0xf2 // imul    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949             // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_333

LBB0_334:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_335:
	LONG $0xf1048b48               // mov    rax, qword [rcx + 8*rsi]
	LONG $0x04af0f48; BYTE $0xf2   // imul    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949               // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0x44af0f48; WORD $0x08f2 // imul    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08   // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0x44af0f48; WORD $0x10f2 // imul    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10   // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0x44af0f48; WORD $0x18f2 // imul    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18   // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_335
	JMP  LBB0_1533

LBB0_336:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_666
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_340
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1156
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1156

LBB0_340:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1393:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1395

LBB0_1394:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1394

LBB0_1395:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1396:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1396
	JMP  LBB0_1533

LBB0_341:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_669
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_837
	WORD $0xf631             // xor    esi, esi

LBB0_346:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_348

LBB0_347:
	LONG $0xf13c8b48 // mov    rdi, qword [rcx + 8*rsi]
	LONG $0xf23c0348 // add    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_347

LBB0_348:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_349:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_349
	JMP  LBB0_1533

LBB0_350:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_676
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1533
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_842
	WORD $0xf631             // xor    esi, esi

LBB0_355:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_357

LBB0_356:
	LONG $0xf13c8b48 // mov    rdi, qword [rcx + 8*rsi]
	LONG $0xf23c0348 // add    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_356

LBB0_357:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_358:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_358
	JMP  LBB0_1533

LBB0_359:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_361
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1159
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1159

LBB0_361:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1401:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1403

LBB0_1402:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_1402

LBB0_1403:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1404:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1404
	JMP  LBB0_1533

LBB0_362:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_364
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1162
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1162

LBB0_364:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1409:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1411

LBB0_1410:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_1410

LBB0_1411:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1412:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1412
	JMP  LBB0_1533

LBB0_365:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_853
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB0_1171

LBB0_368:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_370
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1172
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1172

LBB0_370:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1417:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1419

LBB0_1418:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_1418

LBB0_1419:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1420:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1420
	JMP  LBB0_1533

LBB0_371:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_858
	WORD $0xf631             // xor    esi, esi

LBB0_374:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_376

LBB0_375:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_375

LBB0_376:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_377:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_377
	JMP  LBB0_1533

LBB0_378:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_863
	WORD $0xf631             // xor    esi, esi

LBB0_381:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_383

LBB0_382:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_382

LBB0_383:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_384:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_384
	JMP  LBB0_1533

LBB0_385:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_868
	WORD $0xf631             // xor    esi, esi

LBB0_388:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_390

LBB0_389:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_389

LBB0_390:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_391:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_391
	JMP  LBB0_1533

LBB0_392:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_873
	WORD $0xf631             // xor    esi, esi

LBB0_395:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_397

LBB0_396:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_396

LBB0_397:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_398:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_398
	JMP  LBB0_1533

LBB0_399:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_878
	WORD $0xf631             // xor    esi, esi

LBB0_402:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_404

LBB0_403:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x3caf0f66; BYTE $0x72 // imul    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_403

LBB0_404:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_405:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_405
	JMP  LBB0_1533

LBB0_406:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_883
	WORD $0xf631             // xor    esi, esi

LBB0_409:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_411

LBB0_410:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x3caf0f66; BYTE $0x72 // imul    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_410

LBB0_411:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_412:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_412
	JMP  LBB0_1533

LBB0_413:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_415
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1175
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1175

LBB0_415:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1283:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1285

LBB0_1284:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_1284

LBB0_1285:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1533

LBB0_1286:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB0_1286
	JMP  LBB0_1533

LBB0_416:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_418
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1177
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1177

LBB0_418:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1425:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB0_1427
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB0_1427:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1533

LBB0_1428:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1428
	JMP  LBB0_1533

LBB0_419:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_894
	WORD $0xf631             // xor    esi, esi

LBB0_422:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_424

LBB0_423:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x3caf0f66; BYTE $0x72 // imul    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_423

LBB0_424:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_425:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_425
	JMP  LBB0_1533

LBB0_426:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_899
	WORD $0xf631             // xor    esi, esi

LBB0_429:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_431

LBB0_430:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x3caf0f66; BYTE $0x72 // imul    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_430

LBB0_431:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_432:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_432
	JMP  LBB0_1533

LBB0_433:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_435
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1180
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1180

LBB0_435:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1293:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1295

LBB0_1294:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_1294

LBB0_1295:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1533

LBB0_1296:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB0_1296
	JMP  LBB0_1533

LBB0_436:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_438
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1182
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1182

LBB0_438:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1433:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB0_1435
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB0_1435:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1533

LBB0_1436:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1436
	JMP  LBB0_1533

LBB0_439:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_910
	WORD $0xf631             // xor    esi, esi

LBB0_442:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_444

LBB0_443:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x723c0366             // add    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_443

LBB0_444:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_445:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_445
	JMP  LBB0_1533

LBB0_446:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_915
	WORD $0xf631             // xor    esi, esi

LBB0_449:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_451

LBB0_450:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x723c0366             // add    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_450

LBB0_451:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_452:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_452
	JMP  LBB0_1533

LBB0_453:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_920
	WORD $0xf631             // xor    esi, esi

LBB0_456:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_458

LBB0_457:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x723c0366             // add    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_457

LBB0_458:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_459:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_459
	JMP  LBB0_1533

LBB0_460:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_925
	WORD $0xf631             // xor    esi, esi

LBB0_463:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_465

LBB0_464:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x723c0366             // add    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_464

LBB0_465:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_466:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_466
	JMP  LBB0_1533

LBB0_467:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_469
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1185
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1185

LBB0_469:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1441:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1443

LBB0_1442:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1442

LBB0_1443:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1444:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1444
	JMP  LBB0_1533

LBB0_470:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_472
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1188
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1188

LBB0_472:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1449:
	WORD $0x8948; BYTE $0xce       // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6       // not    rsi
	WORD $0x0148; BYTE $0xc6       // add    rsi, rax
	WORD $0x8948; BYTE $0xc7       // mov    rdi, rax
	LONG $0x03e78348               // and    rdi, 3
	JE   LBB0_1452
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI0_2] */

LBB0_1451:
	LONG $0x0c6ef9c5; BYTE $0x8a   // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_1451

LBB0_1452:
	LONG $0x03fe8348               // cmp    rsi, 3
	JB   LBB0_1533
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI0_2] */

LBB0_1454:
	LONG $0x0c6ef9c5; BYTE $0x8a               // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c             // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6ef9c5; WORD $0x048a             // vmovd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x04 // vmovd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6ef9c5; WORD $0x088a             // vmovd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x08 // vmovd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6ef9c5; WORD $0x0c8a             // vmovd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x0c // vmovd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1454
	JMP  LBB0_1533

LBB0_473:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_475
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1191
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1191

LBB0_475:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1459:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1461

LBB0_1460:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1460

LBB0_1461:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1462:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1462
	JMP  LBB0_1533

LBB0_476:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_478
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1194
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1194

LBB0_478:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1467:
	WORD $0x8948; BYTE $0xce       // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6       // not    rsi
	WORD $0x0148; BYTE $0xc6       // add    rsi, rax
	WORD $0x8948; BYTE $0xc7       // mov    rdi, rax
	LONG $0x03e78348               // and    rdi, 3
	JE   LBB0_1470
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI0_2] */

LBB0_1469:
	LONG $0x0c6ef9c5; BYTE $0x8a   // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_1469

LBB0_1470:
	LONG $0x03fe8348               // cmp    rsi, 3
	JB   LBB0_1533
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI0_2] */

LBB0_1472:
	LONG $0x0c6ef9c5; BYTE $0x8a               // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c             // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6ef9c5; WORD $0x048a             // vmovd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x04 // vmovd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6ef9c5; WORD $0x088a             // vmovd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x08 // vmovd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6ef9c5; WORD $0x0c8a             // vmovd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x0c // vmovd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1472
	JMP  LBB0_1533

LBB0_479:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_942
	WORD $0xf631             // xor    esi, esi

LBB0_482:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_484

LBB0_483:
	LONG $0xf23c8b48 // mov    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c2b48 // sub    rdi, qword [rcx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_483

LBB0_484:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_485:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_485
	JMP  LBB0_1533

LBB0_486:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_947
	WORD $0xf631             // xor    esi, esi

LBB0_489:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_491

LBB0_490:
	LONG $0x0410fac5; BYTE $0xb2   // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1   // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_490

LBB0_491:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_492:
	LONG $0x0410fac5; BYTE $0xb2               // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1               // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b2             // vmovss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445cfac5; WORD $0x04b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b2             // vmovss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445cfac5; WORD $0x08b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb2             // vmovss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445cfac5; WORD $0x0cb1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_492
	JMP  LBB0_1533

LBB0_493:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_952
	WORD $0xf631             // xor    esi, esi

LBB0_496:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_498

LBB0_497:
	LONG $0xf23c8b48 // mov    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c2b48 // sub    rdi, qword [rcx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_497

LBB0_498:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_499:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_499
	JMP  LBB0_1533

LBB0_500:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_957
	WORD $0xf631             // xor    esi, esi

LBB0_503:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_505

LBB0_504:
	LONG $0x0410fac5; BYTE $0xb2   // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1   // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_504

LBB0_505:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_506:
	LONG $0x0410fac5; BYTE $0xb2               // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1               // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b2             // vmovss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445cfac5; WORD $0x04b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b2             // vmovss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445cfac5; WORD $0x08b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb2             // vmovss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445cfac5; WORD $0x0cb1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_506
	JMP  LBB0_1533

LBB0_507:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_962
	WORD $0xf631             // xor    esi, esi

LBB0_510:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_512

LBB0_511:
	LONG $0xf13c8b48             // mov    rdi, qword [rcx + 8*rsi]
	LONG $0x3caf0f48; BYTE $0xf2 // imul    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949             // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_511

LBB0_512:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_513:
	LONG $0xf1048b48               // mov    rax, qword [rcx + 8*rsi]
	LONG $0x04af0f48; BYTE $0xf2   // imul    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949               // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0x44af0f48; WORD $0x08f2 // imul    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08   // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0x44af0f48; WORD $0x10f2 // imul    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10   // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0x44af0f48; WORD $0x18f2 // imul    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18   // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_513
	JMP  LBB0_1533

LBB0_514:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_967
	WORD $0xf631             // xor    esi, esi

LBB0_517:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_519

LBB0_518:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0459fac5; BYTE $0xb2   // vmulss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_518

LBB0_519:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_520:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0459fac5; BYTE $0xb2               // vmulss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4459fac5; WORD $0x04b2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4459fac5; WORD $0x08b2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4459fac5; WORD $0x0cb2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_520
	JMP  LBB0_1533

LBB0_521:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_523
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1197
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1197

LBB0_523:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1200:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1202
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1202:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1533

LBB0_1203:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1203
	JMP  LBB0_1533

LBB0_524:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_526
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1204
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1204

LBB0_526:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1477:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1480
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1479:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1479

LBB0_1480:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB0_1533
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1482:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1482
	JMP  LBB0_1533

LBB0_527:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_978
	WORD $0xf631             // xor    esi, esi

LBB0_530:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_532

LBB0_531:
	LONG $0xf13c8b48             // mov    rdi, qword [rcx + 8*rsi]
	LONG $0x3caf0f48; BYTE $0xf2 // imul    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949             // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_531

LBB0_532:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_533:
	LONG $0xf1048b48               // mov    rax, qword [rcx + 8*rsi]
	LONG $0x04af0f48; BYTE $0xf2   // imul    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949               // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0x44af0f48; WORD $0x08f2 // imul    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08   // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0x44af0f48; WORD $0x10f2 // imul    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10   // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0x44af0f48; WORD $0x18f2 // imul    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18   // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_533
	JMP  LBB0_1533

LBB0_534:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_983
	WORD $0xf631             // xor    esi, esi

LBB0_537:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_539

LBB0_538:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0459fac5; BYTE $0xb2   // vmulss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_538

LBB0_539:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_540:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0459fac5; BYTE $0xb2               // vmulss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4459fac5; WORD $0x04b2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4459fac5; WORD $0x08b2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4459fac5; WORD $0x0cb2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_540
	JMP  LBB0_1533

LBB0_541:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_543
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1207
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1207

LBB0_543:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1210:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1212
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1212:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1533

LBB0_1213:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1213
	JMP  LBB0_1533

LBB0_544:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_546
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1214
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1214

LBB0_546:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1487:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1490
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1489:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1489

LBB0_1490:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB0_1533
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1492:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1492
	JMP  LBB0_1533

LBB0_547:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_994
	WORD $0xf631             // xor    esi, esi

LBB0_550:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_552

LBB0_551:
	LONG $0xf13c8b48 // mov    rdi, qword [rcx + 8*rsi]
	LONG $0xf23c0348 // add    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_551

LBB0_552:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_553:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_553
	JMP  LBB0_1533

LBB0_554:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_999
	WORD $0xf631             // xor    esi, esi

LBB0_557:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_559

LBB0_558:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2   // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_558

LBB0_559:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_560:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2               // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4458fac5; WORD $0x04b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4458fac5; WORD $0x08b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4458fac5; WORD $0x0cb2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_560
	JMP  LBB0_1533

LBB0_561:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_1004
	WORD $0xf631             // xor    esi, esi

LBB0_564:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_566

LBB0_565:
	LONG $0xf13c8b48 // mov    rdi, qword [rcx + 8*rsi]
	LONG $0xf23c0348 // add    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_565

LBB0_566:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_567:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_567
	JMP  LBB0_1533

LBB0_568:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1009
	WORD $0xf631             // xor    esi, esi

LBB0_571:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_573

LBB0_572:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2   // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_572

LBB0_573:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1533

LBB0_574:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2               // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4458fac5; WORD $0x04b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4458fac5; WORD $0x08b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4458fac5; WORD $0x0cb2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_574
	JMP  LBB0_1533

LBB0_575:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB0_577
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB0_1217
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB0_1217

LBB0_577:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1497:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1499

LBB0_1498:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1498

LBB0_1499:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1500:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1500
	JMP  LBB0_1533

LBB0_578:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_1017
	WORD $0xc931                               // xor    ecx, ecx
	JMP  LBB0_1226

LBB0_581:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_1019
	WORD $0xf631                               // xor    esi, esi

LBB0_584:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_586

LBB0_585:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_585

LBB0_586:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_587:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_587
	JMP  LBB0_1533

LBB0_588:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_1024
	WORD $0xf631                               // xor    esi, esi

LBB0_591:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_593

LBB0_592:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_592

LBB0_593:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_594:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_594
	JMP  LBB0_1533

LBB0_595:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1029
	WORD $0xff31             // xor    edi, edi

LBB0_598:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_600

LBB0_599:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_599

LBB0_600:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_601:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_601
	JMP  LBB0_1533

LBB0_602:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB0_604
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB0_1227
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB0_1227

LBB0_604:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1505:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1507

LBB0_1506:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1506

LBB0_1507:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB0_1533

LBB0_1508:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1508
	JMP  LBB0_1533

LBB0_605:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1036
	WORD $0xff31             // xor    edi, edi

LBB0_608:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_610

LBB0_609:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_609

LBB0_610:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_611:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_611
	JMP  LBB0_1533

LBB0_612:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB0_614
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB0_1230
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB0_1230

LBB0_614:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1513:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1515

LBB0_1514:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1514

LBB0_1515:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB0_1533

LBB0_1516:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1516
	JMP  LBB0_1533

LBB0_615:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_1043
	WORD $0xf631                               // xor    esi, esi

LBB0_618:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_620

LBB0_619:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_619

LBB0_620:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_621:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_621
	JMP  LBB0_1533

LBB0_622:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_1048
	WORD $0xf631                               // xor    esi, esi

LBB0_625:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_627

LBB0_626:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_626

LBB0_627:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_628:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_628
	JMP  LBB0_1533

LBB0_629:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_631
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1233
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1233

LBB0_631:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1521:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1523

LBB0_1522:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1522

LBB0_1523:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1524:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1524
	JMP  LBB0_1533

LBB0_632:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_634
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1236
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1236

LBB0_634:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1529:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1531

LBB0_1530:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1530

LBB0_1531:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_1532:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1532
	JMP  LBB0_1533

LBB0_635:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1059
	WORD $0xf631             // xor    esi, esi

LBB0_638:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_640

LBB0_639:
	WORD $0x3c8b; BYTE $0xb2 // mov    edi, dword [rdx + 4*rsi]
	WORD $0x3c2b; BYTE $0xb1 // sub    edi, dword [rcx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_639

LBB0_640:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_641:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_641
	JMP  LBB0_1533

LBB0_642:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1064
	WORD $0xf631             // xor    esi, esi

LBB0_645:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_647

LBB0_646:
	WORD $0x3c8b; BYTE $0xb2 // mov    edi, dword [rdx + 4*rsi]
	WORD $0x3c2b; BYTE $0xb1 // sub    edi, dword [rcx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_646

LBB0_647:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_648:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_648
	JMP  LBB0_1533

LBB0_649:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1069
	WORD $0xf631             // xor    esi, esi

LBB0_652:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_654

LBB0_653:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	LONG $0xb23caf0f         // imul    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_653

LBB0_654:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_655:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_655
	JMP  LBB0_1533

LBB0_656:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_658
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1239
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1239

LBB0_658:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1242:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1244
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1244:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1533

LBB0_1245:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1245
	JMP  LBB0_1533

LBB0_659:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1077
	WORD $0xf631             // xor    esi, esi

LBB0_662:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_664

LBB0_663:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	LONG $0xb23caf0f         // imul    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_663

LBB0_664:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_665:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_665
	JMP  LBB0_1533

LBB0_666:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_668
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1246
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1246

LBB0_668:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1249:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1251
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1251:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1533

LBB0_1252:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1252
	JMP  LBB0_1533

LBB0_669:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1085
	WORD $0xf631             // xor    esi, esi

LBB0_672:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_674

LBB0_673:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	WORD $0x3c03; BYTE $0xb2 // add    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_673

LBB0_674:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_675:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_675
	JMP  LBB0_1533

LBB0_676:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1533
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1090
	WORD $0xf631             // xor    esi, esi

LBB0_679:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_681

LBB0_680:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	WORD $0x3c03; BYTE $0xb2 // add    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_680

LBB0_681:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1533

LBB0_682:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_682
	JMP  LBB0_1533

LBB0_686:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB0_1098
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1100

LBB0_688:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_35
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_35
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_691:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_691
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_35
	JMP  LBB0_1533

LBB0_693:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_49
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_49
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_696:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_696
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_49
	JMP  LBB0_1533

LBB0_698:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_61
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_61
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_701:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x407de2c4; WORD $0xba04             // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4075e2c4; WORD $0xba4c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x406de2c4; WORD $0xba54; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x4065e2c4; WORD $0xba5c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_701
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_61
	JMP  LBB0_1533

LBB0_706:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_81
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_81
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_709:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x407de2c4; WORD $0xba04             // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4075e2c4; WORD $0xba4c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x406de2c4; WORD $0xba54; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x4065e2c4; WORD $0xba5c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_709
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_81
	JMP  LBB0_1533

LBB0_714:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_101
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_101
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_717:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x04fefdc5; BYTE $0xba               // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4cfef5c5; WORD $0x20ba             // vpaddd    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x54feedc5; WORD $0x40ba             // vpaddd    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5cfee5c5; WORD $0x60ba             // vpaddd    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_717
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_101

LBB0_719:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_113
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_113
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_722:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x04fefdc5; BYTE $0xba               // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4cfef5c5; WORD $0x20ba             // vpaddd    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x54feedc5; WORD $0x40ba             // vpaddd    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5cfee5c5; WORD $0x60ba             // vpaddd    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_722
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_113
	JMP  LBB0_1533

LBB0_730:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_138
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_138
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_733:
	LONG $0x0410fdc5; BYTE $0xfa               // vmovupd    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20fa             // vmovupd    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40fa             // vmovupd    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60fa             // vmovupd    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x045cfdc5; BYTE $0xf9               // vsubpd    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4c5cf5c5; WORD $0x20f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x545cedc5; WORD $0x40f9             // vsubpd    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c5ce5c5; WORD $0x60f9             // vsubpd    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_733
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_138
	JMP  LBB0_1533

LBB0_735:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_149
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_149
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_738:
	LONG $0x0410fdc5; BYTE $0xfa               // vmovupd    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20fa             // vmovupd    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40fa             // vmovupd    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60fa             // vmovupd    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x045cfdc5; BYTE $0xf9               // vsubpd    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4c5cf5c5; WORD $0x20f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x545cedc5; WORD $0x40f9             // vsubpd    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c5ce5c5; WORD $0x60f9             // vsubpd    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_738
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_149
	JMP  LBB0_1533

LBB0_740:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_160
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_160
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_743:
	LONG $0x0410fdc5; BYTE $0xf9               // vmovupd    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20f9             // vmovupd    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40f9             // vmovupd    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60f9             // vmovupd    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x0459fdc5; BYTE $0xfa               // vmulpd    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4c59f5c5; WORD $0x20fa             // vmulpd    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5459edc5; WORD $0x40fa             // vmulpd    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c59e5c5; WORD $0x60fa             // vmulpd    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_743
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_160
	JMP  LBB0_1533

LBB0_748:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_178
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_178
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_751:
	LONG $0x0410fdc5; BYTE $0xf9               // vmovupd    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20f9             // vmovupd    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40f9             // vmovupd    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60f9             // vmovupd    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x0459fdc5; BYTE $0xfa               // vmulpd    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4c59f5c5; WORD $0x20fa             // vmulpd    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5459edc5; WORD $0x40fa             // vmulpd    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c59e5c5; WORD $0x60fa             // vmulpd    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_751
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_178
	JMP  LBB0_1533

LBB0_756:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_196
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_196
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_759:
	LONG $0x0410fdc5; BYTE $0xf9               // vmovupd    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20f9             // vmovupd    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40f9             // vmovupd    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60f9             // vmovupd    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x0458fdc5; BYTE $0xfa               // vaddpd    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4c58f5c5; WORD $0x20fa             // vaddpd    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5458edc5; WORD $0x40fa             // vaddpd    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c58e5c5; WORD $0x60fa             // vaddpd    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_759
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_196

LBB0_761:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_207
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_207
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_764:
	LONG $0x0410fdc5; BYTE $0xf9               // vmovupd    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20f9             // vmovupd    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40f9             // vmovupd    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60f9             // vmovupd    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x0458fdc5; BYTE $0xfa               // vaddpd    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4c58f5c5; WORD $0x20fa             // vaddpd    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5458edc5; WORD $0x40fa             // vaddpd    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c58e5c5; WORD $0x60fa             // vaddpd    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_764
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_207
	JMP  LBB0_1533

LBB0_772:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_226
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_226
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_775:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_775
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_226
	JMP  LBB0_1533

LBB0_777:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_235
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_235
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_780:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_780
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_235
	JMP  LBB0_1533

LBB0_782:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd6970f40         // seta    sil
	WORD $0xff31             // xor    edi, edi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_244
	WORD $0x2040; BYTE $0xf0 // and    al, sil
	JNE  LBB0_244
	WORD $0x8944; BYTE $0xd7 // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0 // and    edi, -32
	LONG $0xe0778d48         // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x05e8c148         // shr    rax, 5
	LONG $0x01c08348         // add    rax, 1
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60fe8348         // cmp    rsi, 96
	JAE  LBB0_1253
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_1255

LBB0_789:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd6970f40         // seta    sil
	WORD $0xff31             // xor    edi, edi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_258
	WORD $0x2040; BYTE $0xf0 // and    al, sil
	JNE  LBB0_258
	WORD $0x8944; BYTE $0xd7 // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0 // and    edi, -32
	LONG $0xe0778d48         // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x05e8c148         // shr    rax, 5
	LONG $0x01c08348         // add    rax, 1
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60fe8348         // cmp    rsi, 96
	JAE  LBB0_1259
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_1261

LBB0_796:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_272
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_272
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_799:
	LONG $0x046ffec5; BYTE $0x39               // vmovdqu    ymm0, yword [rcx + rdi]
	LONG $0x4c6ffec5; WORD $0x2039             // vmovdqu    ymm1, yword [rcx + rdi + 32]
	LONG $0x546ffec5; WORD $0x4039             // vmovdqu    ymm2, yword [rcx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6039             // vmovdqu    ymm3, yword [rcx + rdi + 96]
	LONG $0x04fcfdc5; BYTE $0x3a               // vpaddb    ymm0, ymm0, yword [rdx + rdi]
	LONG $0x4cfcf5c5; WORD $0x203a             // vpaddb    ymm1, ymm1, yword [rdx + rdi + 32]
	LONG $0x54fcedc5; WORD $0x403a             // vpaddb    ymm2, ymm2, yword [rdx + rdi + 64]
	LONG $0x5cfce5c5; WORD $0x603a             // vpaddb    ymm3, ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_799
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_272

LBB0_801:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_281
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_281
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_804:
	LONG $0x046ffec5; BYTE $0x39               // vmovdqu    ymm0, yword [rcx + rdi]
	LONG $0x4c6ffec5; WORD $0x2039             // vmovdqu    ymm1, yword [rcx + rdi + 32]
	LONG $0x546ffec5; WORD $0x4039             // vmovdqu    ymm2, yword [rcx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6039             // vmovdqu    ymm3, yword [rcx + rdi + 96]
	LONG $0x04fcfdc5; BYTE $0x3a               // vpaddb    ymm0, ymm0, yword [rdx + rdi]
	LONG $0x4cfcf5c5; WORD $0x203a             // vpaddb    ymm1, ymm1, yword [rdx + rdi + 32]
	LONG $0x54fcedc5; WORD $0x403a             // vpaddb    ymm2, ymm2, yword [rdx + rdi + 64]
	LONG $0x5cfce5c5; WORD $0x603a             // vpaddb    ymm3, ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_804
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_281

LBB0_809:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0798d48         // lea    rdi, [rcx - 16]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x04eec148         // shr    rsi, 4
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	LONG $0x30ff8348         // cmp    rdi, 48
	JAE  LBB0_1146
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1148

LBB0_811:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_300
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_300
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_814:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_814
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_300
	JMP  LBB0_1533

LBB0_816:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_309
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_309
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_819:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_819
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_309
	JMP  LBB0_1533

LBB0_821:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_318
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_318
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_824:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x446ffec5; WORD $0x60fa             // vmovdqu    ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x246ffec5; BYTE $0xf9               // vmovdqu    ymm4, yword [rcx + 8*rdi]
	LONG $0x6c6ffec5; WORD $0x20f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 32]
	LONG $0x746ffec5; WORD $0x40f9             // vmovdqu    ymm6, yword [rcx + 8*rdi + 64]
	LONG $0x7c6ffec5; WORD $0x60f9             // vmovdqu    ymm7, yword [rcx + 8*rdi + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_824
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_318
	JMP  LBB0_1533

LBB0_829:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_332
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_332
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_832:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x446ffec5; WORD $0x60fa             // vmovdqu    ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x246ffec5; BYTE $0xf9               // vmovdqu    ymm4, yword [rcx + 8*rdi]
	LONG $0x6c6ffec5; WORD $0x20f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 32]
	LONG $0x746ffec5; WORD $0x40f9             // vmovdqu    ymm6, yword [rcx + 8*rdi + 64]
	LONG $0x7c6ffec5; WORD $0x60f9             // vmovdqu    ymm7, yword [rcx + 8*rdi + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_832
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_332
	JMP  LBB0_1533

LBB0_837:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_346
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_346
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_840:
	LONG $0x046ffec5; BYTE $0xf9               // vmovdqu    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20f9             // vmovdqu    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40f9             // vmovdqu    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x04d4fdc5; BYTE $0xfa               // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4cd4f5c5; WORD $0x20fa             // vpaddq    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x54d4edc5; WORD $0x40fa             // vpaddq    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5cd4e5c5; WORD $0x60fa             // vpaddq    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_840
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_346

LBB0_842:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_355
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_355
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_845:
	LONG $0x046ffec5; BYTE $0xf9               // vmovdqu    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20f9             // vmovdqu    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40f9             // vmovdqu    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x04d4fdc5; BYTE $0xfa               // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4cd4f5c5; WORD $0x20fa             // vpaddq    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x54d4edc5; WORD $0x40fa             // vpaddq    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5cd4e5c5; WORD $0x60fa             // vpaddq    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_845
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_355
	JMP  LBB0_1533

LBB0_853:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0xc0                   // and    ecx, -64
	LONG $0xc0798d48                           // lea    rdi, [rcx - 64]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x06eec148                           // shr    rsi, 6
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x03                   // and    edx, 3
	LONG $0xc0ff8148; WORD $0x0000; BYTE $0x00 // cmp    rdi, 192
	JAE  LBB0_1165
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB0_1167

LBB0_858:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_374
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_374
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_861:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_861
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_374
	JMP  LBB0_1533

LBB0_863:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_381
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_381
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_866:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_866
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_381
	JMP  LBB0_1533

LBB0_868:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_388
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_388
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_871:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_871
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_388
	JMP  LBB0_1533

LBB0_873:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_395
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_395
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_876:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_876
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_395
	JMP  LBB0_1533

LBB0_878:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_402
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_402
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_881:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04d5fdc5; BYTE $0x7a               // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cd5f5c5; WORD $0x207a             // vpmullw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54d5edc5; WORD $0x407a             // vpmullw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cd5e5c5; WORD $0x607a             // vpmullw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_881
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_402
	JMP  LBB0_1533

LBB0_883:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_409
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_409
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_886:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04d5fdc5; BYTE $0x7a               // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cd5f5c5; WORD $0x207a             // vpmullw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54d5edc5; WORD $0x407a             // vpmullw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cd5e5c5; WORD $0x607a             // vpmullw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_886
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_409
	JMP  LBB0_1533

LBB0_894:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_422
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_422
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_897:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04d5fdc5; BYTE $0x7a               // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cd5f5c5; WORD $0x207a             // vpmullw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54d5edc5; WORD $0x407a             // vpmullw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cd5e5c5; WORD $0x607a             // vpmullw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_897
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_422
	JMP  LBB0_1533

LBB0_899:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_429
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_429
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_902:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04d5fdc5; BYTE $0x7a               // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cd5f5c5; WORD $0x207a             // vpmullw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54d5edc5; WORD $0x407a             // vpmullw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cd5e5c5; WORD $0x607a             // vpmullw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_902
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_429
	JMP  LBB0_1533

LBB0_910:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_442
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_442
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_913:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04fdfdc5; BYTE $0x7a               // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cfdf5c5; WORD $0x207a             // vpaddw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54fdedc5; WORD $0x407a             // vpaddw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cfde5c5; WORD $0x607a             // vpaddw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_913
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_442

LBB0_915:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_449
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_449
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_918:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04fdfdc5; BYTE $0x7a               // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cfdf5c5; WORD $0x207a             // vpaddw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54fdedc5; WORD $0x407a             // vpaddw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cfde5c5; WORD $0x607a             // vpaddw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_918
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_449

LBB0_920:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_456
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_456
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_923:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04fdfdc5; BYTE $0x7a               // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cfdf5c5; WORD $0x207a             // vpaddw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54fdedc5; WORD $0x407a             // vpaddw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cfde5c5; WORD $0x607a             // vpaddw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_923
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_456
	JMP  LBB0_1533

LBB0_925:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_463
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_463
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_928:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04fdfdc5; BYTE $0x7a               // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cfdf5c5; WORD $0x207a             // vpaddw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54fdedc5; WORD $0x407a             // vpaddw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cfde5c5; WORD $0x607a             // vpaddw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_928
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_463
	JMP  LBB0_1533

LBB0_942:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_482
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_482
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_945:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_945
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_482
	JMP  LBB0_1533

LBB0_947:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_489
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_489
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_950:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x045cfcc5; BYTE $0xb9               // vsubps    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4c5cf4c5; WORD $0x20b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x545cecc5; WORD $0x40b9             // vsubps    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c5ce4c5; WORD $0x60b9             // vsubps    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_950
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_489
	JMP  LBB0_1533

LBB0_952:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_496
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_496
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_955:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_955
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_496
	JMP  LBB0_1533

LBB0_957:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_503
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_503
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_960:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x045cfcc5; BYTE $0xb9               // vsubps    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4c5cf4c5; WORD $0x20b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x545cecc5; WORD $0x40b9             // vsubps    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c5ce4c5; WORD $0x60b9             // vsubps    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_960
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_503
	JMP  LBB0_1533

LBB0_962:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_510
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_510
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_965:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x446ffec5; WORD $0x60fa             // vmovdqu    ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x246ffec5; BYTE $0xf9               // vmovdqu    ymm4, yword [rcx + 8*rdi]
	LONG $0x6c6ffec5; WORD $0x20f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 32]
	LONG $0x746ffec5; WORD $0x40f9             // vmovdqu    ymm6, yword [rcx + 8*rdi + 64]
	LONG $0x7c6ffec5; WORD $0x60f9             // vmovdqu    ymm7, yword [rcx + 8*rdi + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_965
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_510
	JMP  LBB0_1533

LBB0_967:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_517
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_517
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_970:
	LONG $0x0410fcc5; BYTE $0xb9               // vmovups    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20b9             // vmovups    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40b9             // vmovups    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60b9             // vmovups    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x0459fcc5; BYTE $0xba               // vmulps    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4c59f4c5; WORD $0x20ba             // vmulps    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5459ecc5; WORD $0x40ba             // vmulps    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c59e4c5; WORD $0x60ba             // vmulps    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_970
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_517
	JMP  LBB0_1533

LBB0_978:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_530
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_530
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_981:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x446ffec5; WORD $0x60fa             // vmovdqu    ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x246ffec5; BYTE $0xf9               // vmovdqu    ymm4, yword [rcx + 8*rdi]
	LONG $0x6c6ffec5; WORD $0x20f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 32]
	LONG $0x746ffec5; WORD $0x40f9             // vmovdqu    ymm6, yword [rcx + 8*rdi + 64]
	LONG $0x7c6ffec5; WORD $0x60f9             // vmovdqu    ymm7, yword [rcx + 8*rdi + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_981
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_530
	JMP  LBB0_1533

LBB0_983:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_537
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_537
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_986:
	LONG $0x0410fcc5; BYTE $0xb9               // vmovups    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20b9             // vmovups    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40b9             // vmovups    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60b9             // vmovups    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x0459fcc5; BYTE $0xba               // vmulps    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4c59f4c5; WORD $0x20ba             // vmulps    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5459ecc5; WORD $0x40ba             // vmulps    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c59e4c5; WORD $0x60ba             // vmulps    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_986
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_537
	JMP  LBB0_1533

LBB0_994:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_550
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_550
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_997:
	LONG $0x046ffec5; BYTE $0xf9               // vmovdqu    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20f9             // vmovdqu    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40f9             // vmovdqu    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x04d4fdc5; BYTE $0xfa               // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4cd4f5c5; WORD $0x20fa             // vpaddq    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x54d4edc5; WORD $0x40fa             // vpaddq    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5cd4e5c5; WORD $0x60fa             // vpaddq    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_997
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_550

LBB0_999:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_557
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_557
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_1002:
	LONG $0x0410fcc5; BYTE $0xb9               // vmovups    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20b9             // vmovups    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40b9             // vmovups    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60b9             // vmovups    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x0458fcc5; BYTE $0xba               // vaddps    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4c58f4c5; WORD $0x20ba             // vaddps    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5458ecc5; WORD $0x40ba             // vaddps    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c58e4c5; WORD $0x60ba             // vaddps    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1002
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_557

LBB0_1004:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_564
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_564
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_1007:
	LONG $0x046ffec5; BYTE $0xf9               // vmovdqu    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20f9             // vmovdqu    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40f9             // vmovdqu    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x04d4fdc5; BYTE $0xfa               // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4cd4f5c5; WORD $0x20fa             // vpaddq    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x54d4edc5; WORD $0x40fa             // vpaddq    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5cd4e5c5; WORD $0x60fa             // vpaddq    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1007
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_564
	JMP  LBB0_1533

LBB0_1009:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_571
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_571
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_1012:
	LONG $0x0410fcc5; BYTE $0xb9               // vmovups    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20b9             // vmovups    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40b9             // vmovups    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60b9             // vmovups    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x0458fcc5; BYTE $0xba               // vaddps    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4c58f4c5; WORD $0x20ba             // vaddps    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5458ecc5; WORD $0x40ba             // vaddps    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c58e4c5; WORD $0x60ba             // vaddps    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1012
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_571
	JMP  LBB0_1533

LBB0_1017:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0x80                   // and    ecx, -128
	LONG $0x80798d48                           // lea    rdi, [rcx - 128]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x07eec148                           // shr    rsi, 7
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x03                   // and    edx, 3
	LONG $0x80ff8148; WORD $0x0001; BYTE $0x00 // cmp    rdi, 384
	JAE  LBB0_1220
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB0_1222

LBB0_1019:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_584
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_584
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_1022:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1022
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_584
	JMP  LBB0_1533

LBB0_1024:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_591
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_591
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_1027:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1027
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_591
	JMP  LBB0_1533

LBB0_1029:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd6970f40         // seta    sil
	WORD $0xff31             // xor    edi, edi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_598
	WORD $0x2040; BYTE $0xf0 // and    al, sil
	JNE  LBB0_598
	WORD $0x8944; BYTE $0xd7 // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0 // and    edi, -32
	LONG $0xe0778d48         // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x05e8c148         // shr    rax, 5
	LONG $0x01c08348         // add    rax, 1
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60fe8348         // cmp    rsi, 96
	JAE  LBB0_1265
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_1267

LBB0_1036:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd6970f40         // seta    sil
	WORD $0xff31             // xor    edi, edi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_608
	WORD $0x2040; BYTE $0xf0 // and    al, sil
	JNE  LBB0_608
	WORD $0x8944; BYTE $0xd7 // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0 // and    edi, -32
	LONG $0xe0778d48         // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x05e8c148         // shr    rax, 5
	LONG $0x01c08348         // add    rax, 1
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60fe8348         // cmp    rsi, 96
	JAE  LBB0_1271
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_1273

LBB0_1043:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_618
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_618
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_1046:
	LONG $0x046ffec5; BYTE $0x39               // vmovdqu    ymm0, yword [rcx + rdi]
	LONG $0x4c6ffec5; WORD $0x2039             // vmovdqu    ymm1, yword [rcx + rdi + 32]
	LONG $0x546ffec5; WORD $0x4039             // vmovdqu    ymm2, yword [rcx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6039             // vmovdqu    ymm3, yword [rcx + rdi + 96]
	LONG $0x04fcfdc5; BYTE $0x3a               // vpaddb    ymm0, ymm0, yword [rdx + rdi]
	LONG $0x4cfcf5c5; WORD $0x203a             // vpaddb    ymm1, ymm1, yword [rdx + rdi + 32]
	LONG $0x54fcedc5; WORD $0x403a             // vpaddb    ymm2, ymm2, yword [rdx + rdi + 64]
	LONG $0x5cfce5c5; WORD $0x603a             // vpaddb    ymm3, ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1046
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_618

LBB0_1048:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_625
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_625
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_1051:
	LONG $0x046ffec5; BYTE $0x39               // vmovdqu    ymm0, yword [rcx + rdi]
	LONG $0x4c6ffec5; WORD $0x2039             // vmovdqu    ymm1, yword [rcx + rdi + 32]
	LONG $0x546ffec5; WORD $0x4039             // vmovdqu    ymm2, yword [rcx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6039             // vmovdqu    ymm3, yword [rcx + rdi + 96]
	LONG $0x04fcfdc5; BYTE $0x3a               // vpaddb    ymm0, ymm0, yword [rdx + rdi]
	LONG $0x4cfcf5c5; WORD $0x203a             // vpaddb    ymm1, ymm1, yword [rdx + rdi + 32]
	LONG $0x54fcedc5; WORD $0x403a             // vpaddb    ymm2, ymm2, yword [rdx + rdi + 64]
	LONG $0x5cfce5c5; WORD $0x603a             // vpaddb    ymm3, ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1051
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_625

LBB0_1059:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_638
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_638
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_1062:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1062
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_638
	JMP  LBB0_1533

LBB0_1064:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_645
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_645
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_1067:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1067
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_645
	JMP  LBB0_1533

LBB0_1069:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_652
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_652
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_1072:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x407de2c4; WORD $0xba04             // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4075e2c4; WORD $0xba4c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x406de2c4; WORD $0xba54; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x4065e2c4; WORD $0xba5c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1072
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_652
	JMP  LBB0_1533

LBB0_1077:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_662
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_662
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_1080:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x407de2c4; WORD $0xba04             // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4075e2c4; WORD $0xba4c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x406de2c4; WORD $0xba54; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x4065e2c4; WORD $0xba5c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1080
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_662
	JMP  LBB0_1533

LBB0_1085:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_672
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_672
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_1088:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x04fefdc5; BYTE $0xba               // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4cfef5c5; WORD $0x20ba             // vpaddd    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x54feedc5; WORD $0x40ba             // vpaddd    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5cfee5c5; WORD $0x60ba             // vpaddd    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1088
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_1533
	JMP  LBB0_672

LBB0_1090:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_679
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_679
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_1093:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x04fefdc5; BYTE $0xba               // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4cfef5c5; WORD $0x20ba             // vpaddd    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x54feedc5; WORD $0x40ba             // vpaddd    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5cfee5c5; WORD $0x60ba             // vpaddd    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_1093
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_679
	JMP  LBB0_1533

LBB0_1095:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1297
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1097:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1097
	JMP  LBB0_1298

LBB0_1105:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1305
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1107:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1107
	JMP  LBB0_1306

LBB0_1108:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1313
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1110:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1110
	JMP  LBB0_1314

LBB0_1111:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1321
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_1113:
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64effdc5; WORD $0x60fa             // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1113
	JMP  LBB0_1322

LBB0_1114:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1331
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_1116:
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64effdc5; WORD $0x60fa             // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1116
	JMP  LBB0_1332

LBB0_1117:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB0_1341
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0845 // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI0_3] */

LBB0_1119:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1119
	JMP  LBB0_1342

LBB0_1120:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB0_1349
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0845 // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI0_3] */

LBB0_1122:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1122
	JMP  LBB0_1350

LBB0_1123:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1357
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1125:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1125
	JMP  LBB0_1358

LBB0_1126:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1365
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1128:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1128
	JMP  LBB0_1366

LBB0_1129:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x20 // vmovdqa    xmm0, oword 32[rbp] /* [rip + .LCPI0_6] */

LBB0_1130:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1130
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1132

LBB0_1136:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x20 // vmovdqa    xmm0, oword 32[rbp] /* [rip + .LCPI0_6] */

LBB0_1137:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1137
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1139

LBB0_1143:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1373
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1145:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1145
	JMP  LBB0_1374

LBB0_1153:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1381
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1155:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1155
	JMP  LBB0_1382

LBB0_1156:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1389
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1158:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1158
	JMP  LBB0_1390

LBB0_1159:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1397
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1161:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1161
	JMP  LBB0_1398

LBB0_1162:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1405
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1164:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1164
	JMP  LBB0_1406

LBB0_1172:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1413
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1174:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1174
	JMP  LBB0_1414

LBB0_1175:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB0_1277
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1279

LBB0_1177:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1421
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_5] */

LBB0_1179:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_1179
	JMP  LBB0_1422

LBB0_1180:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB0_1287
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1289

LBB0_1182:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1429
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_5] */

LBB0_1184:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_1184
	JMP  LBB0_1430

LBB0_1185:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1437
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1187:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1187
	JMP  LBB0_1438

LBB0_1188:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1445
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3045 // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI0_2] */

LBB0_1190:
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64effdc5; WORD $0x60ba             // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1190
	JMP  LBB0_1446

LBB0_1191:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1455
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1193:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1193
	JMP  LBB0_1456

LBB0_1194:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1463
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3045 // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI0_2] */

LBB0_1196:
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64effdc5; WORD $0x60ba             // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1196
	JMP  LBB0_1464

LBB0_1197:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1198:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1198
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1200

LBB0_1204:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1473
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3445 // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI0_4] */

LBB0_1206:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1206
	JMP  LBB0_1474

LBB0_1207:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1208:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1208
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1210

LBB0_1214:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1483
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3445 // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI0_4] */

LBB0_1216:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1216
	JMP  LBB0_1484

LBB0_1217:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1493
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1219:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1219
	JMP  LBB0_1494

LBB0_1227:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1501
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1229:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1229
	JMP  LBB0_1502

LBB0_1230:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1509
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1232:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1232
	JMP  LBB0_1510

LBB0_1233:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1517
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1235:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1235
	JMP  LBB0_1518

LBB0_1236:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1525
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1238:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1238
	JMP  LBB0_1526

LBB0_1239:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB0_1240:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1240
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1242

LBB0_1246:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB0_1247:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1247
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1249

LBB0_1098:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1099:
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm0
	QUAD $0x00c0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm0
	QUAD $0x00e0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm0
	QUAD $0x0100b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 256], ymm0
	QUAD $0x0120b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 288], ymm0
	QUAD $0x0140b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 320], ymm0
	QUAD $0x0160b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 352], ymm0
	QUAD $0x0180b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 384], ymm0
	QUAD $0x01a0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 416], ymm0
	QUAD $0x01c0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 448], ymm0
	QUAD $0x01e0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 480], ymm0
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB0_1099

LBB0_1100:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_1103
	LONG $0xb8348d49         // lea    rsi, [r8 + 4*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1102:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB0_1102

LBB0_1103:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533

LBB0_1104:
	QUAD $0x000000008804c741 // mov    dword [r8 + 4*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB0_1104
	JMP  LBB0_1533

LBB0_1146:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1147:
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm0
	QUAD $0x00c0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm0
	QUAD $0x00e0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm0
	QUAD $0x0100f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 256], ymm0
	QUAD $0x0120f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 288], ymm0
	QUAD $0x0140f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 320], ymm0
	QUAD $0x0160f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 352], ymm0
	QUAD $0x0180f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 384], ymm0
	QUAD $0x01a0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 416], ymm0
	QUAD $0x01c0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 448], ymm0
	QUAD $0x01e0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 480], ymm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB0_1147

LBB0_1148:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_1151
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1150:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB0_1150

LBB0_1151:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533

LBB0_1152:
	QUAD $0x00000000c804c749 // mov    qword [r8 + 8*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB0_1152
	JMP  LBB0_1533

LBB0_1165:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1166:
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm0
	QUAD $0x008078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 128], ymm0
	QUAD $0x00a078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 160], ymm0
	QUAD $0x00c078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 192], ymm0
	QUAD $0x00e078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 224], ymm0
	QUAD $0x010078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 256], ymm0
	QUAD $0x012078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 288], ymm0
	QUAD $0x014078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 320], ymm0
	QUAD $0x016078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 352], ymm0
	QUAD $0x018078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 384], ymm0
	QUAD $0x01a078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 416], ymm0
	QUAD $0x01c078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 448], ymm0
	QUAD $0x01e078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 480], ymm0
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB0_1166

LBB0_1167:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_1170
	LONG $0x78348d49         // lea    rsi, [r8 + 2*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1169:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB0_1169

LBB0_1170:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533

LBB0_1171:
	LONG $0x04c74166; WORD $0x0048; BYTE $0x00 // mov    word [r8 + 2*rcx], 0
	LONG $0x01c18348                           // add    rcx, 1
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1171
	JMP  LBB0_1533

LBB0_1220:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1221:
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm0
	QUAD $0x00c038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm0
	QUAD $0x00e038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm0
	QUAD $0x010038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 256], ymm0
	QUAD $0x012038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 288], ymm0
	QUAD $0x014038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 320], ymm0
	QUAD $0x016038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 352], ymm0
	QUAD $0x018038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 384], ymm0
	QUAD $0x01a038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 416], ymm0
	QUAD $0x01c038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 448], ymm0
	QUAD $0x01e038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 480], ymm0
	LONG $0x00c78148; WORD $0x0002; BYTE $0x00 // add    rdi, 512
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB0_1221

LBB0_1222:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_1225
	LONG $0x07348d4a         // lea    rsi, [rdi + r8]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1224:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB0_1224

LBB0_1225:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533

LBB0_1226:
	LONG $0x0804c641; BYTE $0x00 // mov    byte [r8 + rcx], 0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1226

LBB0_1533:
	VZEROUPPER
	RET

LBB0_1253:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x60 // vmovdqa    ymm0, yword 96[rbp] /* [rip + .LCPI0_7] */

LBB0_1254:
	LONG $0x0c6ffec5; BYTE $0x32               // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31               // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x4c6ffec5; WORD $0x2032             // vmovdqu    ymm1, yword [rdx + rsi + 32]
	LONG $0x546ffec5; WORD $0x2031             // vmovdqu    ymm2, yword [rcx + rsi + 32]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm1
	LONG $0x4c6ffec5; WORD $0x4032             // vmovdqu    ymm1, yword [rdx + rsi + 64]
	LONG $0x546ffec5; WORD $0x4031             // vmovdqu    ymm2, yword [rcx + rsi + 64]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm1
	LONG $0x4c6ffec5; WORD $0x6032             // vmovdqu    ymm1, yword [rdx + rsi + 96]
	LONG $0x546ffec5; WORD $0x6031             // vmovdqu    ymm2, yword [rcx + rsi + 96]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm1
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_1254

LBB0_1255:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB0_1258
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x456ffdc5; BYTE $0x60 // vmovdqa    ymm0, yword 96[rbp] /* [rip + .LCPI0_7] */

LBB0_1257:
	LONG $0x0c6ffec5; BYTE $0x32   // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31   // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5               // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5               // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5               // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5               // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5               // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5               // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB0_1257

LBB0_1258:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_244
	JMP  LBB0_1533

LBB0_1259:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x60 // vmovdqa    ymm0, yword 96[rbp] /* [rip + .LCPI0_7] */

LBB0_1260:
	LONG $0x0c6ffec5; BYTE $0x32               // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31               // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x4c6ffec5; WORD $0x2032             // vmovdqu    ymm1, yword [rdx + rsi + 32]
	LONG $0x546ffec5; WORD $0x2031             // vmovdqu    ymm2, yword [rcx + rsi + 32]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm1
	LONG $0x4c6ffec5; WORD $0x4032             // vmovdqu    ymm1, yword [rdx + rsi + 64]
	LONG $0x546ffec5; WORD $0x4031             // vmovdqu    ymm2, yword [rcx + rsi + 64]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm1
	LONG $0x4c6ffec5; WORD $0x6032             // vmovdqu    ymm1, yword [rdx + rsi + 96]
	LONG $0x546ffec5; WORD $0x6031             // vmovdqu    ymm2, yword [rcx + rsi + 96]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm1
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_1260

LBB0_1261:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB0_1264
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x456ffdc5; BYTE $0x60 // vmovdqa    ymm0, yword 96[rbp] /* [rip + .LCPI0_7] */

LBB0_1263:
	LONG $0x0c6ffec5; BYTE $0x32   // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31   // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5               // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5               // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5               // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5               // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5               // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5               // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB0_1263

LBB0_1264:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_258
	JMP  LBB0_1533

LBB0_1265:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x60 // vmovdqa    ymm0, yword 96[rbp] /* [rip + .LCPI0_7] */

LBB0_1266:
	LONG $0x0c6ffec5; BYTE $0x32               // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31               // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x4c6ffec5; WORD $0x2032             // vmovdqu    ymm1, yword [rdx + rsi + 32]
	LONG $0x546ffec5; WORD $0x2031             // vmovdqu    ymm2, yword [rcx + rsi + 32]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm1
	LONG $0x4c6ffec5; WORD $0x4032             // vmovdqu    ymm1, yword [rdx + rsi + 64]
	LONG $0x546ffec5; WORD $0x4031             // vmovdqu    ymm2, yword [rcx + rsi + 64]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm1
	LONG $0x4c6ffec5; WORD $0x6032             // vmovdqu    ymm1, yword [rdx + rsi + 96]
	LONG $0x546ffec5; WORD $0x6031             // vmovdqu    ymm2, yword [rcx + rsi + 96]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm1
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_1266

LBB0_1267:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB0_1270
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x456ffdc5; BYTE $0x60 // vmovdqa    ymm0, yword 96[rbp] /* [rip + .LCPI0_7] */

LBB0_1269:
	LONG $0x0c6ffec5; BYTE $0x32   // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31   // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5               // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5               // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5               // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5               // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5               // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5               // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB0_1269

LBB0_1270:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_598
	JMP  LBB0_1533

LBB0_1271:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x60 // vmovdqa    ymm0, yword 96[rbp] /* [rip + .LCPI0_7] */

LBB0_1272:
	LONG $0x0c6ffec5; BYTE $0x32               // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31               // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x4c6ffec5; WORD $0x2032             // vmovdqu    ymm1, yword [rdx + rsi + 32]
	LONG $0x546ffec5; WORD $0x2031             // vmovdqu    ymm2, yword [rcx + rsi + 32]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm1
	LONG $0x4c6ffec5; WORD $0x4032             // vmovdqu    ymm1, yword [rdx + rsi + 64]
	LONG $0x546ffec5; WORD $0x4031             // vmovdqu    ymm2, yword [rcx + rsi + 64]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm1
	LONG $0x4c6ffec5; WORD $0x6032             // vmovdqu    ymm1, yword [rdx + rsi + 96]
	LONG $0x546ffec5; WORD $0x6031             // vmovdqu    ymm2, yword [rcx + rsi + 96]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm1
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_1272

LBB0_1273:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB0_1276
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x456ffdc5; BYTE $0x60 // vmovdqa    ymm0, yword 96[rbp] /* [rip + .LCPI0_7] */

LBB0_1275:
	LONG $0x0c6ffec5; BYTE $0x32   // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31   // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5               // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5               // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5               // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5               // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5               // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5               // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB0_1275

LBB0_1276:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_608
	JMP  LBB0_1533

LBB0_1277:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1278:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1278

LBB0_1279:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1282
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1281:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1281

LBB0_1282:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1283

LBB0_1287:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1288:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1288

LBB0_1289:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1292
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1291:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1291

LBB0_1292:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1293

LBB0_1297:
	WORD $0xff31 // xor    edi, edi

LBB0_1298:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1300
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1300:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1301

LBB0_1305:
	WORD $0xff31 // xor    edi, edi

LBB0_1306:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1308
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB0_1308:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1309

LBB0_1313:
	WORD $0xff31 // xor    edi, edi

LBB0_1314:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1316
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB0_1316:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1317

LBB0_1321:
	WORD $0xff31 // xor    edi, edi

LBB0_1322:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1324
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44effdc5; WORD $0x60fa             // vpxor    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1324:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1325

LBB0_1331:
	WORD $0xff31 // xor    edi, edi

LBB0_1332:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1334
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44effdc5; WORD $0x60fa             // vpxor    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1334:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1335

LBB0_1341:
	WORD $0xff31 // xor    edi, edi

LBB0_1342:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1344
	LONG $0x597de2c4; WORD $0x0845             // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI0_3] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1344:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1345

LBB0_1349:
	WORD $0xff31 // xor    edi, edi

LBB0_1350:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1352
	LONG $0x597de2c4; WORD $0x0845             // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI0_3] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1352:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1353

LBB0_1357:
	WORD $0xff31 // xor    edi, edi

LBB0_1358:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1360
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB0_1360:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1361

LBB0_1365:
	WORD $0xff31 // xor    edi, edi

LBB0_1366:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1368
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB0_1368:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1369

LBB0_1373:
	WORD $0xff31 // xor    edi, edi

LBB0_1374:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1376
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1376:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1377

LBB0_1381:
	WORD $0xff31 // xor    edi, edi

LBB0_1382:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1384
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB0_1384:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1385

LBB0_1389:
	WORD $0xff31 // xor    edi, edi

LBB0_1390:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1392
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB0_1392:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1393

LBB0_1397:
	WORD $0xff31 // xor    edi, edi

LBB0_1398:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1400
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB0_1400:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1401

LBB0_1405:
	WORD $0xff31 // xor    edi, edi

LBB0_1406:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1408
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB0_1408:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1409

LBB0_1413:
	WORD $0xff31 // xor    edi, edi

LBB0_1414:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1416
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB0_1416:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1417

LBB0_1421:
	WORD $0xf631 // xor    esi, esi

LBB0_1422:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1424
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x40               // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI0_5] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB0_1424:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1425

LBB0_1429:
	WORD $0xf631 // xor    esi, esi

LBB0_1430:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1432
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x40               // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI0_5] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB0_1432:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1433

LBB0_1437:
	WORD $0xff31 // xor    edi, edi

LBB0_1438:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1440
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1440:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1441

LBB0_1445:
	WORD $0xff31 // xor    edi, edi

LBB0_1446:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1448
	LONG $0x587de2c4; WORD $0x3045             // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI0_2] */
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44effdc5; WORD $0x60ba             // vpxor    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1448:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1449

LBB0_1455:
	WORD $0xff31 // xor    edi, edi

LBB0_1456:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1458
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1458:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1459

LBB0_1463:
	WORD $0xff31 // xor    edi, edi

LBB0_1464:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1466
	LONG $0x587de2c4; WORD $0x3045             // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI0_2] */
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44effdc5; WORD $0x60ba             // vpxor    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1466:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1467

LBB0_1473:
	WORD $0xff31 // xor    edi, edi

LBB0_1474:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1476
	LONG $0x587de2c4; WORD $0x3445             // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI0_4] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1476:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1477

LBB0_1483:
	WORD $0xff31 // xor    edi, edi

LBB0_1484:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1486
	LONG $0x587de2c4; WORD $0x3445             // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI0_4] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1486:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1487

LBB0_1493:
	WORD $0xff31 // xor    edi, edi

LBB0_1494:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1496
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB0_1496:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1497

LBB0_1501:
	WORD $0xff31 // xor    edi, edi

LBB0_1502:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1504
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB0_1504:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1505

LBB0_1509:
	WORD $0xff31 // xor    edi, edi

LBB0_1510:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1512
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB0_1512:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1533
	JMP  LBB0_1513

LBB0_1517:
	WORD $0xff31 // xor    edi, edi

LBB0_1518:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1520
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1520:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1521

LBB0_1525:
	WORD $0xff31 // xor    edi, edi

LBB0_1526:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1528
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1528:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1533
	JMP  LBB0_1529

DATA LCDATA2<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA2<>+0x008(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x010(SB)/8, $0x8000000000000000
DATA LCDATA2<>+0x018(SB)/8, $0x8000000000000000
DATA LCDATA2<>+0x020(SB)/8, $0x000000000c080400
DATA LCDATA2<>+0x028(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x030(SB)/8, $0x7fffffff80000000
DATA LCDATA2<>+0x038(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x040(SB)/8, $0x0d0c090805040100
DATA LCDATA2<>+0x048(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA2<>+0x050(SB)/8, $0x1d1c191815141110
DATA LCDATA2<>+0x058(SB)/8, $0x1f1e1d1c1d1c1918
DATA LCDATA2<>+0x060(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x068(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x070(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x078(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA2<>(SB), 8, $128

TEXT Â·_arithmetic_arr_scalar_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA2<>(SB), BP

	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB1_13
	LONG $0x01fe8040         // cmp    sil, 1
	JLE  LBB1_25
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB1_45
	LONG $0x04fe8040         // cmp    sil, 4
	JE   LBB1_53
	LONG $0x05fe8040         // cmp    sil, 5
	JNE  LBB1_1817
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_93
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_163
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_263
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_266
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_12
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_739
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_739

LBB1_12:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1137:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1139

LBB1_1138:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1138

LBB1_1139:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1140:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1140
	JMP  LBB1_1817

LBB1_13:
	LONG $0x08fe8040         // cmp    sil, 8
	JLE  LBB1_35
	LONG $0x09fe8040         // cmp    sil, 9
	JE   LBB1_61
	LONG $0x0bfe8040         // cmp    sil, 11
	JE   LBB1_69
	LONG $0x0cfe8040         // cmp    sil, 12
	JNE  LBB1_1817
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_100
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_168
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_269
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_272
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB1_446
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_748

LBB1_25:
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB1_77
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB1_1817
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_107
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_173
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_275
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_278
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_34
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_749
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_749

LBB1_34:
	WORD $0xf631 // xor    esi, esi

LBB1_1145:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1147

LBB1_1146:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1146

LBB1_1147:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1148:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1148
	JMP  LBB1_1817

LBB1_35:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB1_85
	LONG $0x08fe8040         // cmp    sil, 8
	JNE  LBB1_1817
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_114
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_178
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_281
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_284
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_44
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_752
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_752

LBB1_44:
	WORD $0xf631 // xor    esi, esi

LBB1_1153:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1155

LBB1_1154:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1154

LBB1_1155:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1156:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1156
	JMP  LBB1_1817

LBB1_45:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_121
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_183
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_287
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_290
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_52
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_755
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_755

LBB1_52:
	WORD $0xf631 // xor    esi, esi

LBB1_1161:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1163

LBB1_1162:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1162

LBB1_1163:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1164:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1164
	JMP  LBB1_1817

LBB1_53:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_128
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_188
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_293
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_296
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_60
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_758
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_758

LBB1_60:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1169:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1171

LBB1_1170:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1170

LBB1_1171:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1172:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1172
	JMP  LBB1_1817

LBB1_61:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_135
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_193
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_299
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_302
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_68
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_761
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_761

LBB1_68:
	WORD $0xf631 // xor    esi, esi

LBB1_1177:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1179

LBB1_1178:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1178

LBB1_1179:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1180:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1180
	JMP  LBB1_1817

LBB1_69:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_142
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_198
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_305
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_308
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_76
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_764
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_764

LBB1_76:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1185:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1187

LBB1_1186:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1186

LBB1_1187:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1188:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1188
	JMP  LBB1_1817

LBB1_77:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_149
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_203
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_311
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_314
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_84
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_767
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_767

LBB1_84:
	WORD $0xf631 // xor    esi, esi

LBB1_1193:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1195

LBB1_1194:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1194

LBB1_1195:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1196:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1196
	JMP  LBB1_1817

LBB1_85:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_156
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_208
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_317
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_320
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_92
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_770
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_770

LBB1_92:
	WORD $0xf631 // xor    esi, esi

LBB1_1201:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1203

LBB1_1202:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1202

LBB1_1203:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1204:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1204
	JMP  LBB1_1817

LBB1_93:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_213
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_323
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_326
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_99
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_773
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_773

LBB1_99:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1209:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1212
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_1211:
	LONG $0x0c7efac5; BYTE $0xca   // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1211

LBB1_1212:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB1_1817
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_1214:
	LONG $0x0c7efac5; BYTE $0xca               // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c             // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7efac5; WORD $0x08ca             // vmovq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x08 // vmovq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7efac5; WORD $0x10ca             // vmovq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x10 // vmovq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7efac5; WORD $0x18ca             // vmovq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x18 // vmovq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1214
	JMP  LBB1_1817

LBB1_100:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_218
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_329
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_332
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_106
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_776
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_776

LBB1_106:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1219:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1222
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_1221:
	LONG $0x0c7efac5; BYTE $0xca   // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1221

LBB1_1222:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB1_1817
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_1224:
	LONG $0x0c7efac5; BYTE $0xca               // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c             // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7efac5; WORD $0x08ca             // vmovq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x08 // vmovq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7efac5; WORD $0x10ca             // vmovq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x10 // vmovq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7efac5; WORD $0x18ca             // vmovq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x18 // vmovq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1224
	JMP  LBB1_1817

LBB1_107:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_223
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_335
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_338
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_113
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_779
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_779

LBB1_113:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1229:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1231

LBB1_1230:
	LONG $0x0c10fbc5; BYTE $0xca   // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5               // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1230

LBB1_1231:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1232:
	LONG $0x0c10fbc5; BYTE $0xca               // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c10fbc5; WORD $0x08ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c10fbc5; WORD $0x10ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c10fbc5; WORD $0x18ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1232
	JMP  LBB1_1817

LBB1_114:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_228
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_341
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_344
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_120
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_782
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_782

LBB1_120:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1237:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1239

LBB1_1238:
	LONG $0x0c10fbc5; BYTE $0xca   // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5               // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1238

LBB1_1239:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1240:
	LONG $0x0c10fbc5; BYTE $0xca               // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c10fbc5; WORD $0x08ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c10fbc5; WORD $0x10ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c10fbc5; WORD $0x18ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1240
	JMP  LBB1_1817

LBB1_121:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_233
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_347
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_350
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_127
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_785
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_785

LBB1_127:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1245:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1247

LBB1_1246:
	LONG $0x0c59fbc5; BYTE $0xca   // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1246

LBB1_1247:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1248:
	LONG $0x0c59fbc5; BYTE $0xca               // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c59fbc5; WORD $0x08ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 8]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c59fbc5; WORD $0x10ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 16]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c59fbc5; WORD $0x18ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 24]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1248
	JMP  LBB1_1817

LBB1_128:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_238
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_353
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_356
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_134
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_788
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_788

LBB1_134:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1253:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB1_1255

LBB1_1254:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB1_1254

LBB1_1255:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1256:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1256
	JMP  LBB1_1817

LBB1_135:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_243
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_359
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_362
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_141
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_791
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_791

LBB1_141:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1261:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1263

LBB1_1262:
	LONG $0x0c59fbc5; BYTE $0xca   // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1262

LBB1_1263:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1264:
	LONG $0x0c59fbc5; BYTE $0xca               // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c59fbc5; WORD $0x08ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 8]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c59fbc5; WORD $0x10ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 16]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c59fbc5; WORD $0x18ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 24]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1264
	JMP  LBB1_1817

LBB1_142:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_248
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_365
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_368
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_148
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_794
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_794

LBB1_148:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1269:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB1_1271

LBB1_1270:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB1_1270

LBB1_1271:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1272:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1272
	JMP  LBB1_1817

LBB1_149:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_253
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_371
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_374
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_155
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_797
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_797

LBB1_155:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1277:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1279

LBB1_1278:
	LONG $0x0c58fbc5; BYTE $0xca   // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1278

LBB1_1279:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1280:
	LONG $0x0c58fbc5; BYTE $0xca               // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c58fbc5; WORD $0x08ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 8]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 16]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 24]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1280
	JMP  LBB1_1817

LBB1_156:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_258
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_377
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_380
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_162
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_800
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_800

LBB1_162:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1285:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1287

LBB1_1286:
	LONG $0x0c58fbc5; BYTE $0xca   // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1286

LBB1_1287:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1288:
	LONG $0x0c58fbc5; BYTE $0xca               // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c58fbc5; WORD $0x08ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 8]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 16]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 24]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1288
	JMP  LBB1_1817

LBB1_163:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_383
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_167
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_803
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_803

LBB1_167:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1293:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1295

LBB1_1294:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1294

LBB1_1295:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1296:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1296
	JMP  LBB1_1817

LBB1_168:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_386
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_172
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_806
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_806

LBB1_172:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1301:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1303

LBB1_1302:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1302

LBB1_1303:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1304:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1304
	JMP  LBB1_1817

LBB1_173:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_389
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_177
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_809
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_809

LBB1_177:
	WORD $0xf631 // xor    esi, esi

LBB1_1309:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1311

LBB1_1310:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1310

LBB1_1311:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1312:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1312
	JMP  LBB1_1817

LBB1_178:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_392
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_182
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_812
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_812

LBB1_182:
	WORD $0xf631 // xor    esi, esi

LBB1_1317:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1319

LBB1_1318:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1318

LBB1_1319:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1320:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1320
	JMP  LBB1_1817

LBB1_183:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_395
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_187
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_815
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_815

LBB1_187:
	WORD $0xff31 // xor    edi, edi

LBB1_1079:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1081

LBB1_1080:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1080

LBB1_1081:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1082:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1082
	JMP  LBB1_1817

LBB1_188:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_398
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_192
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_817
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_817

LBB1_192:
	WORD $0xc931 // xor    ecx, ecx

LBB1_820:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_822
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB1_822:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1817

LBB1_823:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_823
	JMP  LBB1_1817

LBB1_193:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_401
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_197
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_824
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_824

LBB1_197:
	WORD $0xff31 // xor    edi, edi

LBB1_1089:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1091

LBB1_1090:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1090

LBB1_1091:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1092:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1092
	JMP  LBB1_1817

LBB1_198:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_404
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_202
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_826
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_826

LBB1_202:
	WORD $0xc931 // xor    ecx, ecx

LBB1_829:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_831
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB1_831:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1817

LBB1_832:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_832
	JMP  LBB1_1817

LBB1_203:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_407
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_207
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_833
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_833

LBB1_207:
	WORD $0xf631 // xor    esi, esi

LBB1_1325:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1327

LBB1_1326:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1326

LBB1_1327:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1328:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1328
	JMP  LBB1_1817

LBB1_208:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_410
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_212
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_836
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_836

LBB1_212:
	WORD $0xf631 // xor    esi, esi

LBB1_1333:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1335

LBB1_1334:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1334

LBB1_1335:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1336:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1336
	JMP  LBB1_1817

LBB1_213:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_413
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_217
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_839
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_839

LBB1_217:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1341:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1343

LBB1_1342:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1342

LBB1_1343:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1344:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1344
	JMP  LBB1_1817

LBB1_218:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_416
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB1_535
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_848

LBB1_223:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_419
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_227
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_849
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_849

LBB1_227:
	WORD $0xf631 // xor    esi, esi

LBB1_1349:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1351

LBB1_1350:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1350

LBB1_1351:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1352:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1352
	JMP  LBB1_1817

LBB1_228:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_422
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_232
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_852
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_852

LBB1_232:
	WORD $0xf631 // xor    esi, esi

LBB1_1357:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1359

LBB1_1358:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1358

LBB1_1359:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1360:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1360
	JMP  LBB1_1817

LBB1_233:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_425
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_237
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_855
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_855

LBB1_237:
	WORD $0xf631 // xor    esi, esi

LBB1_1365:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1367

LBB1_1366:
	LONG $0xf20c8b48 // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48 // imul    rcx, rax
	LONG $0xf00c8949 // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1366

LBB1_1367:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1368:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1368
	JMP  LBB1_1817

LBB1_238:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_428
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_242
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_858
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_858

LBB1_242:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1373:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1375

LBB1_1374:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1374

LBB1_1375:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1376:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1376
	JMP  LBB1_1817

LBB1_243:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_431
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_247
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_861
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_861

LBB1_247:
	WORD $0xf631 // xor    esi, esi

LBB1_1381:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1383

LBB1_1382:
	LONG $0xf20c8b48 // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48 // imul    rcx, rax
	LONG $0xf00c8949 // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1382

LBB1_1383:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1384:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1384
	JMP  LBB1_1817

LBB1_248:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_434
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_252
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_864
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_864

LBB1_252:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1389:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1391

LBB1_1390:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1390

LBB1_1391:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1392:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1392
	JMP  LBB1_1817

LBB1_253:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_437
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_257
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_867
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_867

LBB1_257:
	WORD $0xf631 // xor    esi, esi

LBB1_1397:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1399

LBB1_1398:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1398

LBB1_1399:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1400:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1400
	JMP  LBB1_1817

LBB1_258:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_440
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_262
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_870
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_870

LBB1_262:
	WORD $0xf631 // xor    esi, esi

LBB1_1405:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1407

LBB1_1406:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1406

LBB1_1407:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1408:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1408
	JMP  LBB1_1817

LBB1_263:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_265
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_873
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_873

LBB1_265:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1413:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1415

LBB1_1414:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1414

LBB1_1415:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1416:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1416
	JMP  LBB1_1817

LBB1_266:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_268
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_876
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_876

LBB1_268:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1421:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1423

LBB1_1422:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1422

LBB1_1423:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1424:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1424
	JMP  LBB1_1817

LBB1_269:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB1_567
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_885

LBB1_272:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_274
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_886
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_886

LBB1_274:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1429:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1431

LBB1_1430:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1430

LBB1_1431:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1432:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1432
	JMP  LBB1_1817

LBB1_275:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_277
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_889
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_889

LBB1_277:
	WORD $0xf631 // xor    esi, esi

LBB1_1437:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1439

LBB1_1438:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0xc729                 // sub    edi, eax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1438

LBB1_1439:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1440:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1440
	JMP  LBB1_1817

LBB1_278:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_280
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_892
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_892

LBB1_280:
	WORD $0xf631 // xor    esi, esi

LBB1_1445:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1447

LBB1_1446:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0xc729                 // sub    edi, eax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1446

LBB1_1447:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1448:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1448
	JMP  LBB1_1817

LBB1_281:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_283
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_895
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_895

LBB1_283:
	WORD $0xf631 // xor    esi, esi

LBB1_1453:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1455

LBB1_1454:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0xc729                 // sub    edi, eax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1454

LBB1_1455:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1456:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1456
	JMP  LBB1_1817

LBB1_284:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_286
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_898
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_898

LBB1_286:
	WORD $0xf631 // xor    esi, esi

LBB1_1461:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1463

LBB1_1462:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0xc729                 // sub    edi, eax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1462

LBB1_1463:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1464:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1464
	JMP  LBB1_1817

LBB1_287:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_289
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_901
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_901

LBB1_289:
	WORD $0xf631 // xor    esi, esi

LBB1_1469:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1471

LBB1_1470:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1470

LBB1_1471:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1472:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1472
	JMP  LBB1_1817

LBB1_290:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_292
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_904
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_904

LBB1_292:
	WORD $0xf631 // xor    esi, esi

LBB1_1477:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1479

LBB1_1478:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1478

LBB1_1479:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1480:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1480
	JMP  LBB1_1817

LBB1_293:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_295
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_907
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_907

LBB1_295:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1099:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1101

LBB1_1100:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB1_1100

LBB1_1101:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1817

LBB1_1102:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB1_1102
	JMP  LBB1_1817

LBB1_296:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_298
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_909
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_909

LBB1_298:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1485:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_1487
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB1_1487:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1817

LBB1_1488:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1488
	JMP  LBB1_1817

LBB1_299:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_301
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_912
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_912

LBB1_301:
	WORD $0xf631 // xor    esi, esi

LBB1_1493:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1495

LBB1_1494:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1494

LBB1_1495:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1496:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1496
	JMP  LBB1_1817

LBB1_302:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_304
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_915
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_915

LBB1_304:
	WORD $0xf631 // xor    esi, esi

LBB1_1501:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1503

LBB1_1502:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1502

LBB1_1503:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1504:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1504
	JMP  LBB1_1817

LBB1_305:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_307
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_918
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_918

LBB1_307:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1109:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1111

LBB1_1110:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB1_1110

LBB1_1111:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1817

LBB1_1112:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB1_1112
	JMP  LBB1_1817

LBB1_308:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_310
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_920
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_920

LBB1_310:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1509:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_1511
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB1_1511:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1817

LBB1_1512:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1512
	JMP  LBB1_1817

LBB1_311:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_313
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_923
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_923

LBB1_313:
	WORD $0xf631 // xor    esi, esi

LBB1_1517:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1519

LBB1_1518:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1518

LBB1_1519:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1520:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1520
	JMP  LBB1_1817

LBB1_314:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_316
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_926
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_926

LBB1_316:
	WORD $0xf631 // xor    esi, esi

LBB1_1525:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1527

LBB1_1526:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1526

LBB1_1527:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1528:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1528
	JMP  LBB1_1817

LBB1_317:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_319
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_929
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_929

LBB1_319:
	WORD $0xf631 // xor    esi, esi

LBB1_1533:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1535

LBB1_1534:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1534

LBB1_1535:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1536:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1536
	JMP  LBB1_1817

LBB1_320:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_322
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_932
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_932

LBB1_322:
	WORD $0xf631 // xor    esi, esi

LBB1_1541:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1543

LBB1_1542:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1542

LBB1_1543:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1544:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1544
	JMP  LBB1_1817

LBB1_323:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_325
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_935
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_935

LBB1_325:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1549:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1551

LBB1_1550:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1550

LBB1_1551:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1552:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1552
	JMP  LBB1_1817

LBB1_326:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_328
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_938
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_938

LBB1_328:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1557:
	WORD $0x8948; BYTE $0xce       // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6       // not    rsi
	WORD $0x0148; BYTE $0xc6       // add    rsi, rax
	WORD $0x8948; BYTE $0xc7       // mov    rdi, rax
	LONG $0x03e78348               // and    rdi, 3
	JE   LBB1_1560
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI1_2] */

LBB1_1559:
	LONG $0x0c6ef9c5; BYTE $0x8a   // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1559

LBB1_1560:
	LONG $0x03fe8348               // cmp    rsi, 3
	JB   LBB1_1817
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI1_2] */

LBB1_1562:
	LONG $0x0c6ef9c5; BYTE $0x8a               // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c             // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6ef9c5; WORD $0x048a             // vmovd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x04 // vmovd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6ef9c5; WORD $0x088a             // vmovd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x08 // vmovd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6ef9c5; WORD $0x0c8a             // vmovd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x0c // vmovd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1562
	JMP  LBB1_1817

LBB1_329:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_331
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_941
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_941

LBB1_331:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1567:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1569

LBB1_1568:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1568

LBB1_1569:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1570:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1570
	JMP  LBB1_1817

LBB1_332:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_334
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_944
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_944

LBB1_334:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1575:
	WORD $0x8948; BYTE $0xce       // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6       // not    rsi
	WORD $0x0148; BYTE $0xc6       // add    rsi, rax
	WORD $0x8948; BYTE $0xc7       // mov    rdi, rax
	LONG $0x03e78348               // and    rdi, 3
	JE   LBB1_1578
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI1_2] */

LBB1_1577:
	LONG $0x0c6ef9c5; BYTE $0x8a   // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1577

LBB1_1578:
	LONG $0x03fe8348               // cmp    rsi, 3
	JB   LBB1_1817
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI1_2] */

LBB1_1580:
	LONG $0x0c6ef9c5; BYTE $0x8a               // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c             // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6ef9c5; WORD $0x048a             // vmovd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x04 // vmovd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6ef9c5; WORD $0x088a             // vmovd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x08 // vmovd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6ef9c5; WORD $0x0c8a             // vmovd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x0c // vmovd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1580
	JMP  LBB1_1817

LBB1_335:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_337
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_947
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_947

LBB1_337:
	WORD $0xf631 // xor    esi, esi

LBB1_1585:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1587

LBB1_1586:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1586

LBB1_1587:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1588:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1588
	JMP  LBB1_1817

LBB1_338:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_340
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_950
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_950

LBB1_340:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1593:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1595

LBB1_1594:
	LONG $0x0c10fac5; BYTE $0x8a   // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5               // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1594

LBB1_1595:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1596:
	LONG $0x0c10fac5; BYTE $0x8a               // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c10fac5; WORD $0x048a             // vmovss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c10fac5; WORD $0x088a             // vmovss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c10fac5; WORD $0x0c8a             // vmovss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1596
	JMP  LBB1_1817

LBB1_341:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_343
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_953
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_953

LBB1_343:
	WORD $0xf631 // xor    esi, esi

LBB1_1601:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1603

LBB1_1602:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1602

LBB1_1603:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1604:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1604
	JMP  LBB1_1817

LBB1_344:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_346
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_956
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_956

LBB1_346:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1609:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1611

LBB1_1610:
	LONG $0x0c10fac5; BYTE $0x8a   // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5               // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1610

LBB1_1611:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1612:
	LONG $0x0c10fac5; BYTE $0x8a               // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c10fac5; WORD $0x048a             // vmovss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c10fac5; WORD $0x088a             // vmovss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c10fac5; WORD $0x0c8a             // vmovss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1612
	JMP  LBB1_1817

LBB1_347:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_349
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_959
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_959

LBB1_349:
	WORD $0xf631 // xor    esi, esi

LBB1_1617:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1619

LBB1_1618:
	LONG $0xf20c8b48 // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48 // imul    rcx, rax
	LONG $0xf00c8949 // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1618

LBB1_1619:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1620:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1620
	JMP  LBB1_1817

LBB1_350:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_352
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_962
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_962

LBB1_352:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1625:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1627

LBB1_1626:
	LONG $0x0c59fac5; BYTE $0x8a   // vmulss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1626

LBB1_1627:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1628:
	LONG $0x0c59fac5; BYTE $0x8a               // vmulss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c59fac5; WORD $0x048a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 4]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c59fac5; WORD $0x088a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 8]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c59fac5; WORD $0x0c8a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 12]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1628
	JMP  LBB1_1817

LBB1_353:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_355
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_965
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_965

LBB1_355:
	WORD $0xc931 // xor    ecx, ecx

LBB1_968:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_970
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB1_970:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1817

LBB1_971:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_971
	JMP  LBB1_1817

LBB1_356:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_358
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_972
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_972

LBB1_358:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1633:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1636
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1635:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1635

LBB1_1636:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB1_1817
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1638:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1638
	JMP  LBB1_1817

LBB1_359:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_361
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_975
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_975

LBB1_361:
	WORD $0xf631 // xor    esi, esi

LBB1_1643:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1645

LBB1_1644:
	LONG $0xf20c8b48 // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48 // imul    rcx, rax
	LONG $0xf00c8949 // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1644

LBB1_1645:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1646:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1646
	JMP  LBB1_1817

LBB1_362:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_364
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_978
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_978

LBB1_364:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1651:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1653

LBB1_1652:
	LONG $0x0c59fac5; BYTE $0x8a   // vmulss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1652

LBB1_1653:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1654:
	LONG $0x0c59fac5; BYTE $0x8a               // vmulss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c59fac5; WORD $0x048a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 4]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c59fac5; WORD $0x088a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 8]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c59fac5; WORD $0x0c8a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 12]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1654
	JMP  LBB1_1817

LBB1_365:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_367
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_981
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_981

LBB1_367:
	WORD $0xc931 // xor    ecx, ecx

LBB1_984:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_986
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB1_986:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1817

LBB1_987:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_987
	JMP  LBB1_1817

LBB1_368:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_370
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_988
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_988

LBB1_370:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1659:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1662
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1661:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1661

LBB1_1662:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB1_1817
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1664:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1664
	JMP  LBB1_1817

LBB1_371:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_373
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_991
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_991

LBB1_373:
	WORD $0xf631 // xor    esi, esi

LBB1_1669:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1671

LBB1_1670:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1670

LBB1_1671:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1672:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1672
	JMP  LBB1_1817

LBB1_374:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_376
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_994
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_994

LBB1_376:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1677:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1679

LBB1_1678:
	LONG $0x0c58fac5; BYTE $0x8a   // vaddss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1678

LBB1_1679:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1680:
	LONG $0x0c58fac5; BYTE $0x8a               // vaddss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c58fac5; WORD $0x048a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 4]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c58fac5; WORD $0x088a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 8]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0c8a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 12]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1680
	JMP  LBB1_1817

LBB1_377:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_379
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_997
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_997

LBB1_379:
	WORD $0xf631 // xor    esi, esi

LBB1_1685:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1687

LBB1_1686:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1686

LBB1_1687:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1688:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1688
	JMP  LBB1_1817

LBB1_380:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_382
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1000
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1000

LBB1_382:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1693:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1695

LBB1_1694:
	LONG $0x0c58fac5; BYTE $0x8a   // vaddss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1694

LBB1_1695:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1696:
	LONG $0x0c58fac5; BYTE $0x8a               // vaddss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c58fac5; WORD $0x048a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 4]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c58fac5; WORD $0x088a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 8]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0c8a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 12]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1696
	JMP  LBB1_1817

LBB1_383:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_385
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_1003
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_1003

LBB1_385:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1701:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1703

LBB1_1702:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1702

LBB1_1703:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1704:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1704
	JMP  LBB1_1817

LBB1_386:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB1_683
	WORD $0xc931                               // xor    ecx, ecx
	JMP  LBB1_1012

LBB1_389:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_391
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_1013
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_1013

LBB1_391:
	WORD $0xf631 // xor    esi, esi

LBB1_1709:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1711

LBB1_1710:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1710

LBB1_1711:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1712:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1712
	JMP  LBB1_1817

LBB1_392:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_394
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_1016
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_1016

LBB1_394:
	WORD $0xf631 // xor    esi, esi

LBB1_1717:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1719

LBB1_1718:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1718

LBB1_1719:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1720:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1720
	JMP  LBB1_1817

LBB1_395:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_397
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_1019
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_1019

LBB1_397:
	WORD $0xff31 // xor    edi, edi

LBB1_1119:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1121

LBB1_1120:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1120

LBB1_1121:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1122:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1122
	JMP  LBB1_1817

LBB1_398:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_400
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_1021
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_1021

LBB1_400:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1725:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1727

LBB1_1726:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1726

LBB1_1727:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1728:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1728
	JMP  LBB1_1817

LBB1_401:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_403
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_1024
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_1024

LBB1_403:
	WORD $0xff31 // xor    edi, edi

LBB1_1129:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1131

LBB1_1130:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1130

LBB1_1131:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1132:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1132
	JMP  LBB1_1817

LBB1_404:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_406
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_1026
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_1026

LBB1_406:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1733:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1735

LBB1_1734:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1734

LBB1_1735:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1817

LBB1_1736:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1736
	JMP  LBB1_1817

LBB1_407:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_409
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_1029
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_1029

LBB1_409:
	WORD $0xf631 // xor    esi, esi

LBB1_1741:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1743

LBB1_1742:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1742

LBB1_1743:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1744:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1744
	JMP  LBB1_1817

LBB1_410:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_412
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_1032
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_1032

LBB1_412:
	WORD $0xf631 // xor    esi, esi

LBB1_1749:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1751

LBB1_1750:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1750

LBB1_1751:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1752:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1752
	JMP  LBB1_1817

LBB1_413:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_415
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1035
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1035

LBB1_415:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1757:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1759

LBB1_1758:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1758

LBB1_1759:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1760:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1760
	JMP  LBB1_1817

LBB1_416:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_418
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1038
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1038

LBB1_418:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1765:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1767

LBB1_1766:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1766

LBB1_1767:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1768:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1768
	JMP  LBB1_1817

LBB1_419:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_421
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1041
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1041

LBB1_421:
	WORD $0xf631 // xor    esi, esi

LBB1_1773:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1775

LBB1_1774:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1774

LBB1_1775:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1776:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1776
	JMP  LBB1_1817

LBB1_422:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_424
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1044
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1044

LBB1_424:
	WORD $0xf631 // xor    esi, esi

LBB1_1781:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1783

LBB1_1782:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1782

LBB1_1783:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1784:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1784
	JMP  LBB1_1817

LBB1_425:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_427
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1047
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1047

LBB1_427:
	WORD $0xf631 // xor    esi, esi

LBB1_1789:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1791

LBB1_1790:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1790

LBB1_1791:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1792:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1792
	JMP  LBB1_1817

LBB1_428:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_430
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1050
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1050

LBB1_430:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1053:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1055
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1055:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1817

LBB1_1056:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1056
	JMP  LBB1_1817

LBB1_431:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_433
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1057
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1057

LBB1_433:
	WORD $0xf631 // xor    esi, esi

LBB1_1797:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1799

LBB1_1798:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1798

LBB1_1799:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1800:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1800
	JMP  LBB1_1817

LBB1_434:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_436
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1060
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1060

LBB1_436:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1063:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1065
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1065:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1817

LBB1_1066:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1066
	JMP  LBB1_1817

LBB1_437:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_439
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1067
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1067

LBB1_439:
	WORD $0xf631 // xor    esi, esi

LBB1_1805:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1807

LBB1_1806:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1806

LBB1_1807:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1808:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1808
	JMP  LBB1_1817

LBB1_440:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1817
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_442
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1070
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1070

LBB1_442:
	WORD $0xf631 // xor    esi, esi

LBB1_1813:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1815

LBB1_1814:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1814

LBB1_1815:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1817

LBB1_1816:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1816
	JMP  LBB1_1817

LBB1_446:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB1_742
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_744

LBB1_535:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0798d48         // lea    rdi, [rcx - 16]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x04eec148         // shr    rsi, 4
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	LONG $0x30ff8348         // cmp    rdi, 48
	JAE  LBB1_842
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_844

LBB1_567:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0xc0                   // and    ecx, -64
	LONG $0xc0798d48                           // lea    rdi, [rcx - 64]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x06eec148                           // shr    rsi, 6
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x03                   // and    edx, 3
	LONG $0xc0ff8148; WORD $0x0000; BYTE $0x00 // cmp    rdi, 192
	JAE  LBB1_879
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB1_881

LBB1_683:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0x80                   // and    ecx, -128
	LONG $0x80798d48                           // lea    rdi, [rcx - 128]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x07eec148                           // shr    rsi, 7
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x03                   // and    edx, 3
	LONG $0x80ff8148; WORD $0x0001; BYTE $0x00 // cmp    rdi, 384
	JAE  LBB1_1006
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB1_1008

LBB1_739:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1133
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_741:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_741
	JMP  LBB1_1134

LBB1_749:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1141
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_751:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_751
	JMP  LBB1_1142

LBB1_752:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1149
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_754:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_754
	JMP  LBB1_1150

LBB1_755:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1157
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_757:
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba64; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080ba8c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x00a0ba94407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x00c0ba9c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x00e0baa4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_757
	JMP  LBB1_1158

LBB1_758:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1165
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_760:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_760
	JMP  LBB1_1166

LBB1_761:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1173
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_763:
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba64; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080ba8c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x00a0ba94407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x00c0ba9c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x00e0baa4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_763
	JMP  LBB1_1174

LBB1_764:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1181
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_766:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_766
	JMP  LBB1_1182

LBB1_767:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1189
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_769:
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60ba             // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_769
	JMP  LBB1_1190

LBB1_770:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1197
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_772:
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60ba             // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_772
	JMP  LBB1_1198

LBB1_773:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1205
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_775:
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64effdc5; WORD $0x60fa             // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_775
	JMP  LBB1_1206

LBB1_776:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1215
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_778:
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64effdc5; WORD $0x60fa             // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_778
	JMP  LBB1_1216

LBB1_779:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1225
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_781:
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf06c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm5
	QUAD $0x000080f29410fdc5; BYTE $0x00       // vmovupd    ymm2, yword [rdx + 8*rsi + 128]
	QUAD $0x0000a0f29c10fdc5; BYTE $0x00       // vmovupd    ymm3, yword [rdx + 8*rsi + 160]
	QUAD $0x0000c0f2a410fdc5; BYTE $0x00       // vmovupd    ymm4, yword [rdx + 8*rsi + 192]
	QUAD $0x0000e0f2ac10fdc5; BYTE $0x00       // vmovupd    ymm5, yword [rdx + 8*rsi + 224]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	QUAD $0x0080f094117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 128], ymm2
	QUAD $0x00a0f09c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 160], ymm3
	QUAD $0x00c0f0a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 192], ymm4
	QUAD $0x00e0f0ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 224], ymm5
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_781
	JMP  LBB1_1226

LBB1_782:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1233
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_784:
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf06c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm5
	QUAD $0x000080f29410fdc5; BYTE $0x00       // vmovupd    ymm2, yword [rdx + 8*rsi + 128]
	QUAD $0x0000a0f29c10fdc5; BYTE $0x00       // vmovupd    ymm3, yword [rdx + 8*rsi + 160]
	QUAD $0x0000c0f2a410fdc5; BYTE $0x00       // vmovupd    ymm4, yword [rdx + 8*rsi + 192]
	QUAD $0x0000e0f2ac10fdc5; BYTE $0x00       // vmovupd    ymm5, yword [rdx + 8*rsi + 224]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	QUAD $0x0080f094117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 128], ymm2
	QUAD $0x00a0f09c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 160], ymm3
	QUAD $0x00c0f0a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 192], ymm4
	QUAD $0x00e0f0ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 224], ymm5
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_784
	JMP  LBB1_1234

LBB1_785:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1241
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_787:
	LONG $0x1459f5c5; BYTE $0xfa               // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20fa             // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40fa             // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x6c59f5c5; WORD $0x60fa             // vmulpd    ymm5, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa9459f5c5; BYTE $0x00       // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c59f5c5; BYTE $0x00       // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa459f5c5; BYTE $0x00       // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac59f5c5; BYTE $0x00       // vmulpd    ymm5, ymm1, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_787
	JMP  LBB1_1242

LBB1_788:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB1_1249
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0845 // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI1_3] */

LBB1_790:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_790
	JMP  LBB1_1250

LBB1_791:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1257
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_793:
	LONG $0x1459f5c5; BYTE $0xfa               // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20fa             // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40fa             // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x6c59f5c5; WORD $0x60fa             // vmulpd    ymm5, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa9459f5c5; BYTE $0x00       // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c59f5c5; BYTE $0x00       // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa459f5c5; BYTE $0x00       // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac59f5c5; BYTE $0x00       // vmulpd    ymm5, ymm1, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_793
	JMP  LBB1_1258

LBB1_794:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB1_1265
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0845 // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI1_3] */

LBB1_796:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_796
	JMP  LBB1_1266

LBB1_797:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1273
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_799:
	LONG $0x1458f5c5; BYTE $0xfa               // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20fa             // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40fa             // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x6c58f5c5; WORD $0x60fa             // vaddpd    ymm5, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa9458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_799
	JMP  LBB1_1274

LBB1_800:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1281
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_802:
	LONG $0x1458f5c5; BYTE $0xfa               // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20fa             // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40fa             // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x6c58f5c5; WORD $0x60fa             // vaddpd    ymm5, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa9458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_802
	JMP  LBB1_1282

LBB1_803:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1289
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_805:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_805
	JMP  LBB1_1290

LBB1_806:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1297
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_808:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_808
	JMP  LBB1_1298

LBB1_809:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1305
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_811:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_811
	JMP  LBB1_1306

LBB1_812:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1313
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_814:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_814
	JMP  LBB1_1314

LBB1_815:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc16ef9c5             // vmovd    xmm0, ecx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB1_1073
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB1_1075

LBB1_817:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x20 // vmovdqa    xmm0, oword 32[rbp] /* [rip + .LCPI1_6] */

LBB1_818:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_818
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_820

LBB1_824:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc16ef9c5             // vmovd    xmm0, ecx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB1_1083
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB1_1085

LBB1_826:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x20 // vmovdqa    xmm0, oword 32[rbp] /* [rip + .LCPI1_6] */

LBB1_827:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_827
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_829

LBB1_833:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1321
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_835:
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x603a             // vpaddb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_835
	JMP  LBB1_1322

LBB1_836:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1329
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_838:
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x603a             // vpaddb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_838
	JMP  LBB1_1330

LBB1_839:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1337
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_841:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_841
	JMP  LBB1_1338

LBB1_849:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1345
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_851:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_851
	JMP  LBB1_1346

LBB1_852:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1353
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_854:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_854
	JMP  LBB1_1354

LBB1_855:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1361
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_857:
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rdx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_857
	JMP  LBB1_1362

LBB1_858:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1369
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_860:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_860
	JMP  LBB1_1370

LBB1_861:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1377
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_863:
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rdx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_863
	JMP  LBB1_1378

LBB1_864:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1385
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_866:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_866
	JMP  LBB1_1386

LBB1_867:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1393
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_869:
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60fa             // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_869
	JMP  LBB1_1394

LBB1_870:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1401
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_872:
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60fa             // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_872
	JMP  LBB1_1402

LBB1_873:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1409
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_875:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_875
	JMP  LBB1_1410

LBB1_876:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1417
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_878:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_878
	JMP  LBB1_1418

LBB1_886:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1425
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_888:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_888
	JMP  LBB1_1426

LBB1_889:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1433
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_891:
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x407a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 64]
	LONG $0x546ffec5; WORD $0x607a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_891
	JMP  LBB1_1434

LBB1_892:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1441
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_894:
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x407a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 64]
	LONG $0x546ffec5; WORD $0x607a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_894
	JMP  LBB1_1442

LBB1_895:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1449
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_897:
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x407a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 64]
	LONG $0x546ffec5; WORD $0x607a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_897
	JMP  LBB1_1450

LBB1_898:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1457
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_900:
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x407a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 64]
	LONG $0x546ffec5; WORD $0x607a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_900
	JMP  LBB1_1458

LBB1_901:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1465
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_903:
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x207a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x407a             // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x607a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_903
	JMP  LBB1_1466

LBB1_904:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1473
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_906:
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x207a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x407a             // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x607a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_906
	JMP  LBB1_1474

LBB1_907:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB1_1093
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_1095

LBB1_909:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1481
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI1_5] */

LBB1_911:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_911
	JMP  LBB1_1482

LBB1_912:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1489
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_914:
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x207a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x407a             // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x607a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_914
	JMP  LBB1_1490

LBB1_915:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1497
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_917:
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x207a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x407a             // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x607a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_917
	JMP  LBB1_1498

LBB1_918:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB1_1103
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_1105

LBB1_920:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1505
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI1_5] */

LBB1_922:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_922
	JMP  LBB1_1506

LBB1_923:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1513
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_925:
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x207a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x407a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x607a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_925
	JMP  LBB1_1514

LBB1_926:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1521
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_928:
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x207a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x407a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x607a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_928
	JMP  LBB1_1522

LBB1_929:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1529
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_931:
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x207a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x407a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x607a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_931
	JMP  LBB1_1530

LBB1_932:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1537
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_934:
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x207a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x407a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x607a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_934
	JMP  LBB1_1538

LBB1_935:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1545
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_937:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_937
	JMP  LBB1_1546

LBB1_938:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1553
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3045 // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI1_2] */

LBB1_940:
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64effdc5; WORD $0x60ba             // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_940
	JMP  LBB1_1554

LBB1_941:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1563
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_943:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_943
	JMP  LBB1_1564

LBB1_944:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1571
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3045 // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI1_2] */

LBB1_946:
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64effdc5; WORD $0x60ba             // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_946
	JMP  LBB1_1572

LBB1_947:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1581
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_949:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_949
	JMP  LBB1_1582

LBB1_950:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1589
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_952:
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb06c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm5
	QUAD $0x000080b29410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdx + 4*rsi + 128]
	QUAD $0x0000a0b29c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdx + 4*rsi + 160]
	QUAD $0x0000c0b2a410fcc5; BYTE $0x00       // vmovups    ymm4, yword [rdx + 4*rsi + 192]
	QUAD $0x0000e0b2ac10fcc5; BYTE $0x00       // vmovups    ymm5, yword [rdx + 4*rsi + 224]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	QUAD $0x0080b094117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 128], ymm2
	QUAD $0x00a0b09c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 160], ymm3
	QUAD $0x00c0b0a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 192], ymm4
	QUAD $0x00e0b0ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 224], ymm5
	LONG $0x40c68348                           // add    rsi, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_952
	JMP  LBB1_1590

LBB1_953:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1597
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_955:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_955
	JMP  LBB1_1598

LBB1_956:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1605
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_958:
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb06c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm5
	QUAD $0x000080b29410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdx + 4*rsi + 128]
	QUAD $0x0000a0b29c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdx + 4*rsi + 160]
	QUAD $0x0000c0b2a410fcc5; BYTE $0x00       // vmovups    ymm4, yword [rdx + 4*rsi + 192]
	QUAD $0x0000e0b2ac10fcc5; BYTE $0x00       // vmovups    ymm5, yword [rdx + 4*rsi + 224]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	QUAD $0x0080b094117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 128], ymm2
	QUAD $0x00a0b09c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 160], ymm3
	QUAD $0x00c0b0a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 192], ymm4
	QUAD $0x00e0b0ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 224], ymm5
	LONG $0x40c68348                           // add    rsi, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_958
	JMP  LBB1_1606

LBB1_959:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1613
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_961:
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rdx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_961
	JMP  LBB1_1614

LBB1_962:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1621
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_964:
	LONG $0x1459f4c5; BYTE $0xba               // vmulps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20ba             // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40ba             // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x6c59f4c5; WORD $0x60ba             // vmulps    ymm5, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080ba9459f4c5; BYTE $0x00       // vmulps    ymm2, ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba9c59f4c5; BYTE $0x00       // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0baa459f4c5; BYTE $0x00       // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baac59f4c5; BYTE $0x00       // vmulps    ymm5, ymm1, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_964
	JMP  LBB1_1622

LBB1_965:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_966:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_966
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_968

LBB1_972:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1629
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3445 // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI1_4] */

LBB1_974:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_974
	JMP  LBB1_1630

LBB1_975:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1639
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_977:
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rdx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_977
	JMP  LBB1_1640

LBB1_978:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1647
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_980:
	LONG $0x1459f4c5; BYTE $0xba               // vmulps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20ba             // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40ba             // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x6c59f4c5; WORD $0x60ba             // vmulps    ymm5, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080ba9459f4c5; BYTE $0x00       // vmulps    ymm2, ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba9c59f4c5; BYTE $0x00       // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0baa459f4c5; BYTE $0x00       // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baac59f4c5; BYTE $0x00       // vmulps    ymm5, ymm1, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_980
	JMP  LBB1_1648

LBB1_981:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_982:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_982
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_984

LBB1_988:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1655
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3445 // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI1_4] */

LBB1_990:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_990
	JMP  LBB1_1656

LBB1_991:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1665
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_993:
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60fa             // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_993
	JMP  LBB1_1666

LBB1_994:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1673
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_996:
	LONG $0x1458f4c5; BYTE $0xba               // vaddps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20ba             // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40ba             // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x6c58f4c5; WORD $0x60ba             // vaddps    ymm5, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080ba9458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba9c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0baa458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_996
	JMP  LBB1_1674

LBB1_997:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1681
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_999:
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60fa             // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_999
	JMP  LBB1_1682

LBB1_1000:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1689
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_1002:
	LONG $0x1458f4c5; BYTE $0xba               // vaddps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20ba             // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40ba             // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x6c58f4c5; WORD $0x60ba             // vaddps    ymm5, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080ba9458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba9c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0baa458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1002
	JMP  LBB1_1690

LBB1_1003:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1697
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_1005:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1005
	JMP  LBB1_1698

LBB1_1013:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1705
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1015:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1015
	JMP  LBB1_1706

LBB1_1016:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1713
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1018:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1018
	JMP  LBB1_1714

LBB1_1019:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc16ef9c5             // vmovd    xmm0, ecx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB1_1113
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB1_1115

LBB1_1021:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1721
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_1023:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1023
	JMP  LBB1_1722

LBB1_1024:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc16ef9c5             // vmovd    xmm0, ecx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB1_1123
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB1_1125

LBB1_1026:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1729
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_1028:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1028
	JMP  LBB1_1730

LBB1_1029:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1737
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1031:
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x603a             // vpaddb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1031
	JMP  LBB1_1738

LBB1_1032:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1745
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1034:
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x603a             // vpaddb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1034
	JMP  LBB1_1746

LBB1_1035:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1753
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_1037:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1037
	JMP  LBB1_1754

LBB1_1038:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1761
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_1040:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1040
	JMP  LBB1_1762

LBB1_1041:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1769
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1043:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1043
	JMP  LBB1_1770

LBB1_1044:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1777
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1046:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1046
	JMP  LBB1_1778

LBB1_1047:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1785
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1049:
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba64; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080ba8c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x00a0ba94407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x00c0ba9c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x00e0baa4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1049
	JMP  LBB1_1786

LBB1_1050:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB1_1051:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_1051
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1053

LBB1_1057:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1793
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1059:
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba64; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080ba8c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x00a0ba94407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x00c0ba9c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x00e0baa4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1059
	JMP  LBB1_1794

LBB1_1060:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB1_1061:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_1061
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1063

LBB1_1067:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1801
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1069:
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60ba             // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1069
	JMP  LBB1_1802

LBB1_1070:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1809
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1072:
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60ba             // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1072
	JMP  LBB1_1810

LBB1_742:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_743:
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm0
	QUAD $0x00c0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm0
	QUAD $0x00e0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm0
	QUAD $0x0100b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 256], ymm0
	QUAD $0x0120b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 288], ymm0
	QUAD $0x0140b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 320], ymm0
	QUAD $0x0160b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 352], ymm0
	QUAD $0x0180b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 384], ymm0
	QUAD $0x01a0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 416], ymm0
	QUAD $0x01c0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 448], ymm0
	QUAD $0x01e0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 480], ymm0
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB1_743

LBB1_744:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_747
	LONG $0xb8348d49         // lea    rsi, [r8 + 4*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_746:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_746

LBB1_747:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817

LBB1_748:
	QUAD $0x000000008804c741 // mov    dword [r8 + 4*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB1_748
	JMP  LBB1_1817

LBB1_842:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_843:
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm0
	QUAD $0x00c0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm0
	QUAD $0x00e0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm0
	QUAD $0x0100f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 256], ymm0
	QUAD $0x0120f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 288], ymm0
	QUAD $0x0140f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 320], ymm0
	QUAD $0x0160f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 352], ymm0
	QUAD $0x0180f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 384], ymm0
	QUAD $0x01a0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 416], ymm0
	QUAD $0x01c0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 448], ymm0
	QUAD $0x01e0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 480], ymm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB1_843

LBB1_844:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_847
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_846:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_846

LBB1_847:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817

LBB1_848:
	QUAD $0x00000000c804c749 // mov    qword [r8 + 8*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB1_848
	JMP  LBB1_1817

LBB1_879:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_880:
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm0
	QUAD $0x008078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 128], ymm0
	QUAD $0x00a078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 160], ymm0
	QUAD $0x00c078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 192], ymm0
	QUAD $0x00e078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 224], ymm0
	QUAD $0x010078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 256], ymm0
	QUAD $0x012078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 288], ymm0
	QUAD $0x014078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 320], ymm0
	QUAD $0x016078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 352], ymm0
	QUAD $0x018078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 384], ymm0
	QUAD $0x01a078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 416], ymm0
	QUAD $0x01c078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 448], ymm0
	QUAD $0x01e078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 480], ymm0
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB1_880

LBB1_881:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_884
	LONG $0x78348d49         // lea    rsi, [r8 + 2*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_883:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_883

LBB1_884:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817

LBB1_885:
	LONG $0x04c74166; WORD $0x0048; BYTE $0x00 // mov    word [r8 + 2*rcx], 0
	LONG $0x01c18348                           // add    rcx, 1
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_885
	JMP  LBB1_1817

LBB1_1006:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_1007:
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm0
	QUAD $0x00c038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm0
	QUAD $0x00e038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm0
	QUAD $0x010038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 256], ymm0
	QUAD $0x012038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 288], ymm0
	QUAD $0x014038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 320], ymm0
	QUAD $0x016038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 352], ymm0
	QUAD $0x018038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 384], ymm0
	QUAD $0x01a038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 416], ymm0
	QUAD $0x01c038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 448], ymm0
	QUAD $0x01e038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 480], ymm0
	LONG $0x00c78148; WORD $0x0002; BYTE $0x00 // add    rdi, 512
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB1_1007

LBB1_1008:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_1011
	LONG $0x07348d4a         // lea    rsi, [rdi + r8]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_1010:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_1010

LBB1_1011:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817

LBB1_1012:
	LONG $0x0804c641; BYTE $0x00 // mov    byte [r8 + rcx], 0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1012

LBB1_1817:
	VZEROUPPER
	RET

LBB1_1073:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI1_7] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB1_1074:
	LONG $0x246ffec5; BYTE $0x32               // vmovdqu    ymm4, yword [rdx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2032             // vmovdqu    ymm4, yword [rdx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4032             // vmovdqu    ymm4, yword [rdx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6032             // vmovdqu    ymm4, yword [rdx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB1_1074

LBB1_1075:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB1_1078
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI1_7] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB1_1077:
	LONG $0x1c6ffec5; BYTE $0x32   // vmovdqu    ymm3, yword [rdx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_1077

LBB1_1078:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1817
	JMP  LBB1_1079

LBB1_1083:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI1_7] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB1_1084:
	LONG $0x246ffec5; BYTE $0x32               // vmovdqu    ymm4, yword [rdx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2032             // vmovdqu    ymm4, yword [rdx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4032             // vmovdqu    ymm4, yword [rdx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6032             // vmovdqu    ymm4, yword [rdx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB1_1084

LBB1_1085:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB1_1088
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI1_7] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB1_1087:
	LONG $0x1c6ffec5; BYTE $0x32   // vmovdqu    ymm3, yword [rdx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_1087

LBB1_1088:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1817
	JMP  LBB1_1089

LBB1_1093:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_1094:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_1094

LBB1_1095:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1098
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_1097:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_1097

LBB1_1098:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1099

LBB1_1103:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_1104:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_1104

LBB1_1105:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1108
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_1107:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_1107

LBB1_1108:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1109

LBB1_1113:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI1_7] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB1_1114:
	LONG $0x246ffec5; BYTE $0x32               // vmovdqu    ymm4, yword [rdx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2032             // vmovdqu    ymm4, yword [rdx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4032             // vmovdqu    ymm4, yword [rdx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6032             // vmovdqu    ymm4, yword [rdx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB1_1114

LBB1_1115:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB1_1118
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI1_7] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB1_1117:
	LONG $0x1c6ffec5; BYTE $0x32   // vmovdqu    ymm3, yword [rdx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_1117

LBB1_1118:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1817
	JMP  LBB1_1119

LBB1_1123:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI1_7] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB1_1124:
	LONG $0x246ffec5; BYTE $0x32               // vmovdqu    ymm4, yword [rdx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2032             // vmovdqu    ymm4, yword [rdx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4032             // vmovdqu    ymm4, yword [rdx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6032             // vmovdqu    ymm4, yword [rdx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB1_1124

LBB1_1125:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB1_1128
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI1_7] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB1_1127:
	LONG $0x1c6ffec5; BYTE $0x32   // vmovdqu    ymm3, yword [rdx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_1127

LBB1_1128:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1817
	JMP  LBB1_1129

LBB1_1133:
	WORD $0xff31 // xor    edi, edi

LBB1_1134:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1136
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1136:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1137

LBB1_1141:
	WORD $0xff31 // xor    edi, edi

LBB1_1142:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1144
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1144:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1145

LBB1_1149:
	WORD $0xff31 // xor    edi, edi

LBB1_1150:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1152
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1152:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1153

LBB1_1157:
	WORD $0xff31 // xor    edi, edi

LBB1_1158:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1160
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba44; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1160:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1161

LBB1_1165:
	WORD $0xff31 // xor    edi, edi

LBB1_1166:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1168
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB1_1168:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1169

LBB1_1173:
	WORD $0xff31 // xor    edi, edi

LBB1_1174:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1176
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba44; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1176:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1177

LBB1_1181:
	WORD $0xff31 // xor    edi, edi

LBB1_1182:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1184
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB1_1184:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1185

LBB1_1189:
	WORD $0xff31 // xor    edi, edi

LBB1_1190:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1192
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60ba             // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1192:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1193

LBB1_1197:
	WORD $0xff31 // xor    edi, edi

LBB1_1198:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1200
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60ba             // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1200:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1201

LBB1_1205:
	WORD $0xff31 // xor    edi, edi

LBB1_1206:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1208
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44effdc5; WORD $0x60fa             // vpxor    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1208:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1209

LBB1_1215:
	WORD $0xff31 // xor    edi, edi

LBB1_1216:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1218
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44effdc5; WORD $0x60fa             // vpxor    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1218:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1219

LBB1_1225:
	WORD $0xf631 // xor    esi, esi

LBB1_1226:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1228
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xc95cd5c5                           // vsubpd    ymm1, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf04c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm1

LBB1_1228:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1229

LBB1_1233:
	WORD $0xf631 // xor    esi, esi

LBB1_1234:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1236
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xc95cd5c5                           // vsubpd    ymm1, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf04c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm1

LBB1_1236:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1237

LBB1_1241:
	WORD $0xff31 // xor    edi, edi

LBB1_1242:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1244
	LONG $0x1459f5c5; BYTE $0xfa               // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20fa             // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40fa             // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x4c59f5c5; WORD $0x60fa             // vmulpd    ymm1, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB1_1244:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1245

LBB1_1249:
	WORD $0xff31 // xor    edi, edi

LBB1_1250:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1252
	LONG $0x597de2c4; WORD $0x0845             // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI1_3] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1252:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1253

LBB1_1257:
	WORD $0xff31 // xor    edi, edi

LBB1_1258:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1260
	LONG $0x1459f5c5; BYTE $0xfa               // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20fa             // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40fa             // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x4c59f5c5; WORD $0x60fa             // vmulpd    ymm1, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB1_1260:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1261

LBB1_1265:
	WORD $0xff31 // xor    edi, edi

LBB1_1266:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1268
	LONG $0x597de2c4; WORD $0x0845             // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI1_3] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1268:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1269

LBB1_1273:
	WORD $0xff31 // xor    edi, edi

LBB1_1274:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1276
	LONG $0x1458f5c5; BYTE $0xfa               // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20fa             // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40fa             // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x4c58f5c5; WORD $0x60fa             // vaddpd    ymm1, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB1_1276:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1277

LBB1_1281:
	WORD $0xff31 // xor    edi, edi

LBB1_1282:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1284
	LONG $0x1458f5c5; BYTE $0xfa               // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20fa             // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40fa             // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x4c58f5c5; WORD $0x60fa             // vaddpd    ymm1, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB1_1284:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1285

LBB1_1289:
	WORD $0xff31 // xor    edi, edi

LBB1_1290:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1292
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1292:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1293

LBB1_1297:
	WORD $0xff31 // xor    edi, edi

LBB1_1298:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1300
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1300:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1301

LBB1_1305:
	WORD $0xff31 // xor    edi, edi

LBB1_1306:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1308
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1308:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1309

LBB1_1313:
	WORD $0xff31 // xor    edi, edi

LBB1_1314:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1316
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1316:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1317

LBB1_1321:
	WORD $0xff31 // xor    edi, edi

LBB1_1322:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1324
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x603a             // vpaddb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1324:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1325

LBB1_1329:
	WORD $0xff31 // xor    edi, edi

LBB1_1330:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1332
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x603a             // vpaddb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1332:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1333

LBB1_1337:
	WORD $0xff31 // xor    edi, edi

LBB1_1338:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1340
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1340:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1341

LBB1_1345:
	WORD $0xff31 // xor    edi, edi

LBB1_1346:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1348
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1348:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1349

LBB1_1353:
	WORD $0xff31 // xor    edi, edi

LBB1_1354:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1356
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1356:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1357

LBB1_1361:
	WORD $0xff31 // xor    edi, edi

LBB1_1362:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1364
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1364:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1365

LBB1_1369:
	WORD $0xff31 // xor    edi, edi

LBB1_1370:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1372
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB1_1372:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1373

LBB1_1377:
	WORD $0xff31 // xor    edi, edi

LBB1_1378:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1380
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1380:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1381

LBB1_1385:
	WORD $0xff31 // xor    edi, edi

LBB1_1386:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1388
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB1_1388:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1389

LBB1_1393:
	WORD $0xff31 // xor    edi, edi

LBB1_1394:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1396
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60fa             // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1396:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1397

LBB1_1401:
	WORD $0xff31 // xor    edi, edi

LBB1_1402:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1404
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60fa             // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1404:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1405

LBB1_1409:
	WORD $0xff31 // xor    edi, edi

LBB1_1410:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1412
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1412:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1413

LBB1_1417:
	WORD $0xff31 // xor    edi, edi

LBB1_1418:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1420
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1420:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1421

LBB1_1425:
	WORD $0xff31 // xor    edi, edi

LBB1_1426:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1428
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1428:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1429

LBB1_1433:
	WORD $0xff31 // xor    edi, edi

LBB1_1434:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1436
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1436:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1437

LBB1_1441:
	WORD $0xff31 // xor    edi, edi

LBB1_1442:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1444
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1444:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1445

LBB1_1449:
	WORD $0xff31 // xor    edi, edi

LBB1_1450:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1452
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1452:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1453

LBB1_1457:
	WORD $0xff31 // xor    edi, edi

LBB1_1458:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1460
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1460:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1461

LBB1_1465:
	WORD $0xff31 // xor    edi, edi

LBB1_1466:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1468
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x207a             // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1468:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1469

LBB1_1473:
	WORD $0xff31 // xor    edi, edi

LBB1_1474:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1476
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x207a             // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1476:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1477

LBB1_1481:
	WORD $0xf631 // xor    esi, esi

LBB1_1482:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1484
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x40               // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_5] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB1_1484:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1485

LBB1_1489:
	WORD $0xff31 // xor    edi, edi

LBB1_1490:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1492
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x207a             // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1492:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1493

LBB1_1497:
	WORD $0xff31 // xor    edi, edi

LBB1_1498:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1500
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x207a             // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1500:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1501

LBB1_1505:
	WORD $0xf631 // xor    esi, esi

LBB1_1506:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1508
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x40               // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_5] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB1_1508:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1509

LBB1_1513:
	WORD $0xff31 // xor    edi, edi

LBB1_1514:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1516
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x207a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1516:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1517

LBB1_1521:
	WORD $0xff31 // xor    edi, edi

LBB1_1522:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1524
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x207a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1524:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1525

LBB1_1529:
	WORD $0xff31 // xor    edi, edi

LBB1_1530:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1532
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x207a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1532:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1533

LBB1_1537:
	WORD $0xff31 // xor    edi, edi

LBB1_1538:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1540
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x207a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1540:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1541

LBB1_1545:
	WORD $0xff31 // xor    edi, edi

LBB1_1546:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1548
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1548:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1549

LBB1_1553:
	WORD $0xff31 // xor    edi, edi

LBB1_1554:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1556
	LONG $0x587de2c4; WORD $0x3045             // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI1_2] */
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44effdc5; WORD $0x60ba             // vpxor    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1556:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1557

LBB1_1563:
	WORD $0xff31 // xor    edi, edi

LBB1_1564:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1566
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1566:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1567

LBB1_1571:
	WORD $0xff31 // xor    edi, edi

LBB1_1572:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1574
	LONG $0x587de2c4; WORD $0x3045             // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI1_2] */
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44effdc5; WORD $0x60ba             // vpxor    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1574:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1575

LBB1_1581:
	WORD $0xff31 // xor    edi, edi

LBB1_1582:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1584
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1584:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1585

LBB1_1589:
	WORD $0xf631 // xor    esi, esi

LBB1_1590:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1592
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xc95cd4c5                           // vsubps    ymm1, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb04c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm1

LBB1_1592:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1593

LBB1_1597:
	WORD $0xff31 // xor    edi, edi

LBB1_1598:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1600
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1600:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1601

LBB1_1605:
	WORD $0xf631 // xor    esi, esi

LBB1_1606:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1608
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xc95cd4c5                           // vsubps    ymm1, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb04c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm1

LBB1_1608:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1609

LBB1_1613:
	WORD $0xff31 // xor    edi, edi

LBB1_1614:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1616
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1616:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1617

LBB1_1621:
	WORD $0xff31 // xor    edi, edi

LBB1_1622:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1624
	LONG $0x1459f4c5; BYTE $0xba               // vmulps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20ba             // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40ba             // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x4c59f4c5; WORD $0x60ba             // vmulps    ymm1, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB1_1624:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1625

LBB1_1629:
	WORD $0xff31 // xor    edi, edi

LBB1_1630:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1632
	LONG $0x587de2c4; WORD $0x3445             // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI1_4] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1632:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1633

LBB1_1639:
	WORD $0xff31 // xor    edi, edi

LBB1_1640:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1642
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1642:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1643

LBB1_1647:
	WORD $0xff31 // xor    edi, edi

LBB1_1648:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1650
	LONG $0x1459f4c5; BYTE $0xba               // vmulps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20ba             // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40ba             // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x4c59f4c5; WORD $0x60ba             // vmulps    ymm1, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB1_1650:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1651

LBB1_1655:
	WORD $0xff31 // xor    edi, edi

LBB1_1656:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1658
	LONG $0x587de2c4; WORD $0x3445             // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI1_4] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1658:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1659

LBB1_1665:
	WORD $0xff31 // xor    edi, edi

LBB1_1666:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1668
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60fa             // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1668:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1669

LBB1_1673:
	WORD $0xff31 // xor    edi, edi

LBB1_1674:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1676
	LONG $0x1458f4c5; BYTE $0xba               // vaddps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20ba             // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40ba             // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x4c58f4c5; WORD $0x60ba             // vaddps    ymm1, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB1_1676:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1677

LBB1_1681:
	WORD $0xff31 // xor    edi, edi

LBB1_1682:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1684
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60fa             // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1684:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1685

LBB1_1689:
	WORD $0xff31 // xor    edi, edi

LBB1_1690:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1692
	LONG $0x1458f4c5; BYTE $0xba               // vaddps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20ba             // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40ba             // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x4c58f4c5; WORD $0x60ba             // vaddps    ymm1, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB1_1692:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1693

LBB1_1697:
	WORD $0xff31 // xor    edi, edi

LBB1_1698:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1700
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1700:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1701

LBB1_1705:
	WORD $0xff31 // xor    edi, edi

LBB1_1706:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1708
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1708:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1709

LBB1_1713:
	WORD $0xff31 // xor    edi, edi

LBB1_1714:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1716
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1716:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1717

LBB1_1721:
	WORD $0xff31 // xor    edi, edi

LBB1_1722:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1724
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB1_1724:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1725

LBB1_1729:
	WORD $0xff31 // xor    edi, edi

LBB1_1730:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1732
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB1_1732:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1817
	JMP  LBB1_1733

LBB1_1737:
	WORD $0xff31 // xor    edi, edi

LBB1_1738:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1740
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x603a             // vpaddb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1740:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1741

LBB1_1745:
	WORD $0xff31 // xor    edi, edi

LBB1_1746:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1748
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x603a             // vpaddb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1748:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1749

LBB1_1753:
	WORD $0xff31 // xor    edi, edi

LBB1_1754:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1756
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1756:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1757

LBB1_1761:
	WORD $0xff31 // xor    edi, edi

LBB1_1762:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1764
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1764:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1817
	JMP  LBB1_1765

LBB1_1769:
	WORD $0xff31 // xor    edi, edi

LBB1_1770:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1772
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1772:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1773

LBB1_1777:
	WORD $0xff31 // xor    edi, edi

LBB1_1778:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1780
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1780:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1781

LBB1_1785:
	WORD $0xff31 // xor    edi, edi

LBB1_1786:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1788
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba44; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1788:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1789

LBB1_1793:
	WORD $0xff31 // xor    edi, edi

LBB1_1794:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1796
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba44; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1796:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1797

LBB1_1801:
	WORD $0xff31 // xor    edi, edi

LBB1_1802:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1804
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60ba             // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1804:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1805

LBB1_1809:
	WORD $0xff31 // xor    edi, edi

LBB1_1810:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1812
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60ba             // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1812:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1817
	JMP  LBB1_1813

DATA LCDATA3<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA3<>+0x008(SB)/8, $0x7fffffffffffffff
DATA LCDATA3<>+0x010(SB)/8, $0x8000000000000000
DATA LCDATA3<>+0x018(SB)/8, $0x8000000000000000
DATA LCDATA3<>+0x020(SB)/8, $0x000000000c080400
DATA LCDATA3<>+0x028(SB)/8, $0x0000000000000000
DATA LCDATA3<>+0x030(SB)/8, $0x7fffffff80000000
DATA LCDATA3<>+0x038(SB)/8, $0x0000000000000000
DATA LCDATA3<>+0x040(SB)/8, $0x0d0c090805040100
DATA LCDATA3<>+0x048(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA3<>+0x050(SB)/8, $0x1d1c191815141110
DATA LCDATA3<>+0x058(SB)/8, $0x1f1e1d1c1d1c1918
DATA LCDATA3<>+0x060(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x068(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x070(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x078(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA3<>(SB), 8, $128

TEXT Â·_arithmetic_scalar_arr_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA3<>(SB), BP

	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB2_13
	LONG $0x01fe8040         // cmp    sil, 1
	JLE  LBB2_25
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB2_45
	LONG $0x04fe8040         // cmp    sil, 4
	JE   LBB2_53
	LONG $0x05fe8040         // cmp    sil, 5
	JNE  LBB2_1817
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_93
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_163
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_263
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_266
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_12
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_739
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_739

LBB2_12:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1137:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1139

LBB2_1138:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1138

LBB2_1139:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1140:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1140
	JMP  LBB2_1817

LBB2_13:
	LONG $0x08fe8040         // cmp    sil, 8
	JLE  LBB2_35
	LONG $0x09fe8040         // cmp    sil, 9
	JE   LBB2_61
	LONG $0x0bfe8040         // cmp    sil, 11
	JE   LBB2_69
	LONG $0x0cfe8040         // cmp    sil, 12
	JNE  LBB2_1817
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_100
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_168
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_269
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_272
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB2_446
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_748

LBB2_25:
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB2_77
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB2_1817
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_107
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_173
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_275
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_278
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_34
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_749
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_749

LBB2_34:
	WORD $0xf631 // xor    esi, esi

LBB2_1145:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1147

LBB2_1146:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1146

LBB2_1147:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1817

LBB2_1148:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1148
	JMP  LBB2_1817

LBB2_35:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB2_85
	LONG $0x08fe8040         // cmp    sil, 8
	JNE  LBB2_1817
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_114
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_178
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_281
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_284
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_44
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_752
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_752

LBB2_44:
	WORD $0xf631 // xor    esi, esi

LBB2_1153:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1155

LBB2_1154:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1154

LBB2_1155:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1817

LBB2_1156:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1156
	JMP  LBB2_1817

LBB2_45:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_121
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_183
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_287
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_290
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_52
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_755
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_755

LBB2_52:
	WORD $0xf631 // xor    esi, esi

LBB2_1161:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1163

LBB2_1162:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1162

LBB2_1163:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1164:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1164
	JMP  LBB2_1817

LBB2_53:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_128
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_188
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_293
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_296
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_60
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_758
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_758

LBB2_60:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1169:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1171

LBB2_1170:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1170

LBB2_1171:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1172:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1172
	JMP  LBB2_1817

LBB2_61:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_135
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_193
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_299
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_302
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_68
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_761
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_761

LBB2_68:
	WORD $0xf631 // xor    esi, esi

LBB2_1177:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1179

LBB2_1178:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1178

LBB2_1179:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1180:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1180
	JMP  LBB2_1817

LBB2_69:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_142
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_198
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_305
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_308
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_76
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_764
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_764

LBB2_76:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1185:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1187

LBB2_1186:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1186

LBB2_1187:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1188:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1188
	JMP  LBB2_1817

LBB2_77:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_149
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_203
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_311
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_314
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_84
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_767
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_767

LBB2_84:
	WORD $0xf631 // xor    esi, esi

LBB2_1193:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1195

LBB2_1194:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1194

LBB2_1195:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1196:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1196
	JMP  LBB2_1817

LBB2_85:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_156
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_208
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_317
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_320
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_92
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_770
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_770

LBB2_92:
	WORD $0xf631 // xor    esi, esi

LBB2_1201:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1203

LBB2_1202:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1202

LBB2_1203:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1204:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1204
	JMP  LBB2_1817

LBB2_93:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_213
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_323
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_326
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_99
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_773
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_773

LBB2_99:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1209:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1212
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_1211:
	LONG $0x0c7efac5; BYTE $0xca   // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1211

LBB2_1212:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB2_1817
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_1214:
	LONG $0x0c7efac5; BYTE $0xca               // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c             // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7efac5; WORD $0x08ca             // vmovq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x08 // vmovq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7efac5; WORD $0x10ca             // vmovq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x10 // vmovq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7efac5; WORD $0x18ca             // vmovq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x18 // vmovq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_1214
	JMP  LBB2_1817

LBB2_100:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_218
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_329
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_332
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_106
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_776
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_776

LBB2_106:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1219:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1222
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_1221:
	LONG $0x0c7efac5; BYTE $0xca   // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1221

LBB2_1222:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB2_1817
	LONG $0x456ff9c5; BYTE $0x10 // vmovdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_1224:
	LONG $0x0c7efac5; BYTE $0xca               // vmovq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc80c             // vmovq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7efac5; WORD $0x08ca             // vmovq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x08 // vmovq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7efac5; WORD $0x10ca             // vmovq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x10 // vmovq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7efac5; WORD $0x18ca             // vmovq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0xd679c1c4; WORD $0xc84c; BYTE $0x18 // vmovq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_1224
	JMP  LBB2_1817

LBB2_107:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_223
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_335
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_338
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_113
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_779
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_779

LBB2_113:
	WORD $0xd231 // xor    edx, edx

LBB2_1229:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1231

LBB2_1230:
	LONG $0x0c5cfbc5; BYTE $0xd1   // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1230

LBB2_1231:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1232:
	LONG $0x0c5cfbc5; BYTE $0xd1               // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c5cfbc5; WORD $0x08d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c5cfbc5; WORD $0x10d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c5cfbc5; WORD $0x18d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1232
	JMP  LBB2_1817

LBB2_114:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_228
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_341
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_344
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_120
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_782
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_782

LBB2_120:
	WORD $0xd231 // xor    edx, edx

LBB2_1237:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1239

LBB2_1238:
	LONG $0x0c5cfbc5; BYTE $0xd1   // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1238

LBB2_1239:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1240:
	LONG $0x0c5cfbc5; BYTE $0xd1               // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c5cfbc5; WORD $0x08d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c5cfbc5; WORD $0x10d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c5cfbc5; WORD $0x18d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1240
	JMP  LBB2_1817

LBB2_121:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_233
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_347
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_350
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_127
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_785
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_785

LBB2_127:
	WORD $0xd231 // xor    edx, edx

LBB2_1245:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1247

LBB2_1246:
	LONG $0x0c59fbc5; BYTE $0xd1   // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1246

LBB2_1247:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1248:
	LONG $0x0c59fbc5; BYTE $0xd1               // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c59fbc5; WORD $0x08d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c59fbc5; WORD $0x10d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c59fbc5; WORD $0x18d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1248
	JMP  LBB2_1817

LBB2_128:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_238
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_353
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_356
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_134
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_788
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_788

LBB2_134:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1253:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB2_1255

LBB2_1254:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB2_1254

LBB2_1255:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1256:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1256
	JMP  LBB2_1817

LBB2_135:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_243
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_359
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_362
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_141
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_791
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_791

LBB2_141:
	WORD $0xd231 // xor    edx, edx

LBB2_1261:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1263

LBB2_1262:
	LONG $0x0c59fbc5; BYTE $0xd1   // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1262

LBB2_1263:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1264:
	LONG $0x0c59fbc5; BYTE $0xd1               // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c59fbc5; WORD $0x08d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c59fbc5; WORD $0x10d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c59fbc5; WORD $0x18d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1264
	JMP  LBB2_1817

LBB2_142:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_248
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_365
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_368
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_148
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_794
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_794

LBB2_148:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1269:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB2_1271

LBB2_1270:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB2_1270

LBB2_1271:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1272:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1272
	JMP  LBB2_1817

LBB2_149:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_253
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_371
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_374
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_155
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_797
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_797

LBB2_155:
	WORD $0xd231 // xor    edx, edx

LBB2_1277:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1279

LBB2_1278:
	LONG $0x0c58fbc5; BYTE $0xd1   // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1278

LBB2_1279:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1280:
	LONG $0x0c58fbc5; BYTE $0xd1               // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c58fbc5; WORD $0x08d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1280
	JMP  LBB2_1817

LBB2_156:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_258
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_377
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_380
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_162
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_800
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_800

LBB2_162:
	WORD $0xd231 // xor    edx, edx

LBB2_1285:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1287

LBB2_1286:
	LONG $0x0c58fbc5; BYTE $0xd1   // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1286

LBB2_1287:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1288:
	LONG $0x0c58fbc5; BYTE $0xd1               // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c58fbc5; WORD $0x08d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1288
	JMP  LBB2_1817

LBB2_163:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_383
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_167
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB2_803
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB2_803

LBB2_167:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1293:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1295

LBB2_1294:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1294

LBB2_1295:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1296:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1296
	JMP  LBB2_1817

LBB2_168:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_386
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_172
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB2_806
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB2_806

LBB2_172:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1301:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1303

LBB2_1302:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1302

LBB2_1303:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1304:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1304
	JMP  LBB2_1817

LBB2_173:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_389
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_177
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_809
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_809

LBB2_177:
	WORD $0xf631 // xor    esi, esi

LBB2_1309:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1311

LBB2_1310:
	WORD $0xc289             // mov    edx, eax
	WORD $0x142a; BYTE $0x31 // sub    dl, byte [rcx + rsi]
	LONG $0x30148841         // mov    byte [r8 + rsi], dl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1310

LBB2_1311:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1312:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1312
	JMP  LBB2_1817

LBB2_178:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_392
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_182
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_812
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_812

LBB2_182:
	WORD $0xf631 // xor    esi, esi

LBB2_1317:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1319

LBB2_1318:
	WORD $0xc289             // mov    edx, eax
	WORD $0x142a; BYTE $0x31 // sub    dl, byte [rcx + rsi]
	LONG $0x30148841         // mov    byte [r8 + rsi], dl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1318

LBB2_1319:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1320:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1320
	JMP  LBB2_1817

LBB2_183:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_395
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_187
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_815
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_815

LBB2_187:
	WORD $0xff31 // xor    edi, edi

LBB2_1079:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1081

LBB2_1080:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1080

LBB2_1081:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1082:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1082
	JMP  LBB2_1817

LBB2_188:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_398
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_192
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_817
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_817

LBB2_192:
	WORD $0xc931 // xor    ecx, ecx

LBB2_820:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_822
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB2_822:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1817

LBB2_823:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_823
	JMP  LBB2_1817

LBB2_193:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_401
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_197
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_824
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_824

LBB2_197:
	WORD $0xff31 // xor    edi, edi

LBB2_1089:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1091

LBB2_1090:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1090

LBB2_1091:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1092:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1092
	JMP  LBB2_1817

LBB2_198:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_404
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_202
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_826
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_826

LBB2_202:
	WORD $0xc931 // xor    ecx, ecx

LBB2_829:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_831
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB2_831:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1817

LBB2_832:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_832
	JMP  LBB2_1817

LBB2_203:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_407
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_207
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_833
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_833

LBB2_207:
	WORD $0xf631 // xor    esi, esi

LBB2_1325:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1327

LBB2_1326:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1326

LBB2_1327:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1328:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1328
	JMP  LBB2_1817

LBB2_208:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_410
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_212
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_836
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_836

LBB2_212:
	WORD $0xf631 // xor    esi, esi

LBB2_1333:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1335

LBB2_1334:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1334

LBB2_1335:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1336:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1336
	JMP  LBB2_1817

LBB2_213:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_413
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_217
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_839
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_839

LBB2_217:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1341:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1343

LBB2_1342:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1342

LBB2_1343:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1344:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1344
	JMP  LBB2_1817

LBB2_218:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_416
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB2_535
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_848

LBB2_223:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_419
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_227
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_849
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_849

LBB2_227:
	WORD $0xf631 // xor    esi, esi

LBB2_1349:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1351

LBB2_1350:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1350

LBB2_1351:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1817

LBB2_1352:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1352
	JMP  LBB2_1817

LBB2_228:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_422
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_232
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_852
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_852

LBB2_232:
	WORD $0xf631 // xor    esi, esi

LBB2_1357:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1359

LBB2_1358:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1358

LBB2_1359:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1817

LBB2_1360:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1360
	JMP  LBB2_1817

LBB2_233:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_425
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_237
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_855
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_855

LBB2_237:
	WORD $0xf631 // xor    esi, esi

LBB2_1365:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1367

LBB2_1366:
	LONG $0xf1148b48 // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48 // imul    rdx, rax
	LONG $0xf0148949 // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1366

LBB2_1367:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1368:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1368
	JMP  LBB2_1817

LBB2_238:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_428
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_242
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_858
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_858

LBB2_242:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1373:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1375

LBB2_1374:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1374

LBB2_1375:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1376:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1376
	JMP  LBB2_1817

LBB2_243:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_431
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_247
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_861
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_861

LBB2_247:
	WORD $0xf631 // xor    esi, esi

LBB2_1381:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1383

LBB2_1382:
	LONG $0xf1148b48 // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48 // imul    rdx, rax
	LONG $0xf0148949 // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1382

LBB2_1383:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1384:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1384
	JMP  LBB2_1817

LBB2_248:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_434
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_252
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_864
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_864

LBB2_252:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1389:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1391

LBB2_1390:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1390

LBB2_1391:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1392:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1392
	JMP  LBB2_1817

LBB2_253:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_437
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_257
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_867
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_867

LBB2_257:
	WORD $0xf631 // xor    esi, esi

LBB2_1397:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1399

LBB2_1398:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1398

LBB2_1399:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1400:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1400
	JMP  LBB2_1817

LBB2_258:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_440
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1817
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_262
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_870
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_870

LBB2_262:
	WORD $0xf631 // xor    esi, esi

LBB2_1405:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1407

LBB2_1406:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1406

LBB2_1407:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1408:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1408
	JMP  LBB2_1817

LBB2_263:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_265
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_873
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_873

LBB2_265:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1413:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1415

LBB2_1414:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1414

LBB2_1415:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1416:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1416
	JMP  LBB2_1817

LBB2_266:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_268
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_876
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_876

LBB2_268:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1421:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1423

LBB2_1422:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1422

LBB2_1423:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1424:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1424
	JMP  LBB2_1817

LBB2_269:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB2_567
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_885

LBB2_272:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_274
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_886
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_886

LBB2_274:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1429:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1431

LBB2_1430:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1430

LBB2_1431:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1432:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1432
	JMP  LBB2_1817

LBB2_275:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_277
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_889
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_889

LBB2_277:
	WORD $0xf631 // xor    esi, esi

LBB2_1437:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1439

LBB2_1438:
	WORD $0xc789                 // mov    edi, eax
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1438

LBB2_1439:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1440:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1440
	JMP  LBB2_1817

LBB2_278:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_280
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_892
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_892

LBB2_280:
	WORD $0xf631 // xor    esi, esi

LBB2_1445:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1447

LBB2_1446:
	WORD $0xc789                 // mov    edi, eax
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1446

LBB2_1447:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1448:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1448
	JMP  LBB2_1817

LBB2_281:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_283
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_895
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_895

LBB2_283:
	WORD $0xf631 // xor    esi, esi

LBB2_1453:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1455

LBB2_1454:
	WORD $0xc789                 // mov    edi, eax
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1454

LBB2_1455:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1456:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1456
	JMP  LBB2_1817

LBB2_284:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_286
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_898
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_898

LBB2_286:
	WORD $0xf631 // xor    esi, esi

LBB2_1461:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1463

LBB2_1462:
	WORD $0xc789                 // mov    edi, eax
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1462

LBB2_1463:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1464:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1464
	JMP  LBB2_1817

LBB2_287:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_289
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_901
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_901

LBB2_289:
	WORD $0xf631 // xor    esi, esi

LBB2_1469:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1471

LBB2_1470:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1470

LBB2_1471:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1472:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1472
	JMP  LBB2_1817

LBB2_290:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_292
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_904
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_904

LBB2_292:
	WORD $0xf631 // xor    esi, esi

LBB2_1477:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1479

LBB2_1478:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1478

LBB2_1479:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1480:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1480
	JMP  LBB2_1817

LBB2_293:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_295
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_907
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_907

LBB2_295:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1099:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1101

LBB2_1100:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB2_1100

LBB2_1101:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1817

LBB2_1102:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB2_1102
	JMP  LBB2_1817

LBB2_296:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_298
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_909
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_909

LBB2_298:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1485:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB2_1487
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB2_1487:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1817

LBB2_1488:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1488
	JMP  LBB2_1817

LBB2_299:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_301
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_912
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_912

LBB2_301:
	WORD $0xf631 // xor    esi, esi

LBB2_1493:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1495

LBB2_1494:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1494

LBB2_1495:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1496:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1496
	JMP  LBB2_1817

LBB2_302:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_304
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_915
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_915

LBB2_304:
	WORD $0xf631 // xor    esi, esi

LBB2_1501:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1503

LBB2_1502:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1502

LBB2_1503:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1504:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1504
	JMP  LBB2_1817

LBB2_305:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_307
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_918
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_918

LBB2_307:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1109:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1111

LBB2_1110:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB2_1110

LBB2_1111:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1817

LBB2_1112:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB2_1112
	JMP  LBB2_1817

LBB2_308:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_310
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_920
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_920

LBB2_310:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1509:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB2_1511
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB2_1511:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1817

LBB2_1512:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1512
	JMP  LBB2_1817

LBB2_311:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_313
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_923
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_923

LBB2_313:
	WORD $0xf631 // xor    esi, esi

LBB2_1517:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1519

LBB2_1518:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1518

LBB2_1519:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1520:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1520
	JMP  LBB2_1817

LBB2_314:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_316
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_926
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_926

LBB2_316:
	WORD $0xf631 // xor    esi, esi

LBB2_1525:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1527

LBB2_1526:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1526

LBB2_1527:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1528:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1528
	JMP  LBB2_1817

LBB2_317:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_319
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_929
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_929

LBB2_319:
	WORD $0xf631 // xor    esi, esi

LBB2_1533:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1535

LBB2_1534:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1534

LBB2_1535:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1536:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1536
	JMP  LBB2_1817

LBB2_320:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_322
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_932
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_932

LBB2_322:
	WORD $0xf631 // xor    esi, esi

LBB2_1541:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1543

LBB2_1542:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1542

LBB2_1543:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1544:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1544
	JMP  LBB2_1817

LBB2_323:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_325
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_935
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_935

LBB2_325:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1549:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1551

LBB2_1550:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1550

LBB2_1551:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1552:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1552
	JMP  LBB2_1817

LBB2_326:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_328
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_938
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_938

LBB2_328:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1557:
	WORD $0x8948; BYTE $0xce       // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6       // not    rsi
	WORD $0x0148; BYTE $0xc6       // add    rsi, rax
	WORD $0x8948; BYTE $0xc7       // mov    rdi, rax
	LONG $0x03e78348               // and    rdi, 3
	JE   LBB2_1560
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI2_2] */

LBB2_1559:
	LONG $0x0c6ef9c5; BYTE $0x8a   // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1559

LBB2_1560:
	LONG $0x03fe8348               // cmp    rsi, 3
	JB   LBB2_1817
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI2_2] */

LBB2_1562:
	LONG $0x0c6ef9c5; BYTE $0x8a               // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c             // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6ef9c5; WORD $0x048a             // vmovd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x04 // vmovd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6ef9c5; WORD $0x088a             // vmovd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x08 // vmovd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6ef9c5; WORD $0x0c8a             // vmovd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x0c // vmovd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_1562
	JMP  LBB2_1817

LBB2_329:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_331
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_941
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_941

LBB2_331:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1567:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1569

LBB2_1568:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1568

LBB2_1569:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1570:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1570
	JMP  LBB2_1817

LBB2_332:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_334
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_944
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_944

LBB2_334:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1575:
	WORD $0x8948; BYTE $0xce       // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6       // not    rsi
	WORD $0x0148; BYTE $0xc6       // add    rsi, rax
	WORD $0x8948; BYTE $0xc7       // mov    rdi, rax
	LONG $0x03e78348               // and    rdi, 3
	JE   LBB2_1578
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI2_2] */

LBB2_1577:
	LONG $0x0c6ef9c5; BYTE $0x8a   // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5               // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1577

LBB2_1578:
	LONG $0x03fe8348               // cmp    rsi, 3
	JB   LBB2_1817
	LONG $0x5879e2c4; WORD $0x3045 // vpbroadcastd    xmm0, dword 48[rbp] /* [rip + .LCPI2_2] */

LBB2_1580:
	LONG $0x0c6ef9c5; BYTE $0x8a               // vmovd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x880c             // vmovd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6ef9c5; WORD $0x048a             // vmovd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x04 // vmovd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6ef9c5; WORD $0x088a             // vmovd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x08 // vmovd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6ef9c5; WORD $0x0c8a             // vmovd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8eff1c5                           // vpxor    xmm1, xmm1, xmm0
	LONG $0x7e79c1c4; WORD $0x884c; BYTE $0x0c // vmovd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_1580
	JMP  LBB2_1817

LBB2_335:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_337
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_947
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_947

LBB2_337:
	WORD $0xf631 // xor    esi, esi

LBB2_1585:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1587

LBB2_1586:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1586

LBB2_1587:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1817

LBB2_1588:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1588
	JMP  LBB2_1817

LBB2_338:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_340
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_950
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_950

LBB2_340:
	WORD $0xd231 // xor    edx, edx

LBB2_1593:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1595

LBB2_1594:
	LONG $0x0c5cfac5; BYTE $0x91   // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1594

LBB2_1595:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1596:
	LONG $0x0c5cfac5; BYTE $0x91               // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c5cfac5; WORD $0x0491             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c5cfac5; WORD $0x0891             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c5cfac5; WORD $0x0c91             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1596
	JMP  LBB2_1817

LBB2_341:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_343
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_953
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_953

LBB2_343:
	WORD $0xf631 // xor    esi, esi

LBB2_1601:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1603

LBB2_1602:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1602

LBB2_1603:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1817

LBB2_1604:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1604
	JMP  LBB2_1817

LBB2_344:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_346
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_956
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_956

LBB2_346:
	WORD $0xd231 // xor    edx, edx

LBB2_1609:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1611

LBB2_1610:
	LONG $0x0c5cfac5; BYTE $0x91   // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1610

LBB2_1611:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1612:
	LONG $0x0c5cfac5; BYTE $0x91               // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c5cfac5; WORD $0x0491             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c5cfac5; WORD $0x0891             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c5cfac5; WORD $0x0c91             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1612
	JMP  LBB2_1817

LBB2_347:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_349
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_959
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_959

LBB2_349:
	WORD $0xf631 // xor    esi, esi

LBB2_1617:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1619

LBB2_1618:
	LONG $0xf1148b48 // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48 // imul    rdx, rax
	LONG $0xf0148949 // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1618

LBB2_1619:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1620:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1620
	JMP  LBB2_1817

LBB2_350:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_352
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_962
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_962

LBB2_352:
	WORD $0xd231 // xor    edx, edx

LBB2_1625:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1627

LBB2_1626:
	LONG $0x0c59fac5; BYTE $0x91   // vmulss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1626

LBB2_1627:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1628:
	LONG $0x0c59fac5; BYTE $0x91               // vmulss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c59fac5; WORD $0x0491             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c59fac5; WORD $0x0891             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c59fac5; WORD $0x0c91             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1628
	JMP  LBB2_1817

LBB2_353:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_355
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_965
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_965

LBB2_355:
	WORD $0xc931 // xor    ecx, ecx

LBB2_968:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_970
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB2_970:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1817

LBB2_971:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_971
	JMP  LBB2_1817

LBB2_356:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_358
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_972
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_972

LBB2_358:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1633:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1636
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1635:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1635

LBB2_1636:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB2_1817
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1638:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1638
	JMP  LBB2_1817

LBB2_359:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_361
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_975
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_975

LBB2_361:
	WORD $0xf631 // xor    esi, esi

LBB2_1643:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1645

LBB2_1644:
	LONG $0xf1148b48 // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48 // imul    rdx, rax
	LONG $0xf0148949 // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1644

LBB2_1645:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1646:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1646
	JMP  LBB2_1817

LBB2_362:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_364
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_978
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_978

LBB2_364:
	WORD $0xd231 // xor    edx, edx

LBB2_1651:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1653

LBB2_1652:
	LONG $0x0c59fac5; BYTE $0x91   // vmulss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1652

LBB2_1653:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1654:
	LONG $0x0c59fac5; BYTE $0x91               // vmulss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c59fac5; WORD $0x0491             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c59fac5; WORD $0x0891             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c59fac5; WORD $0x0c91             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1654
	JMP  LBB2_1817

LBB2_365:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_367
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_981
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_981

LBB2_367:
	WORD $0xc931 // xor    ecx, ecx

LBB2_984:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_986
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB2_986:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1817

LBB2_987:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_987
	JMP  LBB2_1817

LBB2_368:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_370
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_988
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_988

LBB2_370:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1659:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1662
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1661:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1661

LBB2_1662:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB2_1817
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1664:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1664
	JMP  LBB2_1817

LBB2_371:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_373
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_991
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_991

LBB2_373:
	WORD $0xf631 // xor    esi, esi

LBB2_1669:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1671

LBB2_1670:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1670

LBB2_1671:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1672:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1672
	JMP  LBB2_1817

LBB2_374:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_376
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_994
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_994

LBB2_376:
	WORD $0xd231 // xor    edx, edx

LBB2_1677:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1679

LBB2_1678:
	LONG $0x0c58fac5; BYTE $0x91   // vaddss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1678

LBB2_1679:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1680:
	LONG $0x0c58fac5; BYTE $0x91               // vaddss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c58fac5; WORD $0x0491             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c58fac5; WORD $0x0891             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0c91             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1680
	JMP  LBB2_1817

LBB2_377:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_379
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_997
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_997

LBB2_379:
	WORD $0xf631 // xor    esi, esi

LBB2_1685:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1687

LBB2_1686:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1686

LBB2_1687:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1688:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1688
	JMP  LBB2_1817

LBB2_380:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_382
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1000
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1000

LBB2_382:
	WORD $0xd231 // xor    edx, edx

LBB2_1693:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1695

LBB2_1694:
	LONG $0x0c58fac5; BYTE $0x91   // vaddss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1694

LBB2_1695:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1696:
	LONG $0x0c58fac5; BYTE $0x91               // vaddss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c58fac5; WORD $0x0491             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c58fac5; WORD $0x0891             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0c91             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1696
	JMP  LBB2_1817

LBB2_383:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_385
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB2_1003
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB2_1003

LBB2_385:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1701:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1703

LBB2_1702:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1702

LBB2_1703:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1704:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1704
	JMP  LBB2_1817

LBB2_386:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB2_683
	WORD $0xc931                               // xor    ecx, ecx
	JMP  LBB2_1012

LBB2_389:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_391
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_1013
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_1013

LBB2_391:
	WORD $0xf631 // xor    esi, esi

LBB2_1709:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1711

LBB2_1710:
	WORD $0xc289             // mov    edx, eax
	WORD $0x142a; BYTE $0x31 // sub    dl, byte [rcx + rsi]
	LONG $0x30148841         // mov    byte [r8 + rsi], dl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1710

LBB2_1711:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1712:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1712
	JMP  LBB2_1817

LBB2_392:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_394
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_1016
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_1016

LBB2_394:
	WORD $0xf631 // xor    esi, esi

LBB2_1717:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1719

LBB2_1718:
	WORD $0xc289             // mov    edx, eax
	WORD $0x142a; BYTE $0x31 // sub    dl, byte [rcx + rsi]
	LONG $0x30148841         // mov    byte [r8 + rsi], dl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1718

LBB2_1719:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1720:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1720
	JMP  LBB2_1817

LBB2_395:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_397
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_1019
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_1019

LBB2_397:
	WORD $0xff31 // xor    edi, edi

LBB2_1119:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1121

LBB2_1120:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1120

LBB2_1121:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1122:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1122
	JMP  LBB2_1817

LBB2_398:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_400
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB2_1021
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB2_1021

LBB2_400:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1725:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1727

LBB2_1726:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1726

LBB2_1727:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1728:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1728
	JMP  LBB2_1817

LBB2_401:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_403
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_1024
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_1024

LBB2_403:
	WORD $0xff31 // xor    edi, edi

LBB2_1129:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1131

LBB2_1130:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1130

LBB2_1131:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1132:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1132
	JMP  LBB2_1817

LBB2_404:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_406
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB2_1026
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB2_1026

LBB2_406:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1733:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1735

LBB2_1734:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1734

LBB2_1735:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1817

LBB2_1736:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1736
	JMP  LBB2_1817

LBB2_407:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_409
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_1029
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_1029

LBB2_409:
	WORD $0xf631 // xor    esi, esi

LBB2_1741:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1743

LBB2_1742:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1742

LBB2_1743:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1744:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1744
	JMP  LBB2_1817

LBB2_410:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_412
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_1032
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_1032

LBB2_412:
	WORD $0xf631 // xor    esi, esi

LBB2_1749:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1751

LBB2_1750:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1750

LBB2_1751:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1752:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1752
	JMP  LBB2_1817

LBB2_413:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_415
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_1035
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_1035

LBB2_415:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1757:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1759

LBB2_1758:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1758

LBB2_1759:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1760:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1760
	JMP  LBB2_1817

LBB2_416:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_418
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_1038
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_1038

LBB2_418:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1765:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1767

LBB2_1766:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1766

LBB2_1767:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1768:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1768
	JMP  LBB2_1817

LBB2_419:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_421
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1041
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1041

LBB2_421:
	WORD $0xf631 // xor    esi, esi

LBB2_1773:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1775

LBB2_1774:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1774

LBB2_1775:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1817

LBB2_1776:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1776
	JMP  LBB2_1817

LBB2_422:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_424
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1044
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1044

LBB2_424:
	WORD $0xf631 // xor    esi, esi

LBB2_1781:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1783

LBB2_1782:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1782

LBB2_1783:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1817

LBB2_1784:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1784
	JMP  LBB2_1817

LBB2_425:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_427
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1047
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1047

LBB2_427:
	WORD $0xf631 // xor    esi, esi

LBB2_1789:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1791

LBB2_1790:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1790

LBB2_1791:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1792:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1792
	JMP  LBB2_1817

LBB2_428:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_430
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_1050
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_1050

LBB2_430:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1053:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1055
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1055:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1817

LBB2_1056:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1056
	JMP  LBB2_1817

LBB2_431:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_433
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1057
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1057

LBB2_433:
	WORD $0xf631 // xor    esi, esi

LBB2_1797:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1799

LBB2_1798:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1798

LBB2_1799:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1800:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1800
	JMP  LBB2_1817

LBB2_434:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_436
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_1060
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_1060

LBB2_436:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1063:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1065
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1065:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1817

LBB2_1066:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1066
	JMP  LBB2_1817

LBB2_437:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_439
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1067
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1067

LBB2_439:
	WORD $0xf631 // xor    esi, esi

LBB2_1805:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1807

LBB2_1806:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1806

LBB2_1807:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1808:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1808
	JMP  LBB2_1817

LBB2_440:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1817
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_442
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1070
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1070

LBB2_442:
	WORD $0xf631 // xor    esi, esi

LBB2_1813:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1815

LBB2_1814:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1814

LBB2_1815:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1817

LBB2_1816:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1816
	JMP  LBB2_1817

LBB2_446:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB2_742
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_744

LBB2_535:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0798d48         // lea    rdi, [rcx - 16]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x04eec148         // shr    rsi, 4
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x03 // and    edx, 3
	LONG $0x30ff8348         // cmp    rdi, 48
	JAE  LBB2_842
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_844

LBB2_567:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0xc0                   // and    ecx, -64
	LONG $0xc0798d48                           // lea    rdi, [rcx - 64]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x06eec148                           // shr    rsi, 6
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x03                   // and    edx, 3
	LONG $0xc0ff8148; WORD $0x0000; BYTE $0x00 // cmp    rdi, 192
	JAE  LBB2_879
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB2_881

LBB2_683:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0x80                   // and    ecx, -128
	LONG $0x80798d48                           // lea    rdi, [rcx - 128]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x07eec148                           // shr    rsi, 7
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x03                   // and    edx, 3
	LONG $0x80ff8148; WORD $0x0001; BYTE $0x00 // cmp    rdi, 384
	JAE  LBB2_1006
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB2_1008

LBB2_739:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1133
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_741:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_741
	JMP  LBB2_1134

LBB2_749:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1141
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_751:
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60b9             // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_751
	JMP  LBB2_1142

LBB2_752:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1149
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_754:
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60b9             // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_754
	JMP  LBB2_1150

LBB2_755:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1157
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_757:
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb964; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080b98c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x00a0b994407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x00c0b99c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x00e0b9a4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_757
	JMP  LBB2_1158

LBB2_758:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1165
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_760:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_760
	JMP  LBB2_1166

LBB2_761:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1173
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_763:
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb964; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080b98c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x00a0b994407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x00c0b99c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x00e0b9a4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_763
	JMP  LBB2_1174

LBB2_764:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1181
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_766:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_766
	JMP  LBB2_1182

LBB2_767:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1189
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_769:
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60b9             // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_769
	JMP  LBB2_1190

LBB2_770:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1197
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_772:
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60b9             // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_772
	JMP  LBB2_1198

LBB2_773:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1205
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_775:
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64effdc5; WORD $0x60fa             // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_775
	JMP  LBB2_1206

LBB2_776:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1215
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_778:
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64effdc5; WORD $0x60fa             // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_778
	JMP  LBB2_1216

LBB2_779:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1225
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_781:
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c5cf5c5; WORD $0x60f9             // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9945cf5c5; BYTE $0x00       // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c5cf5c5; BYTE $0x00       // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a45cf5c5; BYTE $0x00       // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac5cf5c5; BYTE $0x00       // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_781
	JMP  LBB2_1226

LBB2_782:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1233
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_784:
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c5cf5c5; WORD $0x60f9             // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9945cf5c5; BYTE $0x00       // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c5cf5c5; BYTE $0x00       // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a45cf5c5; BYTE $0x00       // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac5cf5c5; BYTE $0x00       // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_784
	JMP  LBB2_1234

LBB2_785:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1241
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_787:
	LONG $0x1459f5c5; BYTE $0xf9               // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20f9             // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40f9             // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c59f5c5; WORD $0x60f9             // vmulpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f99459f5c5; BYTE $0x00       // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c59f5c5; BYTE $0x00       // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a459f5c5; BYTE $0x00       // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac59f5c5; BYTE $0x00       // vmulpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_787
	JMP  LBB2_1242

LBB2_788:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB2_1249
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0845 // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI2_3] */

LBB2_790:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_790
	JMP  LBB2_1250

LBB2_791:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1257
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_793:
	LONG $0x1459f5c5; BYTE $0xf9               // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20f9             // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40f9             // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c59f5c5; WORD $0x60f9             // vmulpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f99459f5c5; BYTE $0x00       // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c59f5c5; BYTE $0x00       // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a459f5c5; BYTE $0x00       // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac59f5c5; BYTE $0x00       // vmulpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_793
	JMP  LBB2_1258

LBB2_794:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB2_1265
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0845 // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI2_3] */

LBB2_796:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_796
	JMP  LBB2_1266

LBB2_797:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1273
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_799:
	LONG $0x1458f5c5; BYTE $0xf9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20f9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40f9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c58f5c5; WORD $0x60f9             // vaddpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f99458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_799
	JMP  LBB2_1274

LBB2_800:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1281
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_802:
	LONG $0x1458f5c5; BYTE $0xf9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20f9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40f9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c58f5c5; WORD $0x60f9             // vaddpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f99458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_802
	JMP  LBB2_1282

LBB2_803:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1289
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_805:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_805
	JMP  LBB2_1290

LBB2_806:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1297
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_808:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_808
	JMP  LBB2_1298

LBB2_809:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1305
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_811:
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x6039             // vpsubb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_811
	JMP  LBB2_1306

LBB2_812:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1313
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_814:
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x6039             // vpsubb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_814
	JMP  LBB2_1314

LBB2_815:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB2_1073
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB2_1075

LBB2_817:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x20 // vmovdqa    xmm0, oword 32[rbp] /* [rip + .LCPI2_6] */

LBB2_818:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_818
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_820

LBB2_824:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB2_1083
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB2_1085

LBB2_826:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x20 // vmovdqa    xmm0, oword 32[rbp] /* [rip + .LCPI2_6] */

LBB2_827:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_827
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_829

LBB2_833:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1321
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_835:
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x6039             // vpaddb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_835
	JMP  LBB2_1322

LBB2_836:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1329
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_838:
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x6039             // vpaddb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_838
	JMP  LBB2_1330

LBB2_839:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1337
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_841:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_841
	JMP  LBB2_1338

LBB2_849:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1345
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_851:
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60f9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_851
	JMP  LBB2_1346

LBB2_852:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1353
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_854:
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60f9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_854
	JMP  LBB2_1354

LBB2_855:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1361
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_857:
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rcx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_857
	JMP  LBB2_1362

LBB2_858:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1369
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_860:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_860
	JMP  LBB2_1370

LBB2_861:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1377
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_863:
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rcx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_863
	JMP  LBB2_1378

LBB2_864:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1385
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_866:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_866
	JMP  LBB2_1386

LBB2_867:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1393
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_869:
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60f9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_869
	JMP  LBB2_1394

LBB2_870:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1401
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_872:
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60f9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_872
	JMP  LBB2_1402

LBB2_873:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1409
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_875:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_875
	JMP  LBB2_1410

LBB2_876:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1417
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_878:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_878
	JMP  LBB2_1418

LBB2_886:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1425
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_888:
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x207a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x407a             // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x607a             // vpsubw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_888
	JMP  LBB2_1426

LBB2_889:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1433
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_891:
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x2079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4079             // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x6079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_891
	JMP  LBB2_1434

LBB2_892:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1441
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_894:
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x2079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4079             // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x6079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_894
	JMP  LBB2_1442

LBB2_895:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1449
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_897:
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x2079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4079             // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x6079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_897
	JMP  LBB2_1450

LBB2_898:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1457
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_900:
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x2079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4079             // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x6079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_900
	JMP  LBB2_1458

LBB2_901:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1465
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_903:
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x2079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x4079             // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x6079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_903
	JMP  LBB2_1466

LBB2_904:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1473
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_906:
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x2079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x4079             // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x6079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_906
	JMP  LBB2_1474

LBB2_907:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB2_1093
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_1095

LBB2_909:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1481
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI2_5] */

LBB2_911:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_911
	JMP  LBB2_1482

LBB2_912:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1489
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_914:
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x2079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x4079             // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x6079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_914
	JMP  LBB2_1490

LBB2_915:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1497
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_917:
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x2079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x4079             // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x6079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_917
	JMP  LBB2_1498

LBB2_918:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB2_1103
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_1105

LBB2_920:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1505
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI2_5] */

LBB2_922:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_922
	JMP  LBB2_1506

LBB2_923:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1513
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_925:
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x2079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4079             // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x6079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_925
	JMP  LBB2_1514

LBB2_926:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1521
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_928:
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x2079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4079             // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x6079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_928
	JMP  LBB2_1522

LBB2_929:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1529
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_931:
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x2079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4079             // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x6079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_931
	JMP  LBB2_1530

LBB2_932:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1537
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_934:
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x2079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4079             // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x6079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_934
	JMP  LBB2_1538

LBB2_935:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1545
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_937:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_937
	JMP  LBB2_1546

LBB2_938:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1553
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3045 // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI2_2] */

LBB2_940:
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64effdc5; WORD $0x60ba             // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_940
	JMP  LBB2_1554

LBB2_941:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1563
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_943:
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60fa             // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_943
	JMP  LBB2_1564

LBB2_944:
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1571
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3045 // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI2_2] */

LBB2_946:
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64effdc5; WORD $0x60ba             // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8ceffdc5; BYTE $0x00       // vpxor    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94effdc5; BYTE $0x00       // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9ceffdc5; BYTE $0x00       // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4effdc5; BYTE $0x00       // vpxor    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_946
	JMP  LBB2_1572

LBB2_947:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1581
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_949:
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60f9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_949
	JMP  LBB2_1582

LBB2_950:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1589
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_952:
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c5cf4c5; WORD $0x60b9             // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b9945cf4c5; BYTE $0x00       // vsubps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c5cf4c5; BYTE $0x00       // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a45cf4c5; BYTE $0x00       // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac5cf4c5; BYTE $0x00       // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_952
	JMP  LBB2_1590

LBB2_953:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1597
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_955:
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60f9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_955
	JMP  LBB2_1598

LBB2_956:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1605
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_958:
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c5cf4c5; WORD $0x60b9             // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b9945cf4c5; BYTE $0x00       // vsubps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c5cf4c5; BYTE $0x00       // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a45cf4c5; BYTE $0x00       // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac5cf4c5; BYTE $0x00       // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_958
	JMP  LBB2_1606

LBB2_959:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1613
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_961:
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rcx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_961
	JMP  LBB2_1614

LBB2_962:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1621
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_964:
	LONG $0x1459f4c5; BYTE $0xb9               // vmulps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20b9             // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40b9             // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c59f4c5; WORD $0x60b9             // vmulps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b99459f4c5; BYTE $0x00       // vmulps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c59f4c5; BYTE $0x00       // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a459f4c5; BYTE $0x00       // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac59f4c5; BYTE $0x00       // vmulps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_964
	JMP  LBB2_1622

LBB2_965:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_966:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_966
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_968

LBB2_972:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1629
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3445 // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI2_4] */

LBB2_974:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_974
	JMP  LBB2_1630

LBB2_975:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1639
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_977:
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rcx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_977
	JMP  LBB2_1640

LBB2_978:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1647
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_980:
	LONG $0x1459f4c5; BYTE $0xb9               // vmulps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20b9             // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40b9             // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c59f4c5; WORD $0x60b9             // vmulps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b99459f4c5; BYTE $0x00       // vmulps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c59f4c5; BYTE $0x00       // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a459f4c5; BYTE $0x00       // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac59f4c5; BYTE $0x00       // vmulps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_980
	JMP  LBB2_1648

LBB2_981:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_982:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_982
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_984

LBB2_988:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1655
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x3445 // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI2_4] */

LBB2_990:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_990
	JMP  LBB2_1656

LBB2_991:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1665
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_993:
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60f9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_993
	JMP  LBB2_1666

LBB2_994:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1673
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_996:
	LONG $0x1458f4c5; BYTE $0xb9               // vaddps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20b9             // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40b9             // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c58f4c5; WORD $0x60b9             // vaddps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b99458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_996
	JMP  LBB2_1674

LBB2_997:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1681
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_999:
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60f9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_999
	JMP  LBB2_1682

LBB2_1000:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1689
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_1002:
	LONG $0x1458f4c5; BYTE $0xb9               // vaddps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20b9             // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40b9             // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c58f4c5; WORD $0x60b9             // vaddps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b99458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1002
	JMP  LBB2_1690

LBB2_1003:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1697
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_1005:
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x603a             // vpsubb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1005
	JMP  LBB2_1698

LBB2_1013:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1705
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1015:
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x6039             // vpsubb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1015
	JMP  LBB2_1706

LBB2_1016:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1713
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1018:
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x6039             // vpsubb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1018
	JMP  LBB2_1714

LBB2_1019:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB2_1113
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB2_1115

LBB2_1021:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1721
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_1023:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1023
	JMP  LBB2_1722

LBB2_1024:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB2_1123
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB2_1125

LBB2_1026:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1729
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_1028:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1028
	JMP  LBB2_1730

LBB2_1029:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1737
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1031:
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x6039             // vpaddb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1031
	JMP  LBB2_1738

LBB2_1032:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1745
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1034:
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x6039             // vpaddb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1034
	JMP  LBB2_1746

LBB2_1035:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1753
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_1037:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1037
	JMP  LBB2_1754

LBB2_1038:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1761
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_1040:
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60ba             // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1040
	JMP  LBB2_1762

LBB2_1041:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1769
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1043:
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60b9             // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1043
	JMP  LBB2_1770

LBB2_1044:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1777
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1046:
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60b9             // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1046
	JMP  LBB2_1778

LBB2_1047:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1785
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1049:
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb964; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080b98c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x00a0b994407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x00c0b99c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x00e0b9a4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1049
	JMP  LBB2_1786

LBB2_1050:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB2_1051:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_1051
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1053

LBB2_1057:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1793
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1059:
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb964; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080b98c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x00a0b994407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x00c0b99c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x00e0b9a4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1059
	JMP  LBB2_1794

LBB2_1060:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB2_1061:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_1061
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1063

LBB2_1067:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1801
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1069:
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60b9             // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1069
	JMP  LBB2_1802

LBB2_1070:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1809
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1072:
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60b9             // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1072
	JMP  LBB2_1810

LBB2_742:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_743:
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm0
	QUAD $0x00c0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm0
	QUAD $0x00e0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm0
	QUAD $0x0100b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 256], ymm0
	QUAD $0x0120b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 288], ymm0
	QUAD $0x0140b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 320], ymm0
	QUAD $0x0160b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 352], ymm0
	QUAD $0x0180b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 384], ymm0
	QUAD $0x01a0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 416], ymm0
	QUAD $0x01c0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 448], ymm0
	QUAD $0x01e0b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 480], ymm0
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB2_743

LBB2_744:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_747
	LONG $0xb8348d49         // lea    rsi, [r8 + 4*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_746:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB2_746

LBB2_747:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817

LBB2_748:
	QUAD $0x000000008804c741 // mov    dword [r8 + 4*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB2_748
	JMP  LBB2_1817

LBB2_842:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_843:
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm0
	QUAD $0x00c0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm0
	QUAD $0x00e0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm0
	QUAD $0x0100f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 256], ymm0
	QUAD $0x0120f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 288], ymm0
	QUAD $0x0140f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 320], ymm0
	QUAD $0x0160f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 352], ymm0
	QUAD $0x0180f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 384], ymm0
	QUAD $0x01a0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 416], ymm0
	QUAD $0x01c0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 448], ymm0
	QUAD $0x01e0f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 480], ymm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB2_843

LBB2_844:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_847
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_846:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB2_846

LBB2_847:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817

LBB2_848:
	QUAD $0x00000000c804c749 // mov    qword [r8 + 8*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB2_848
	JMP  LBB2_1817

LBB2_879:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_880:
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm0
	QUAD $0x008078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 128], ymm0
	QUAD $0x00a078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 160], ymm0
	QUAD $0x00c078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 192], ymm0
	QUAD $0x00e078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 224], ymm0
	QUAD $0x010078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 256], ymm0
	QUAD $0x012078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 288], ymm0
	QUAD $0x014078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 320], ymm0
	QUAD $0x016078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 352], ymm0
	QUAD $0x018078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 384], ymm0
	QUAD $0x01a078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 416], ymm0
	QUAD $0x01c078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 448], ymm0
	QUAD $0x01e078847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rdi + 480], ymm0
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB2_880

LBB2_881:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_884
	LONG $0x78348d49         // lea    rsi, [r8 + 2*rdi]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_883:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB2_883

LBB2_884:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817

LBB2_885:
	LONG $0x04c74166; WORD $0x0048; BYTE $0x00 // mov    word [r8 + 2*rcx], 0
	LONG $0x01c18348                           // add    rcx, 1
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_885
	JMP  LBB2_1817

LBB2_1006:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_1007:
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm0
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm0
	QUAD $0x00c038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm0
	QUAD $0x00e038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm0
	QUAD $0x010038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 256], ymm0
	QUAD $0x012038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 288], ymm0
	QUAD $0x014038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 320], ymm0
	QUAD $0x016038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 352], ymm0
	QUAD $0x018038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 384], ymm0
	QUAD $0x01a038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 416], ymm0
	QUAD $0x01c038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 448], ymm0
	QUAD $0x01e038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 480], ymm0
	LONG $0x00c78148; WORD $0x0002; BYTE $0x00 // add    rdi, 512
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB2_1007

LBB2_1008:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_1011
	LONG $0x07348d4a         // lea    rsi, [rdi + r8]
	LONG $0x60c68348         // add    rsi, 96
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_1010:
	LONG $0x467ffec5; BYTE $0xa0 // vmovdqu    yword [rsi - 96], ymm0
	LONG $0x467ffec5; BYTE $0xc0 // vmovdqu    yword [rsi - 64], ymm0
	LONG $0x467ffec5; BYTE $0xe0 // vmovdqu    yword [rsi - 32], ymm0
	LONG $0x067ffec5             // vmovdqu    yword [rsi], ymm0
	LONG $0x80ee8348             // sub    rsi, -128
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB2_1010

LBB2_1011:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817

LBB2_1012:
	LONG $0x0804c641; BYTE $0x00 // mov    byte [r8 + rcx], 0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1012

LBB2_1817:
	VZEROUPPER
	RET

LBB2_1073:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI2_7] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB2_1074:
	LONG $0x246ffec5; BYTE $0x31               // vmovdqu    ymm4, yword [rcx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2031             // vmovdqu    ymm4, yword [rcx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4031             // vmovdqu    ymm4, yword [rcx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6031             // vmovdqu    ymm4, yword [rcx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB2_1074

LBB2_1075:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB2_1078
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI2_7] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB2_1077:
	LONG $0x1c6ffec5; BYTE $0x31   // vmovdqu    ymm3, yword [rcx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB2_1077

LBB2_1078:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1817
	JMP  LBB2_1079

LBB2_1083:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI2_7] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB2_1084:
	LONG $0x246ffec5; BYTE $0x31               // vmovdqu    ymm4, yword [rcx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2031             // vmovdqu    ymm4, yword [rcx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4031             // vmovdqu    ymm4, yword [rcx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6031             // vmovdqu    ymm4, yword [rcx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB2_1084

LBB2_1085:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB2_1088
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI2_7] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB2_1087:
	LONG $0x1c6ffec5; BYTE $0x31   // vmovdqu    ymm3, yword [rcx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB2_1087

LBB2_1088:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1817
	JMP  LBB2_1089

LBB2_1093:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_1094:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_1094

LBB2_1095:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1098
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_1097:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_1097

LBB2_1098:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1099

LBB2_1103:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_1104:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_1104

LBB2_1105:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1108
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_1107:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_1107

LBB2_1108:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1109

LBB2_1113:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI2_7] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB2_1114:
	LONG $0x246ffec5; BYTE $0x31               // vmovdqu    ymm4, yword [rcx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2031             // vmovdqu    ymm4, yword [rcx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4031             // vmovdqu    ymm4, yword [rcx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6031             // vmovdqu    ymm4, yword [rcx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB2_1114

LBB2_1115:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB2_1118
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI2_7] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB2_1117:
	LONG $0x1c6ffec5; BYTE $0x31   // vmovdqu    ymm3, yword [rcx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB2_1117

LBB2_1118:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1817
	JMP  LBB2_1119

LBB2_1123:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI2_7] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB2_1124:
	LONG $0x246ffec5; BYTE $0x31               // vmovdqu    ymm4, yword [rcx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2031             // vmovdqu    ymm4, yword [rcx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4031             // vmovdqu    ymm4, yword [rcx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6031             // vmovdqu    ymm4, yword [rcx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB2_1124

LBB2_1125:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB2_1128
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x60 // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI2_7] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB2_1127:
	LONG $0x1c6ffec5; BYTE $0x31   // vmovdqu    ymm3, yword [rcx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB2_1127

LBB2_1128:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1817
	JMP  LBB2_1129

LBB2_1133:
	WORD $0xff31 // xor    edi, edi

LBB2_1134:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1136
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1136:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1137

LBB2_1141:
	WORD $0xff31 // xor    edi, edi

LBB2_1142:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1144
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60b9             // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1144:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1145

LBB2_1149:
	WORD $0xff31 // xor    edi, edi

LBB2_1150:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1152
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60b9             // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1152:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1153

LBB2_1157:
	WORD $0xff31 // xor    edi, edi

LBB2_1158:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1160
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb944; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1160:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1161

LBB2_1165:
	WORD $0xff31 // xor    edi, edi

LBB2_1166:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1168
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB2_1168:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1169

LBB2_1173:
	WORD $0xff31 // xor    edi, edi

LBB2_1174:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1176
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb944; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1176:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1177

LBB2_1181:
	WORD $0xff31 // xor    edi, edi

LBB2_1182:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1184
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB2_1184:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1185

LBB2_1189:
	WORD $0xff31 // xor    edi, edi

LBB2_1190:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1192
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60b9             // vpaddd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1192:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1193

LBB2_1197:
	WORD $0xff31 // xor    edi, edi

LBB2_1198:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1200
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60b9             // vpaddd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1200:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1201

LBB2_1205:
	WORD $0xff31 // xor    edi, edi

LBB2_1206:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1208
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44effdc5; WORD $0x60fa             // vpxor    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1208:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1209

LBB2_1215:
	WORD $0xff31 // xor    edi, edi

LBB2_1216:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1218
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x0ceffdc5; BYTE $0xfa               // vpxor    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54effdc5; WORD $0x20fa             // vpxor    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40fa             // vpxor    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44effdc5; WORD $0x60fa             // vpxor    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1218:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1219

LBB2_1225:
	WORD $0xff31 // xor    edi, edi

LBB2_1226:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1228
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c5cf5c5; WORD $0x60f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1228:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1229

LBB2_1233:
	WORD $0xff31 // xor    edi, edi

LBB2_1234:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1236
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c5cf5c5; WORD $0x60f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1236:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1237

LBB2_1241:
	WORD $0xff31 // xor    edi, edi

LBB2_1242:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1244
	LONG $0x1459f5c5; BYTE $0xf9               // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20f9             // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40f9             // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c59f5c5; WORD $0x60f9             // vmulpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1244:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1245

LBB2_1249:
	WORD $0xff31 // xor    edi, edi

LBB2_1250:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1252
	LONG $0x597de2c4; WORD $0x0845             // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI2_3] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1252:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1253

LBB2_1257:
	WORD $0xff31 // xor    edi, edi

LBB2_1258:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1260
	LONG $0x1459f5c5; BYTE $0xf9               // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20f9             // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40f9             // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c59f5c5; WORD $0x60f9             // vmulpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1260:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1261

LBB2_1265:
	WORD $0xff31 // xor    edi, edi

LBB2_1266:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1268
	LONG $0x597de2c4; WORD $0x0845             // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI2_3] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1268:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1269

LBB2_1273:
	WORD $0xff31 // xor    edi, edi

LBB2_1274:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1276
	LONG $0x1458f5c5; BYTE $0xf9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20f9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40f9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c58f5c5; WORD $0x60f9             // vaddpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1276:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1277

LBB2_1281:
	WORD $0xff31 // xor    edi, edi

LBB2_1282:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1284
	LONG $0x1458f5c5; BYTE $0xf9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20f9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40f9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c58f5c5; WORD $0x60f9             // vaddpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1284:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1285

LBB2_1289:
	WORD $0xff31 // xor    edi, edi

LBB2_1290:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1292
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1292:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1293

LBB2_1297:
	WORD $0xff31 // xor    edi, edi

LBB2_1298:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1300
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1300:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1301

LBB2_1305:
	WORD $0xff31 // xor    edi, edi

LBB2_1306:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1308
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x6039             // vpsubb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1308:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1309

LBB2_1313:
	WORD $0xff31 // xor    edi, edi

LBB2_1314:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1316
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x6039             // vpsubb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1316:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1317

LBB2_1321:
	WORD $0xff31 // xor    edi, edi

LBB2_1322:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1324
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x6039             // vpaddb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1324:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1325

LBB2_1329:
	WORD $0xff31 // xor    edi, edi

LBB2_1330:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1332
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x6039             // vpaddb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1332:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1333

LBB2_1337:
	WORD $0xff31 // xor    edi, edi

LBB2_1338:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1340
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1340:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1341

LBB2_1345:
	WORD $0xff31 // xor    edi, edi

LBB2_1346:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1348
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60f9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1348:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1349

LBB2_1353:
	WORD $0xff31 // xor    edi, edi

LBB2_1354:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1356
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60f9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1356:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1357

LBB2_1361:
	WORD $0xff31 // xor    edi, edi

LBB2_1362:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1364
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1364:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1365

LBB2_1369:
	WORD $0xff31 // xor    edi, edi

LBB2_1370:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1372
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB2_1372:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1373

LBB2_1377:
	WORD $0xff31 // xor    edi, edi

LBB2_1378:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1380
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1380:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1381

LBB2_1385:
	WORD $0xff31 // xor    edi, edi

LBB2_1386:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1388
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB2_1388:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1389

LBB2_1393:
	WORD $0xff31 // xor    edi, edi

LBB2_1394:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1396
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60f9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1396:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1397

LBB2_1401:
	WORD $0xff31 // xor    edi, edi

LBB2_1402:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1404
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60f9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1404:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1405

LBB2_1409:
	WORD $0xff31 // xor    edi, edi

LBB2_1410:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1412
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1412:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1413

LBB2_1417:
	WORD $0xff31 // xor    edi, edi

LBB2_1418:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1420
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1420:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1421

LBB2_1425:
	WORD $0xff31 // xor    edi, edi

LBB2_1426:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1428
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf9fdc5; BYTE $0x7a               // vpsubw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x207a             // vpsubw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1428:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1429

LBB2_1433:
	WORD $0xff31 // xor    edi, edi

LBB2_1434:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1436
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x2079             // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1436:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1437

LBB2_1441:
	WORD $0xff31 // xor    edi, edi

LBB2_1442:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1444
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x2079             // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1444:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1445

LBB2_1449:
	WORD $0xff31 // xor    edi, edi

LBB2_1450:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1452
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x2079             // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1452:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1453

LBB2_1457:
	WORD $0xff31 // xor    edi, edi

LBB2_1458:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1460
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x2079             // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1460:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1461

LBB2_1465:
	WORD $0xff31 // xor    edi, edi

LBB2_1466:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1468
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x2079             // vpmullw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1468:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1469

LBB2_1473:
	WORD $0xff31 // xor    edi, edi

LBB2_1474:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1476
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x2079             // vpmullw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1476:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1477

LBB2_1481:
	WORD $0xf631 // xor    esi, esi

LBB2_1482:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1484
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x40               // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_5] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB2_1484:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1485

LBB2_1489:
	WORD $0xff31 // xor    edi, edi

LBB2_1490:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1492
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x2079             // vpmullw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1492:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1493

LBB2_1497:
	WORD $0xff31 // xor    edi, edi

LBB2_1498:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1500
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x2079             // vpmullw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1500:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1501

LBB2_1505:
	WORD $0xf631 // xor    esi, esi

LBB2_1506:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1508
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x40               // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_5] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB2_1508:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1509

LBB2_1513:
	WORD $0xff31 // xor    edi, edi

LBB2_1514:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1516
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x2079             // vpaddw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1516:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1517

LBB2_1521:
	WORD $0xff31 // xor    edi, edi

LBB2_1522:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1524
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x2079             // vpaddw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1524:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1525

LBB2_1529:
	WORD $0xff31 // xor    edi, edi

LBB2_1530:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1532
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x2079             // vpaddw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1532:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1533

LBB2_1537:
	WORD $0xff31 // xor    edi, edi

LBB2_1538:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1540
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x2079             // vpaddw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1540:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1541

LBB2_1545:
	WORD $0xff31 // xor    edi, edi

LBB2_1546:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1548
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1548:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1549

LBB2_1553:
	WORD $0xff31 // xor    edi, edi

LBB2_1554:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1556
	LONG $0x587de2c4; WORD $0x3045             // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI2_2] */
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44effdc5; WORD $0x60ba             // vpxor    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1556:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1557

LBB2_1563:
	WORD $0xff31 // xor    edi, edi

LBB2_1564:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1566
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfbfdc5; BYTE $0xfa               // vpsubq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20fa             // vpsubq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40fa             // vpsubq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60fa             // vpsubq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1566:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1567

LBB2_1571:
	WORD $0xff31 // xor    edi, edi

LBB2_1572:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1574
	LONG $0x587de2c4; WORD $0x3045             // vpbroadcastd    ymm0, dword 48[rbp] /* [rip + .LCPI2_2] */
	LONG $0x0ceffdc5; BYTE $0xba               // vpxor    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54effdc5; WORD $0x20ba             // vpxor    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5ceffdc5; WORD $0x40ba             // vpxor    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44effdc5; WORD $0x60ba             // vpxor    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1574:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1575

LBB2_1581:
	WORD $0xff31 // xor    edi, edi

LBB2_1582:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1584
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60f9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1584:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1585

LBB2_1589:
	WORD $0xff31 // xor    edi, edi

LBB2_1590:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1592
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c5cf4c5; WORD $0x60b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1592:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1593

LBB2_1597:
	WORD $0xff31 // xor    edi, edi

LBB2_1598:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1600
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60f9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1600:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1601

LBB2_1605:
	WORD $0xff31 // xor    edi, edi

LBB2_1606:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1608
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c5cf4c5; WORD $0x60b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1608:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1609

LBB2_1613:
	WORD $0xff31 // xor    edi, edi

LBB2_1614:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1616
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1616:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1617

LBB2_1621:
	WORD $0xff31 // xor    edi, edi

LBB2_1622:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1624
	LONG $0x1459f4c5; BYTE $0xb9               // vmulps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20b9             // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40b9             // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c59f4c5; WORD $0x60b9             // vmulps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1624:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1625

LBB2_1629:
	WORD $0xff31 // xor    edi, edi

LBB2_1630:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1632
	LONG $0x587de2c4; WORD $0x3445             // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI2_4] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1632:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1633

LBB2_1639:
	WORD $0xff31 // xor    edi, edi

LBB2_1640:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1642
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1642:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1643

LBB2_1647:
	WORD $0xff31 // xor    edi, edi

LBB2_1648:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1650
	LONG $0x1459f4c5; BYTE $0xb9               // vmulps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20b9             // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40b9             // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c59f4c5; WORD $0x60b9             // vmulps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1650:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1651

LBB2_1655:
	WORD $0xff31 // xor    edi, edi

LBB2_1656:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1658
	LONG $0x587de2c4; WORD $0x3445             // vpbroadcastd    ymm0, dword 52[rbp] /* [rip + .LCPI2_4] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1658:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1659

LBB2_1665:
	WORD $0xff31 // xor    edi, edi

LBB2_1666:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1668
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60f9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1668:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1669

LBB2_1673:
	WORD $0xff31 // xor    edi, edi

LBB2_1674:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1676
	LONG $0x1458f4c5; BYTE $0xb9               // vaddps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20b9             // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40b9             // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c58f4c5; WORD $0x60b9             // vaddps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1676:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1677

LBB2_1681:
	WORD $0xff31 // xor    edi, edi

LBB2_1682:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1684
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60f9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1684:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1685

LBB2_1689:
	WORD $0xff31 // xor    edi, edi

LBB2_1690:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1692
	LONG $0x1458f4c5; BYTE $0xb9               // vaddps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20b9             // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40b9             // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c58f4c5; WORD $0x60b9             // vaddps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1692:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1817
	JMP  LBB2_1693

LBB2_1697:
	WORD $0xff31 // xor    edi, edi

LBB2_1698:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1700
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cf8fdc5; BYTE $0x3a               // vpsubb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54f8fdc5; WORD $0x203a             // vpsubb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x403a             // vpsubb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x603a             // vpsubb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1700:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1701

LBB2_1705:
	WORD $0xff31 // xor    edi, edi

LBB2_1706:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1708
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x6039             // vpsubb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1708:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1709

LBB2_1713:
	WORD $0xff31 // xor    edi, edi

LBB2_1714:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1716
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x6039             // vpsubb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1716:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1717

LBB2_1721:
	WORD $0xff31 // xor    edi, edi

LBB2_1722:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1724
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB2_1724:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1725

LBB2_1729:
	WORD $0xff31 // xor    edi, edi

LBB2_1730:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1732
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB2_1732:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1817
	JMP  LBB2_1733

LBB2_1737:
	WORD $0xff31 // xor    edi, edi

LBB2_1738:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1740
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x6039             // vpaddb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1740:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1741

LBB2_1745:
	WORD $0xff31 // xor    edi, edi

LBB2_1746:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1748
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x6039             // vpaddb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1748:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1749

LBB2_1753:
	WORD $0xff31 // xor    edi, edi

LBB2_1754:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1756
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1756:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1757

LBB2_1761:
	WORD $0xff31 // xor    edi, edi

LBB2_1762:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1764
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0cfafdc5; BYTE $0xba               // vpsubd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20ba             // vpsubd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40ba             // vpsubd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60ba             // vpsubd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1764:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1817
	JMP  LBB2_1765

LBB2_1769:
	WORD $0xff31 // xor    edi, edi

LBB2_1770:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1772
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60b9             // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1772:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1773

LBB2_1777:
	WORD $0xff31 // xor    edi, edi

LBB2_1778:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1780
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60b9             // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1780:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1781

LBB2_1785:
	WORD $0xff31 // xor    edi, edi

LBB2_1786:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1788
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb944; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1788:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1789

LBB2_1793:
	WORD $0xff31 // xor    edi, edi

LBB2_1794:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1796
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb944; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1796:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1797

LBB2_1801:
	WORD $0xff31 // xor    edi, edi

LBB2_1802:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1804
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60b9             // vpaddd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1804:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1805

LBB2_1809:
	WORD $0xff31 // xor    edi, edi

LBB2_1810:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1812
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60b9             // vpaddd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1812:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1817
	JMP  LBB2_1813
