//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_arithmetic_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9

	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB0_3
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB0_5
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB0_537

LBB0_138:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_151
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_140
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_184
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_196
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_271
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_208
	WORD $0xf631             // xor    esi, esi

LBB0_213:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_215

LBB0_214:
	WORD $0x1c8b; BYTE $0xb1 // mov    ebx, dword [rcx + 4*rsi]
	WORD $0x1c03; BYTE $0xb2 // add    ebx, dword [rdx + 4*rsi]
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_214

LBB0_215:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_216:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_216
	JMP  LBB0_271

LBB0_3:
	LONG $0x02fe8040 // cmp    sil, 2
	JE   LBB0_271
	LONG $0x03fe8040 // cmp    sil, 3
	JNE  LBB0_537

LBB0_404:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_417
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_406
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_450
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_462
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_537
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_474
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_479

LBB0_417:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_418
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_504
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_516
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_537
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_528
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_533

LBB0_5:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_18
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_7
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_51
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_63
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_138
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_75
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_80

LBB0_151:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_152
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_238
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_250
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_271
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_262
	WORD $0xf631             // xor    esi, esi

LBB0_267:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_269

LBB0_268:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2   // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_268

LBB0_269:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_270:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2               // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4458fbc5; WORD $0x08f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4458fbc5; WORD $0x10f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4458fbc5; WORD $0x18f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB0_270
	JMP  LBB0_271

LBB0_18:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_19
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_105
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_117
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_138
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_129
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_134

LBB0_406:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_429
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_537
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_441
	WORD $0xf631                               // xor    esi, esi
	JMP  LBB0_446

LBB0_418:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_483
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_537
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_495
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_500

LBB0_140:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_163
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_271
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb                   // mov    r11d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_175
	WORD $0xf631                               // xor    esi, esi

LBB0_180:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_182

LBB0_181:
	LONG $0x311cb60f         // movzx    ebx, byte [rcx + rsi]
	WORD $0x1c02; BYTE $0x32 // add    bl, byte [rdx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_181

LBB0_182:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_183:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_183
	JMP  LBB0_271

LBB0_152:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_217
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_271
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_229
	WORD $0xf631             // xor    esi, esi

LBB0_234:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_236

LBB0_235:
	LONG $0xf11c8b48 // mov    rbx, qword [rcx + 8*rsi]
	LONG $0xf21c0348 // add    rbx, qword [rdx + 8*rsi]
	LONG $0xf01c8949 // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_235

LBB0_236:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_237:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_237
	JMP  LBB0_271

LBB0_450:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_453
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_458

LBB0_462:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_465
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_470

LBB0_504:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_507
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_512

LBB0_516:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_519
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_524

LBB0_429:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_432
	WORD $0xf631                               // xor    esi, esi
	JMP  LBB0_437

LBB0_483:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_486
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_491

LBB0_7:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_30
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_138
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb                   // mov    r11d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_42
	WORD $0xf631                               // xor    esi, esi
	JMP  LBB0_47

LBB0_19:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_84
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_138
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_96
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_101

LBB0_184:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_187
	WORD $0xf631             // xor    esi, esi

LBB0_192:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_194

LBB0_193:
	LONG $0x711cb70f             // movzx    ebx, word [rcx + 2*rsi]
	LONG $0x721c0366             // add    bx, word [rdx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_193

LBB0_194:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_195:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf3       // cmp    r11, rsi
	JNE  LBB0_195
	JMP  LBB0_271

LBB0_196:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_199
	WORD $0xf631             // xor    esi, esi

LBB0_204:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_206

LBB0_205:
	LONG $0x711cb70f             // movzx    ebx, word [rcx + 2*rsi]
	LONG $0x721c0366             // add    bx, word [rdx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_205

LBB0_206:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_207:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf3       // cmp    r11, rsi
	JNE  LBB0_207
	JMP  LBB0_271

LBB0_238:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_241
	WORD $0xf631             // xor    esi, esi

LBB0_246:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_248

LBB0_247:
	LONG $0xf11c8b48 // mov    rbx, qword [rcx + 8*rsi]
	LONG $0xf21c0348 // add    rbx, qword [rdx + 8*rsi]
	LONG $0xf01c8949 // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_247

LBB0_248:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_249:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_249
	JMP  LBB0_271

LBB0_250:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_253
	WORD $0xf631             // xor    esi, esi

LBB0_258:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_260

LBB0_259:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2   // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_259

LBB0_260:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_261:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2               // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4458fac5; WORD $0x04b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4458fac5; WORD $0x08b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4458fac5; WORD $0x0cb2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB0_261
	JMP  LBB0_271

LBB0_163:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb                   // mov    r11d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_166
	WORD $0xf631                               // xor    esi, esi

LBB0_171:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_173

LBB0_172:
	LONG $0x311cb60f         // movzx    ebx, byte [rcx + rsi]
	WORD $0x1c02; BYTE $0x32 // add    bl, byte [rdx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_172

LBB0_173:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_174:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_174
	JMP  LBB0_271

LBB0_217:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_220
	WORD $0xf631             // xor    esi, esi

LBB0_225:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_227

LBB0_226:
	WORD $0x1c8b; BYTE $0xb1 // mov    ebx, dword [rcx + 4*rsi]
	WORD $0x1c03; BYTE $0xb2 // add    ebx, dword [rdx + 4*rsi]
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_226

LBB0_227:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_271

LBB0_228:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_228
	JMP  LBB0_271

LBB0_51:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_54
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_59

LBB0_63:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_66
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_71

LBB0_105:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_108
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_113

LBB0_117:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_120
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_125

LBB0_30:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb                   // mov    r11d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_33
	WORD $0xf631                               // xor    esi, esi
	JMP  LBB0_38

LBB0_84:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_87
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_92

LBB0_474:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_479
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_479
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_477:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_477
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_479:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_481

LBB0_480:
	WORD $0x1c8b; BYTE $0xb2 // mov    ebx, dword [rdx + 4*rsi]
	WORD $0x1c2b; BYTE $0xb1 // sub    ebx, dword [rcx + 4*rsi]
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_480

LBB0_481:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_482:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_482
	JMP  LBB0_537

LBB0_528:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_533
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_533
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_531:
	LONG $0x0410fdc5; BYTE $0xfa               // vmovupd    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20fa             // vmovupd    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40fa             // vmovupd    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60fa             // vmovupd    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x045cfdc5; BYTE $0xf9               // vsubpd    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4c5cf5c5; WORD $0x20f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x545cedc5; WORD $0x40f9             // vsubpd    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c5ce5c5; WORD $0x60f9             // vsubpd    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_531
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_533:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_535

LBB0_534:
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1   // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_534

LBB0_535:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_536:
	LONG $0x0410fbc5; BYTE $0xf2               // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1               // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445cfbc5; WORD $0x08f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445cfbc5; WORD $0x10f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445cfbc5; WORD $0x18f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_536
	JMP  LBB0_537

LBB0_441:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_446
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_446
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_444:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_444
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_446:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_448

LBB0_447:
	LONG $0x321cb60f         // movzx    ebx, byte [rdx + rsi]
	WORD $0x1c2a; BYTE $0x31 // sub    bl, byte [rcx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_447

LBB0_448:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_449:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_449
	JMP  LBB0_537

LBB0_495:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_500
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_500
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_498:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_498
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_500:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_502

LBB0_501:
	LONG $0xf21c8b48 // mov    rbx, qword [rdx + 8*rsi]
	LONG $0xf11c2b48 // sub    rbx, qword [rcx + 8*rsi]
	LONG $0xf01c8949 // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_501

LBB0_502:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_503:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_503
	JMP  LBB0_537

LBB0_453:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_458
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_458
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_456:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_456
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_458:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_460

LBB0_459:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	LONG $0x711c2b66             // sub    bx, word [rcx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_459

LBB0_460:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_461:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_461
	JMP  LBB0_537

LBB0_465:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_470
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_470
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_468:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_468
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_470:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_472

LBB0_471:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	LONG $0x711c2b66             // sub    bx, word [rcx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_471

LBB0_472:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_473:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_473
	JMP  LBB0_537

LBB0_507:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_512
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_512
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_510:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_510
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_512:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_514

LBB0_513:
	LONG $0xf21c8b48 // mov    rbx, qword [rdx + 8*rsi]
	LONG $0xf11c2b48 // sub    rbx, qword [rcx + 8*rsi]
	LONG $0xf01c8949 // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_513

LBB0_514:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_515:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_515
	JMP  LBB0_537

LBB0_519:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_524
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_524
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_522:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x045cfcc5; BYTE $0xb9               // vsubps    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4c5cf4c5; WORD $0x20b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x545cecc5; WORD $0x40b9             // vsubps    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c5ce4c5; WORD $0x60b9             // vsubps    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_522
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_524:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_526

LBB0_525:
	LONG $0x0410fac5; BYTE $0xb2   // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1   // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_525

LBB0_526:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_527:
	LONG $0x0410fac5; BYTE $0xb2               // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1               // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b2             // vmovss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445cfac5; WORD $0x04b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b2             // vmovss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445cfac5; WORD $0x08b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb2             // vmovss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445cfac5; WORD $0x0cb1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_527
	JMP  LBB0_537

LBB0_432:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_437
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_437
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_435:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_435
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_437:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_439

LBB0_438:
	LONG $0x321cb60f         // movzx    ebx, byte [rdx + rsi]
	WORD $0x1c2a; BYTE $0x31 // sub    bl, byte [rcx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_438

LBB0_439:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_440:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_440
	JMP  LBB0_537

LBB0_486:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB0_491
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_491
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_489:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_489
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JE   LBB0_537

LBB0_491:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_493

LBB0_492:
	WORD $0x1c8b; BYTE $0xb2 // mov    ebx, dword [rdx + 4*rsi]
	WORD $0x1c2b; BYTE $0xb1 // sub    ebx, dword [rcx + 4*rsi]
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_492

LBB0_493:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_537

LBB0_494:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_494
	JMP  LBB0_537

LBB0_208:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_213
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_213
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_211:
	LONG $0x046ffec5; BYTE $0x81               // vmovdqu    ymm0, yword [rcx + 4*rax]
	LONG $0x4c6ffec5; WORD $0x2081             // vmovdqu    ymm1, yword [rcx + 4*rax + 32]
	LONG $0x546ffec5; WORD $0x4081             // vmovdqu    ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6081             // vmovdqu    ymm3, yword [rcx + 4*rax + 96]
	LONG $0x04fefdc5; BYTE $0x82               // vpaddd    ymm0, ymm0, yword [rdx + 4*rax]
	LONG $0x4cfef5c5; WORD $0x2082             // vpaddd    ymm1, ymm1, yword [rdx + 4*rax + 32]
	LONG $0x54feedc5; WORD $0x4082             // vpaddd    ymm2, ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5cfee5c5; WORD $0x6082             // vpaddd    ymm3, ymm3, yword [rdx + 4*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x8004             // vmovdqu    yword [r8 + 4*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x804c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_211
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_213
	JMP  LBB0_271

LBB0_262:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_267
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_267
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_265:
	LONG $0x0410fdc5; BYTE $0xc1               // vmovupd    ymm0, yword [rcx + 8*rax]
	LONG $0x4c10fdc5; WORD $0x20c1             // vmovupd    ymm1, yword [rcx + 8*rax + 32]
	LONG $0x5410fdc5; WORD $0x40c1             // vmovupd    ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5c10fdc5; WORD $0x60c1             // vmovupd    ymm3, yword [rcx + 8*rax + 96]
	LONG $0x0458fdc5; BYTE $0xc2               // vaddpd    ymm0, ymm0, yword [rdx + 8*rax]
	LONG $0x4c58f5c5; WORD $0x20c2             // vaddpd    ymm1, ymm1, yword [rdx + 8*rax + 32]
	LONG $0x5458edc5; WORD $0x40c2             // vaddpd    ymm2, ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5c58e5c5; WORD $0x60c2             // vaddpd    ymm3, ymm3, yword [rdx + 8*rax + 96]
	LONG $0x117dc1c4; WORD $0xc004             // vmovupd    yword [r8 + 8*rax], ymm0
	LONG $0x117dc1c4; WORD $0xc04c; BYTE $0x20 // vmovupd    yword [r8 + 8*rax + 32], ymm1
	LONG $0x117dc1c4; WORD $0xc054; BYTE $0x40 // vmovupd    yword [r8 + 8*rax + 64], ymm2
	LONG $0x117dc1c4; WORD $0xc05c; BYTE $0x60 // vmovupd    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_265
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_267
	JMP  LBB0_271

LBB0_175:
	LONG $0x18348d4b         // lea    rsi, [r8 + r11]
	LONG $0x1a048d4a         // lea    rax, [rdx + r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x19048d4a         // lea    rax, [rcx + r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_180
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_180
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xc031             // xor    eax, eax

LBB0_178:
	LONG $0x046ffec5; BYTE $0x01               // vmovdqu    ymm0, yword [rcx + rax]
	LONG $0x4c6ffec5; WORD $0x2001             // vmovdqu    ymm1, yword [rcx + rax + 32]
	LONG $0x546ffec5; WORD $0x4001             // vmovdqu    ymm2, yword [rcx + rax + 64]
	LONG $0x5c6ffec5; WORD $0x6001             // vmovdqu    ymm3, yword [rcx + rax + 96]
	LONG $0x04fcfdc5; BYTE $0x02               // vpaddb    ymm0, ymm0, yword [rdx + rax]
	LONG $0x4cfcf5c5; WORD $0x2002             // vpaddb    ymm1, ymm1, yword [rdx + rax + 32]
	LONG $0x54fcedc5; WORD $0x4002             // vpaddb    ymm2, ymm2, yword [rdx + rax + 64]
	LONG $0x5cfce5c5; WORD $0x6002             // vpaddb    ymm3, ymm3, yword [rdx + rax + 96]
	LONG $0x7f7ec1c4; WORD $0x0004             // vmovdqu    yword [r8 + rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x004c; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm3
	LONG $0x80e88348                           // sub    rax, -128
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_178
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_180
	JMP  LBB0_271

LBB0_229:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_234
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_234
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_232:
	LONG $0x046ffec5; BYTE $0xc1               // vmovdqu    ymm0, yword [rcx + 8*rax]
	LONG $0x4c6ffec5; WORD $0x20c1             // vmovdqu    ymm1, yword [rcx + 8*rax + 32]
	LONG $0x546ffec5; WORD $0x40c1             // vmovdqu    ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5c6ffec5; WORD $0x60c1             // vmovdqu    ymm3, yword [rcx + 8*rax + 96]
	LONG $0x04d4fdc5; BYTE $0xc2               // vpaddq    ymm0, ymm0, yword [rdx + 8*rax]
	LONG $0x4cd4f5c5; WORD $0x20c2             // vpaddq    ymm1, ymm1, yword [rdx + 8*rax + 32]
	LONG $0x54d4edc5; WORD $0x40c2             // vpaddq    ymm2, ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5cd4e5c5; WORD $0x60c2             // vpaddq    ymm3, ymm3, yword [rdx + 8*rax + 96]
	LONG $0x7f7ec1c4; WORD $0xc004             // vmovdqu    yword [r8 + 8*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0xc04c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_232
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_234
	JMP  LBB0_271

LBB0_187:
	LONG $0x58348d4b         // lea    rsi, [r8 + 2*r11]
	LONG $0x5a048d4a         // lea    rax, [rdx + 2*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x59048d4a         // lea    rax, [rcx + 2*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_192
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_192
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xc031             // xor    eax, eax

LBB0_190:
	LONG $0x046ffec5; BYTE $0x41               // vmovdqu    ymm0, yword [rcx + 2*rax]
	LONG $0x4c6ffec5; WORD $0x2041             // vmovdqu    ymm1, yword [rcx + 2*rax + 32]
	LONG $0x546ffec5; WORD $0x4041             // vmovdqu    ymm2, yword [rcx + 2*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6041             // vmovdqu    ymm3, yword [rcx + 2*rax + 96]
	LONG $0x04fdfdc5; BYTE $0x42               // vpaddw    ymm0, ymm0, yword [rdx + 2*rax]
	LONG $0x4cfdf5c5; WORD $0x2042             // vpaddw    ymm1, ymm1, yword [rdx + 2*rax + 32]
	LONG $0x54fdedc5; WORD $0x4042             // vpaddw    ymm2, ymm2, yword [rdx + 2*rax + 64]
	LONG $0x5cfde5c5; WORD $0x6042             // vpaddw    ymm3, ymm3, yword [rdx + 2*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x4004             // vmovdqu    yword [r8 + 2*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x404c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x4054; BYTE $0x40 // vmovdqu    yword [r8 + 2*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x405c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rax + 96], ymm3
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_190
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_192
	JMP  LBB0_271

LBB0_199:
	LONG $0x58348d4b         // lea    rsi, [r8 + 2*r11]
	LONG $0x5a048d4a         // lea    rax, [rdx + 2*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x59048d4a         // lea    rax, [rcx + 2*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_204
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_204
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xc031             // xor    eax, eax

LBB0_202:
	LONG $0x046ffec5; BYTE $0x41               // vmovdqu    ymm0, yword [rcx + 2*rax]
	LONG $0x4c6ffec5; WORD $0x2041             // vmovdqu    ymm1, yword [rcx + 2*rax + 32]
	LONG $0x546ffec5; WORD $0x4041             // vmovdqu    ymm2, yword [rcx + 2*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6041             // vmovdqu    ymm3, yword [rcx + 2*rax + 96]
	LONG $0x04fdfdc5; BYTE $0x42               // vpaddw    ymm0, ymm0, yword [rdx + 2*rax]
	LONG $0x4cfdf5c5; WORD $0x2042             // vpaddw    ymm1, ymm1, yword [rdx + 2*rax + 32]
	LONG $0x54fdedc5; WORD $0x4042             // vpaddw    ymm2, ymm2, yword [rdx + 2*rax + 64]
	LONG $0x5cfde5c5; WORD $0x6042             // vpaddw    ymm3, ymm3, yword [rdx + 2*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x4004             // vmovdqu    yword [r8 + 2*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x404c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x4054; BYTE $0x40 // vmovdqu    yword [r8 + 2*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x405c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rax + 96], ymm3
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_202
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_204
	JMP  LBB0_271

LBB0_241:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_246
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_246
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_244:
	LONG $0x046ffec5; BYTE $0xc1               // vmovdqu    ymm0, yword [rcx + 8*rax]
	LONG $0x4c6ffec5; WORD $0x20c1             // vmovdqu    ymm1, yword [rcx + 8*rax + 32]
	LONG $0x546ffec5; WORD $0x40c1             // vmovdqu    ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5c6ffec5; WORD $0x60c1             // vmovdqu    ymm3, yword [rcx + 8*rax + 96]
	LONG $0x04d4fdc5; BYTE $0xc2               // vpaddq    ymm0, ymm0, yword [rdx + 8*rax]
	LONG $0x4cd4f5c5; WORD $0x20c2             // vpaddq    ymm1, ymm1, yword [rdx + 8*rax + 32]
	LONG $0x54d4edc5; WORD $0x40c2             // vpaddq    ymm2, ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5cd4e5c5; WORD $0x60c2             // vpaddq    ymm3, ymm3, yword [rdx + 8*rax + 96]
	LONG $0x7f7ec1c4; WORD $0xc004             // vmovdqu    yword [r8 + 8*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0xc04c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_244
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_246
	JMP  LBB0_271

LBB0_253:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_258
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_258
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_256:
	LONG $0x0410fcc5; BYTE $0x81               // vmovups    ymm0, yword [rcx + 4*rax]
	LONG $0x4c10fcc5; WORD $0x2081             // vmovups    ymm1, yword [rcx + 4*rax + 32]
	LONG $0x5410fcc5; WORD $0x4081             // vmovups    ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5c10fcc5; WORD $0x6081             // vmovups    ymm3, yword [rcx + 4*rax + 96]
	LONG $0x0458fcc5; BYTE $0x82               // vaddps    ymm0, ymm0, yword [rdx + 4*rax]
	LONG $0x4c58f4c5; WORD $0x2082             // vaddps    ymm1, ymm1, yword [rdx + 4*rax + 32]
	LONG $0x5458ecc5; WORD $0x4082             // vaddps    ymm2, ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5c58e4c5; WORD $0x6082             // vaddps    ymm3, ymm3, yword [rdx + 4*rax + 96]
	LONG $0x117cc1c4; WORD $0x8004             // vmovups    yword [r8 + 4*rax], ymm0
	LONG $0x117cc1c4; WORD $0x804c; BYTE $0x20 // vmovups    yword [r8 + 4*rax + 32], ymm1
	LONG $0x117cc1c4; WORD $0x8054; BYTE $0x40 // vmovups    yword [r8 + 4*rax + 64], ymm2
	LONG $0x117cc1c4; WORD $0x805c; BYTE $0x60 // vmovups    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_256
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_258
	JMP  LBB0_271

LBB0_166:
	LONG $0x18348d4b         // lea    rsi, [r8 + r11]
	LONG $0x1a048d4a         // lea    rax, [rdx + r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x19048d4a         // lea    rax, [rcx + r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_171
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_171
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xc031             // xor    eax, eax

LBB0_169:
	LONG $0x046ffec5; BYTE $0x01               // vmovdqu    ymm0, yword [rcx + rax]
	LONG $0x4c6ffec5; WORD $0x2001             // vmovdqu    ymm1, yword [rcx + rax + 32]
	LONG $0x546ffec5; WORD $0x4001             // vmovdqu    ymm2, yword [rcx + rax + 64]
	LONG $0x5c6ffec5; WORD $0x6001             // vmovdqu    ymm3, yword [rcx + rax + 96]
	LONG $0x04fcfdc5; BYTE $0x02               // vpaddb    ymm0, ymm0, yword [rdx + rax]
	LONG $0x4cfcf5c5; WORD $0x2002             // vpaddb    ymm1, ymm1, yword [rdx + rax + 32]
	LONG $0x54fcedc5; WORD $0x4002             // vpaddb    ymm2, ymm2, yword [rdx + rax + 64]
	LONG $0x5cfce5c5; WORD $0x6002             // vpaddb    ymm3, ymm3, yword [rdx + rax + 96]
	LONG $0x7f7ec1c4; WORD $0x0004             // vmovdqu    yword [r8 + rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x004c; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm3
	LONG $0x80e88348                           // sub    rax, -128
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_169
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_171
	JMP  LBB0_271

LBB0_220:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_225
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_225
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_223:
	LONG $0x046ffec5; BYTE $0x81               // vmovdqu    ymm0, yword [rcx + 4*rax]
	LONG $0x4c6ffec5; WORD $0x2081             // vmovdqu    ymm1, yword [rcx + 4*rax + 32]
	LONG $0x546ffec5; WORD $0x4081             // vmovdqu    ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6081             // vmovdqu    ymm3, yword [rcx + 4*rax + 96]
	LONG $0x04fefdc5; BYTE $0x82               // vpaddd    ymm0, ymm0, yword [rdx + 4*rax]
	LONG $0x4cfef5c5; WORD $0x2082             // vpaddd    ymm1, ymm1, yword [rdx + 4*rax + 32]
	LONG $0x54feedc5; WORD $0x4082             // vpaddd    ymm2, ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5cfee5c5; WORD $0x6082             // vpaddd    ymm3, ymm3, yword [rdx + 4*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x8004             // vmovdqu    yword [r8 + 4*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x804c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_223
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JNE  LBB0_225

LBB0_271:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_284
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_273
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_317
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_329
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_404
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_341
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_346

LBB0_284:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_285
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_371
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_383
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_404
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_395
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_400

LBB0_273:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_296
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_404
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb                   // mov    r11d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_308
	WORD $0xf631                               // xor    esi, esi
	JMP  LBB0_313

LBB0_285:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_350
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_404
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_362
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_367

LBB0_317:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_320
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_325

LBB0_329:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_332
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_337

LBB0_371:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_374
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_379

LBB0_383:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_386
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_391

LBB0_296:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb                   // mov    r11d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_299
	WORD $0xf631                               // xor    esi, esi
	JMP  LBB0_304

LBB0_350:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_537
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_353
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_358

LBB0_537:
	VZEROUPPER
	RET

LBB0_341:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_346
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_346
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_344:
	LONG $0x046ffec5; BYTE $0x82               // vmovdqu    ymm0, yword [rdx + 4*rax]
	LONG $0x4c6ffec5; WORD $0x2082             // vmovdqu    ymm1, yword [rdx + 4*rax + 32]
	LONG $0x546ffec5; WORD $0x4082             // vmovdqu    ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6082             // vmovdqu    ymm3, yword [rdx + 4*rax + 96]
	LONG $0x04fafdc5; BYTE $0x81               // vpsubd    ymm0, ymm0, yword [rcx + 4*rax]
	LONG $0x4cfaf5c5; WORD $0x2081             // vpsubd    ymm1, ymm1, yword [rcx + 4*rax + 32]
	LONG $0x54faedc5; WORD $0x4081             // vpsubd    ymm2, ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5cfae5c5; WORD $0x6081             // vpsubd    ymm3, ymm3, yword [rcx + 4*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x8004             // vmovdqu    yword [r8 + 4*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x804c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_344
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_346:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_348

LBB0_347:
	WORD $0x1c8b; BYTE $0xb2 // mov    ebx, dword [rdx + 4*rsi]
	WORD $0x1c2b; BYTE $0xb1 // sub    ebx, dword [rcx + 4*rsi]
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_347

LBB0_348:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_349:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_349
	JMP  LBB0_404

LBB0_395:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_400
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_400
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_398:
	LONG $0x0410fdc5; BYTE $0xc2               // vmovupd    ymm0, yword [rdx + 8*rax]
	LONG $0x4c10fdc5; WORD $0x20c2             // vmovupd    ymm1, yword [rdx + 8*rax + 32]
	LONG $0x5410fdc5; WORD $0x40c2             // vmovupd    ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5c10fdc5; WORD $0x60c2             // vmovupd    ymm3, yword [rdx + 8*rax + 96]
	LONG $0x045cfdc5; BYTE $0xc1               // vsubpd    ymm0, ymm0, yword [rcx + 8*rax]
	LONG $0x4c5cf5c5; WORD $0x20c1             // vsubpd    ymm1, ymm1, yword [rcx + 8*rax + 32]
	LONG $0x545cedc5; WORD $0x40c1             // vsubpd    ymm2, ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5c5ce5c5; WORD $0x60c1             // vsubpd    ymm3, ymm3, yword [rcx + 8*rax + 96]
	LONG $0x117dc1c4; WORD $0xc004             // vmovupd    yword [r8 + 8*rax], ymm0
	LONG $0x117dc1c4; WORD $0xc04c; BYTE $0x20 // vmovupd    yword [r8 + 8*rax + 32], ymm1
	LONG $0x117dc1c4; WORD $0xc054; BYTE $0x40 // vmovupd    yword [r8 + 8*rax + 64], ymm2
	LONG $0x117dc1c4; WORD $0xc05c; BYTE $0x60 // vmovupd    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_398
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_400:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_402

LBB0_401:
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1   // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_401

LBB0_402:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_403:
	LONG $0x0410fbc5; BYTE $0xf2               // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1               // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445cfbc5; WORD $0x08f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445cfbc5; WORD $0x10f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445cfbc5; WORD $0x18f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB0_403
	JMP  LBB0_404

LBB0_308:
	LONG $0x18348d4b         // lea    rsi, [r8 + r11]
	LONG $0x1a048d4a         // lea    rax, [rdx + r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x19048d4a         // lea    rax, [rcx + r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_313
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_313
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xc031             // xor    eax, eax

LBB0_311:
	LONG $0x046ffec5; BYTE $0x02               // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x4c6ffec5; WORD $0x2002             // vmovdqu    ymm1, yword [rdx + rax + 32]
	LONG $0x546ffec5; WORD $0x4002             // vmovdqu    ymm2, yword [rdx + rax + 64]
	LONG $0x5c6ffec5; WORD $0x6002             // vmovdqu    ymm3, yword [rdx + rax + 96]
	LONG $0x04f8fdc5; BYTE $0x01               // vpsubb    ymm0, ymm0, yword [rcx + rax]
	LONG $0x4cf8f5c5; WORD $0x2001             // vpsubb    ymm1, ymm1, yword [rcx + rax + 32]
	LONG $0x54f8edc5; WORD $0x4001             // vpsubb    ymm2, ymm2, yword [rcx + rax + 64]
	LONG $0x5cf8e5c5; WORD $0x6001             // vpsubb    ymm3, ymm3, yword [rcx + rax + 96]
	LONG $0x7f7ec1c4; WORD $0x0004             // vmovdqu    yword [r8 + rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x004c; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm3
	LONG $0x80e88348                           // sub    rax, -128
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_311
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_313:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_315

LBB0_314:
	LONG $0x321cb60f         // movzx    ebx, byte [rdx + rsi]
	WORD $0x1c2a; BYTE $0x31 // sub    bl, byte [rcx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_314

LBB0_315:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_316:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_316
	JMP  LBB0_404

LBB0_362:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_367
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_367
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_365:
	LONG $0x046ffec5; BYTE $0xc2               // vmovdqu    ymm0, yword [rdx + 8*rax]
	LONG $0x4c6ffec5; WORD $0x20c2             // vmovdqu    ymm1, yword [rdx + 8*rax + 32]
	LONG $0x546ffec5; WORD $0x40c2             // vmovdqu    ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5c6ffec5; WORD $0x60c2             // vmovdqu    ymm3, yword [rdx + 8*rax + 96]
	LONG $0x04fbfdc5; BYTE $0xc1               // vpsubq    ymm0, ymm0, yword [rcx + 8*rax]
	LONG $0x4cfbf5c5; WORD $0x20c1             // vpsubq    ymm1, ymm1, yword [rcx + 8*rax + 32]
	LONG $0x54fbedc5; WORD $0x40c1             // vpsubq    ymm2, ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5cfbe5c5; WORD $0x60c1             // vpsubq    ymm3, ymm3, yword [rcx + 8*rax + 96]
	LONG $0x7f7ec1c4; WORD $0xc004             // vmovdqu    yword [r8 + 8*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0xc04c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_365
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_367:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_369

LBB0_368:
	LONG $0xf21c8b48 // mov    rbx, qword [rdx + 8*rsi]
	LONG $0xf11c2b48 // sub    rbx, qword [rcx + 8*rsi]
	LONG $0xf01c8949 // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_368

LBB0_369:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_370:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_370
	JMP  LBB0_404

LBB0_320:
	LONG $0x58348d4b         // lea    rsi, [r8 + 2*r11]
	LONG $0x5a048d4a         // lea    rax, [rdx + 2*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x59048d4a         // lea    rax, [rcx + 2*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_325
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_325
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xc031             // xor    eax, eax

LBB0_323:
	LONG $0x046ffec5; BYTE $0x42               // vmovdqu    ymm0, yword [rdx + 2*rax]
	LONG $0x4c6ffec5; WORD $0x2042             // vmovdqu    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x546ffec5; WORD $0x4042             // vmovdqu    ymm2, yword [rdx + 2*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6042             // vmovdqu    ymm3, yword [rdx + 2*rax + 96]
	LONG $0x04f9fdc5; BYTE $0x41               // vpsubw    ymm0, ymm0, yword [rcx + 2*rax]
	LONG $0x4cf9f5c5; WORD $0x2041             // vpsubw    ymm1, ymm1, yword [rcx + 2*rax + 32]
	LONG $0x54f9edc5; WORD $0x4041             // vpsubw    ymm2, ymm2, yword [rcx + 2*rax + 64]
	LONG $0x5cf9e5c5; WORD $0x6041             // vpsubw    ymm3, ymm3, yword [rcx + 2*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x4004             // vmovdqu    yword [r8 + 2*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x404c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x4054; BYTE $0x40 // vmovdqu    yword [r8 + 2*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x405c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rax + 96], ymm3
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_323
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_325:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_327

LBB0_326:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	LONG $0x711c2b66             // sub    bx, word [rcx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_326

LBB0_327:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_328:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf3       // cmp    r11, rsi
	JNE  LBB0_328
	JMP  LBB0_404

LBB0_332:
	LONG $0x58348d4b         // lea    rsi, [r8 + 2*r11]
	LONG $0x5a048d4a         // lea    rax, [rdx + 2*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x59048d4a         // lea    rax, [rcx + 2*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_337
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_337
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xc031             // xor    eax, eax

LBB0_335:
	LONG $0x046ffec5; BYTE $0x42               // vmovdqu    ymm0, yword [rdx + 2*rax]
	LONG $0x4c6ffec5; WORD $0x2042             // vmovdqu    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x546ffec5; WORD $0x4042             // vmovdqu    ymm2, yword [rdx + 2*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6042             // vmovdqu    ymm3, yword [rdx + 2*rax + 96]
	LONG $0x04f9fdc5; BYTE $0x41               // vpsubw    ymm0, ymm0, yword [rcx + 2*rax]
	LONG $0x4cf9f5c5; WORD $0x2041             // vpsubw    ymm1, ymm1, yword [rcx + 2*rax + 32]
	LONG $0x54f9edc5; WORD $0x4041             // vpsubw    ymm2, ymm2, yword [rcx + 2*rax + 64]
	LONG $0x5cf9e5c5; WORD $0x6041             // vpsubw    ymm3, ymm3, yword [rcx + 2*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x4004             // vmovdqu    yword [r8 + 2*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x404c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x4054; BYTE $0x40 // vmovdqu    yword [r8 + 2*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x405c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rax + 96], ymm3
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_335
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_337:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_339

LBB0_338:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	LONG $0x711c2b66             // sub    bx, word [rcx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_338

LBB0_339:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_340:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf3       // cmp    r11, rsi
	JNE  LBB0_340
	JMP  LBB0_404

LBB0_374:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_379
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_379
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_377:
	LONG $0x046ffec5; BYTE $0xc2               // vmovdqu    ymm0, yword [rdx + 8*rax]
	LONG $0x4c6ffec5; WORD $0x20c2             // vmovdqu    ymm1, yword [rdx + 8*rax + 32]
	LONG $0x546ffec5; WORD $0x40c2             // vmovdqu    ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5c6ffec5; WORD $0x60c2             // vmovdqu    ymm3, yword [rdx + 8*rax + 96]
	LONG $0x04fbfdc5; BYTE $0xc1               // vpsubq    ymm0, ymm0, yword [rcx + 8*rax]
	LONG $0x4cfbf5c5; WORD $0x20c1             // vpsubq    ymm1, ymm1, yword [rcx + 8*rax + 32]
	LONG $0x54fbedc5; WORD $0x40c1             // vpsubq    ymm2, ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5cfbe5c5; WORD $0x60c1             // vpsubq    ymm3, ymm3, yword [rcx + 8*rax + 96]
	LONG $0x7f7ec1c4; WORD $0xc004             // vmovdqu    yword [r8 + 8*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0xc04c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_377
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_379:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_381

LBB0_380:
	LONG $0xf21c8b48 // mov    rbx, qword [rdx + 8*rsi]
	LONG $0xf11c2b48 // sub    rbx, qword [rcx + 8*rsi]
	LONG $0xf01c8949 // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_380

LBB0_381:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_382:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_382
	JMP  LBB0_404

LBB0_386:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_391
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_391
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_389:
	LONG $0x0410fcc5; BYTE $0x82               // vmovups    ymm0, yword [rdx + 4*rax]
	LONG $0x4c10fcc5; WORD $0x2082             // vmovups    ymm1, yword [rdx + 4*rax + 32]
	LONG $0x5410fcc5; WORD $0x4082             // vmovups    ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5c10fcc5; WORD $0x6082             // vmovups    ymm3, yword [rdx + 4*rax + 96]
	LONG $0x045cfcc5; BYTE $0x81               // vsubps    ymm0, ymm0, yword [rcx + 4*rax]
	LONG $0x4c5cf4c5; WORD $0x2081             // vsubps    ymm1, ymm1, yword [rcx + 4*rax + 32]
	LONG $0x545cecc5; WORD $0x4081             // vsubps    ymm2, ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5c5ce4c5; WORD $0x6081             // vsubps    ymm3, ymm3, yword [rcx + 4*rax + 96]
	LONG $0x117cc1c4; WORD $0x8004             // vmovups    yword [r8 + 4*rax], ymm0
	LONG $0x117cc1c4; WORD $0x804c; BYTE $0x20 // vmovups    yword [r8 + 4*rax + 32], ymm1
	LONG $0x117cc1c4; WORD $0x8054; BYTE $0x40 // vmovups    yword [r8 + 4*rax + 64], ymm2
	LONG $0x117cc1c4; WORD $0x805c; BYTE $0x60 // vmovups    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_389
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_391:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_393

LBB0_392:
	LONG $0x0410fac5; BYTE $0xb2   // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1   // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_392

LBB0_393:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_394:
	LONG $0x0410fac5; BYTE $0xb2               // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1               // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b2             // vmovss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445cfac5; WORD $0x04b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b2             // vmovss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445cfac5; WORD $0x08b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb2             // vmovss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445cfac5; WORD $0x0cb1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB0_394
	JMP  LBB0_404

LBB0_299:
	LONG $0x18348d4b         // lea    rsi, [r8 + r11]
	LONG $0x1a048d4a         // lea    rax, [rdx + r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x19048d4a         // lea    rax, [rcx + r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_304
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_304
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xc031             // xor    eax, eax

LBB0_302:
	LONG $0x046ffec5; BYTE $0x02               // vmovdqu    ymm0, yword [rdx + rax]
	LONG $0x4c6ffec5; WORD $0x2002             // vmovdqu    ymm1, yword [rdx + rax + 32]
	LONG $0x546ffec5; WORD $0x4002             // vmovdqu    ymm2, yword [rdx + rax + 64]
	LONG $0x5c6ffec5; WORD $0x6002             // vmovdqu    ymm3, yword [rdx + rax + 96]
	LONG $0x04f8fdc5; BYTE $0x01               // vpsubb    ymm0, ymm0, yword [rcx + rax]
	LONG $0x4cf8f5c5; WORD $0x2001             // vpsubb    ymm1, ymm1, yword [rcx + rax + 32]
	LONG $0x54f8edc5; WORD $0x4001             // vpsubb    ymm2, ymm2, yword [rcx + rax + 64]
	LONG $0x5cf8e5c5; WORD $0x6001             // vpsubb    ymm3, ymm3, yword [rcx + rax + 96]
	LONG $0x7f7ec1c4; WORD $0x0004             // vmovdqu    yword [r8 + rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x004c; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm3
	LONG $0x80e88348                           // sub    rax, -128
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_302
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_304:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_306

LBB0_305:
	LONG $0x321cb60f         // movzx    ebx, byte [rdx + rsi]
	WORD $0x1c2a; BYTE $0x31 // sub    bl, byte [rcx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_305

LBB0_306:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_307:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_307
	JMP  LBB0_404

LBB0_353:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_358
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_358
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_356:
	LONG $0x046ffec5; BYTE $0x82               // vmovdqu    ymm0, yword [rdx + 4*rax]
	LONG $0x4c6ffec5; WORD $0x2082             // vmovdqu    ymm1, yword [rdx + 4*rax + 32]
	LONG $0x546ffec5; WORD $0x4082             // vmovdqu    ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6082             // vmovdqu    ymm3, yword [rdx + 4*rax + 96]
	LONG $0x04fafdc5; BYTE $0x81               // vpsubd    ymm0, ymm0, yword [rcx + 4*rax]
	LONG $0x4cfaf5c5; WORD $0x2081             // vpsubd    ymm1, ymm1, yword [rcx + 4*rax + 32]
	LONG $0x54faedc5; WORD $0x4081             // vpsubd    ymm2, ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5cfae5c5; WORD $0x6081             // vpsubd    ymm3, ymm3, yword [rcx + 4*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x8004             // vmovdqu    yword [r8 + 4*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x804c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_356
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_404

LBB0_358:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_360

LBB0_359:
	WORD $0x1c8b; BYTE $0xb2 // mov    ebx, dword [rdx + 4*rsi]
	WORD $0x1c2b; BYTE $0xb1 // sub    ebx, dword [rcx + 4*rsi]
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_359

LBB0_360:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_404

LBB0_361:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_361
	JMP  LBB0_404

LBB0_75:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_80
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_80
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_78:
	LONG $0x046ffec5; BYTE $0x81               // vmovdqu    ymm0, yword [rcx + 4*rax]
	LONG $0x4c6ffec5; WORD $0x2081             // vmovdqu    ymm1, yword [rcx + 4*rax + 32]
	LONG $0x546ffec5; WORD $0x4081             // vmovdqu    ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6081             // vmovdqu    ymm3, yword [rcx + 4*rax + 96]
	LONG $0x04fefdc5; BYTE $0x82               // vpaddd    ymm0, ymm0, yword [rdx + 4*rax]
	LONG $0x4cfef5c5; WORD $0x2082             // vpaddd    ymm1, ymm1, yword [rdx + 4*rax + 32]
	LONG $0x54feedc5; WORD $0x4082             // vpaddd    ymm2, ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5cfee5c5; WORD $0x6082             // vpaddd    ymm3, ymm3, yword [rdx + 4*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x8004             // vmovdqu    yword [r8 + 4*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x804c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_78
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_80:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_82

LBB0_81:
	WORD $0x1c8b; BYTE $0xb1 // mov    ebx, dword [rcx + 4*rsi]
	WORD $0x1c03; BYTE $0xb2 // add    ebx, dword [rdx + 4*rsi]
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_81

LBB0_82:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_83:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_83
	JMP  LBB0_138

LBB0_129:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_134
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_134
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_132:
	LONG $0x0410fdc5; BYTE $0xc1               // vmovupd    ymm0, yword [rcx + 8*rax]
	LONG $0x4c10fdc5; WORD $0x20c1             // vmovupd    ymm1, yword [rcx + 8*rax + 32]
	LONG $0x5410fdc5; WORD $0x40c1             // vmovupd    ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5c10fdc5; WORD $0x60c1             // vmovupd    ymm3, yword [rcx + 8*rax + 96]
	LONG $0x0458fdc5; BYTE $0xc2               // vaddpd    ymm0, ymm0, yword [rdx + 8*rax]
	LONG $0x4c58f5c5; WORD $0x20c2             // vaddpd    ymm1, ymm1, yword [rdx + 8*rax + 32]
	LONG $0x5458edc5; WORD $0x40c2             // vaddpd    ymm2, ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5c58e5c5; WORD $0x60c2             // vaddpd    ymm3, ymm3, yword [rdx + 8*rax + 96]
	LONG $0x117dc1c4; WORD $0xc004             // vmovupd    yword [r8 + 8*rax], ymm0
	LONG $0x117dc1c4; WORD $0xc04c; BYTE $0x20 // vmovupd    yword [r8 + 8*rax + 32], ymm1
	LONG $0x117dc1c4; WORD $0xc054; BYTE $0x40 // vmovupd    yword [r8 + 8*rax + 64], ymm2
	LONG $0x117dc1c4; WORD $0xc05c; BYTE $0x60 // vmovupd    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_132
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_134:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_136

LBB0_135:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2   // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_135

LBB0_136:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_137:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2               // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4458fbc5; WORD $0x08f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4458fbc5; WORD $0x10f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4458fbc5; WORD $0x18f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB0_137
	JMP  LBB0_138

LBB0_42:
	LONG $0x18348d4b         // lea    rsi, [r8 + r11]
	LONG $0x1a048d4a         // lea    rax, [rdx + r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x19048d4a         // lea    rax, [rcx + r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_47
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_47
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xc031             // xor    eax, eax

LBB0_45:
	LONG $0x046ffec5; BYTE $0x01               // vmovdqu    ymm0, yword [rcx + rax]
	LONG $0x4c6ffec5; WORD $0x2001             // vmovdqu    ymm1, yword [rcx + rax + 32]
	LONG $0x546ffec5; WORD $0x4001             // vmovdqu    ymm2, yword [rcx + rax + 64]
	LONG $0x5c6ffec5; WORD $0x6001             // vmovdqu    ymm3, yword [rcx + rax + 96]
	LONG $0x04fcfdc5; BYTE $0x02               // vpaddb    ymm0, ymm0, yword [rdx + rax]
	LONG $0x4cfcf5c5; WORD $0x2002             // vpaddb    ymm1, ymm1, yword [rdx + rax + 32]
	LONG $0x54fcedc5; WORD $0x4002             // vpaddb    ymm2, ymm2, yword [rdx + rax + 64]
	LONG $0x5cfce5c5; WORD $0x6002             // vpaddb    ymm3, ymm3, yword [rdx + rax + 96]
	LONG $0x7f7ec1c4; WORD $0x0004             // vmovdqu    yword [r8 + rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x004c; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm3
	LONG $0x80e88348                           // sub    rax, -128
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_45
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_47:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_49

LBB0_48:
	LONG $0x311cb60f         // movzx    ebx, byte [rcx + rsi]
	WORD $0x1c02; BYTE $0x32 // add    bl, byte [rdx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_48

LBB0_49:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_50:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_50
	JMP  LBB0_138

LBB0_96:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_101
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_101
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_99:
	LONG $0x046ffec5; BYTE $0xc1               // vmovdqu    ymm0, yword [rcx + 8*rax]
	LONG $0x4c6ffec5; WORD $0x20c1             // vmovdqu    ymm1, yword [rcx + 8*rax + 32]
	LONG $0x546ffec5; WORD $0x40c1             // vmovdqu    ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5c6ffec5; WORD $0x60c1             // vmovdqu    ymm3, yword [rcx + 8*rax + 96]
	LONG $0x04d4fdc5; BYTE $0xc2               // vpaddq    ymm0, ymm0, yword [rdx + 8*rax]
	LONG $0x4cd4f5c5; WORD $0x20c2             // vpaddq    ymm1, ymm1, yword [rdx + 8*rax + 32]
	LONG $0x54d4edc5; WORD $0x40c2             // vpaddq    ymm2, ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5cd4e5c5; WORD $0x60c2             // vpaddq    ymm3, ymm3, yword [rdx + 8*rax + 96]
	LONG $0x7f7ec1c4; WORD $0xc004             // vmovdqu    yword [r8 + 8*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0xc04c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_99
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_101:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_103

LBB0_102:
	LONG $0xf11c8b48 // mov    rbx, qword [rcx + 8*rsi]
	LONG $0xf21c0348 // add    rbx, qword [rdx + 8*rsi]
	LONG $0xf01c8949 // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_102

LBB0_103:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_104:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_104
	JMP  LBB0_138

LBB0_54:
	LONG $0x58348d4b         // lea    rsi, [r8 + 2*r11]
	LONG $0x5a048d4a         // lea    rax, [rdx + 2*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x59048d4a         // lea    rax, [rcx + 2*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_59
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_59
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xc031             // xor    eax, eax

LBB0_57:
	LONG $0x046ffec5; BYTE $0x41               // vmovdqu    ymm0, yword [rcx + 2*rax]
	LONG $0x4c6ffec5; WORD $0x2041             // vmovdqu    ymm1, yword [rcx + 2*rax + 32]
	LONG $0x546ffec5; WORD $0x4041             // vmovdqu    ymm2, yword [rcx + 2*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6041             // vmovdqu    ymm3, yword [rcx + 2*rax + 96]
	LONG $0x04fdfdc5; BYTE $0x42               // vpaddw    ymm0, ymm0, yword [rdx + 2*rax]
	LONG $0x4cfdf5c5; WORD $0x2042             // vpaddw    ymm1, ymm1, yword [rdx + 2*rax + 32]
	LONG $0x54fdedc5; WORD $0x4042             // vpaddw    ymm2, ymm2, yword [rdx + 2*rax + 64]
	LONG $0x5cfde5c5; WORD $0x6042             // vpaddw    ymm3, ymm3, yword [rdx + 2*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x4004             // vmovdqu    yword [r8 + 2*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x404c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x4054; BYTE $0x40 // vmovdqu    yword [r8 + 2*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x405c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rax + 96], ymm3
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_57
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_59:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_61

LBB0_60:
	LONG $0x711cb70f             // movzx    ebx, word [rcx + 2*rsi]
	LONG $0x721c0366             // add    bx, word [rdx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_60

LBB0_61:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_62:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf3       // cmp    r11, rsi
	JNE  LBB0_62
	JMP  LBB0_138

LBB0_66:
	LONG $0x58348d4b         // lea    rsi, [r8 + 2*r11]
	LONG $0x5a048d4a         // lea    rax, [rdx + 2*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x59048d4a         // lea    rax, [rcx + 2*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_71
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_71
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xc031             // xor    eax, eax

LBB0_69:
	LONG $0x046ffec5; BYTE $0x41               // vmovdqu    ymm0, yword [rcx + 2*rax]
	LONG $0x4c6ffec5; WORD $0x2041             // vmovdqu    ymm1, yword [rcx + 2*rax + 32]
	LONG $0x546ffec5; WORD $0x4041             // vmovdqu    ymm2, yword [rcx + 2*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6041             // vmovdqu    ymm3, yword [rcx + 2*rax + 96]
	LONG $0x04fdfdc5; BYTE $0x42               // vpaddw    ymm0, ymm0, yword [rdx + 2*rax]
	LONG $0x4cfdf5c5; WORD $0x2042             // vpaddw    ymm1, ymm1, yword [rdx + 2*rax + 32]
	LONG $0x54fdedc5; WORD $0x4042             // vpaddw    ymm2, ymm2, yword [rdx + 2*rax + 64]
	LONG $0x5cfde5c5; WORD $0x6042             // vpaddw    ymm3, ymm3, yword [rdx + 2*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x4004             // vmovdqu    yword [r8 + 2*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x404c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x4054; BYTE $0x40 // vmovdqu    yword [r8 + 2*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x405c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rax + 96], ymm3
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_69
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_71:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_73

LBB0_72:
	LONG $0x711cb70f             // movzx    ebx, word [rcx + 2*rsi]
	LONG $0x721c0366             // add    bx, word [rdx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_72

LBB0_73:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_74:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf3       // cmp    r11, rsi
	JNE  LBB0_74
	JMP  LBB0_138

LBB0_108:
	LONG $0xd8348d4b         // lea    rsi, [r8 + 8*r11]
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_113
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_113
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xc031             // xor    eax, eax

LBB0_111:
	LONG $0x046ffec5; BYTE $0xc1               // vmovdqu    ymm0, yword [rcx + 8*rax]
	LONG $0x4c6ffec5; WORD $0x20c1             // vmovdqu    ymm1, yword [rcx + 8*rax + 32]
	LONG $0x546ffec5; WORD $0x40c1             // vmovdqu    ymm2, yword [rcx + 8*rax + 64]
	LONG $0x5c6ffec5; WORD $0x60c1             // vmovdqu    ymm3, yword [rcx + 8*rax + 96]
	LONG $0x04d4fdc5; BYTE $0xc2               // vpaddq    ymm0, ymm0, yword [rdx + 8*rax]
	LONG $0x4cd4f5c5; WORD $0x20c2             // vpaddq    ymm1, ymm1, yword [rdx + 8*rax + 32]
	LONG $0x54d4edc5; WORD $0x40c2             // vpaddq    ymm2, ymm2, yword [rdx + 8*rax + 64]
	LONG $0x5cd4e5c5; WORD $0x60c2             // vpaddq    ymm3, ymm3, yword [rdx + 8*rax + 96]
	LONG $0x7f7ec1c4; WORD $0xc004             // vmovdqu    yword [r8 + 8*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0xc04c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm3
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_111
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_113:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_115

LBB0_114:
	LONG $0xf11c8b48 // mov    rbx, qword [rcx + 8*rsi]
	LONG $0xf21c0348 // add    rbx, qword [rdx + 8*rsi]
	LONG $0xf01c8949 // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_114

LBB0_115:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_116:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_116
	JMP  LBB0_138

LBB0_120:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_125
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_125
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_123:
	LONG $0x0410fcc5; BYTE $0x81               // vmovups    ymm0, yword [rcx + 4*rax]
	LONG $0x4c10fcc5; WORD $0x2081             // vmovups    ymm1, yword [rcx + 4*rax + 32]
	LONG $0x5410fcc5; WORD $0x4081             // vmovups    ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5c10fcc5; WORD $0x6081             // vmovups    ymm3, yword [rcx + 4*rax + 96]
	LONG $0x0458fcc5; BYTE $0x82               // vaddps    ymm0, ymm0, yword [rdx + 4*rax]
	LONG $0x4c58f4c5; WORD $0x2082             // vaddps    ymm1, ymm1, yword [rdx + 4*rax + 32]
	LONG $0x5458ecc5; WORD $0x4082             // vaddps    ymm2, ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5c58e4c5; WORD $0x6082             // vaddps    ymm3, ymm3, yword [rdx + 4*rax + 96]
	LONG $0x117cc1c4; WORD $0x8004             // vmovups    yword [r8 + 4*rax], ymm0
	LONG $0x117cc1c4; WORD $0x804c; BYTE $0x20 // vmovups    yword [r8 + 4*rax + 32], ymm1
	LONG $0x117cc1c4; WORD $0x8054; BYTE $0x40 // vmovups    yword [r8 + 4*rax + 64], ymm2
	LONG $0x117cc1c4; WORD $0x805c; BYTE $0x60 // vmovups    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_123
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_125:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_127

LBB0_126:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2   // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_126

LBB0_127:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_128:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2               // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4458fac5; WORD $0x04b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4458fac5; WORD $0x08b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4458fac5; WORD $0x0cb2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB0_128
	JMP  LBB0_138

LBB0_33:
	LONG $0x18348d4b         // lea    rsi, [r8 + r11]
	LONG $0x1a048d4a         // lea    rax, [rdx + r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x19048d4a         // lea    rax, [rcx + r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_38
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_38
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xc031             // xor    eax, eax

LBB0_36:
	LONG $0x046ffec5; BYTE $0x01               // vmovdqu    ymm0, yword [rcx + rax]
	LONG $0x4c6ffec5; WORD $0x2001             // vmovdqu    ymm1, yword [rcx + rax + 32]
	LONG $0x546ffec5; WORD $0x4001             // vmovdqu    ymm2, yword [rcx + rax + 64]
	LONG $0x5c6ffec5; WORD $0x6001             // vmovdqu    ymm3, yword [rcx + rax + 96]
	LONG $0x04fcfdc5; BYTE $0x02               // vpaddb    ymm0, ymm0, yword [rdx + rax]
	LONG $0x4cfcf5c5; WORD $0x2002             // vpaddb    ymm1, ymm1, yword [rdx + rax + 32]
	LONG $0x54fcedc5; WORD $0x4002             // vpaddb    ymm2, ymm2, yword [rdx + rax + 64]
	LONG $0x5cfce5c5; WORD $0x6002             // vpaddb    ymm3, ymm3, yword [rdx + rax + 96]
	LONG $0x7f7ec1c4; WORD $0x0004             // vmovdqu    yword [r8 + rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x004c; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm3
	LONG $0x80e88348                           // sub    rax, -128
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_36
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_38:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_40

LBB0_39:
	LONG $0x311cb60f         // movzx    ebx, byte [rcx + rsi]
	WORD $0x1c02; BYTE $0x32 // add    bl, byte [rdx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_39

LBB0_40:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_41:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_41
	JMP  LBB0_138

LBB0_87:
	LONG $0x98348d4b         // lea    rsi, [r8 + 4*r11]
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd6970f41         // seta    r14b
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd2970f41         // seta    r10b
	WORD $0xf631             // xor    esi, esi
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB0_92
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	JNE  LBB0_92
	WORD $0x8944; BYTE $0xde // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xc031             // xor    eax, eax

LBB0_90:
	LONG $0x046ffec5; BYTE $0x81               // vmovdqu    ymm0, yword [rcx + 4*rax]
	LONG $0x4c6ffec5; WORD $0x2081             // vmovdqu    ymm1, yword [rcx + 4*rax + 32]
	LONG $0x546ffec5; WORD $0x4081             // vmovdqu    ymm2, yword [rcx + 4*rax + 64]
	LONG $0x5c6ffec5; WORD $0x6081             // vmovdqu    ymm3, yword [rcx + 4*rax + 96]
	LONG $0x04fefdc5; BYTE $0x82               // vpaddd    ymm0, ymm0, yword [rdx + 4*rax]
	LONG $0x4cfef5c5; WORD $0x2082             // vpaddd    ymm1, ymm1, yword [rdx + 4*rax + 32]
	LONG $0x54feedc5; WORD $0x4082             // vpaddd    ymm2, ymm2, yword [rdx + 4*rax + 64]
	LONG $0x5cfee5c5; WORD $0x6082             // vpaddd    ymm3, ymm3, yword [rdx + 4*rax + 96]
	LONG $0x7f7ec1c4; WORD $0x8004             // vmovdqu    yword [r8 + 4*rax], ymm0
	LONG $0x7f7ec1c4; WORD $0x804c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm3
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB0_90
	WORD $0x394c; BYTE $0xde                   // cmp    rsi, r11
	JE   LBB0_138

LBB0_92:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_94

LBB0_93:
	WORD $0x1c8b; BYTE $0xb1 // mov    ebx, dword [rcx + 4*rsi]
	WORD $0x1c03; BYTE $0xb2 // add    ebx, dword [rdx + 4*rsi]
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_93

LBB0_94:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB0_138

LBB0_95:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JNE  LBB0_95
	JMP  LBB0_138

TEXT Â·_arithmetic_arr_scalar_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9

	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB1_11
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB1_28
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB1_517

LBB1_3:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_36
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_60
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_98
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_101
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_474
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b44; BYTE $0x31 // mov    r14d, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_10
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_254
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_254

LBB1_10:
	WORD $0xf631 // xor    esi, esi

LBB1_398:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_400

LBB1_399:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x0144; BYTE $0xf0 // add    eax, r14d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_399

LBB1_400:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_474

LBB1_401:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_401
	JMP  LBB1_474

LBB1_11:
	LONG $0x02fe8040 // cmp    sil, 2
	JE   LBB1_474
	LONG $0x03fe8040 // cmp    sil, 3
	JNE  LBB1_517

LBB1_13:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_21
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_50
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_70
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_73
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_517
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_20
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_194
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_194

LBB1_20:
	WORD $0xf631 // xor    esi, esi

LBB1_318:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_320

LBB1_319:
	WORD $0x1c8b; BYTE $0xb2 // mov    ebx, dword [rdx + 4*rsi]
	WORD $0xc329             // sub    ebx, eax
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc18348         // add    rcx, -1
	JNE  LBB1_319

LBB1_320:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_517

LBB1_321:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_321
	JMP  LBB1_517

LBB1_21:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_55
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_76
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_79
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_517
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_27
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_197
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_197

LBB1_27:
	WORD $0xc931 // xor    ecx, ecx

LBB1_326:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_328

LBB1_327:
	LONG $0x0c10fbc5; BYTE $0xca   // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5               // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_327

LBB1_328:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_517

LBB1_329:
	LONG $0x0c10fbc5; BYTE $0xca               // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c10fbc5; WORD $0x08ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c10fbc5; WORD $0x10ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c10fbc5; WORD $0x18ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_329
	JMP  LBB1_517

LBB1_28:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_43
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_88
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_116
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_119
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_3
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b44; BYTE $0x31 // mov    r14d, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_35
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_284
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_284

LBB1_35:
	WORD $0xf631 // xor    esi, esi

LBB1_662:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_664

LBB1_663:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x0144; BYTE $0xf0 // add    eax, r14d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_663

LBB1_664:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_3

LBB1_665:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_665
	JMP  LBB1_3

LBB1_36:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_65
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_104
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_107
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_474
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_42
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_257
	LONG $0xd8048d4b         // lea    rax, [r8 + 8*r11]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_257

LBB1_42:
	WORD $0xf631 // xor    esi, esi

LBB1_406:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_408

LBB1_407:
	LONG $0x0c58fbc5; BYTE $0xf2   // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB1_407

LBB1_408:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_474

LBB1_409:
	LONG $0x0c58fbc5; BYTE $0xf2               // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c             // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x4c58fbc5; WORD $0x08f2             // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10f2             // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18f2             // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB1_409
	JMP  LBB1_474

LBB1_43:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_93
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_122
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_125
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_3
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_49
	LONG $0xda048d4a         // lea    rax, [rdx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_287
	LONG $0xd8048d4b         // lea    rax, [r8 + 8*r11]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_287

LBB1_49:
	WORD $0xf631 // xor    esi, esi

LBB1_670:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_672

LBB1_671:
	LONG $0x0c58fbc5; BYTE $0xf2   // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB1_671

LBB1_672:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_3

LBB1_673:
	LONG $0x0c58fbc5; BYTE $0xf2               // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c             // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x4c58fbc5; WORD $0x08f2             // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10f2             // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18f2             // vaddsd    xmm1, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB1_673
	JMP  LBB1_3

LBB1_50:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_82
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_517
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_54
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_200
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_200

LBB1_54:
	WORD $0xf631 // xor    esi, esi

LBB1_334:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_336

LBB1_335:
	LONG $0x321cb60f // movzx    ebx, byte [rdx + rsi]
	WORD $0xc328     // sub    bl, al
	LONG $0x301c8841 // mov    byte [r8 + rsi], bl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB1_335

LBB1_336:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_517

LBB1_337:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_337
	JMP  LBB1_517

LBB1_55:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_85
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_517
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_59
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_203
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_203

LBB1_59:
	WORD $0xf631 // xor    esi, esi

LBB1_342:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_344

LBB1_343:
	LONG $0xf21c8b48         // mov    rbx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc3 // sub    rbx, rax
	LONG $0xf01c8949         // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc18348         // add    rcx, -1
	JNE  LBB1_343

LBB1_344:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_517

LBB1_345:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_345
	JMP  LBB1_517

LBB1_60:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_110
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_474
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8a44; BYTE $0x31                   // mov    r14b, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_64
	LONG $0x12048d4a                           // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB1_260
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JBE  LBB1_260

LBB1_64:
	WORD $0xf631 // xor    esi, esi

LBB1_414:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_416

LBB1_415:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x0044; BYTE $0xf0 // add    al, r14b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_415

LBB1_416:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_474

LBB1_417:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_417
	JMP  LBB1_474

LBB1_65:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_113
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_474
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b4c; BYTE $0x31 // mov    r14, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_69
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_263
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_263

LBB1_69:
	WORD $0xf631 // xor    esi, esi

LBB1_422:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_424

LBB1_423:
	LONG $0xf2048b48         // mov    rax, qword [rdx + 8*rsi]
	WORD $0x014c; BYTE $0xf0 // add    rax, r14
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_423

LBB1_424:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_474

LBB1_425:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_425
	JMP  LBB1_474

LBB1_70:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_72
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_206
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_206

LBB1_72:
	WORD $0xf631 // xor    esi, esi

LBB1_350:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_352

LBB1_351:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	WORD $0xc329                 // sub    ebx, eax
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_351

LBB1_352:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_517

LBB1_353:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_353
	JMP  LBB1_517

LBB1_73:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_75
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_209
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_209

LBB1_75:
	WORD $0xf631 // xor    esi, esi

LBB1_358:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_360

LBB1_359:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	WORD $0xc329                 // sub    ebx, eax
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_359

LBB1_360:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_517

LBB1_361:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_361
	JMP  LBB1_517

LBB1_76:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_78
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_212
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_212

LBB1_78:
	WORD $0xf631 // xor    esi, esi

LBB1_366:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_368

LBB1_367:
	LONG $0xf21c8b48         // mov    rbx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc3 // sub    rbx, rax
	LONG $0xf01c8949         // mov    qword [r8 + 8*rsi], rbx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc18348         // add    rcx, -1
	JNE  LBB1_367

LBB1_368:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_517

LBB1_369:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_369
	JMP  LBB1_517

LBB1_79:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_81
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_215
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_215

LBB1_81:
	WORD $0xc931 // xor    ecx, ecx

LBB1_374:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_376

LBB1_375:
	LONG $0x0c10fac5; BYTE $0x8a   // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5               // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_375

LBB1_376:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_517

LBB1_377:
	LONG $0x0c10fac5; BYTE $0x8a               // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c10fac5; WORD $0x048a             // vmovss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c10fac5; WORD $0x088a             // vmovss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c10fac5; WORD $0x0c8a             // vmovss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_377
	JMP  LBB1_517

LBB1_82:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_84
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_218
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_218

LBB1_84:
	WORD $0xf631 // xor    esi, esi

LBB1_382:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_384

LBB1_383:
	LONG $0x321cb60f // movzx    ebx, byte [rdx + rsi]
	WORD $0xc328     // sub    bl, al
	LONG $0x301c8841 // mov    byte [r8 + rsi], bl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB1_383

LBB1_384:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_517

LBB1_385:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_385
	JMP  LBB1_517

LBB1_85:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_87
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_221
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_221

LBB1_87:
	WORD $0xf631 // xor    esi, esi

LBB1_390:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_392

LBB1_391:
	WORD $0x1c8b; BYTE $0xb2 // mov    ebx, dword [rdx + 4*rsi]
	WORD $0xc329             // sub    ebx, eax
	LONG $0xb01c8941         // mov    dword [r8 + 4*rsi], ebx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc18348         // add    rcx, -1
	JNE  LBB1_391

LBB1_392:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_517

LBB1_393:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_393
	JMP  LBB1_517

LBB1_88:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_128
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_3
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8a44; BYTE $0x31                   // mov    r14b, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_92
	LONG $0x12048d4a                           // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB1_290
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JBE  LBB1_290

LBB1_92:
	WORD $0xf631 // xor    esi, esi

LBB1_678:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_680

LBB1_679:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x0044; BYTE $0xf0 // add    al, r14b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_679

LBB1_680:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_3

LBB1_681:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_681
	JMP  LBB1_3

LBB1_93:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_131
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_3
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b4c; BYTE $0x31 // mov    r14, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_97
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_293
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_293

LBB1_97:
	WORD $0xf631 // xor    esi, esi

LBB1_686:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_688

LBB1_687:
	LONG $0xf2048b48         // mov    rax, qword [rdx + 8*rsi]
	WORD $0x014c; BYTE $0xf0 // add    rax, r14
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_687

LBB1_688:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_3

LBB1_689:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_689
	JMP  LBB1_3

LBB1_98:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x31b70f44         // movzx    r14d, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_100
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_266
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_266

LBB1_100:
	WORD $0xf631 // xor    esi, esi

LBB1_430:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB1_432

LBB1_431:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	LONG $0xf3014466             // add    bx, r14w
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB1_431

LBB1_432:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_474

LBB1_433:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_433
	JMP  LBB1_474

LBB1_101:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x31b70f44         // movzx    r14d, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_103
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_269
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_269

LBB1_103:
	WORD $0xf631 // xor    esi, esi

LBB1_438:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB1_440

LBB1_439:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	LONG $0xf3014466             // add    bx, r14w
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB1_439

LBB1_440:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_474

LBB1_441:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_441
	JMP  LBB1_474

LBB1_104:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b4c; BYTE $0x31 // mov    r14, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_106
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_272
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_272

LBB1_106:
	WORD $0xf631 // xor    esi, esi

LBB1_446:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_448

LBB1_447:
	LONG $0xf2048b48         // mov    rax, qword [rdx + 8*rsi]
	WORD $0x014c; BYTE $0xf0 // add    rax, r14
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_447

LBB1_448:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_474

LBB1_449:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_449
	JMP  LBB1_474

LBB1_107:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_109
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_275
	LONG $0x98048d4b         // lea    rax, [r8 + 4*r11]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_275

LBB1_109:
	WORD $0xf631 // xor    esi, esi

LBB1_454:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_456

LBB1_455:
	LONG $0x0c58fac5; BYTE $0xb2   // vaddss    xmm1, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB1_455

LBB1_456:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_474

LBB1_457:
	LONG $0x0c58fac5; BYTE $0xb2               // vaddss    xmm1, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c             // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x4c58fac5; WORD $0x04b2             // vaddss    xmm1, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm1
	LONG $0x4c58fac5; WORD $0x08b2             // vaddss    xmm1, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0cb2             // vaddss    xmm1, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB1_457
	JMP  LBB1_474

LBB1_110:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8a44; BYTE $0x31                   // mov    r14b, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_112
	LONG $0x12048d4a                           // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB1_278
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JBE  LBB1_278

LBB1_112:
	WORD $0xf631 // xor    esi, esi

LBB1_462:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_464

LBB1_463:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x0044; BYTE $0xf0 // add    al, r14b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_463

LBB1_464:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_474

LBB1_465:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_465
	JMP  LBB1_474

LBB1_113:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b44; BYTE $0x31 // mov    r14d, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_115
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_281
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_281

LBB1_115:
	WORD $0xf631 // xor    esi, esi

LBB1_470:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_472

LBB1_471:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x0144; BYTE $0xf0 // add    eax, r14d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_471

LBB1_472:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_474

LBB1_473:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_473
	JMP  LBB1_474

LBB1_116:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x31b70f44         // movzx    r14d, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_118
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_296
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_296

LBB1_118:
	WORD $0xf631 // xor    esi, esi

LBB1_694:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB1_696

LBB1_695:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	LONG $0xf3014466             // add    bx, r14w
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB1_695

LBB1_696:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_3

LBB1_697:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_697
	JMP  LBB1_3

LBB1_119:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x31b70f44         // movzx    r14d, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_121
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_299
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_299

LBB1_121:
	WORD $0xf631 // xor    esi, esi

LBB1_702:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB1_704

LBB1_703:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	LONG $0xf3014466             // add    bx, r14w
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB1_703

LBB1_704:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_3

LBB1_705:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_705
	JMP  LBB1_3

LBB1_122:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b4c; BYTE $0x31 // mov    r14, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_124
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_302
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_302

LBB1_124:
	WORD $0xf631 // xor    esi, esi

LBB1_710:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_712

LBB1_711:
	LONG $0xf2048b48         // mov    rax, qword [rdx + 8*rsi]
	WORD $0x014c; BYTE $0xf0 // add    rax, r14
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_711

LBB1_712:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_3

LBB1_713:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_713
	JMP  LBB1_3

LBB1_125:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_127
	LONG $0x9a048d4a         // lea    rax, [rdx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_305
	LONG $0x98048d4b         // lea    rax, [r8 + 4*r11]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_305

LBB1_127:
	WORD $0xf631 // xor    esi, esi

LBB1_718:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_720

LBB1_719:
	LONG $0x0c58fac5; BYTE $0xb2   // vaddss    xmm1, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB1_719

LBB1_720:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_3

LBB1_721:
	LONG $0x0c58fac5; BYTE $0xb2               // vaddss    xmm1, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c             // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x4c58fac5; WORD $0x04b2             // vaddss    xmm1, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm1
	LONG $0x4c58fac5; WORD $0x08b2             // vaddss    xmm1, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0cb2             // vaddss    xmm1, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB1_721
	JMP  LBB1_3

LBB1_128:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8a44; BYTE $0x31                   // mov    r14b, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_130
	LONG $0x12048d4a                           // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB1_308
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JBE  LBB1_308

LBB1_130:
	WORD $0xf631 // xor    esi, esi

LBB1_726:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_728

LBB1_727:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x0044; BYTE $0xf0 // add    al, r14b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_727

LBB1_728:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_3

LBB1_729:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_729
	JMP  LBB1_3

LBB1_131:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b44; BYTE $0x31 // mov    r14d, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_133
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_311
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_311

LBB1_133:
	WORD $0xf631 // xor    esi, esi

LBB1_734:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_736

LBB1_735:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x0144; BYTE $0xf0 // add    eax, r14d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_735

LBB1_736:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_3

LBB1_737:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_737
	JMP  LBB1_3

LBB1_194:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_314
	WORD $0x894c; BYTE $0xcb     // mov    rbx, r9
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xff31                 // xor    edi, edi

LBB1_196:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_196
	JMP  LBB1_315

LBB1_197:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	LONG $0x04ebc148             // shr    rbx, 4
	LONG $0x01c38348             // add    rbx, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_322
	WORD $0x8948; BYTE $0xdf     // mov    rdi, rbx
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_199:
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf06c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm5
	QUAD $0x000080f29410fdc5; BYTE $0x00       // vmovupd    ymm2, yword [rdx + 8*rsi + 128]
	QUAD $0x0000a0f29c10fdc5; BYTE $0x00       // vmovupd    ymm3, yword [rdx + 8*rsi + 160]
	QUAD $0x0000c0f2a410fdc5; BYTE $0x00       // vmovupd    ymm4, yword [rdx + 8*rsi + 192]
	QUAD $0x0000e0f2ac10fdc5; BYTE $0x00       // vmovupd    ymm5, yword [rdx + 8*rsi + 224]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	QUAD $0x0080f094117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 128], ymm2
	QUAD $0x00a0f09c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 160], ymm3
	QUAD $0x00c0f0a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 192], ymm4
	QUAD $0x00e0f0ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 224], ymm5
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_199
	JMP  LBB1_323

LBB1_200:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_330
	WORD $0x894c; BYTE $0xcb     // mov    rbx, r9
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xff31                 // xor    edi, edi

LBB1_202:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_202
	JMP  LBB1_331

LBB1_203:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_338
	WORD $0x894c; BYTE $0xcb     // mov    rbx, r9
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xff31                 // xor    edi, edi

LBB1_205:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_205
	JMP  LBB1_339

LBB1_206:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_346
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_208:
	LONG $0x0c6ffec5; BYTE $0x5a               // vmovdqu    ymm1, yword [rdx + 2*rbx]
	LONG $0x546ffec5; WORD $0x205a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x405a             // vmovdqu    ymm1, yword [rdx + 2*rbx + 64]
	LONG $0x546ffec5; WORD $0x605a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_208
	JMP  LBB1_347

LBB1_209:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_354
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_211:
	LONG $0x0c6ffec5; BYTE $0x5a               // vmovdqu    ymm1, yword [rdx + 2*rbx]
	LONG $0x546ffec5; WORD $0x205a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x405a             // vmovdqu    ymm1, yword [rdx + 2*rbx + 64]
	LONG $0x546ffec5; WORD $0x605a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_211
	JMP  LBB1_355

LBB1_212:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_362
	WORD $0x894c; BYTE $0xcb     // mov    rbx, r9
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xff31                 // xor    edi, edi

LBB1_214:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_214
	JMP  LBB1_363

LBB1_215:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	LONG $0x05ebc148             // shr    rbx, 5
	LONG $0x01c38348             // add    rbx, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_370
	WORD $0x8948; BYTE $0xdf     // mov    rdi, rbx
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_217:
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb06c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm5
	QUAD $0x000080b29410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdx + 4*rsi + 128]
	QUAD $0x0000a0b29c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdx + 4*rsi + 160]
	QUAD $0x0000c0b2a410fcc5; BYTE $0x00       // vmovups    ymm4, yword [rdx + 4*rsi + 192]
	QUAD $0x0000e0b2ac10fcc5; BYTE $0x00       // vmovups    ymm5, yword [rdx + 4*rsi + 224]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	QUAD $0x0080b094117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 128], ymm2
	QUAD $0x00a0b09c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 160], ymm3
	QUAD $0x00c0b0a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 192], ymm4
	QUAD $0x00e0b0ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 224], ymm5
	LONG $0x40c68348                           // add    rsi, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_217
	JMP  LBB1_371

LBB1_218:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_378
	WORD $0x894c; BYTE $0xcb     // mov    rbx, r9
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xff31                 // xor    edi, edi

LBB1_220:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_220
	JMP  LBB1_379

LBB1_221:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_386
	WORD $0x894c; BYTE $0xcb     // mov    rbx, r9
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xff31                 // xor    edi, edi

LBB1_223:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_223
	JMP  LBB1_387

LBB1_254:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_394
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_256:
	LONG $0x0cfefdc5; BYTE $0x9a               // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x209a             // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x409a             // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 64]
	LONG $0x64fefdc5; WORD $0x609a             // vpaddd    ymm4, ymm0, yword [rdx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x0000809a8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx + 128]
	QUAD $0x0000a09a94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 160]
	QUAD $0x0000c09a9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 192]
	QUAD $0x0000e09aa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_256
	JMP  LBB1_395

LBB1_257:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x04eac149             // shr    r10, 4
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_402
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_259:
	LONG $0x1458f5c5; BYTE $0xda               // vaddpd    ymm2, ymm1, yword [rdx + 8*rbx]
	LONG $0x5c58f5c5; WORD $0x20da             // vaddpd    ymm3, ymm1, yword [rdx + 8*rbx + 32]
	LONG $0x6458f5c5; WORD $0x40da             // vaddpd    ymm4, ymm1, yword [rdx + 8*rbx + 64]
	LONG $0x6c58f5c5; WORD $0x60da             // vaddpd    ymm5, ymm1, yword [rdx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm5
	QUAD $0x000080da9458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rdx + 8*rbx + 128]
	QUAD $0x0000a0da9c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rdx + 8*rbx + 160]
	QUAD $0x0000c0daa458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rdx + 8*rbx + 192]
	QUAD $0x0000e0daac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rdx + 8*rbx + 224]
	QUAD $0x0080d894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 128], ymm2
	QUAD $0x00a0d89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 160], ymm3
	QUAD $0x00c0d8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 192], ymm4
	QUAD $0x00e0d8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 224], ymm5
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_259
	JMP  LBB1_403

LBB1_260:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_410
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_262:
	LONG $0x0cfcfdc5; BYTE $0x1a               // vpaddb    ymm1, ymm0, yword [rdx + rbx]
	LONG $0x54fcfdc5; WORD $0x201a             // vpaddb    ymm2, ymm0, yword [rdx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x401a             // vpaddb    ymm3, ymm0, yword [rdx + rbx + 64]
	LONG $0x64fcfdc5; WORD $0x601a             // vpaddb    ymm4, ymm0, yword [rdx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x0000801a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rbx + 128]
	QUAD $0x0000a01a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rbx + 160]
	QUAD $0x0000c01a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rbx + 192]
	QUAD $0x0000e01aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_262
	JMP  LBB1_411

LBB1_263:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_418
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_265:
	LONG $0x0cd4fdc5; BYTE $0xda               // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20da             // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40da             // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 64]
	LONG $0x64d4fdc5; WORD $0x60da             // vpaddq    ymm4, ymm0, yword [rdx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080da8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx + 128]
	QUAD $0x0000a0da94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 160]
	QUAD $0x0000c0da9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 192]
	QUAD $0x0000e0daa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_265
	JMP  LBB1_419

LBB1_266:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_426
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_268:
	LONG $0x0cfdfdc5; BYTE $0x5a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx]
	LONG $0x54fdfdc5; WORD $0x205a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x405a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx + 64]
	LONG $0x54fdfdc5; WORD $0x605a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_268
	JMP  LBB1_427

LBB1_269:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_434
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_271:
	LONG $0x0cfdfdc5; BYTE $0x5a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx]
	LONG $0x54fdfdc5; WORD $0x205a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x405a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx + 64]
	LONG $0x54fdfdc5; WORD $0x605a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_271
	JMP  LBB1_435

LBB1_272:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_442
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_274:
	LONG $0x0cd4fdc5; BYTE $0xda               // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20da             // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40da             // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 64]
	LONG $0x64d4fdc5; WORD $0x60da             // vpaddq    ymm4, ymm0, yword [rdx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080da8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx + 128]
	QUAD $0x0000a0da94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 160]
	QUAD $0x0000c0da9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 192]
	QUAD $0x0000e0daa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_274
	JMP  LBB1_443

LBB1_275:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x05eac149             // shr    r10, 5
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_450
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_277:
	LONG $0x1458f4c5; BYTE $0x9a               // vaddps    ymm2, ymm1, yword [rdx + 4*rbx]
	LONG $0x5c58f4c5; WORD $0x209a             // vaddps    ymm3, ymm1, yword [rdx + 4*rbx + 32]
	LONG $0x6458f4c5; WORD $0x409a             // vaddps    ymm4, ymm1, yword [rdx + 4*rbx + 64]
	LONG $0x6c58f4c5; WORD $0x609a             // vaddps    ymm5, ymm1, yword [rdx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x986c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm5
	QUAD $0x0000809a9458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rdx + 4*rbx + 128]
	QUAD $0x0000a09a9c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rdx + 4*rbx + 160]
	QUAD $0x0000c09aa458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rdx + 4*rbx + 192]
	QUAD $0x0000e09aac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rdx + 4*rbx + 224]
	QUAD $0x00809894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 128], ymm2
	QUAD $0x00a0989c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 160], ymm3
	QUAD $0x00c098a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 192], ymm4
	QUAD $0x00e098ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 224], ymm5
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_277
	JMP  LBB1_451

LBB1_278:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_458
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_280:
	LONG $0x0cfcfdc5; BYTE $0x1a               // vpaddb    ymm1, ymm0, yword [rdx + rbx]
	LONG $0x54fcfdc5; WORD $0x201a             // vpaddb    ymm2, ymm0, yword [rdx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x401a             // vpaddb    ymm3, ymm0, yword [rdx + rbx + 64]
	LONG $0x64fcfdc5; WORD $0x601a             // vpaddb    ymm4, ymm0, yword [rdx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x0000801a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rbx + 128]
	QUAD $0x0000a01a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rbx + 160]
	QUAD $0x0000c01a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rbx + 192]
	QUAD $0x0000e01aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_280
	JMP  LBB1_459

LBB1_281:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_466
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_283:
	LONG $0x0cfefdc5; BYTE $0x9a               // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x209a             // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x409a             // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 64]
	LONG $0x64fefdc5; WORD $0x609a             // vpaddd    ymm4, ymm0, yword [rdx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x0000809a8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx + 128]
	QUAD $0x0000a09a94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 160]
	QUAD $0x0000c09a9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 192]
	QUAD $0x0000e09aa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_283
	JMP  LBB1_467

LBB1_284:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_658
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_286:
	LONG $0x0cfefdc5; BYTE $0x9a               // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x209a             // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x409a             // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 64]
	LONG $0x64fefdc5; WORD $0x609a             // vpaddd    ymm4, ymm0, yword [rdx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x0000809a8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx + 128]
	QUAD $0x0000a09a94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 160]
	QUAD $0x0000c09a9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 192]
	QUAD $0x0000e09aa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_286
	JMP  LBB1_659

LBB1_287:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x04eac149             // shr    r10, 4
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_666
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_289:
	LONG $0x1458f5c5; BYTE $0xda               // vaddpd    ymm2, ymm1, yword [rdx + 8*rbx]
	LONG $0x5c58f5c5; WORD $0x20da             // vaddpd    ymm3, ymm1, yword [rdx + 8*rbx + 32]
	LONG $0x6458f5c5; WORD $0x40da             // vaddpd    ymm4, ymm1, yword [rdx + 8*rbx + 64]
	LONG $0x6c58f5c5; WORD $0x60da             // vaddpd    ymm5, ymm1, yword [rdx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm5
	QUAD $0x000080da9458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rdx + 8*rbx + 128]
	QUAD $0x0000a0da9c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rdx + 8*rbx + 160]
	QUAD $0x0000c0daa458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rdx + 8*rbx + 192]
	QUAD $0x0000e0daac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rdx + 8*rbx + 224]
	QUAD $0x0080d894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 128], ymm2
	QUAD $0x00a0d89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 160], ymm3
	QUAD $0x00c0d8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 192], ymm4
	QUAD $0x00e0d8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 224], ymm5
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_289
	JMP  LBB1_667

LBB1_290:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_674
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_292:
	LONG $0x0cfcfdc5; BYTE $0x1a               // vpaddb    ymm1, ymm0, yword [rdx + rbx]
	LONG $0x54fcfdc5; WORD $0x201a             // vpaddb    ymm2, ymm0, yword [rdx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x401a             // vpaddb    ymm3, ymm0, yword [rdx + rbx + 64]
	LONG $0x64fcfdc5; WORD $0x601a             // vpaddb    ymm4, ymm0, yword [rdx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x0000801a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rbx + 128]
	QUAD $0x0000a01a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rbx + 160]
	QUAD $0x0000c01a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rbx + 192]
	QUAD $0x0000e01aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_292
	JMP  LBB1_675

LBB1_293:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_682
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_295:
	LONG $0x0cd4fdc5; BYTE $0xda               // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20da             // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40da             // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 64]
	LONG $0x64d4fdc5; WORD $0x60da             // vpaddq    ymm4, ymm0, yword [rdx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080da8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx + 128]
	QUAD $0x0000a0da94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 160]
	QUAD $0x0000c0da9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 192]
	QUAD $0x0000e0daa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_295
	JMP  LBB1_683

LBB1_296:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_690
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_298:
	LONG $0x0cfdfdc5; BYTE $0x5a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx]
	LONG $0x54fdfdc5; WORD $0x205a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x405a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx + 64]
	LONG $0x54fdfdc5; WORD $0x605a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_298
	JMP  LBB1_691

LBB1_299:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_698
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_301:
	LONG $0x0cfdfdc5; BYTE $0x5a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx]
	LONG $0x54fdfdc5; WORD $0x205a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x405a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx + 64]
	LONG $0x54fdfdc5; WORD $0x605a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_301
	JMP  LBB1_699

LBB1_302:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_706
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_304:
	LONG $0x0cd4fdc5; BYTE $0xda               // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20da             // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40da             // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 64]
	LONG $0x64d4fdc5; WORD $0x60da             // vpaddq    ymm4, ymm0, yword [rdx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080da8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx + 128]
	QUAD $0x0000a0da94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 160]
	QUAD $0x0000c0da9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 192]
	QUAD $0x0000e0daa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_304
	JMP  LBB1_707

LBB1_305:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x05eac149             // shr    r10, 5
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_714
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_307:
	LONG $0x1458f4c5; BYTE $0x9a               // vaddps    ymm2, ymm1, yword [rdx + 4*rbx]
	LONG $0x5c58f4c5; WORD $0x209a             // vaddps    ymm3, ymm1, yword [rdx + 4*rbx + 32]
	LONG $0x6458f4c5; WORD $0x409a             // vaddps    ymm4, ymm1, yword [rdx + 4*rbx + 64]
	LONG $0x6c58f4c5; WORD $0x609a             // vaddps    ymm5, ymm1, yword [rdx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x986c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm5
	QUAD $0x0000809a9458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rdx + 4*rbx + 128]
	QUAD $0x0000a09a9c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rdx + 4*rbx + 160]
	QUAD $0x0000c09aa458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rdx + 4*rbx + 192]
	QUAD $0x0000e09aac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rdx + 4*rbx + 224]
	QUAD $0x00809894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 128], ymm2
	QUAD $0x00a0989c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 160], ymm3
	QUAD $0x00c098a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 192], ymm4
	QUAD $0x00e098ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 224], ymm5
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_307
	JMP  LBB1_715

LBB1_308:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_722
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_310:
	LONG $0x0cfcfdc5; BYTE $0x1a               // vpaddb    ymm1, ymm0, yword [rdx + rbx]
	LONG $0x54fcfdc5; WORD $0x201a             // vpaddb    ymm2, ymm0, yword [rdx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x401a             // vpaddb    ymm3, ymm0, yword [rdx + rbx + 64]
	LONG $0x64fcfdc5; WORD $0x601a             // vpaddb    ymm4, ymm0, yword [rdx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x0000801a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rbx + 128]
	QUAD $0x0000a01a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rbx + 160]
	QUAD $0x0000c01a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rbx + 192]
	QUAD $0x0000e01aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_310
	JMP  LBB1_723

LBB1_311:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_730
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_313:
	LONG $0x0cfefdc5; BYTE $0x9a               // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x209a             // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x409a             // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 64]
	LONG $0x64fefdc5; WORD $0x609a             // vpaddd    ymm4, ymm0, yword [rdx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x0000809a8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx + 128]
	QUAD $0x0000a09a94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 160]
	QUAD $0x0000c09a9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 192]
	QUAD $0x0000e09aa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_313
	JMP  LBB1_731

LBB1_314:
	WORD $0xff31 // xor    edi, edi

LBB1_315:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_317
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_317:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_517
	JMP  LBB1_318

LBB1_322:
	WORD $0xf631 // xor    esi, esi

LBB1_323:
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JE   LBB1_325
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xc95cd5c5                           // vsubpd    ymm1, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf04c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm1

LBB1_325:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_517
	JMP  LBB1_326

LBB1_330:
	WORD $0xff31 // xor    edi, edi

LBB1_331:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_333
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_333:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_517
	JMP  LBB1_334

LBB1_338:
	WORD $0xff31 // xor    edi, edi

LBB1_339:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_341
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_341:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_517
	JMP  LBB1_342

LBB1_346:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_347:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_349
	LONG $0x0c6ffec5; BYTE $0x5a               // vmovdqu    ymm1, yword [rdx + 2*rbx]
	LONG $0x546ffec5; WORD $0x205a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB1_349:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_517
	JMP  LBB1_350

LBB1_354:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_355:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_357
	LONG $0x0c6ffec5; BYTE $0x5a               // vmovdqu    ymm1, yword [rdx + 2*rbx]
	LONG $0x546ffec5; WORD $0x205a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB1_357:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_517
	JMP  LBB1_358

LBB1_362:
	WORD $0xff31 // xor    edi, edi

LBB1_363:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_365
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_365:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_517
	JMP  LBB1_366

LBB1_370:
	WORD $0xf631 // xor    esi, esi

LBB1_371:
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JE   LBB1_373
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xc95cd4c5                           // vsubps    ymm1, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb04c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm1

LBB1_373:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_517
	JMP  LBB1_374

LBB1_378:
	WORD $0xff31 // xor    edi, edi

LBB1_379:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_381
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_381:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_517
	JMP  LBB1_382

LBB1_386:
	WORD $0xff31 // xor    edi, edi

LBB1_387:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_389
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_389:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_517
	JMP  LBB1_390

LBB1_394:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_395:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_397
	LONG $0x0cfefdc5; BYTE $0x9a               // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x209a             // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x409a             // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 64]
	LONG $0x44fefdc5; WORD $0x609a             // vpaddd    ymm0, ymm0, yword [rdx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB1_397:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_474
	JMP  LBB1_398

LBB1_402:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_403:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB1_405
	LONG $0x1458f5c5; BYTE $0xda               // vaddpd    ymm2, ymm1, yword [rdx + 8*rbx]
	LONG $0x5c58f5c5; WORD $0x20da             // vaddpd    ymm3, ymm1, yword [rdx + 8*rbx + 32]
	LONG $0x6458f5c5; WORD $0x40da             // vaddpd    ymm4, ymm1, yword [rdx + 8*rbx + 64]
	LONG $0x4c58f5c5; WORD $0x60da             // vaddpd    ymm1, ymm1, yword [rdx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm1

LBB1_405:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB1_474
	JMP  LBB1_406

LBB1_410:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_411:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_413
	LONG $0x0cfcfdc5; BYTE $0x1a               // vpaddb    ymm1, ymm0, yword [rdx + rbx]
	LONG $0x54fcfdc5; WORD $0x201a             // vpaddb    ymm2, ymm0, yword [rdx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x401a             // vpaddb    ymm3, ymm0, yword [rdx + rbx + 64]
	LONG $0x44fcfdc5; WORD $0x601a             // vpaddb    ymm0, ymm0, yword [rdx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB1_413:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_474
	JMP  LBB1_414

LBB1_418:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_419:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_421
	LONG $0x0cd4fdc5; BYTE $0xda               // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20da             // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40da             // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 64]
	LONG $0x44d4fdc5; WORD $0x60da             // vpaddq    ymm0, ymm0, yword [rdx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB1_421:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_474
	JMP  LBB1_422

LBB1_426:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_427:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_429
	LONG $0x0cfdfdc5; BYTE $0x5a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx]
	LONG $0x44fdfdc5; WORD $0x205a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB1_429:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_474
	JMP  LBB1_430

LBB1_434:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_435:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_437
	LONG $0x0cfdfdc5; BYTE $0x5a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx]
	LONG $0x44fdfdc5; WORD $0x205a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB1_437:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_474
	JMP  LBB1_438

LBB1_442:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_443:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_445
	LONG $0x0cd4fdc5; BYTE $0xda               // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20da             // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40da             // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 64]
	LONG $0x44d4fdc5; WORD $0x60da             // vpaddq    ymm0, ymm0, yword [rdx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB1_445:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_474
	JMP  LBB1_446

LBB1_450:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_451:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB1_453
	LONG $0x1458f4c5; BYTE $0x9a               // vaddps    ymm2, ymm1, yword [rdx + 4*rbx]
	LONG $0x5c58f4c5; WORD $0x209a             // vaddps    ymm3, ymm1, yword [rdx + 4*rbx + 32]
	LONG $0x6458f4c5; WORD $0x409a             // vaddps    ymm4, ymm1, yword [rdx + 4*rbx + 64]
	LONG $0x4c58f4c5; WORD $0x609a             // vaddps    ymm1, ymm1, yword [rdx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x984c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm1

LBB1_453:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB1_474
	JMP  LBB1_454

LBB1_458:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_459:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_461
	LONG $0x0cfcfdc5; BYTE $0x1a               // vpaddb    ymm1, ymm0, yword [rdx + rbx]
	LONG $0x54fcfdc5; WORD $0x201a             // vpaddb    ymm2, ymm0, yword [rdx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x401a             // vpaddb    ymm3, ymm0, yword [rdx + rbx + 64]
	LONG $0x44fcfdc5; WORD $0x601a             // vpaddb    ymm0, ymm0, yword [rdx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB1_461:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_474
	JMP  LBB1_462

LBB1_466:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_467:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_469
	LONG $0x0cfefdc5; BYTE $0x9a               // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x209a             // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x409a             // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 64]
	LONG $0x44fefdc5; WORD $0x609a             // vpaddd    ymm0, ymm0, yword [rdx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB1_469:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB1_470

LBB1_474:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_482
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_489
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_499
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_502
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_13
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b44; BYTE $0x19 // mov    r11d, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_481
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_548
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_548

LBB1_481:
	WORD $0xf631 // xor    esi, esi

LBB1_582:
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi
	WORD $0xf749; BYTE $0xd6 // not    r14
	WORD $0x014d; BYTE $0xd6 // add    r14, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_584

LBB1_583:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x2944; BYTE $0xd8 // sub    eax, r11d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_583

LBB1_584:
	LONG $0x03fe8349 // cmp    r14, 3
	JB   LBB1_13

LBB1_585:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x2944; BYTE $0xd8     // sub    eax, r11d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	WORD $0x2944; BYTE $0xd8     // sub    eax, r11d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	WORD $0x2944; BYTE $0xd8     // sub    eax, r11d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	WORD $0x2944; BYTE $0xd8     // sub    eax, r11d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_585
	JMP  LBB1_13

LBB1_482:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_494
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_505
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_508
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_13
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_488
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_551
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_551

LBB1_488:
	WORD $0xf631 // xor    esi, esi

LBB1_590:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_592

LBB1_591:
	LONG $0x0c10fbc5; BYTE $0xf2   // vmovsd    xmm1, qword [rdx + 8*rsi]
	LONG $0xc85cf3c5               // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xf00c // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB1_591

LBB1_592:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_13

LBB1_593:
	LONG $0x0c10fbc5; BYTE $0xf2               // vmovsd    xmm1, qword [rdx + 8*rsi]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xf00c             // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x4c10fbc5; WORD $0x08f2             // vmovsd    xmm1, qword [rdx + 8*rsi + 8]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm1
	LONG $0x4c10fbc5; WORD $0x10f2             // vmovsd    xmm1, qword [rdx + 8*rsi + 16]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm1
	LONG $0x4c10fbc5; WORD $0x18f2             // vmovsd    xmm1, qword [rdx + 8*rsi + 24]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB1_593
	JMP  LBB1_13

LBB1_489:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_511
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_13
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8a44; BYTE $0x19                   // mov    r11b, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_493
	LONG $0x12048d4a                           // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB1_554
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JBE  LBB1_554

LBB1_493:
	WORD $0xf631 // xor    esi, esi

LBB1_598:
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi
	WORD $0xf749; BYTE $0xd6 // not    r14
	WORD $0x014d; BYTE $0xd6 // add    r14, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_600

LBB1_599:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x2844; BYTE $0xd8 // sub    al, r11b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_599

LBB1_600:
	LONG $0x03fe8349 // cmp    r14, 3
	JB   LBB1_13

LBB1_601:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x2844; BYTE $0xd8     // sub    al, r11b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	WORD $0x2844; BYTE $0xd8     // sub    al, r11b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	WORD $0x2844; BYTE $0xd8     // sub    al, r11b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	WORD $0x2844; BYTE $0xd8     // sub    al, r11b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_601
	JMP  LBB1_13

LBB1_494:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_514
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_13
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b4c; BYTE $0x19 // mov    r11, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_498
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_557
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_557

LBB1_498:
	WORD $0xf631 // xor    esi, esi

LBB1_606:
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi
	WORD $0xf749; BYTE $0xd6 // not    r14
	WORD $0x014d; BYTE $0xd6 // add    r14, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_608

LBB1_607:
	LONG $0xf2048b48         // mov    rax, qword [rdx + 8*rsi]
	WORD $0x294c; BYTE $0xd8 // sub    rax, r11
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_607

LBB1_608:
	LONG $0x03fe8349 // cmp    r14, 3
	JB   LBB1_13

LBB1_609:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	WORD $0x294c; BYTE $0xd8     // sub    rax, r11
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	WORD $0x294c; BYTE $0xd8     // sub    rax, r11
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	WORD $0x294c; BYTE $0xd8     // sub    rax, r11
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	WORD $0x294c; BYTE $0xd8     // sub    rax, r11
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_609
	JMP  LBB1_13

LBB1_499:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x31b70f44         // movzx    r14d, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_501
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_560
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_560

LBB1_501:
	WORD $0xf631 // xor    esi, esi

LBB1_614:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB1_616

LBB1_615:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	WORD $0x2944; BYTE $0xf3     // sub    ebx, r14d
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB1_615

LBB1_616:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_13

LBB1_617:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	WORD $0x2944; BYTE $0xf0       // sub    eax, r14d
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	WORD $0x2944; BYTE $0xf0       // sub    eax, r14d
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	WORD $0x2944; BYTE $0xf0       // sub    eax, r14d
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	WORD $0x2944; BYTE $0xf0       // sub    eax, r14d
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_617
	JMP  LBB1_13

LBB1_502:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x31b70f44         // movzx    r14d, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_504
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_563
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_563

LBB1_504:
	WORD $0xf631 // xor    esi, esi

LBB1_622:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB1_624

LBB1_623:
	LONG $0x721cb70f             // movzx    ebx, word [rdx + 2*rsi]
	WORD $0x2944; BYTE $0xf3     // sub    ebx, r14d
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB1_623

LBB1_624:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB1_13

LBB1_625:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	WORD $0x2944; BYTE $0xf0       // sub    eax, r14d
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	WORD $0x2944; BYTE $0xf0       // sub    eax, r14d
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	WORD $0x2944; BYTE $0xf0       // sub    eax, r14d
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	WORD $0x2944; BYTE $0xf0       // sub    eax, r14d
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_625
	JMP  LBB1_13

LBB1_505:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b4c; BYTE $0x19 // mov    r11, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_507
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_566
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_566

LBB1_507:
	WORD $0xf631 // xor    esi, esi

LBB1_630:
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi
	WORD $0xf749; BYTE $0xd6 // not    r14
	WORD $0x014d; BYTE $0xd6 // add    r14, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_632

LBB1_631:
	LONG $0xf2048b48         // mov    rax, qword [rdx + 8*rsi]
	WORD $0x294c; BYTE $0xd8 // sub    rax, r11
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_631

LBB1_632:
	LONG $0x03fe8349 // cmp    r14, 3
	JB   LBB1_13

LBB1_633:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	WORD $0x294c; BYTE $0xd8     // sub    rax, r11
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	WORD $0x294c; BYTE $0xd8     // sub    rax, r11
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	WORD $0x294c; BYTE $0xd8     // sub    rax, r11
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	WORD $0x294c; BYTE $0xd8     // sub    rax, r11
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_633
	JMP  LBB1_13

LBB1_508:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_510
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_569
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_569

LBB1_510:
	WORD $0xf631 // xor    esi, esi

LBB1_638:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_640

LBB1_639:
	LONG $0x0c10fac5; BYTE $0xb2   // vmovss    xmm1, dword [rdx + 4*rsi]
	LONG $0xc85cf2c5               // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0xb00c // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB1_639

LBB1_640:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_13

LBB1_641:
	LONG $0x0c10fac5; BYTE $0xb2               // vmovss    xmm1, dword [rdx + 4*rsi]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0xb00c             // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x4c10fac5; WORD $0x04b2             // vmovss    xmm1, dword [rdx + 4*rsi + 4]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm1
	LONG $0x4c10fac5; WORD $0x08b2             // vmovss    xmm1, dword [rdx + 4*rsi + 8]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm1
	LONG $0x4c10fac5; WORD $0x0cb2             // vmovss    xmm1, dword [rdx + 4*rsi + 12]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB1_641
	JMP  LBB1_13

LBB1_511:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8a44; BYTE $0x19                   // mov    r11b, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_513
	LONG $0x12048d4a                           // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB1_572
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JBE  LBB1_572

LBB1_513:
	WORD $0xf631 // xor    esi, esi

LBB1_646:
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi
	WORD $0xf749; BYTE $0xd6 // not    r14
	WORD $0x014d; BYTE $0xd6 // add    r14, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_648

LBB1_647:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x2844; BYTE $0xd8 // sub    al, r11b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_647

LBB1_648:
	LONG $0x03fe8349 // cmp    r14, 3
	JB   LBB1_13

LBB1_649:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x2844; BYTE $0xd8     // sub    al, r11b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	WORD $0x2844; BYTE $0xd8     // sub    al, r11b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	WORD $0x2844; BYTE $0xd8     // sub    al, r11b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	WORD $0x2844; BYTE $0xd8     // sub    al, r11b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_649
	JMP  LBB1_13

LBB1_514:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_517
	WORD $0x8b44; BYTE $0x19 // mov    r11d, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_516
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_575
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_575

LBB1_516:
	WORD $0xf631 // xor    esi, esi

LBB1_654:
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi
	WORD $0xf749; BYTE $0xd6 // not    r14
	WORD $0x014d; BYTE $0xd6 // add    r14, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB1_656

LBB1_655:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x2944; BYTE $0xd8 // sub    eax, r11d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB1_655

LBB1_656:
	LONG $0x03fe8349 // cmp    r14, 3
	JB   LBB1_13

LBB1_657:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x2944; BYTE $0xd8     // sub    eax, r11d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	WORD $0x2944; BYTE $0xd8     // sub    eax, r11d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	WORD $0x2944; BYTE $0xd8     // sub    eax, r11d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	WORD $0x2944; BYTE $0xd8     // sub    eax, r11d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_657
	JMP  LBB1_13

LBB1_517:
	VZEROUPPER
	RET

LBB1_548:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	LONG $0x05eec149             // shr    r14, 5
	LONG $0x01c68349             // add    r14, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_578
	WORD $0x894c; BYTE $0xf3     // mov    rbx, r14
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xc031                 // xor    eax, eax

LBB1_550:
	LONG $0x0c6ffec5; BYTE $0x82               // vmovdqu    ymm1, yword [rdx + 4*rax]
	LONG $0x546ffec5; WORD $0x2082             // vmovdqu    ymm2, yword [rdx + 4*rax + 32]
	LONG $0x5c6ffec5; WORD $0x4082             // vmovdqu    ymm3, yword [rdx + 4*rax + 64]
	LONG $0x646ffec5; WORD $0x6082             // vmovdqu    ymm4, yword [rdx + 4*rax + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x800c             // vmovdqu    yword [r8 + 4*rax], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x8064; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm4
	QUAD $0x000080828c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rax + 128]
	QUAD $0x0000a082946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rax + 160]
	QUAD $0x0000c0829c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rax + 192]
	QUAD $0x0000e082a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rax + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080808c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rax + 128], ymm1
	QUAD $0x00a080947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rax + 160], ymm2
	QUAD $0x00c0809c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rax + 192], ymm3
	QUAD $0x00e080a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rax + 224], ymm4
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_550
	JMP  LBB1_579

LBB1_551:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_586
	WORD $0x894c; BYTE $0xdb     // mov    rbx, r11
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xc031                 // xor    eax, eax

LBB1_553:
	LONG $0x1410fdc5; BYTE $0xc2               // vmovupd    ymm2, yword [rdx + 8*rax]
	LONG $0x5c10fdc5; WORD $0x20c2             // vmovupd    ymm3, yword [rdx + 8*rax + 32]
	LONG $0x6410fdc5; WORD $0x40c2             // vmovupd    ymm4, yword [rdx + 8*rax + 64]
	LONG $0x6c10fdc5; WORD $0x60c2             // vmovupd    ymm5, yword [rdx + 8*rax + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xc014             // vmovupd    yword [r8 + 8*rax], ymm2
	LONG $0x117dc1c4; WORD $0xc05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rax + 32], ymm3
	LONG $0x117dc1c4; WORD $0xc064; BYTE $0x40 // vmovupd    yword [r8 + 8*rax + 64], ymm4
	LONG $0x117dc1c4; WORD $0xc06c; BYTE $0x60 // vmovupd    yword [r8 + 8*rax + 96], ymm5
	QUAD $0x000080c29410fdc5; BYTE $0x00       // vmovupd    ymm2, yword [rdx + 8*rax + 128]
	QUAD $0x0000a0c29c10fdc5; BYTE $0x00       // vmovupd    ymm3, yword [rdx + 8*rax + 160]
	QUAD $0x0000c0c2a410fdc5; BYTE $0x00       // vmovupd    ymm4, yword [rdx + 8*rax + 192]
	QUAD $0x0000e0c2ac10fdc5; BYTE $0x00       // vmovupd    ymm5, yword [rdx + 8*rax + 224]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	QUAD $0x0080c094117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rax + 128], ymm2
	QUAD $0x00a0c09c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rax + 160], ymm3
	QUAD $0x00c0c0a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rax + 192], ymm4
	QUAD $0x00e0c0ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rax + 224], ymm5
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_553
	JMP  LBB1_587

LBB1_554:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	LONG $0x07eec149             // shr    r14, 7
	LONG $0x01c68349             // add    r14, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_594
	WORD $0x894c; BYTE $0xf3     // mov    rbx, r14
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xc031                 // xor    eax, eax

LBB1_556:
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x546ffec5; WORD $0x2002             // vmovdqu    ymm2, yword [rdx + rax + 32]
	LONG $0x5c6ffec5; WORD $0x4002             // vmovdqu    ymm3, yword [rdx + rax + 64]
	LONG $0x646ffec5; WORD $0x6002             // vmovdqu    ymm4, yword [rdx + rax + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x0064; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm4
	QUAD $0x000080028c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rax + 128]
	QUAD $0x0000a002946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rax + 160]
	QUAD $0x0000c0029c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rax + 192]
	QUAD $0x0000e002a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rax + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080008c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rax + 128], ymm1
	QUAD $0x00a000947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rax + 160], ymm2
	QUAD $0x00c0009c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rax + 192], ymm3
	QUAD $0x00e000a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rax + 224], ymm4
	LONG $0x01000548; WORD $0x0000             // add    rax, 256
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_556
	JMP  LBB1_595

LBB1_557:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	LONG $0x04eec149             // shr    r14, 4
	LONG $0x01c68349             // add    r14, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_602
	WORD $0x894c; BYTE $0xf3     // mov    rbx, r14
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xc031                 // xor    eax, eax

LBB1_559:
	LONG $0x0c6ffec5; BYTE $0xc2               // vmovdqu    ymm1, yword [rdx + 8*rax]
	LONG $0x546ffec5; WORD $0x20c2             // vmovdqu    ymm2, yword [rdx + 8*rax + 32]
	LONG $0x5c6ffec5; WORD $0x40c2             // vmovdqu    ymm3, yword [rdx + 8*rax + 64]
	LONG $0x646ffec5; WORD $0x60c2             // vmovdqu    ymm4, yword [rdx + 8*rax + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xc00c             // vmovdqu    yword [r8 + 8*rax], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xc064; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm4
	QUAD $0x000080c28c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rax + 128]
	QUAD $0x0000a0c2946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rax + 160]
	QUAD $0x0000c0c29c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rax + 192]
	QUAD $0x0000e0c2a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rax + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080c08c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rax + 128], ymm1
	QUAD $0x00a0c0947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rax + 160], ymm2
	QUAD $0x00c0c09c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rax + 192], ymm3
	QUAD $0x00e0c0a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rax + 224], ymm4
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_559
	JMP  LBB1_603

LBB1_560:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_610
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_562:
	LONG $0x0c6ffec5; BYTE $0x5a               // vmovdqu    ymm1, yword [rdx + 2*rbx]
	LONG $0x546ffec5; WORD $0x205a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x405a             // vmovdqu    ymm1, yword [rdx + 2*rbx + 64]
	LONG $0x546ffec5; WORD $0x605a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_562
	JMP  LBB1_611

LBB1_563:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_618
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB1_565:
	LONG $0x0c6ffec5; BYTE $0x5a               // vmovdqu    ymm1, yword [rdx + 2*rbx]
	LONG $0x546ffec5; WORD $0x205a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x405a             // vmovdqu    ymm1, yword [rdx + 2*rbx + 64]
	LONG $0x546ffec5; WORD $0x605a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_565
	JMP  LBB1_619

LBB1_566:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	LONG $0x04eec149             // shr    r14, 4
	LONG $0x01c68349             // add    r14, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_626
	WORD $0x894c; BYTE $0xf3     // mov    rbx, r14
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xc031                 // xor    eax, eax

LBB1_568:
	LONG $0x0c6ffec5; BYTE $0xc2               // vmovdqu    ymm1, yword [rdx + 8*rax]
	LONG $0x546ffec5; WORD $0x20c2             // vmovdqu    ymm2, yword [rdx + 8*rax + 32]
	LONG $0x5c6ffec5; WORD $0x40c2             // vmovdqu    ymm3, yword [rdx + 8*rax + 64]
	LONG $0x646ffec5; WORD $0x60c2             // vmovdqu    ymm4, yword [rdx + 8*rax + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xc00c             // vmovdqu    yword [r8 + 8*rax], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xc064; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm4
	QUAD $0x000080c28c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rax + 128]
	QUAD $0x0000a0c2946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rax + 160]
	QUAD $0x0000c0c29c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rax + 192]
	QUAD $0x0000e0c2a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rax + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080c08c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rax + 128], ymm1
	QUAD $0x00a0c0947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rax + 160], ymm2
	QUAD $0x00c0c09c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rax + 192], ymm3
	QUAD $0x00e0c0a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rax + 224], ymm4
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_568
	JMP  LBB1_627

LBB1_569:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_634
	WORD $0x894c; BYTE $0xdb     // mov    rbx, r11
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xc031                 // xor    eax, eax

LBB1_571:
	LONG $0x1410fcc5; BYTE $0x82               // vmovups    ymm2, yword [rdx + 4*rax]
	LONG $0x5c10fcc5; WORD $0x2082             // vmovups    ymm3, yword [rdx + 4*rax + 32]
	LONG $0x6410fcc5; WORD $0x4082             // vmovups    ymm4, yword [rdx + 4*rax + 64]
	LONG $0x6c10fcc5; WORD $0x6082             // vmovups    ymm5, yword [rdx + 4*rax + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0x8014             // vmovups    yword [r8 + 4*rax], ymm2
	LONG $0x117cc1c4; WORD $0x805c; BYTE $0x20 // vmovups    yword [r8 + 4*rax + 32], ymm3
	LONG $0x117cc1c4; WORD $0x8064; BYTE $0x40 // vmovups    yword [r8 + 4*rax + 64], ymm4
	LONG $0x117cc1c4; WORD $0x806c; BYTE $0x60 // vmovups    yword [r8 + 4*rax + 96], ymm5
	QUAD $0x000080829410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdx + 4*rax + 128]
	QUAD $0x0000a0829c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdx + 4*rax + 160]
	QUAD $0x0000c082a410fcc5; BYTE $0x00       // vmovups    ymm4, yword [rdx + 4*rax + 192]
	QUAD $0x0000e082ac10fcc5; BYTE $0x00       // vmovups    ymm5, yword [rdx + 4*rax + 224]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	QUAD $0x00808094117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rax + 128], ymm2
	QUAD $0x00a0809c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rax + 160], ymm3
	QUAD $0x00c080a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rax + 192], ymm4
	QUAD $0x00e080ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rax + 224], ymm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_571
	JMP  LBB1_635

LBB1_572:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	LONG $0x07eec149             // shr    r14, 7
	LONG $0x01c68349             // add    r14, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_642
	WORD $0x894c; BYTE $0xf3     // mov    rbx, r14
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xc031                 // xor    eax, eax

LBB1_574:
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x546ffec5; WORD $0x2002             // vmovdqu    ymm2, yword [rdx + rax + 32]
	LONG $0x5c6ffec5; WORD $0x4002             // vmovdqu    ymm3, yword [rdx + rax + 64]
	LONG $0x646ffec5; WORD $0x6002             // vmovdqu    ymm4, yword [rdx + rax + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x0064; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm4
	QUAD $0x000080028c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rax + 128]
	QUAD $0x0000a002946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rax + 160]
	QUAD $0x0000c0029c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rax + 192]
	QUAD $0x0000e002a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rax + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080008c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rax + 128], ymm1
	QUAD $0x00a000947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rax + 160], ymm2
	QUAD $0x00c0009c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rax + 192], ymm3
	QUAD $0x00e000a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rax + 224], ymm4
	LONG $0x01000548; WORD $0x0000             // add    rax, 256
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_574
	JMP  LBB1_643

LBB1_575:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	LONG $0x05eec149             // shr    r14, 5
	LONG $0x01c68349             // add    r14, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_650
	WORD $0x894c; BYTE $0xf3     // mov    rbx, r14
	LONG $0xfee38348             // and    rbx, -2
	WORD $0xf748; BYTE $0xdb     // neg    rbx
	WORD $0xc031                 // xor    eax, eax

LBB1_577:
	LONG $0x0c6ffec5; BYTE $0x82               // vmovdqu    ymm1, yword [rdx + 4*rax]
	LONG $0x546ffec5; WORD $0x2082             // vmovdqu    ymm2, yword [rdx + 4*rax + 32]
	LONG $0x5c6ffec5; WORD $0x4082             // vmovdqu    ymm3, yword [rdx + 4*rax + 64]
	LONG $0x646ffec5; WORD $0x6082             // vmovdqu    ymm4, yword [rdx + 4*rax + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x800c             // vmovdqu    yword [r8 + 4*rax], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x8064; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm4
	QUAD $0x000080828c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rax + 128]
	QUAD $0x0000a082946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rax + 160]
	QUAD $0x0000c0829c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rax + 192]
	QUAD $0x0000e082a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rax + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080808c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rax + 128], ymm1
	QUAD $0x00a080947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rax + 160], ymm2
	QUAD $0x00c0809c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rax + 192], ymm3
	QUAD $0x00e080a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rax + 224], ymm4
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_577
	JMP  LBB1_651

LBB1_578:
	WORD $0xc031 // xor    eax, eax

LBB1_579:
	LONG $0x01c6f641                           // test    r14b, 1
	JE   LBB1_581
	LONG $0x0c6ffec5; BYTE $0x82               // vmovdqu    ymm1, yword [rdx + 4*rax]
	LONG $0x546ffec5; WORD $0x2082             // vmovdqu    ymm2, yword [rdx + 4*rax + 32]
	LONG $0x5c6ffec5; WORD $0x4082             // vmovdqu    ymm3, yword [rdx + 4*rax + 64]
	LONG $0x646ffec5; WORD $0x6082             // vmovdqu    ymm4, yword [rdx + 4*rax + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x800c             // vmovdqu    yword [r8 + 4*rax], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x8044; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm0

LBB1_581:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_582

LBB1_586:
	WORD $0xc031 // xor    eax, eax

LBB1_587:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_589
	LONG $0x1410fdc5; BYTE $0xc2               // vmovupd    ymm2, yword [rdx + 8*rax]
	LONG $0x5c10fdc5; WORD $0x20c2             // vmovupd    ymm3, yword [rdx + 8*rax + 32]
	LONG $0x6410fdc5; WORD $0x40c2             // vmovupd    ymm4, yword [rdx + 8*rax + 64]
	LONG $0x6c10fdc5; WORD $0x60c2             // vmovupd    ymm5, yword [rdx + 8*rax + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xc95cd5c5                           // vsubpd    ymm1, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xc014             // vmovupd    yword [r8 + 8*rax], ymm2
	LONG $0x117dc1c4; WORD $0xc05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rax + 32], ymm3
	LONG $0x117dc1c4; WORD $0xc064; BYTE $0x40 // vmovupd    yword [r8 + 8*rax + 64], ymm4
	LONG $0x117dc1c4; WORD $0xc04c; BYTE $0x60 // vmovupd    yword [r8 + 8*rax + 96], ymm1

LBB1_589:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_590

LBB1_594:
	WORD $0xc031 // xor    eax, eax

LBB1_595:
	LONG $0x01c6f641                           // test    r14b, 1
	JE   LBB1_597
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x546ffec5; WORD $0x2002             // vmovdqu    ymm2, yword [rdx + rax + 32]
	LONG $0x5c6ffec5; WORD $0x4002             // vmovdqu    ymm3, yword [rdx + rax + 64]
	LONG $0x646ffec5; WORD $0x6002             // vmovdqu    ymm4, yword [rdx + rax + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm0

LBB1_597:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_598

LBB1_602:
	WORD $0xc031 // xor    eax, eax

LBB1_603:
	LONG $0x01c6f641                           // test    r14b, 1
	JE   LBB1_605
	LONG $0x0c6ffec5; BYTE $0xc2               // vmovdqu    ymm1, yword [rdx + 8*rax]
	LONG $0x546ffec5; WORD $0x20c2             // vmovdqu    ymm2, yword [rdx + 8*rax + 32]
	LONG $0x5c6ffec5; WORD $0x40c2             // vmovdqu    ymm3, yword [rdx + 8*rax + 64]
	LONG $0x646ffec5; WORD $0x60c2             // vmovdqu    ymm4, yword [rdx + 8*rax + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xc00c             // vmovdqu    yword [r8 + 8*rax], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xc044; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm0

LBB1_605:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_606

LBB1_610:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_611:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_613
	LONG $0x0c6ffec5; BYTE $0x5a               // vmovdqu    ymm1, yword [rdx + 2*rbx]
	LONG $0x546ffec5; WORD $0x205a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB1_613:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_614

LBB1_618:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_619:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_621
	LONG $0x0c6ffec5; BYTE $0x5a               // vmovdqu    ymm1, yword [rdx + 2*rbx]
	LONG $0x546ffec5; WORD $0x205a             // vmovdqu    ymm2, yword [rdx + 2*rbx + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB1_621:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_622

LBB1_626:
	WORD $0xc031 // xor    eax, eax

LBB1_627:
	LONG $0x01c6f641                           // test    r14b, 1
	JE   LBB1_629
	LONG $0x0c6ffec5; BYTE $0xc2               // vmovdqu    ymm1, yword [rdx + 8*rax]
	LONG $0x546ffec5; WORD $0x20c2             // vmovdqu    ymm2, yword [rdx + 8*rax + 32]
	LONG $0x5c6ffec5; WORD $0x40c2             // vmovdqu    ymm3, yword [rdx + 8*rax + 64]
	LONG $0x646ffec5; WORD $0x60c2             // vmovdqu    ymm4, yword [rdx + 8*rax + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xc00c             // vmovdqu    yword [r8 + 8*rax], ymm1
	LONG $0x7f7ec1c4; WORD $0xc054; BYTE $0x20 // vmovdqu    yword [r8 + 8*rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xc05c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xc044; BYTE $0x60 // vmovdqu    yword [r8 + 8*rax + 96], ymm0

LBB1_629:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_630

LBB1_634:
	WORD $0xc031 // xor    eax, eax

LBB1_635:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_637
	LONG $0x1410fcc5; BYTE $0x82               // vmovups    ymm2, yword [rdx + 4*rax]
	LONG $0x5c10fcc5; WORD $0x2082             // vmovups    ymm3, yword [rdx + 4*rax + 32]
	LONG $0x6410fcc5; WORD $0x4082             // vmovups    ymm4, yword [rdx + 4*rax + 64]
	LONG $0x6c10fcc5; WORD $0x6082             // vmovups    ymm5, yword [rdx + 4*rax + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xc95cd4c5                           // vsubps    ymm1, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0x8014             // vmovups    yword [r8 + 4*rax], ymm2
	LONG $0x117cc1c4; WORD $0x805c; BYTE $0x20 // vmovups    yword [r8 + 4*rax + 32], ymm3
	LONG $0x117cc1c4; WORD $0x8064; BYTE $0x40 // vmovups    yword [r8 + 4*rax + 64], ymm4
	LONG $0x117cc1c4; WORD $0x804c; BYTE $0x60 // vmovups    yword [r8 + 4*rax + 96], ymm1

LBB1_637:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_638

LBB1_642:
	WORD $0xc031 // xor    eax, eax

LBB1_643:
	LONG $0x01c6f641                           // test    r14b, 1
	JE   LBB1_645
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x546ffec5; WORD $0x2002             // vmovdqu    ymm2, yword [rdx + rax + 32]
	LONG $0x5c6ffec5; WORD $0x4002             // vmovdqu    ymm3, yword [rdx + rax + 64]
	LONG $0x646ffec5; WORD $0x6002             // vmovdqu    ymm4, yword [rdx + rax + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x7f7ec1c4; WORD $0x0054; BYTE $0x20 // vmovdqu    yword [r8 + rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x005c; BYTE $0x40 // vmovdqu    yword [r8 + rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0x60 // vmovdqu    yword [r8 + rax + 96], ymm0

LBB1_645:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_646

LBB1_650:
	WORD $0xc031 // xor    eax, eax

LBB1_651:
	LONG $0x01c6f641                           // test    r14b, 1
	JE   LBB1_653
	LONG $0x0c6ffec5; BYTE $0x82               // vmovdqu    ymm1, yword [rdx + 4*rax]
	LONG $0x546ffec5; WORD $0x2082             // vmovdqu    ymm2, yword [rdx + 4*rax + 32]
	LONG $0x5c6ffec5; WORD $0x4082             // vmovdqu    ymm3, yword [rdx + 4*rax + 64]
	LONG $0x646ffec5; WORD $0x6082             // vmovdqu    ymm4, yword [rdx + 4*rax + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x800c             // vmovdqu    yword [r8 + 4*rax], ymm1
	LONG $0x7f7ec1c4; WORD $0x8054; BYTE $0x20 // vmovdqu    yword [r8 + 4*rax + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x805c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rax + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x8044; BYTE $0x60 // vmovdqu    yword [r8 + 4*rax + 96], ymm0

LBB1_653:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_13
	JMP  LBB1_654

LBB1_658:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_659:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_661
	LONG $0x0cfefdc5; BYTE $0x9a               // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x209a             // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x409a             // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 64]
	LONG $0x44fefdc5; WORD $0x609a             // vpaddd    ymm0, ymm0, yword [rdx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB1_661:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_3
	JMP  LBB1_662

LBB1_666:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_667:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB1_669
	LONG $0x1458f5c5; BYTE $0xda               // vaddpd    ymm2, ymm1, yword [rdx + 8*rbx]
	LONG $0x5c58f5c5; WORD $0x20da             // vaddpd    ymm3, ymm1, yword [rdx + 8*rbx + 32]
	LONG $0x6458f5c5; WORD $0x40da             // vaddpd    ymm4, ymm1, yword [rdx + 8*rbx + 64]
	LONG $0x4c58f5c5; WORD $0x60da             // vaddpd    ymm1, ymm1, yword [rdx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm1

LBB1_669:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB1_3
	JMP  LBB1_670

LBB1_674:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_675:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_677
	LONG $0x0cfcfdc5; BYTE $0x1a               // vpaddb    ymm1, ymm0, yword [rdx + rbx]
	LONG $0x54fcfdc5; WORD $0x201a             // vpaddb    ymm2, ymm0, yword [rdx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x401a             // vpaddb    ymm3, ymm0, yword [rdx + rbx + 64]
	LONG $0x44fcfdc5; WORD $0x601a             // vpaddb    ymm0, ymm0, yword [rdx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB1_677:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_3
	JMP  LBB1_678

LBB1_682:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_683:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_685
	LONG $0x0cd4fdc5; BYTE $0xda               // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20da             // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40da             // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 64]
	LONG $0x44d4fdc5; WORD $0x60da             // vpaddq    ymm0, ymm0, yword [rdx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB1_685:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_3
	JMP  LBB1_686

LBB1_690:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_691:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_693
	LONG $0x0cfdfdc5; BYTE $0x5a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx]
	LONG $0x44fdfdc5; WORD $0x205a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB1_693:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_3
	JMP  LBB1_694

LBB1_698:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_699:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_701
	LONG $0x0cfdfdc5; BYTE $0x5a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rbx]
	LONG $0x44fdfdc5; WORD $0x205a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB1_701:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_3
	JMP  LBB1_702

LBB1_706:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_707:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_709
	LONG $0x0cd4fdc5; BYTE $0xda               // vpaddq    ymm1, ymm0, yword [rdx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20da             // vpaddq    ymm2, ymm0, yword [rdx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40da             // vpaddq    ymm3, ymm0, yword [rdx + 8*rbx + 64]
	LONG $0x44d4fdc5; WORD $0x60da             // vpaddq    ymm0, ymm0, yword [rdx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB1_709:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_3
	JMP  LBB1_710

LBB1_714:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_715:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB1_717
	LONG $0x1458f4c5; BYTE $0x9a               // vaddps    ymm2, ymm1, yword [rdx + 4*rbx]
	LONG $0x5c58f4c5; WORD $0x209a             // vaddps    ymm3, ymm1, yword [rdx + 4*rbx + 32]
	LONG $0x6458f4c5; WORD $0x409a             // vaddps    ymm4, ymm1, yword [rdx + 4*rbx + 64]
	LONG $0x4c58f4c5; WORD $0x609a             // vaddps    ymm1, ymm1, yword [rdx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x984c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm1

LBB1_717:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB1_3
	JMP  LBB1_718

LBB1_722:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_723:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_725
	LONG $0x0cfcfdc5; BYTE $0x1a               // vpaddb    ymm1, ymm0, yword [rdx + rbx]
	LONG $0x54fcfdc5; WORD $0x201a             // vpaddb    ymm2, ymm0, yword [rdx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x401a             // vpaddb    ymm3, ymm0, yword [rdx + rbx + 64]
	LONG $0x44fcfdc5; WORD $0x601a             // vpaddb    ymm0, ymm0, yword [rdx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB1_725:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_3
	JMP  LBB1_726

LBB1_730:
	WORD $0xdb31 // xor    ebx, ebx

LBB1_731:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB1_733
	LONG $0x0cfefdc5; BYTE $0x9a               // vpaddd    ymm1, ymm0, yword [rdx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x209a             // vpaddd    ymm2, ymm0, yword [rdx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x409a             // vpaddd    ymm3, ymm0, yword [rdx + 4*rbx + 64]
	LONG $0x44fefdc5; WORD $0x609a             // vpaddd    ymm0, ymm0, yword [rdx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB1_733:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_3
	JMP  LBB1_734

TEXT Â·_arithmetic_scalar_arr_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9

	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB2_11
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB2_28
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB2_517

LBB2_3:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_36
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_60
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_98
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_101
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_474
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b44; BYTE $0x32 // mov    r14d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_10
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_254
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_254

LBB2_10:
	WORD $0xf631 // xor    esi, esi

LBB2_398:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_400

LBB2_399:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0144; BYTE $0xf0 // add    eax, r14d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_399

LBB2_400:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_474

LBB2_401:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_401
	JMP  LBB2_474

LBB2_11:
	LONG $0x02fe8040 // cmp    sil, 2
	JE   LBB2_474
	LONG $0x03fe8040 // cmp    sil, 3
	JNE  LBB2_517

LBB2_13:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_21
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_50
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_70
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_73
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_517
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_20
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_194
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_194

LBB2_20:
	WORD $0xf631 // xor    esi, esi

LBB2_318:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_320

LBB2_319:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB2_319

LBB2_320:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_517

LBB2_321:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_321
	JMP  LBB2_517

LBB2_21:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_55
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_76
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_79
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_517
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_27
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_197
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_197

LBB2_27:
	WORD $0xd231 // xor    edx, edx

LBB2_326:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_328

LBB2_327:
	LONG $0x0c5cfbc5; BYTE $0xd1   // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_327

LBB2_328:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_517

LBB2_329:
	LONG $0x0c5cfbc5; BYTE $0xd1               // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c5cfbc5; WORD $0x08d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c5cfbc5; WORD $0x10d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c5cfbc5; WORD $0x18d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_329
	JMP  LBB2_517

LBB2_28:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_43
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_88
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_116
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_119
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_3
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b44; BYTE $0x32 // mov    r14d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_35
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_284
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_284

LBB2_35:
	WORD $0xf631 // xor    esi, esi

LBB2_662:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_664

LBB2_663:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0144; BYTE $0xf0 // add    eax, r14d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_663

LBB2_664:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_3

LBB2_665:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_665
	JMP  LBB2_3

LBB2_36:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_65
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_104
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_107
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_474
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_42
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_257
	LONG $0xd8048d4b         // lea    rax, [r8 + 8*r11]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_257

LBB2_42:
	WORD $0xf631 // xor    esi, esi

LBB2_406:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_408

LBB2_407:
	LONG $0x0c58fbc5; BYTE $0xf1   // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB2_407

LBB2_408:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_474

LBB2_409:
	LONG $0x0c58fbc5; BYTE $0xf1               // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c             // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x4c58fbc5; WORD $0x08f1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10f1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18f1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB2_409
	JMP  LBB2_474

LBB2_43:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_93
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_122
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_125
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_3
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_49
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_287
	LONG $0xd8048d4b         // lea    rax, [r8 + 8*r11]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_287

LBB2_49:
	WORD $0xf631 // xor    esi, esi

LBB2_670:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_672

LBB2_671:
	LONG $0x0c58fbc5; BYTE $0xf1   // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB2_671

LBB2_672:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_3

LBB2_673:
	LONG $0x0c58fbc5; BYTE $0xf1               // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c             // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x4c58fbc5; WORD $0x08f1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10f1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18f1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB2_673
	JMP  LBB2_3

LBB2_50:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_82
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_517
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_54
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_200
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_200

LBB2_54:
	WORD $0xf631 // xor    esi, esi

LBB2_334:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_336

LBB2_335:
	WORD $0xc389             // mov    ebx, eax
	WORD $0x1c2a; BYTE $0x31 // sub    bl, byte [rcx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB2_335

LBB2_336:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_517

LBB2_337:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_337
	JMP  LBB2_517

LBB2_55:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_85
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_517
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_59
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_203
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_203

LBB2_59:
	WORD $0xf631 // xor    esi, esi

LBB2_342:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_344

LBB2_343:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB2_343

LBB2_344:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_517

LBB2_345:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_345
	JMP  LBB2_517

LBB2_60:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_110
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_474
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8a44; BYTE $0x32                   // mov    r14b, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_64
	LONG $0x11048d4a                           // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB2_260
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JBE  LBB2_260

LBB2_64:
	WORD $0xf631 // xor    esi, esi

LBB2_414:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_416

LBB2_415:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0044; BYTE $0xf0 // add    al, r14b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_415

LBB2_416:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_474

LBB2_417:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_417
	JMP  LBB2_474

LBB2_65:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_113
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_474
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b4c; BYTE $0x32 // mov    r14, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_69
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_263
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_263

LBB2_69:
	WORD $0xf631 // xor    esi, esi

LBB2_422:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_424

LBB2_423:
	LONG $0xf1048b48         // mov    rax, qword [rcx + 8*rsi]
	WORD $0x014c; BYTE $0xf0 // add    rax, r14
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_423

LBB2_424:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_474

LBB2_425:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_425
	JMP  LBB2_474

LBB2_70:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_72
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_206
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_206

LBB2_72:
	WORD $0xf631 // xor    esi, esi

LBB2_350:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_352

LBB2_351:
	WORD $0xc389                 // mov    ebx, eax
	LONG $0x711c2b66             // sub    bx, word [rcx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_351

LBB2_352:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_517

LBB2_353:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_353
	JMP  LBB2_517

LBB2_73:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_75
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_209
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_209

LBB2_75:
	WORD $0xf631 // xor    esi, esi

LBB2_358:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_360

LBB2_359:
	WORD $0xc389                 // mov    ebx, eax
	LONG $0x711c2b66             // sub    bx, word [rcx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_359

LBB2_360:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_517

LBB2_361:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_361
	JMP  LBB2_517

LBB2_76:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_78
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_212
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_212

LBB2_78:
	WORD $0xf631 // xor    esi, esi

LBB2_366:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_368

LBB2_367:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB2_367

LBB2_368:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_517

LBB2_369:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_369
	JMP  LBB2_517

LBB2_79:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_81
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_215
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_215

LBB2_81:
	WORD $0xd231 // xor    edx, edx

LBB2_374:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_376

LBB2_375:
	LONG $0x0c5cfac5; BYTE $0x91   // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_375

LBB2_376:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_517

LBB2_377:
	LONG $0x0c5cfac5; BYTE $0x91               // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c5cfac5; WORD $0x0491             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c5cfac5; WORD $0x0891             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c5cfac5; WORD $0x0c91             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_377
	JMP  LBB2_517

LBB2_82:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_84
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_218
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_218

LBB2_84:
	WORD $0xf631 // xor    esi, esi

LBB2_382:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_384

LBB2_383:
	WORD $0xc389             // mov    ebx, eax
	WORD $0x1c2a; BYTE $0x31 // sub    bl, byte [rcx + rsi]
	LONG $0x301c8841         // mov    byte [r8 + rsi], bl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB2_383

LBB2_384:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_517

LBB2_385:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_385
	JMP  LBB2_517

LBB2_85:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_87
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_221
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_221

LBB2_87:
	WORD $0xf631 // xor    esi, esi

LBB2_390:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_392

LBB2_391:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB2_391

LBB2_392:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_517

LBB2_393:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_393
	JMP  LBB2_517

LBB2_88:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_128
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_3
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8a44; BYTE $0x32                   // mov    r14b, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_92
	LONG $0x11048d4a                           // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB2_290
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JBE  LBB2_290

LBB2_92:
	WORD $0xf631 // xor    esi, esi

LBB2_678:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_680

LBB2_679:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0044; BYTE $0xf0 // add    al, r14b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_679

LBB2_680:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_3

LBB2_681:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_681
	JMP  LBB2_3

LBB2_93:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_131
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_3
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b4c; BYTE $0x32 // mov    r14, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_97
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_293
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_293

LBB2_97:
	WORD $0xf631 // xor    esi, esi

LBB2_686:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_688

LBB2_687:
	LONG $0xf1048b48         // mov    rax, qword [rcx + 8*rsi]
	WORD $0x014c; BYTE $0xf0 // add    rax, r14
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_687

LBB2_688:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_3

LBB2_689:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_689
	JMP  LBB2_3

LBB2_98:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x32b70f44         // movzx    r14d, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_100
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_266
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_266

LBB2_100:
	WORD $0xf631 // xor    esi, esi

LBB2_430:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB2_432

LBB2_431:
	LONG $0x711cb70f             // movzx    ebx, word [rcx + 2*rsi]
	LONG $0xf3014466             // add    bx, r14w
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB2_431

LBB2_432:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_474

LBB2_433:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_433
	JMP  LBB2_474

LBB2_101:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x32b70f44         // movzx    r14d, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_103
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_269
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_269

LBB2_103:
	WORD $0xf631 // xor    esi, esi

LBB2_438:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB2_440

LBB2_439:
	LONG $0x711cb70f             // movzx    ebx, word [rcx + 2*rsi]
	LONG $0xf3014466             // add    bx, r14w
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB2_439

LBB2_440:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_474

LBB2_441:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_441
	JMP  LBB2_474

LBB2_104:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b4c; BYTE $0x32 // mov    r14, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_106
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_272
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_272

LBB2_106:
	WORD $0xf631 // xor    esi, esi

LBB2_446:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_448

LBB2_447:
	LONG $0xf1048b48         // mov    rax, qword [rcx + 8*rsi]
	WORD $0x014c; BYTE $0xf0 // add    rax, r14
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_447

LBB2_448:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_474

LBB2_449:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_449
	JMP  LBB2_474

LBB2_107:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_109
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_275
	LONG $0x98048d4b         // lea    rax, [r8 + 4*r11]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_275

LBB2_109:
	WORD $0xf631 // xor    esi, esi

LBB2_454:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_456

LBB2_455:
	LONG $0x0c58fac5; BYTE $0xb1   // vaddss    xmm1, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB2_455

LBB2_456:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_474

LBB2_457:
	LONG $0x0c58fac5; BYTE $0xb1               // vaddss    xmm1, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c             // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x4c58fac5; WORD $0x04b1             // vaddss    xmm1, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm1
	LONG $0x4c58fac5; WORD $0x08b1             // vaddss    xmm1, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0cb1             // vaddss    xmm1, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB2_457
	JMP  LBB2_474

LBB2_110:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8a44; BYTE $0x32                   // mov    r14b, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_112
	LONG $0x11048d4a                           // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB2_278
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JBE  LBB2_278

LBB2_112:
	WORD $0xf631 // xor    esi, esi

LBB2_462:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_464

LBB2_463:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0044; BYTE $0xf0 // add    al, r14b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_463

LBB2_464:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_474

LBB2_465:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_465
	JMP  LBB2_474

LBB2_113:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b44; BYTE $0x32 // mov    r14d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_115
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_281
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_281

LBB2_115:
	WORD $0xf631 // xor    esi, esi

LBB2_470:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_472

LBB2_471:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0144; BYTE $0xf0 // add    eax, r14d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_471

LBB2_472:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_474

LBB2_473:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_473
	JMP  LBB2_474

LBB2_116:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x32b70f44         // movzx    r14d, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_118
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_296
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_296

LBB2_118:
	WORD $0xf631 // xor    esi, esi

LBB2_694:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB2_696

LBB2_695:
	LONG $0x711cb70f             // movzx    ebx, word [rcx + 2*rsi]
	LONG $0xf3014466             // add    bx, r14w
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB2_695

LBB2_696:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_3

LBB2_697:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_697
	JMP  LBB2_3

LBB2_119:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x32b70f44         // movzx    r14d, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_121
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_299
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_299

LBB2_121:
	WORD $0xf631 // xor    esi, esi

LBB2_702:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB2_704

LBB2_703:
	LONG $0x711cb70f             // movzx    ebx, word [rcx + 2*rsi]
	LONG $0xf3014466             // add    bx, r14w
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB2_703

LBB2_704:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_3

LBB2_705:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0xf0014466               // add    ax, r14w
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_705
	JMP  LBB2_3

LBB2_122:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b4c; BYTE $0x32 // mov    r14, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_124
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_302
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_302

LBB2_124:
	WORD $0xf631 // xor    esi, esi

LBB2_710:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_712

LBB2_711:
	LONG $0xf1048b48         // mov    rax, qword [rcx + 8*rsi]
	WORD $0x014c; BYTE $0xf0 // add    rax, r14
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_711

LBB2_712:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_3

LBB2_713:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	WORD $0x014c; BYTE $0xf0     // add    rax, r14
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_713
	JMP  LBB2_3

LBB2_125:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_127
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_305
	LONG $0x98048d4b         // lea    rax, [r8 + 4*r11]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_305

LBB2_127:
	WORD $0xf631 // xor    esi, esi

LBB2_718:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_720

LBB2_719:
	LONG $0x0c58fac5; BYTE $0xb1   // vaddss    xmm1, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB2_719

LBB2_720:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_3

LBB2_721:
	LONG $0x0c58fac5; BYTE $0xb1               // vaddss    xmm1, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c             // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x4c58fac5; WORD $0x04b1             // vaddss    xmm1, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm1
	LONG $0x4c58fac5; WORD $0x08b1             // vaddss    xmm1, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0cb1             // vaddss    xmm1, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB2_721
	JMP  LBB2_3

LBB2_128:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8a44; BYTE $0x32                   // mov    r14b, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_130
	LONG $0x11048d4a                           // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB2_308
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JBE  LBB2_308

LBB2_130:
	WORD $0xf631 // xor    esi, esi

LBB2_726:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_728

LBB2_727:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0044; BYTE $0xf0 // add    al, r14b
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_727

LBB2_728:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_3

LBB2_729:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	WORD $0x0044; BYTE $0xf0     // add    al, r14b
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_729
	JMP  LBB2_3

LBB2_131:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b44; BYTE $0x32 // mov    r14d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_133
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_311
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_311

LBB2_133:
	WORD $0xf631 // xor    esi, esi

LBB2_734:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_736

LBB2_735:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0144; BYTE $0xf0 // add    eax, r14d
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_735

LBB2_736:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_3

LBB2_737:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	WORD $0x0144; BYTE $0xf0     // add    eax, r14d
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_737
	JMP  LBB2_3

LBB2_194:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_314
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_196:
	LONG $0x0cfafdc5; BYTE $0x99               // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fafdc5; WORD $0x2099             // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfafdc5; WORD $0x4099             // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x64fafdc5; WORD $0x6099             // vpsubd    ymm4, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x000080998cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a09994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c0999cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_196
	JMP  LBB2_315

LBB2_197:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	LONG $0x04ebc148             // shr    rbx, 4
	LONG $0x01c38348             // add    rbx, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_322
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_199:
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c5cf5c5; WORD $0x60f9             // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9945cf5c5; BYTE $0x00       // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c5cf5c5; BYTE $0x00       // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a45cf5c5; BYTE $0x00       // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac5cf5c5; BYTE $0x00       // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_199
	JMP  LBB2_323

LBB2_200:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_330
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_202:
	LONG $0x0cf8fdc5; BYTE $0x19               // vpsubb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54f8fdc5; WORD $0x2019             // vpsubb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cf8fdc5; WORD $0x4019             // vpsubb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x64f8fdc5; WORD $0x6019             // vpsubb    ymm4, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x000080198cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rbx + 128]
	QUAD $0x0000a01994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rbx + 160]
	QUAD $0x0000c0199cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rbx + 192]
	QUAD $0x0000e019a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_202
	JMP  LBB2_331

LBB2_203:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_338
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_205:
	LONG $0x0cfbfdc5; BYTE $0xd9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54fbfdc5; WORD $0x20d9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cfbfdc5; WORD $0x40d9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x64fbfdc5; WORD $0x60d9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080d98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_205
	JMP  LBB2_339

LBB2_206:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_346
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_208:
	LONG $0x0cf9fdc5; BYTE $0x59               // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x54f9fdc5; WORD $0x2059             // vpsubw    ymm2, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4059             // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx + 64]
	LONG $0x54f9fdc5; WORD $0x6059             // vpsubw    ymm2, ymm0, yword [rcx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_208
	JMP  LBB2_347

LBB2_209:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_354
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_211:
	LONG $0x0cf9fdc5; BYTE $0x59               // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x54f9fdc5; WORD $0x2059             // vpsubw    ymm2, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4059             // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx + 64]
	LONG $0x54f9fdc5; WORD $0x6059             // vpsubw    ymm2, ymm0, yword [rcx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_211
	JMP  LBB2_355

LBB2_212:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_362
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_214:
	LONG $0x0cfbfdc5; BYTE $0xd9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54fbfdc5; WORD $0x20d9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cfbfdc5; WORD $0x40d9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x64fbfdc5; WORD $0x60d9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080d98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_214
	JMP  LBB2_363

LBB2_215:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	LONG $0x05ebc148             // shr    rbx, 5
	LONG $0x01c38348             // add    rbx, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_370
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_217:
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c5cf4c5; WORD $0x60b9             // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b9945cf4c5; BYTE $0x00       // vsubps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c5cf4c5; BYTE $0x00       // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a45cf4c5; BYTE $0x00       // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac5cf4c5; BYTE $0x00       // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_217
	JMP  LBB2_371

LBB2_218:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_378
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_220:
	LONG $0x0cf8fdc5; BYTE $0x19               // vpsubb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54f8fdc5; WORD $0x2019             // vpsubb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cf8fdc5; WORD $0x4019             // vpsubb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x64f8fdc5; WORD $0x6019             // vpsubb    ymm4, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x000080198cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rbx + 128]
	QUAD $0x0000a01994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rbx + 160]
	QUAD $0x0000c0199cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rbx + 192]
	QUAD $0x0000e019a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_220
	JMP  LBB2_379

LBB2_221:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_386
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_223:
	LONG $0x0cfafdc5; BYTE $0x99               // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fafdc5; WORD $0x2099             // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfafdc5; WORD $0x4099             // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x64fafdc5; WORD $0x6099             // vpsubd    ymm4, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x000080998cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a09994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c0999cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_223
	JMP  LBB2_387

LBB2_254:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_394
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_256:
	LONG $0x0cfefdc5; BYTE $0x99               // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x2099             // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x4099             // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x64fefdc5; WORD $0x6099             // vpaddd    ymm4, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x000080998cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a09994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c0999cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_256
	JMP  LBB2_395

LBB2_257:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x04eac149             // shr    r10, 4
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_402
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_259:
	LONG $0x1458f5c5; BYTE $0xd9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rbx]
	LONG $0x5c58f5c5; WORD $0x20d9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rbx + 32]
	LONG $0x6458f5c5; WORD $0x40d9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rbx + 64]
	LONG $0x6c58f5c5; WORD $0x60d9             // vaddpd    ymm5, ymm1, yword [rcx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm5
	QUAD $0x000080d99458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d99c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d9a458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9ac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 128], ymm2
	QUAD $0x00a0d89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 160], ymm3
	QUAD $0x00c0d8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 192], ymm4
	QUAD $0x00e0d8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 224], ymm5
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_259
	JMP  LBB2_403

LBB2_260:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_410
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_262:
	LONG $0x0cfcfdc5; BYTE $0x19               // vpaddb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54fcfdc5; WORD $0x2019             // vpaddb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x4019             // vpaddb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x64fcfdc5; WORD $0x6019             // vpaddb    ymm4, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x000080198cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rbx + 128]
	QUAD $0x0000a01994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rbx + 160]
	QUAD $0x0000c0199cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rbx + 192]
	QUAD $0x0000e019a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_262
	JMP  LBB2_411

LBB2_263:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_418
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_265:
	LONG $0x0cd4fdc5; BYTE $0xd9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20d9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40d9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x64d4fdc5; WORD $0x60d9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080d98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_265
	JMP  LBB2_419

LBB2_266:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_426
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_268:
	LONG $0x0cfdfdc5; BYTE $0x59               // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x54fdfdc5; WORD $0x2059             // vpaddw    ymm2, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4059             // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx + 64]
	LONG $0x54fdfdc5; WORD $0x6059             // vpaddw    ymm2, ymm0, yword [rcx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_268
	JMP  LBB2_427

LBB2_269:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_434
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_271:
	LONG $0x0cfdfdc5; BYTE $0x59               // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x54fdfdc5; WORD $0x2059             // vpaddw    ymm2, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4059             // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx + 64]
	LONG $0x54fdfdc5; WORD $0x6059             // vpaddw    ymm2, ymm0, yword [rcx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_271
	JMP  LBB2_435

LBB2_272:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_442
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_274:
	LONG $0x0cd4fdc5; BYTE $0xd9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20d9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40d9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x64d4fdc5; WORD $0x60d9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080d98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_274
	JMP  LBB2_443

LBB2_275:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x05eac149             // shr    r10, 5
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_450
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_277:
	LONG $0x1458f4c5; BYTE $0x99               // vaddps    ymm2, ymm1, yword [rcx + 4*rbx]
	LONG $0x5c58f4c5; WORD $0x2099             // vaddps    ymm3, ymm1, yword [rcx + 4*rbx + 32]
	LONG $0x6458f4c5; WORD $0x4099             // vaddps    ymm4, ymm1, yword [rcx + 4*rbx + 64]
	LONG $0x6c58f4c5; WORD $0x6099             // vaddps    ymm5, ymm1, yword [rcx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x986c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm5
	QUAD $0x000080999458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a0999c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c099a458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099ac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rcx + 4*rbx + 224]
	QUAD $0x00809894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 128], ymm2
	QUAD $0x00a0989c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 160], ymm3
	QUAD $0x00c098a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 192], ymm4
	QUAD $0x00e098ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 224], ymm5
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_277
	JMP  LBB2_451

LBB2_278:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_458
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_280:
	LONG $0x0cfcfdc5; BYTE $0x19               // vpaddb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54fcfdc5; WORD $0x2019             // vpaddb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x4019             // vpaddb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x64fcfdc5; WORD $0x6019             // vpaddb    ymm4, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x000080198cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rbx + 128]
	QUAD $0x0000a01994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rbx + 160]
	QUAD $0x0000c0199cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rbx + 192]
	QUAD $0x0000e019a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_280
	JMP  LBB2_459

LBB2_281:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_466
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_283:
	LONG $0x0cfefdc5; BYTE $0x99               // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x2099             // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x4099             // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x64fefdc5; WORD $0x6099             // vpaddd    ymm4, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x000080998cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a09994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c0999cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_283
	JMP  LBB2_467

LBB2_284:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_658
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_286:
	LONG $0x0cfefdc5; BYTE $0x99               // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x2099             // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x4099             // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x64fefdc5; WORD $0x6099             // vpaddd    ymm4, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x000080998cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a09994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c0999cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_286
	JMP  LBB2_659

LBB2_287:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x04eac149             // shr    r10, 4
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_666
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_289:
	LONG $0x1458f5c5; BYTE $0xd9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rbx]
	LONG $0x5c58f5c5; WORD $0x20d9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rbx + 32]
	LONG $0x6458f5c5; WORD $0x40d9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rbx + 64]
	LONG $0x6c58f5c5; WORD $0x60d9             // vaddpd    ymm5, ymm1, yword [rcx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm5
	QUAD $0x000080d99458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d99c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d9a458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9ac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 128], ymm2
	QUAD $0x00a0d89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 160], ymm3
	QUAD $0x00c0d8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 192], ymm4
	QUAD $0x00e0d8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 224], ymm5
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_289
	JMP  LBB2_667

LBB2_290:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_674
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_292:
	LONG $0x0cfcfdc5; BYTE $0x19               // vpaddb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54fcfdc5; WORD $0x2019             // vpaddb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x4019             // vpaddb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x64fcfdc5; WORD $0x6019             // vpaddb    ymm4, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x000080198cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rbx + 128]
	QUAD $0x0000a01994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rbx + 160]
	QUAD $0x0000c0199cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rbx + 192]
	QUAD $0x0000e019a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_292
	JMP  LBB2_675

LBB2_293:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_682
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_295:
	LONG $0x0cd4fdc5; BYTE $0xd9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20d9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40d9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x64d4fdc5; WORD $0x60d9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080d98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_295
	JMP  LBB2_683

LBB2_296:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_690
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_298:
	LONG $0x0cfdfdc5; BYTE $0x59               // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x54fdfdc5; WORD $0x2059             // vpaddw    ymm2, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4059             // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx + 64]
	LONG $0x54fdfdc5; WORD $0x6059             // vpaddw    ymm2, ymm0, yword [rcx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_298
	JMP  LBB2_691

LBB2_299:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_698
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_301:
	LONG $0x0cfdfdc5; BYTE $0x59               // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x54fdfdc5; WORD $0x2059             // vpaddw    ymm2, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4059             // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx + 64]
	LONG $0x54fdfdc5; WORD $0x6059             // vpaddw    ymm2, ymm0, yword [rcx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_301
	JMP  LBB2_699

LBB2_302:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_706
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_304:
	LONG $0x0cd4fdc5; BYTE $0xd9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20d9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40d9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x64d4fdc5; WORD $0x60d9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080d98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_304
	JMP  LBB2_707

LBB2_305:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x05eac149             // shr    r10, 5
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_714
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_307:
	LONG $0x1458f4c5; BYTE $0x99               // vaddps    ymm2, ymm1, yword [rcx + 4*rbx]
	LONG $0x5c58f4c5; WORD $0x2099             // vaddps    ymm3, ymm1, yword [rcx + 4*rbx + 32]
	LONG $0x6458f4c5; WORD $0x4099             // vaddps    ymm4, ymm1, yword [rcx + 4*rbx + 64]
	LONG $0x6c58f4c5; WORD $0x6099             // vaddps    ymm5, ymm1, yword [rcx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x986c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm5
	QUAD $0x000080999458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a0999c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c099a458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099ac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rcx + 4*rbx + 224]
	QUAD $0x00809894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 128], ymm2
	QUAD $0x00a0989c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 160], ymm3
	QUAD $0x00c098a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 192], ymm4
	QUAD $0x00e098ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 224], ymm5
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_307
	JMP  LBB2_715

LBB2_308:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_722
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_310:
	LONG $0x0cfcfdc5; BYTE $0x19               // vpaddb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54fcfdc5; WORD $0x2019             // vpaddb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x4019             // vpaddb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x64fcfdc5; WORD $0x6019             // vpaddb    ymm4, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x000080198cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rbx + 128]
	QUAD $0x0000a01994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rbx + 160]
	QUAD $0x0000c0199cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rbx + 192]
	QUAD $0x0000e019a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_310
	JMP  LBB2_723

LBB2_311:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_730
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_313:
	LONG $0x0cfefdc5; BYTE $0x99               // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x2099             // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x4099             // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x64fefdc5; WORD $0x6099             // vpaddd    ymm4, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x000080998cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a09994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c0999cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_313
	JMP  LBB2_731

LBB2_314:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_315:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_317
	LONG $0x0cfafdc5; BYTE $0x99               // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fafdc5; WORD $0x2099             // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfafdc5; WORD $0x4099             // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x44fafdc5; WORD $0x6099             // vpsubd    ymm0, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB2_317:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_517
	JMP  LBB2_318

LBB2_322:
	WORD $0xff31 // xor    edi, edi

LBB2_323:
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JE   LBB2_325
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c5cf5c5; WORD $0x60f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_325:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_517
	JMP  LBB2_326

LBB2_330:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_331:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_333
	LONG $0x0cf8fdc5; BYTE $0x19               // vpsubb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54f8fdc5; WORD $0x2019             // vpsubb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cf8fdc5; WORD $0x4019             // vpsubb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x44f8fdc5; WORD $0x6019             // vpsubb    ymm0, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB2_333:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_517
	JMP  LBB2_334

LBB2_338:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_339:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_341
	LONG $0x0cfbfdc5; BYTE $0xd9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54fbfdc5; WORD $0x20d9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cfbfdc5; WORD $0x40d9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x44fbfdc5; WORD $0x60d9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB2_341:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_517
	JMP  LBB2_342

LBB2_346:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_347:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_349
	LONG $0x0cf9fdc5; BYTE $0x59               // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x44f9fdc5; WORD $0x2059             // vpsubw    ymm0, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB2_349:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_517
	JMP  LBB2_350

LBB2_354:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_355:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_357
	LONG $0x0cf9fdc5; BYTE $0x59               // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x44f9fdc5; WORD $0x2059             // vpsubw    ymm0, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB2_357:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_517
	JMP  LBB2_358

LBB2_362:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_363:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_365
	LONG $0x0cfbfdc5; BYTE $0xd9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54fbfdc5; WORD $0x20d9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cfbfdc5; WORD $0x40d9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x44fbfdc5; WORD $0x60d9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB2_365:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_517
	JMP  LBB2_366

LBB2_370:
	WORD $0xff31 // xor    edi, edi

LBB2_371:
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JE   LBB2_373
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c5cf4c5; WORD $0x60b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_373:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_517
	JMP  LBB2_374

LBB2_378:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_379:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_381
	LONG $0x0cf8fdc5; BYTE $0x19               // vpsubb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54f8fdc5; WORD $0x2019             // vpsubb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cf8fdc5; WORD $0x4019             // vpsubb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x44f8fdc5; WORD $0x6019             // vpsubb    ymm0, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB2_381:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_517
	JMP  LBB2_382

LBB2_386:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_387:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_389
	LONG $0x0cfafdc5; BYTE $0x99               // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fafdc5; WORD $0x2099             // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfafdc5; WORD $0x4099             // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x44fafdc5; WORD $0x6099             // vpsubd    ymm0, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB2_389:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_517
	JMP  LBB2_390

LBB2_394:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_395:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_397
	LONG $0x0cfefdc5; BYTE $0x99               // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x2099             // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x4099             // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x44fefdc5; WORD $0x6099             // vpaddd    ymm0, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB2_397:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_474
	JMP  LBB2_398

LBB2_402:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_403:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB2_405
	LONG $0x1458f5c5; BYTE $0xd9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rbx]
	LONG $0x5c58f5c5; WORD $0x20d9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rbx + 32]
	LONG $0x6458f5c5; WORD $0x40d9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rbx + 64]
	LONG $0x4c58f5c5; WORD $0x60d9             // vaddpd    ymm1, ymm1, yword [rcx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm1

LBB2_405:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB2_474
	JMP  LBB2_406

LBB2_410:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_411:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_413
	LONG $0x0cfcfdc5; BYTE $0x19               // vpaddb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54fcfdc5; WORD $0x2019             // vpaddb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x4019             // vpaddb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x44fcfdc5; WORD $0x6019             // vpaddb    ymm0, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB2_413:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_474
	JMP  LBB2_414

LBB2_418:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_419:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_421
	LONG $0x0cd4fdc5; BYTE $0xd9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20d9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40d9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x44d4fdc5; WORD $0x60d9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB2_421:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_474
	JMP  LBB2_422

LBB2_426:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_427:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_429
	LONG $0x0cfdfdc5; BYTE $0x59               // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x44fdfdc5; WORD $0x2059             // vpaddw    ymm0, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB2_429:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_474
	JMP  LBB2_430

LBB2_434:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_435:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_437
	LONG $0x0cfdfdc5; BYTE $0x59               // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x44fdfdc5; WORD $0x2059             // vpaddw    ymm0, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB2_437:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_474
	JMP  LBB2_438

LBB2_442:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_443:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_445
	LONG $0x0cd4fdc5; BYTE $0xd9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20d9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40d9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x44d4fdc5; WORD $0x60d9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB2_445:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_474
	JMP  LBB2_446

LBB2_450:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_451:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB2_453
	LONG $0x1458f4c5; BYTE $0x99               // vaddps    ymm2, ymm1, yword [rcx + 4*rbx]
	LONG $0x5c58f4c5; WORD $0x2099             // vaddps    ymm3, ymm1, yword [rcx + 4*rbx + 32]
	LONG $0x6458f4c5; WORD $0x4099             // vaddps    ymm4, ymm1, yword [rcx + 4*rbx + 64]
	LONG $0x4c58f4c5; WORD $0x6099             // vaddps    ymm1, ymm1, yword [rcx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x984c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm1

LBB2_453:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB2_474
	JMP  LBB2_454

LBB2_458:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_459:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_461
	LONG $0x0cfcfdc5; BYTE $0x19               // vpaddb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54fcfdc5; WORD $0x2019             // vpaddb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x4019             // vpaddb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x44fcfdc5; WORD $0x6019             // vpaddb    ymm0, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB2_461:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_474
	JMP  LBB2_462

LBB2_466:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_467:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_469
	LONG $0x0cfefdc5; BYTE $0x99               // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x2099             // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x4099             // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x44fefdc5; WORD $0x6099             // vpaddd    ymm0, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB2_469:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB2_470

LBB2_474:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_482
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_489
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_499
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_502
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_13
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b44; BYTE $0x32 // mov    r14d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_481
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_548
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_548

LBB2_481:
	WORD $0xf631 // xor    esi, esi

LBB2_582:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_584

LBB2_583:
	WORD $0x8944; BYTE $0xf0 // mov    eax, r14d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_583

LBB2_584:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_13

LBB2_585:
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_585
	JMP  LBB2_13

LBB2_482:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_494
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_505
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_508
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_13
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_488
	LONG $0xd9048d4a         // lea    rax, [rcx + 8*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_551
	LONG $0xd8048d4b         // lea    rax, [r8 + 8*r11]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_551

LBB2_488:
	WORD $0xf631 // xor    esi, esi

LBB2_590:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_592

LBB2_591:
	LONG $0x0c5cfbc5; BYTE $0xf1   // vsubsd    xmm1, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB2_591

LBB2_592:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_13

LBB2_593:
	LONG $0x0c5cfbc5; BYTE $0xf1               // vsubsd    xmm1, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf00c             // vmovsd    qword [r8 + 8*rsi], xmm1
	LONG $0x4c5cfbc5; WORD $0x08f1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm1
	LONG $0x4c5cfbc5; WORD $0x10f1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm1
	LONG $0x4c5cfbc5; WORD $0x18f1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB2_593
	JMP  LBB2_13

LBB2_489:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_511
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_13
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8a44; BYTE $0x32                   // mov    r14b, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_493
	LONG $0x11048d4a                           // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB2_554
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JBE  LBB2_554

LBB2_493:
	WORD $0xf631 // xor    esi, esi

LBB2_598:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_600

LBB2_599:
	WORD $0x8944; BYTE $0xf0 // mov    eax, r14d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_599

LBB2_600:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_13

LBB2_601:
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_601
	JMP  LBB2_13

LBB2_494:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_514
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_13
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b4c; BYTE $0x32 // mov    r14, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_498
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_557
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_557

LBB2_498:
	WORD $0xf631 // xor    esi, esi

LBB2_606:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_608

LBB2_607:
	WORD $0x894c; BYTE $0xf0 // mov    rax, r14
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_607

LBB2_608:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_13

LBB2_609:
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_609
	JMP  LBB2_13

LBB2_499:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x32b70f44         // movzx    r14d, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_501
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_560
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_560

LBB2_501:
	WORD $0xf631 // xor    esi, esi

LBB2_614:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB2_616

LBB2_615:
	WORD $0x8944; BYTE $0xf3     // mov    ebx, r14d
	LONG $0x711c2b66             // sub    bx, word [rcx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB2_615

LBB2_616:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_13

LBB2_617:
	WORD $0x8944; BYTE $0xf0       // mov    eax, r14d
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	WORD $0x8944; BYTE $0xf0       // mov    eax, r14d
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	WORD $0x8944; BYTE $0xf0       // mov    eax, r14d
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	WORD $0x8944; BYTE $0xf0       // mov    eax, r14d
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_617
	JMP  LBB2_13

LBB2_502:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x32b70f44         // movzx    r14d, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_504
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_563
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_563

LBB2_504:
	WORD $0xf631 // xor    esi, esi

LBB2_622:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB2_624

LBB2_623:
	WORD $0x8944; BYTE $0xf3     // mov    ebx, r14d
	LONG $0x711c2b66             // sub    bx, word [rcx + 2*rsi]
	LONG $0x1c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], bx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB2_623

LBB2_624:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_13

LBB2_625:
	WORD $0x8944; BYTE $0xf0       // mov    eax, r14d
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	WORD $0x8944; BYTE $0xf0       // mov    eax, r14d
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	WORD $0x8944; BYTE $0xf0       // mov    eax, r14d
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	WORD $0x8944; BYTE $0xf0       // mov    eax, r14d
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_625
	JMP  LBB2_13

LBB2_505:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b4c; BYTE $0x32 // mov    r14, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_507
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_566
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_566

LBB2_507:
	WORD $0xf631 // xor    esi, esi

LBB2_630:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_632

LBB2_631:
	WORD $0x894c; BYTE $0xf0 // mov    rax, r14
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_631

LBB2_632:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_13

LBB2_633:
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_633
	JMP  LBB2_13

LBB2_508:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8945; BYTE $0xcb // mov    r11d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_510
	LONG $0x99048d4a         // lea    rax, [rcx + 4*r11]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_569
	LONG $0x98048d4b         // lea    rax, [r8 + 4*r11]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_569

LBB2_510:
	WORD $0xf631 // xor    esi, esi

LBB2_638:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd8 // add    rax, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_640

LBB2_639:
	LONG $0x0c5cfac5; BYTE $0xb1   // vsubss    xmm1, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc38348               // add    rbx, -1
	JNE  LBB2_639

LBB2_640:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_13

LBB2_641:
	LONG $0x0c5cfac5; BYTE $0xb1               // vsubss    xmm1, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb00c             // vmovss    dword [r8 + 4*rsi], xmm1
	LONG $0x4c5cfac5; WORD $0x04b1             // vsubss    xmm1, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm1
	LONG $0x4c5cfac5; WORD $0x08b1             // vsubss    xmm1, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm1
	LONG $0x4c5cfac5; WORD $0x0cb1             // vsubss    xmm1, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb04c; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm1
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf3                   // cmp    r11, rsi
	JNE  LBB2_641
	JMP  LBB2_13

LBB2_511:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8a44; BYTE $0x32                   // mov    r14b, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_513
	LONG $0x11048d4a                           // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0                   // cmp    rax, r8
	JBE  LBB2_572
	LONG $0x10048d4b                           // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JBE  LBB2_572

LBB2_513:
	WORD $0xf631 // xor    esi, esi

LBB2_646:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_648

LBB2_647:
	WORD $0x8944; BYTE $0xf0 // mov    eax, r14d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_647

LBB2_648:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_13

LBB2_649:
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_649
	JMP  LBB2_13

LBB2_514:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_517
	WORD $0x8b44; BYTE $0x32 // mov    r14d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_516
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_575
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_575

LBB2_516:
	WORD $0xf631 // xor    esi, esi

LBB2_654:
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB2_656

LBB2_655:
	WORD $0x8944; BYTE $0xf0 // mov    eax, r14d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB2_655

LBB2_656:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB2_13

LBB2_657:
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xf0     // mov    eax, r14d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_657
	JMP  LBB2_13

LBB2_517:
	VZEROUPPER
	RET

LBB2_548:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_578
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_550:
	LONG $0x0cfafdc5; BYTE $0x99               // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fafdc5; WORD $0x2099             // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfafdc5; WORD $0x4099             // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x64fafdc5; WORD $0x6099             // vpsubd    ymm4, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x000080998cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a09994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c0999cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_550
	JMP  LBB2_579

LBB2_551:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x04eac149             // shr    r10, 4
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_586
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_553:
	LONG $0x145cf5c5; BYTE $0xd9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rbx]
	LONG $0x5c5cf5c5; WORD $0x20d9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rbx + 32]
	LONG $0x645cf5c5; WORD $0x40d9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rbx + 64]
	LONG $0x6c5cf5c5; WORD $0x60d9             // vsubpd    ymm5, ymm1, yword [rcx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm5
	QUAD $0x000080d9945cf5c5; BYTE $0x00       // vsubpd    ymm2, ymm1, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d99c5cf5c5; BYTE $0x00       // vsubpd    ymm3, ymm1, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d9a45cf5c5; BYTE $0x00       // vsubpd    ymm4, ymm1, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9ac5cf5c5; BYTE $0x00       // vsubpd    ymm5, ymm1, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 128], ymm2
	QUAD $0x00a0d89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 160], ymm3
	QUAD $0x00c0d8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 192], ymm4
	QUAD $0x00e0d8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rbx + 224], ymm5
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_553
	JMP  LBB2_587

LBB2_554:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_594
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_556:
	LONG $0x0cf8fdc5; BYTE $0x19               // vpsubb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54f8fdc5; WORD $0x2019             // vpsubb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cf8fdc5; WORD $0x4019             // vpsubb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x64f8fdc5; WORD $0x6019             // vpsubb    ymm4, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x000080198cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rbx + 128]
	QUAD $0x0000a01994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rbx + 160]
	QUAD $0x0000c0199cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rbx + 192]
	QUAD $0x0000e019a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_556
	JMP  LBB2_595

LBB2_557:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_602
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_559:
	LONG $0x0cfbfdc5; BYTE $0xd9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54fbfdc5; WORD $0x20d9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cfbfdc5; WORD $0x40d9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x64fbfdc5; WORD $0x60d9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080d98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_559
	JMP  LBB2_603

LBB2_560:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_610
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_562:
	LONG $0x0cf9fdc5; BYTE $0x59               // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x54f9fdc5; WORD $0x2059             // vpsubw    ymm2, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4059             // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx + 64]
	LONG $0x54f9fdc5; WORD $0x6059             // vpsubw    ymm2, ymm0, yword [rcx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_562
	JMP  LBB2_611

LBB2_563:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_618
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_565:
	LONG $0x0cf9fdc5; BYTE $0x59               // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x54f9fdc5; WORD $0x2059             // vpsubw    ymm2, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4059             // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx + 64]
	LONG $0x54f9fdc5; WORD $0x6059             // vpsubw    ymm2, ymm0, yword [rcx + 2*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x584c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rbx + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x5854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rbx + 96], ymm2
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_565
	JMP  LBB2_619

LBB2_566:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc6 // vmovq    xmm0, r14
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0468d48             // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x04ebc149             // shr    r11, 4
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_626
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_568:
	LONG $0x0cfbfdc5; BYTE $0xd9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54fbfdc5; WORD $0x20d9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cfbfdc5; WORD $0x40d9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x64fbfdc5; WORD $0x60d9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm4
	QUAD $0x000080d98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx + 128]
	QUAD $0x0000a0d994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 160]
	QUAD $0x0000c0d99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 192]
	QUAD $0x0000e0d9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rbx + 224]
	QUAD $0x0080d88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 128], ymm1
	QUAD $0x00a0d8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 160], ymm2
	QUAD $0x00c0d89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 192], ymm3
	QUAD $0x00e0d8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rbx + 224], ymm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_568
	JMP  LBB2_627

LBB2_569:
	WORD $0x8944; BYTE $0xde     // mov    esi, r11d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x05eac149             // shr    r10, 5
	LONG $0x01c28349             // add    r10, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_634
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_571:
	LONG $0x145cf4c5; BYTE $0x99               // vsubps    ymm2, ymm1, yword [rcx + 4*rbx]
	LONG $0x5c5cf4c5; WORD $0x2099             // vsubps    ymm3, ymm1, yword [rcx + 4*rbx + 32]
	LONG $0x645cf4c5; WORD $0x4099             // vsubps    ymm4, ymm1, yword [rcx + 4*rbx + 64]
	LONG $0x6c5cf4c5; WORD $0x6099             // vsubps    ymm5, ymm1, yword [rcx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x986c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm5
	QUAD $0x00008099945cf4c5; BYTE $0x00       // vsubps    ymm2, ymm1, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a0999c5cf4c5; BYTE $0x00       // vsubps    ymm3, ymm1, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c099a45cf4c5; BYTE $0x00       // vsubps    ymm4, ymm1, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099ac5cf4c5; BYTE $0x00       // vsubps    ymm5, ymm1, yword [rcx + 4*rbx + 224]
	QUAD $0x00809894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 128], ymm2
	QUAD $0x00a0989c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 160], ymm3
	QUAD $0x00c098a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 192], ymm4
	QUAD $0x00e098ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rbx + 224], ymm5
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_571
	JMP  LBB2_635

LBB2_572:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80468d48             // lea    rax, [rsi - 128]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x07ebc149             // shr    r11, 7
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_642
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_574:
	LONG $0x0cf8fdc5; BYTE $0x19               // vpsubb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54f8fdc5; WORD $0x2019             // vpsubb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cf8fdc5; WORD $0x4019             // vpsubb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x64f8fdc5; WORD $0x6019             // vpsubb    ymm4, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1864; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm4
	QUAD $0x000080198cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rbx + 128]
	QUAD $0x0000a01994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rbx + 160]
	QUAD $0x0000c0199cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rbx + 192]
	QUAD $0x0000e019a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rbx + 224]
	QUAD $0x0080188c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 128], ymm1
	QUAD $0x00a018947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 160], ymm2
	QUAD $0x00c0189c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 192], ymm3
	QUAD $0x00e018a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_574
	JMP  LBB2_643

LBB2_575:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0468d48             // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x05ebc149             // shr    r11, 5
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_650
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_577:
	LONG $0x0cfafdc5; BYTE $0x99               // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fafdc5; WORD $0x2099             // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfafdc5; WORD $0x4099             // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x64fafdc5; WORD $0x6099             // vpsubd    ymm4, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm4
	QUAD $0x000080998cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx + 128]
	QUAD $0x0000a09994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 160]
	QUAD $0x0000c0999cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 192]
	QUAD $0x0000e099a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rbx + 224]
	QUAD $0x0080988c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 128], ymm1
	QUAD $0x00a098947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 160], ymm2
	QUAD $0x00c0989c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 192], ymm3
	QUAD $0x00e098a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rbx + 224], ymm4
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB2_577
	JMP  LBB2_651

LBB2_578:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_579:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_581
	LONG $0x0cfafdc5; BYTE $0x99               // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fafdc5; WORD $0x2099             // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfafdc5; WORD $0x4099             // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x44fafdc5; WORD $0x6099             // vpsubd    ymm0, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB2_581:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_13
	JMP  LBB2_582

LBB2_586:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_587:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB2_589
	LONG $0x145cf5c5; BYTE $0xd9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rbx]
	LONG $0x5c5cf5c5; WORD $0x20d9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rbx + 32]
	LONG $0x645cf5c5; WORD $0x40d9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rbx + 64]
	LONG $0x4c5cf5c5; WORD $0x60d9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm1

LBB2_589:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB2_13
	JMP  LBB2_590

LBB2_594:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_595:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_597
	LONG $0x0cf8fdc5; BYTE $0x19               // vpsubb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54f8fdc5; WORD $0x2019             // vpsubb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cf8fdc5; WORD $0x4019             // vpsubb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x44f8fdc5; WORD $0x6019             // vpsubb    ymm0, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB2_597:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_13
	JMP  LBB2_598

LBB2_602:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_603:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_605
	LONG $0x0cfbfdc5; BYTE $0xd9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54fbfdc5; WORD $0x20d9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cfbfdc5; WORD $0x40d9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x44fbfdc5; WORD $0x60d9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB2_605:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_13
	JMP  LBB2_606

LBB2_610:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_611:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_613
	LONG $0x0cf9fdc5; BYTE $0x59               // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x44f9fdc5; WORD $0x2059             // vpsubw    ymm0, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB2_613:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_13
	JMP  LBB2_614

LBB2_618:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_619:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_621
	LONG $0x0cf9fdc5; BYTE $0x59               // vpsubw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x44f9fdc5; WORD $0x2059             // vpsubw    ymm0, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB2_621:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_13
	JMP  LBB2_622

LBB2_626:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_627:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_629
	LONG $0x0cfbfdc5; BYTE $0xd9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54fbfdc5; WORD $0x20d9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cfbfdc5; WORD $0x40d9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x44fbfdc5; WORD $0x60d9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB2_629:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_13
	JMP  LBB2_630

LBB2_634:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_635:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB2_637
	LONG $0x145cf4c5; BYTE $0x99               // vsubps    ymm2, ymm1, yword [rcx + 4*rbx]
	LONG $0x5c5cf4c5; WORD $0x2099             // vsubps    ymm3, ymm1, yword [rcx + 4*rbx + 32]
	LONG $0x645cf4c5; WORD $0x4099             // vsubps    ymm4, ymm1, yword [rcx + 4*rbx + 64]
	LONG $0x4c5cf4c5; WORD $0x6099             // vsubps    ymm1, ymm1, yword [rcx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x984c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm1

LBB2_637:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB2_13
	JMP  LBB2_638

LBB2_642:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_643:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_645
	LONG $0x0cf8fdc5; BYTE $0x19               // vpsubb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54f8fdc5; WORD $0x2019             // vpsubb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cf8fdc5; WORD $0x4019             // vpsubb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x44f8fdc5; WORD $0x6019             // vpsubb    ymm0, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB2_645:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_13
	JMP  LBB2_646

LBB2_650:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_651:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_653
	LONG $0x0cfafdc5; BYTE $0x99               // vpsubd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fafdc5; WORD $0x2099             // vpsubd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfafdc5; WORD $0x4099             // vpsubd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x44fafdc5; WORD $0x6099             // vpsubd    ymm0, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB2_653:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_13
	JMP  LBB2_654

LBB2_658:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_659:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_661
	LONG $0x0cfefdc5; BYTE $0x99               // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x2099             // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x4099             // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x44fefdc5; WORD $0x6099             // vpaddd    ymm0, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB2_661:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_3
	JMP  LBB2_662

LBB2_666:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_667:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB2_669
	LONG $0x1458f5c5; BYTE $0xd9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rbx]
	LONG $0x5c58f5c5; WORD $0x20d9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rbx + 32]
	LONG $0x6458f5c5; WORD $0x40d9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rbx + 64]
	LONG $0x4c58f5c5; WORD $0x60d9             // vaddpd    ymm1, ymm1, yword [rcx + 8*rbx + 96]
	LONG $0x117dc1c4; WORD $0xd814             // vmovupd    yword [r8 + 8*rbx], ymm2
	LONG $0x117dc1c4; WORD $0xd85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rbx + 32], ymm3
	LONG $0x117dc1c4; WORD $0xd864; BYTE $0x40 // vmovupd    yword [r8 + 8*rbx + 64], ymm4
	LONG $0x117dc1c4; WORD $0xd84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rbx + 96], ymm1

LBB2_669:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB2_3
	JMP  LBB2_670

LBB2_674:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_675:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_677
	LONG $0x0cfcfdc5; BYTE $0x19               // vpaddb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54fcfdc5; WORD $0x2019             // vpaddb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x4019             // vpaddb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x44fcfdc5; WORD $0x6019             // vpaddb    ymm0, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB2_677:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_3
	JMP  LBB2_678

LBB2_682:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_683:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_685
	LONG $0x0cd4fdc5; BYTE $0xd9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20d9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40d9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x44d4fdc5; WORD $0x60d9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB2_685:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_3
	JMP  LBB2_686

LBB2_690:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_691:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_693
	LONG $0x0cfdfdc5; BYTE $0x59               // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x44fdfdc5; WORD $0x2059             // vpaddw    ymm0, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB2_693:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_3
	JMP  LBB2_694

LBB2_698:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_699:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_701
	LONG $0x0cfdfdc5; BYTE $0x59               // vpaddw    ymm1, ymm0, yword [rcx + 2*rbx]
	LONG $0x44fdfdc5; WORD $0x2059             // vpaddw    ymm0, ymm0, yword [rcx + 2*rbx + 32]
	LONG $0x7f7ec1c4; WORD $0x580c             // vmovdqu    yword [r8 + 2*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x5844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rbx + 32], ymm0

LBB2_701:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_3
	JMP  LBB2_702

LBB2_706:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_707:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_709
	LONG $0x0cd4fdc5; BYTE $0xd9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rbx]
	LONG $0x54d4fdc5; WORD $0x20d9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rbx + 32]
	LONG $0x5cd4fdc5; WORD $0x40d9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rbx + 64]
	LONG $0x44d4fdc5; WORD $0x60d9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0xd80c             // vmovdqu    yword [r8 + 8*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0xd854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xd85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xd844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rbx + 96], ymm0

LBB2_709:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_3
	JMP  LBB2_710

LBB2_714:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_715:
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB2_717
	LONG $0x1458f4c5; BYTE $0x99               // vaddps    ymm2, ymm1, yword [rcx + 4*rbx]
	LONG $0x5c58f4c5; WORD $0x2099             // vaddps    ymm3, ymm1, yword [rcx + 4*rbx + 32]
	LONG $0x6458f4c5; WORD $0x4099             // vaddps    ymm4, ymm1, yword [rcx + 4*rbx + 64]
	LONG $0x4c58f4c5; WORD $0x6099             // vaddps    ymm1, ymm1, yword [rcx + 4*rbx + 96]
	LONG $0x117cc1c4; WORD $0x9814             // vmovups    yword [r8 + 4*rbx], ymm2
	LONG $0x117cc1c4; WORD $0x985c; BYTE $0x20 // vmovups    yword [r8 + 4*rbx + 32], ymm3
	LONG $0x117cc1c4; WORD $0x9864; BYTE $0x40 // vmovups    yword [r8 + 4*rbx + 64], ymm4
	LONG $0x117cc1c4; WORD $0x984c; BYTE $0x60 // vmovups    yword [r8 + 4*rbx + 96], ymm1

LBB2_717:
	WORD $0x394c; BYTE $0xde // cmp    rsi, r11
	JE   LBB2_3
	JMP  LBB2_718

LBB2_722:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_723:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_725
	LONG $0x0cfcfdc5; BYTE $0x19               // vpaddb    ymm1, ymm0, yword [rcx + rbx]
	LONG $0x54fcfdc5; WORD $0x2019             // vpaddb    ymm2, ymm0, yword [rcx + rbx + 32]
	LONG $0x5cfcfdc5; WORD $0x4019             // vpaddb    ymm3, ymm0, yword [rcx + rbx + 64]
	LONG $0x44fcfdc5; WORD $0x6019             // vpaddb    ymm0, ymm0, yword [rcx + rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x180c             // vmovdqu    yword [r8 + rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x1854; BYTE $0x20 // vmovdqu    yword [r8 + rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x185c; BYTE $0x40 // vmovdqu    yword [r8 + rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x1844; BYTE $0x60 // vmovdqu    yword [r8 + rbx + 96], ymm0

LBB2_725:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_3
	JMP  LBB2_726

LBB2_730:
	WORD $0xdb31 // xor    ebx, ebx

LBB2_731:
	LONG $0x01c3f641                           // test    r11b, 1
	JE   LBB2_733
	LONG $0x0cfefdc5; BYTE $0x99               // vpaddd    ymm1, ymm0, yword [rcx + 4*rbx]
	LONG $0x54fefdc5; WORD $0x2099             // vpaddd    ymm2, ymm0, yword [rcx + 4*rbx + 32]
	LONG $0x5cfefdc5; WORD $0x4099             // vpaddd    ymm3, ymm0, yword [rcx + 4*rbx + 64]
	LONG $0x44fefdc5; WORD $0x6099             // vpaddd    ymm0, ymm0, yword [rcx + 4*rbx + 96]
	LONG $0x7f7ec1c4; WORD $0x980c             // vmovdqu    yword [r8 + 4*rbx], ymm1
	LONG $0x7f7ec1c4; WORD $0x9854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rbx + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x985c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rbx + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x9844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rbx + 96], ymm0

LBB2_733:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_3
	JMP  LBB2_734
