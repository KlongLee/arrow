//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA1<>+0x008(SB)/8, $0x000000007fffffff
DATA LCDATA1<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x018(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x020(SB)/8, $0x0d0c090805040100
DATA LCDATA1<>+0x028(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA1<>+0x030(SB)/8, $0x1d1c191815141110
DATA LCDATA1<>+0x038(SB)/8, $0x1f1e1d1c1d1c1918
DATA LCDATA1<>+0x040(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x048(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x050(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x058(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x060(SB)/8, $0x000000000c080400
DATA LCDATA1<>+0x068(SB)/8, $0x0000000000000000
GLOBL LCDATA1<>(SB), 8, $112

TEXT Â·_arithmetic_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA1<>(SB), BP

	LONG $0x04fe8040         // cmp    sil, 4
	JG   LBB0_16
	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB0_31
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB0_51
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB0_1177
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_99
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_179
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_307
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_314
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_595
	WORD $0xf631             // xor    esi, esi

LBB0_12:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_14

LBB0_13:
	WORD $0x3c8b; BYTE $0xb2 // mov    edi, dword [rdx + 4*rsi]
	WORD $0x3c2b; BYTE $0xb1 // sub    edi, dword [rcx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_13

LBB0_14:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_15:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_15
	JMP  LBB0_1177

LBB0_16:
	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB0_41
	LONG $0x05fe8040         // cmp    sil, 5
	JE   LBB0_63
	LONG $0x06fe8040         // cmp    sil, 6
	JNE  LBB0_1177
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_110
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_188
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_321
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_328
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_600
	WORD $0xf631             // xor    esi, esi

LBB0_27:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_29

LBB0_28:
	WORD $0x3c8b; BYTE $0xb2 // mov    edi, dword [rdx + 4*rsi]
	WORD $0x3c2b; BYTE $0xb1 // sub    edi, dword [rcx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_28

LBB0_29:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_30:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_30
	JMP  LBB0_1177

LBB0_31:
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB0_75
	LONG $0x04fe8040         // cmp    sil, 4
	JNE  LBB0_1177
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_121
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_197
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_335
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_338
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_40
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_951
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_951

LBB0_40:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1081:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1083

LBB0_1082:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1082

LBB0_1083:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_1084:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1084
	JMP  LBB0_1177

LBB0_41:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB0_87
	LONG $0x09fe8040         // cmp    sil, 9
	JNE  LBB0_1177
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_128
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_202
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_341
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_344
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_50
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_954
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_954

LBB0_50:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1089:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1091

LBB0_1090:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1090

LBB0_1091:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_1092:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1092
	JMP  LBB0_1177

LBB0_51:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_135
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_207
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_347
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_354
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_611
	WORD $0xf631             // xor    esi, esi

LBB0_59:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_61

LBB0_60:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	WORD $0x3c03; BYTE $0xb2 // add    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_60

LBB0_61:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_62:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_62
	JMP  LBB0_1177

LBB0_63:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_146
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_216
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_361
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_368
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_616
	WORD $0xf631             // xor    esi, esi

LBB0_71:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_73

LBB0_72:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	WORD $0x3c03; BYTE $0xb2 // add    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_72

LBB0_73:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_74:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_74
	JMP  LBB0_1177

LBB0_75:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_157
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_225
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_375
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_382
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_621
	WORD $0xf631             // xor    esi, esi

LBB0_83:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_85

LBB0_84:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	LONG $0xb23caf0f         // imul    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_84

LBB0_85:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_86:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_86
	JMP  LBB0_1177

LBB0_87:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_168
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_234
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_389
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_396
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_626
	WORD $0xf631             // xor    esi, esi

LBB0_95:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_97

LBB0_96:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	LONG $0xb23caf0f         // imul    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_96

LBB0_97:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_98:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_98
	JMP  LBB0_1177

LBB0_99:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_243
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_403
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_410
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_631
	WORD $0xf631             // xor    esi, esi

LBB0_106:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_108

LBB0_107:
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1   // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_107

LBB0_108:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_109:
	LONG $0x0410fbc5; BYTE $0xf2               // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1               // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445cfbc5; WORD $0x08f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445cfbc5; WORD $0x10f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445cfbc5; WORD $0x18f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_109
	JMP  LBB0_1177

LBB0_110:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_252
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_417
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_424
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_636
	WORD $0xf631             // xor    esi, esi

LBB0_117:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_119

LBB0_118:
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1   // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_118

LBB0_119:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_120:
	LONG $0x0410fbc5; BYTE $0xf2               // vmovsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045cfbc5; BYTE $0xf1               // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445cfbc5; WORD $0x08f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445cfbc5; WORD $0x10f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f2             // vmovsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445cfbc5; WORD $0x18f1             // vsubsd    xmm0, xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_120
	JMP  LBB0_1177

LBB0_121:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_261
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_431
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_434
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_127
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_957
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_957

LBB0_127:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1097:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB0_1099

LBB0_1098:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_1098

LBB0_1099:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_1100:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1100
	JMP  LBB0_1177

LBB0_128:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_266
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_437
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_440
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_134
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_960
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_960

LBB0_134:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1105:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB0_1107

LBB0_1106:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_1106

LBB0_1107:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_1108:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1108
	JMP  LBB0_1177

LBB0_135:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_271
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_443
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_450
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_647
	WORD $0xf631             // xor    esi, esi

LBB0_142:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_144

LBB0_143:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2   // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_143

LBB0_144:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_145:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2               // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4458fbc5; WORD $0x08f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4458fbc5; WORD $0x10f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4458fbc5; WORD $0x18f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_145
	JMP  LBB0_1177

LBB0_146:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_280
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_457
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_464
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_652
	WORD $0xf631             // xor    esi, esi

LBB0_153:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_155

LBB0_154:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2   // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_154

LBB0_155:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_156:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0458fbc5; BYTE $0xf2               // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4458fbc5; WORD $0x08f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4458fbc5; WORD $0x10f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4458fbc5; WORD $0x18f2             // vaddsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_156
	JMP  LBB0_1177

LBB0_157:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_289
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_471
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_478
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_657
	WORD $0xf631             // xor    esi, esi

LBB0_164:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_166

LBB0_165:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0459fbc5; BYTE $0xf2   // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_165

LBB0_166:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_167:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0459fbc5; BYTE $0xf2               // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4459fbc5; WORD $0x08f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4459fbc5; WORD $0x10f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4459fbc5; WORD $0x18f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_167
	JMP  LBB0_1177

LBB0_168:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_298
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_485
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_492
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_662
	WORD $0xf631             // xor    esi, esi

LBB0_175:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_177

LBB0_176:
	LONG $0x0410fbc5; BYTE $0xf1   // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0459fbc5; BYTE $0xf2   // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004 // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_176

LBB0_177:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_178:
	LONG $0x0410fbc5; BYTE $0xf1               // vmovsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x0459fbc5; BYTE $0xf2               // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi]
	LONG $0x117bc1c4; WORD $0xf004             // vmovsd    qword [r8 + 8*rsi], xmm0
	LONG $0x4410fbc5; WORD $0x08f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x4459fbc5; WORD $0x08f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x08 // vmovsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x4459fbc5; WORD $0x10f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x10 // vmovsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18f1             // vmovsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x4459fbc5; WORD $0x18f2             // vmulsd    xmm0, xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x117bc1c4; WORD $0xf044; BYTE $0x18 // vmovsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_178
	JMP  LBB0_1177

LBB0_179:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_499
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_667
	WORD $0xf631                               // xor    esi, esi

LBB0_184:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_186

LBB0_185:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_185

LBB0_186:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_187:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_187
	JMP  LBB0_1177

LBB0_188:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_506
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_672
	WORD $0xf631                               // xor    esi, esi

LBB0_193:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_195

LBB0_194:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_194

LBB0_195:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_196:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_196
	JMP  LBB0_1177

LBB0_197:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_513
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_201
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_963
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_963

LBB0_201:
	WORD $0xc931 // xor    ecx, ecx

LBB0_966:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_968
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB0_968:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1177

LBB0_969:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_969
	JMP  LBB0_1177

LBB0_202:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_516
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_206
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_970
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_970

LBB0_206:
	WORD $0xc931 // xor    ecx, ecx

LBB0_973:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_975
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB0_975:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1177

LBB0_976:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_976
	JMP  LBB0_1177

LBB0_207:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_519
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_683
	WORD $0xf631                               // xor    esi, esi

LBB0_212:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_214

LBB0_213:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_213

LBB0_214:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_215:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_215
	JMP  LBB0_1177

LBB0_216:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB0_526
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_688
	WORD $0xf631                               // xor    esi, esi

LBB0_221:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_223

LBB0_222:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_222

LBB0_223:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_224:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_224
	JMP  LBB0_1177

LBB0_225:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_533
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_693
	WORD $0xff31             // xor    edi, edi

LBB0_230:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_232

LBB0_231:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_231

LBB0_232:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_233:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_233
	JMP  LBB0_1177

LBB0_234:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_540
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_697
	WORD $0xff31             // xor    edi, edi

LBB0_239:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_241

LBB0_240:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_240

LBB0_241:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_242:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_242
	JMP  LBB0_1177

LBB0_243:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_547
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_701
	WORD $0xf631             // xor    esi, esi

LBB0_248:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_250

LBB0_249:
	LONG $0xf23c8b48 // mov    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c2b48 // sub    rdi, qword [rcx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_249

LBB0_250:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_251:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_251
	JMP  LBB0_1177

LBB0_252:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_554
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_706
	WORD $0xf631             // xor    esi, esi

LBB0_257:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_259

LBB0_258:
	LONG $0xf23c8b48 // mov    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c2b48 // sub    rdi, qword [rcx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_258

LBB0_259:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_260:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_260
	JMP  LBB0_1177

LBB0_261:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_561
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_265
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_977
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_977

LBB0_265:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1113:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1115

LBB0_1114:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1114

LBB0_1115:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_1116:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1116
	JMP  LBB0_1177

LBB0_266:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_564
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_270
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_980
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_980

LBB0_270:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1121:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1123

LBB0_1122:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1122

LBB0_1123:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_1124:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1124
	JMP  LBB0_1177

LBB0_271:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_567
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_717
	WORD $0xf631             // xor    esi, esi

LBB0_276:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_278

LBB0_277:
	LONG $0xf13c8b48 // mov    rdi, qword [rcx + 8*rsi]
	LONG $0xf23c0348 // add    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_277

LBB0_278:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_279:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_279
	JMP  LBB0_1177

LBB0_280:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_574
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_722
	WORD $0xf631             // xor    esi, esi

LBB0_285:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_287

LBB0_286:
	LONG $0xf13c8b48 // mov    rdi, qword [rcx + 8*rsi]
	LONG $0xf23c0348 // add    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_286

LBB0_287:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_288:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_288
	JMP  LBB0_1177

LBB0_289:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_581
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_727
	WORD $0xf631             // xor    esi, esi

LBB0_294:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_296

LBB0_295:
	LONG $0xf13c8b48             // mov    rdi, qword [rcx + 8*rsi]
	LONG $0x3caf0f48; BYTE $0xf2 // imul    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949             // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_295

LBB0_296:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_297:
	LONG $0xf1048b48               // mov    rax, qword [rcx + 8*rsi]
	LONG $0x04af0f48; BYTE $0xf2   // imul    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949               // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0x44af0f48; WORD $0x08f2 // imul    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08   // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0x44af0f48; WORD $0x10f2 // imul    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10   // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0x44af0f48; WORD $0x18f2 // imul    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18   // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_297
	JMP  LBB0_1177

LBB0_298:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_588
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1177
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_732
	WORD $0xf631             // xor    esi, esi

LBB0_303:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_305

LBB0_304:
	LONG $0xf13c8b48             // mov    rdi, qword [rcx + 8*rsi]
	LONG $0x3caf0f48; BYTE $0xf2 // imul    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949             // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_304

LBB0_305:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_306:
	LONG $0xf1048b48               // mov    rax, qword [rcx + 8*rsi]
	LONG $0x04af0f48; BYTE $0xf2   // imul    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949               // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0x44af0f48; WORD $0x08f2 // imul    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08   // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0x44af0f48; WORD $0x10f2 // imul    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10   // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0x44af0f48; WORD $0x18f2 // imul    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18   // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_306
	JMP  LBB0_1177

LBB0_307:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_737
	WORD $0xf631             // xor    esi, esi

LBB0_310:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_312

LBB0_311:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_311

LBB0_312:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_313:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_313
	JMP  LBB0_1177

LBB0_314:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_742
	WORD $0xf631             // xor    esi, esi

LBB0_317:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_319

LBB0_318:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_318

LBB0_319:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_320:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_320
	JMP  LBB0_1177

LBB0_321:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_747
	WORD $0xf631             // xor    esi, esi

LBB0_324:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_326

LBB0_325:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_325

LBB0_326:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_327:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_327
	JMP  LBB0_1177

LBB0_328:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_752
	WORD $0xf631             // xor    esi, esi

LBB0_331:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_333

LBB0_332:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_332

LBB0_333:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_334:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_334
	JMP  LBB0_1177

LBB0_335:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_337
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_983
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_983

LBB0_337:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1063:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1065

LBB0_1064:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_1064

LBB0_1065:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1177

LBB0_1066:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB0_1066
	JMP  LBB0_1177

LBB0_338:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_340
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_985
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_985

LBB0_340:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1129:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB0_1131
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB0_1131:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1177

LBB0_1132:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1132
	JMP  LBB0_1177

LBB0_341:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_343
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_988
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_988

LBB0_343:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1073:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1075

LBB0_1074:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_1074

LBB0_1075:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1177

LBB0_1076:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB0_1076
	JMP  LBB0_1177

LBB0_344:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_346
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_990
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_990

LBB0_346:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1137:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB0_1139
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB0_1139:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1177

LBB0_1140:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1140
	JMP  LBB0_1177

LBB0_347:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_769
	WORD $0xf631             // xor    esi, esi

LBB0_350:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_352

LBB0_351:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x723c0366             // add    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_351

LBB0_352:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_353:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_353
	JMP  LBB0_1177

LBB0_354:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_774
	WORD $0xf631             // xor    esi, esi

LBB0_357:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_359

LBB0_358:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x723c0366             // add    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_358

LBB0_359:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_360:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_360
	JMP  LBB0_1177

LBB0_361:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_779
	WORD $0xf631             // xor    esi, esi

LBB0_364:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_366

LBB0_365:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x723c0366             // add    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_365

LBB0_366:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_367:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_367
	JMP  LBB0_1177

LBB0_368:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_784
	WORD $0xf631             // xor    esi, esi

LBB0_371:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_373

LBB0_372:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x723c0366             // add    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_372

LBB0_373:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_374:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_374
	JMP  LBB0_1177

LBB0_375:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_789
	WORD $0xf631             // xor    esi, esi

LBB0_378:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_380

LBB0_379:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x3caf0f66; BYTE $0x72 // imul    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_379

LBB0_380:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_381:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_381
	JMP  LBB0_1177

LBB0_382:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_794
	WORD $0xf631             // xor    esi, esi

LBB0_385:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_387

LBB0_386:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x3caf0f66; BYTE $0x72 // imul    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_386

LBB0_387:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_388:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_388
	JMP  LBB0_1177

LBB0_389:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_799
	WORD $0xf631             // xor    esi, esi

LBB0_392:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_394

LBB0_393:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x3caf0f66; BYTE $0x72 // imul    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_393

LBB0_394:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_395:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_395
	JMP  LBB0_1177

LBB0_396:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x40f98341         // cmp    r9d, 64
	JAE  LBB0_804
	WORD $0xf631             // xor    esi, esi

LBB0_399:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_401

LBB0_400:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0x3caf0f66; BYTE $0x72 // imul    di, word [rdx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_400

LBB0_401:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_402:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_402
	JMP  LBB0_1177

LBB0_403:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_809
	WORD $0xf631             // xor    esi, esi

LBB0_406:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_408

LBB0_407:
	LONG $0xf23c8b48 // mov    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c2b48 // sub    rdi, qword [rcx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_407

LBB0_408:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_409:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_409
	JMP  LBB0_1177

LBB0_410:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_814
	WORD $0xf631             // xor    esi, esi

LBB0_413:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_415

LBB0_414:
	LONG $0x0410fac5; BYTE $0xb2   // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1   // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_414

LBB0_415:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_416:
	LONG $0x0410fac5; BYTE $0xb2               // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1               // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b2             // vmovss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445cfac5; WORD $0x04b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b2             // vmovss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445cfac5; WORD $0x08b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb2             // vmovss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445cfac5; WORD $0x0cb1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_416
	JMP  LBB0_1177

LBB0_417:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_819
	WORD $0xf631             // xor    esi, esi

LBB0_420:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_422

LBB0_421:
	LONG $0xf23c8b48 // mov    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c2b48 // sub    rdi, qword [rcx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_421

LBB0_422:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_423:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_423
	JMP  LBB0_1177

LBB0_424:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_824
	WORD $0xf631             // xor    esi, esi

LBB0_427:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_429

LBB0_428:
	LONG $0x0410fac5; BYTE $0xb2   // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1   // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_428

LBB0_429:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_430:
	LONG $0x0410fac5; BYTE $0xb2               // vmovss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045cfac5; BYTE $0xb1               // vsubss    xmm0, xmm0, dword [rcx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b2             // vmovss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445cfac5; WORD $0x04b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b2             // vmovss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445cfac5; WORD $0x08b1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb2             // vmovss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445cfac5; WORD $0x0cb1             // vsubss    xmm0, xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_430
	JMP  LBB0_1177

LBB0_431:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_433
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_993
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_993

LBB0_433:
	WORD $0xc931 // xor    ecx, ecx

LBB0_996:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_998
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB0_998:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1177

LBB0_999:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_999
	JMP  LBB0_1177

LBB0_434:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_436
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1000
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1000

LBB0_436:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1145:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1148
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1147:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1147

LBB0_1148:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB0_1177
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1150:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1150
	JMP  LBB0_1177

LBB0_437:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_439
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1003
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1003

LBB0_439:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1006:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1008
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1008:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1177

LBB0_1009:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1009
	JMP  LBB0_1177

LBB0_440:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_442
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1010
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1010

LBB0_442:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1155:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1158
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1157:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1157

LBB0_1158:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB0_1177
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1160:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1160
	JMP  LBB0_1177

LBB0_443:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_841
	WORD $0xf631             // xor    esi, esi

LBB0_446:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_448

LBB0_447:
	LONG $0xf13c8b48 // mov    rdi, qword [rcx + 8*rsi]
	LONG $0xf23c0348 // add    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_447

LBB0_448:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_449:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_449
	JMP  LBB0_1177

LBB0_450:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_846
	WORD $0xf631             // xor    esi, esi

LBB0_453:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_455

LBB0_454:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2   // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_454

LBB0_455:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_456:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2               // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4458fac5; WORD $0x04b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4458fac5; WORD $0x08b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4458fac5; WORD $0x0cb2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_456
	JMP  LBB0_1177

LBB0_457:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_851
	WORD $0xf631             // xor    esi, esi

LBB0_460:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_462

LBB0_461:
	LONG $0xf13c8b48 // mov    rdi, qword [rcx + 8*rsi]
	LONG $0xf23c0348 // add    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949 // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB0_461

LBB0_462:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_463:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_463
	JMP  LBB0_1177

LBB0_464:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_856
	WORD $0xf631             // xor    esi, esi

LBB0_467:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_469

LBB0_468:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2   // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_468

LBB0_469:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_470:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0458fac5; BYTE $0xb2               // vaddss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4458fac5; WORD $0x04b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4458fac5; WORD $0x08b2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4458fac5; WORD $0x0cb2             // vaddss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_470
	JMP  LBB0_1177

LBB0_471:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_861
	WORD $0xf631             // xor    esi, esi

LBB0_474:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_476

LBB0_475:
	LONG $0xf13c8b48             // mov    rdi, qword [rcx + 8*rsi]
	LONG $0x3caf0f48; BYTE $0xf2 // imul    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949             // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_475

LBB0_476:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_477:
	LONG $0xf1048b48               // mov    rax, qword [rcx + 8*rsi]
	LONG $0x04af0f48; BYTE $0xf2   // imul    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949               // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0x44af0f48; WORD $0x08f2 // imul    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08   // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0x44af0f48; WORD $0x10f2 // imul    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10   // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0x44af0f48; WORD $0x18f2 // imul    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18   // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_477
	JMP  LBB0_1177

LBB0_478:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_866
	WORD $0xf631             // xor    esi, esi

LBB0_481:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_483

LBB0_482:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0459fac5; BYTE $0xb2   // vmulss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_482

LBB0_483:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_484:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0459fac5; BYTE $0xb2               // vmulss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4459fac5; WORD $0x04b2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4459fac5; WORD $0x08b2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4459fac5; WORD $0x0cb2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_484
	JMP  LBB0_1177

LBB0_485:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_871
	WORD $0xf631             // xor    esi, esi

LBB0_488:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_490

LBB0_489:
	LONG $0xf13c8b48             // mov    rdi, qword [rcx + 8*rsi]
	LONG $0x3caf0f48; BYTE $0xf2 // imul    rdi, qword [rdx + 8*rsi]
	LONG $0xf03c8949             // mov    qword [r8 + 8*rsi], rdi
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc08348             // add    rax, -1
	JNE  LBB0_489

LBB0_490:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_491:
	LONG $0xf1048b48               // mov    rax, qword [rcx + 8*rsi]
	LONG $0x04af0f48; BYTE $0xf2   // imul    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949               // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0x44af0f48; WORD $0x08f2 // imul    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08   // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0x44af0f48; WORD $0x10f2 // imul    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10   // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0x44af0f48; WORD $0x18f2 // imul    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18   // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_491
	JMP  LBB0_1177

LBB0_492:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_876
	WORD $0xf631             // xor    esi, esi

LBB0_495:
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_497

LBB0_496:
	LONG $0x0410fac5; BYTE $0xb1   // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0459fac5; BYTE $0xb2   // vmulss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004 // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_496

LBB0_497:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1177

LBB0_498:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss    xmm0, dword [rcx + 4*rsi]
	LONG $0x0459fac5; BYTE $0xb2               // vmulss    xmm0, xmm0, dword [rdx + 4*rsi]
	LONG $0x117ac1c4; WORD $0xb004             // vmovss    dword [r8 + 4*rsi], xmm0
	LONG $0x4410fac5; WORD $0x04b1             // vmovss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x4459fac5; WORD $0x04b2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x04 // vmovss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x4410fac5; WORD $0x08b1             // vmovss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x4459fac5; WORD $0x08b2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x08 // vmovss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x4410fac5; WORD $0x0cb1             // vmovss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x4459fac5; WORD $0x0cb2             // vmulss    xmm0, xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x117ac1c4; WORD $0xb044; BYTE $0x0c // vmovss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_498
	JMP  LBB0_1177

LBB0_499:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_881
	WORD $0xf631                               // xor    esi, esi

LBB0_502:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_504

LBB0_503:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_503

LBB0_504:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_505:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_505
	JMP  LBB0_1177

LBB0_506:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_886
	WORD $0xf631                               // xor    esi, esi

LBB0_509:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_511

LBB0_510:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_510

LBB0_511:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_512:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_512
	JMP  LBB0_1177

LBB0_513:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB0_515
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB0_1013
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB0_1013

LBB0_515:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1165:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1167

LBB0_1166:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1166

LBB0_1167:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB0_1177

LBB0_1168:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1168
	JMP  LBB0_1177

LBB0_516:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB0_518
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB0_1016
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB0_1016

LBB0_518:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1173:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1175

LBB0_1174:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1174

LBB0_1175:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB0_1177

LBB0_1176:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1176
	JMP  LBB0_1177

LBB0_519:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_897
	WORD $0xf631                               // xor    esi, esi

LBB0_522:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_524

LBB0_523:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_523

LBB0_524:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_525:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_525
	JMP  LBB0_1177

LBB0_526:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JAE  LBB0_902
	WORD $0xf631                               // xor    esi, esi

LBB0_529:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_531

LBB0_530:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_530

LBB0_531:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_532:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_532
	JMP  LBB0_1177

LBB0_533:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_907
	WORD $0xff31             // xor    edi, edi

LBB0_536:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_538

LBB0_537:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_537

LBB0_538:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_539:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_539
	JMP  LBB0_1177

LBB0_540:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_911
	WORD $0xff31             // xor    edi, edi

LBB0_543:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_545

LBB0_544:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_544

LBB0_545:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_546:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_546
	JMP  LBB0_1177

LBB0_547:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_915
	WORD $0xf631             // xor    esi, esi

LBB0_550:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_552

LBB0_551:
	WORD $0x3c8b; BYTE $0xb2 // mov    edi, dword [rdx + 4*rsi]
	WORD $0x3c2b; BYTE $0xb1 // sub    edi, dword [rcx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_551

LBB0_552:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_553:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_553
	JMP  LBB0_1177

LBB0_554:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_920
	WORD $0xf631             // xor    esi, esi

LBB0_557:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_559

LBB0_558:
	WORD $0x3c8b; BYTE $0xb2 // mov    edi, dword [rdx + 4*rsi]
	WORD $0x3c2b; BYTE $0xb1 // sub    edi, dword [rcx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_558

LBB0_559:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_560:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_560
	JMP  LBB0_1177

LBB0_561:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_563
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1019
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1019

LBB0_563:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1022:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1024
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1024:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1177

LBB0_1025:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1025
	JMP  LBB0_1177

LBB0_564:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_566
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1026
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1026

LBB0_566:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1029:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1031
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1031:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1177

LBB0_1032:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1032
	JMP  LBB0_1177

LBB0_567:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_931
	WORD $0xf631             // xor    esi, esi

LBB0_570:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_572

LBB0_571:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	WORD $0x3c03; BYTE $0xb2 // add    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_571

LBB0_572:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_573:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_573
	JMP  LBB0_1177

LBB0_574:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_936
	WORD $0xf631             // xor    esi, esi

LBB0_577:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_579

LBB0_578:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	WORD $0x3c03; BYTE $0xb2 // add    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_578

LBB0_579:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_580:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_580
	JMP  LBB0_1177

LBB0_581:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_941
	WORD $0xf631             // xor    esi, esi

LBB0_584:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_586

LBB0_585:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	LONG $0xb23caf0f         // imul    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_585

LBB0_586:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_587:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_587
	JMP  LBB0_1177

LBB0_588:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1177
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_946
	WORD $0xf631             // xor    esi, esi

LBB0_591:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_593

LBB0_592:
	WORD $0x3c8b; BYTE $0xb1 // mov    edi, dword [rcx + 4*rsi]
	LONG $0xb23caf0f         // imul    edi, dword [rdx + 4*rsi]
	LONG $0xb03c8941         // mov    dword [r8 + 4*rsi], edi
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_592

LBB0_593:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1177

LBB0_594:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_594
	JMP  LBB0_1177

LBB0_595:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_12
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_12
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_598:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_598
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_12
	JMP  LBB0_1177

LBB0_600:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_27
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_27
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_603:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_603
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_27
	JMP  LBB0_1177

LBB0_611:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_59
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_59
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_614:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x04fefdc5; BYTE $0xba               // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4cfef5c5; WORD $0x20ba             // vpaddd    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x54feedc5; WORD $0x40ba             // vpaddd    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5cfee5c5; WORD $0x60ba             // vpaddd    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_614
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_59
	JMP  LBB0_1177

LBB0_616:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_71
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_71
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_619:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x04fefdc5; BYTE $0xba               // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4cfef5c5; WORD $0x20ba             // vpaddd    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x54feedc5; WORD $0x40ba             // vpaddd    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5cfee5c5; WORD $0x60ba             // vpaddd    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_619
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_71
	JMP  LBB0_1177

LBB0_621:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_83
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_83
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_624:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x407de2c4; WORD $0xba04             // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4075e2c4; WORD $0xba4c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x406de2c4; WORD $0xba54; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x4065e2c4; WORD $0xba5c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_624
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_83
	JMP  LBB0_1177

LBB0_626:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_95
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_95
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_629:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x407de2c4; WORD $0xba04             // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4075e2c4; WORD $0xba4c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x406de2c4; WORD $0xba54; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x4065e2c4; WORD $0xba5c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_629
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_95
	JMP  LBB0_1177

LBB0_631:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_106
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_106
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_634:
	LONG $0x0410fdc5; BYTE $0xfa               // vmovupd    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20fa             // vmovupd    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40fa             // vmovupd    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60fa             // vmovupd    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x045cfdc5; BYTE $0xf9               // vsubpd    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4c5cf5c5; WORD $0x20f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x545cedc5; WORD $0x40f9             // vsubpd    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c5ce5c5; WORD $0x60f9             // vsubpd    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_634
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_106
	JMP  LBB0_1177

LBB0_636:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_117
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_117
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_639:
	LONG $0x0410fdc5; BYTE $0xfa               // vmovupd    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20fa             // vmovupd    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40fa             // vmovupd    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60fa             // vmovupd    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x045cfdc5; BYTE $0xf9               // vsubpd    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4c5cf5c5; WORD $0x20f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x545cedc5; WORD $0x40f9             // vsubpd    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c5ce5c5; WORD $0x60f9             // vsubpd    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_639
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_117
	JMP  LBB0_1177

LBB0_647:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_142
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_142
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_650:
	LONG $0x0410fdc5; BYTE $0xf9               // vmovupd    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20f9             // vmovupd    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40f9             // vmovupd    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60f9             // vmovupd    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x0458fdc5; BYTE $0xfa               // vaddpd    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4c58f5c5; WORD $0x20fa             // vaddpd    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5458edc5; WORD $0x40fa             // vaddpd    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c58e5c5; WORD $0x60fa             // vaddpd    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_650
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_142
	JMP  LBB0_1177

LBB0_652:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_153
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_153
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_655:
	LONG $0x0410fdc5; BYTE $0xf9               // vmovupd    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20f9             // vmovupd    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40f9             // vmovupd    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60f9             // vmovupd    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x0458fdc5; BYTE $0xfa               // vaddpd    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4c58f5c5; WORD $0x20fa             // vaddpd    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5458edc5; WORD $0x40fa             // vaddpd    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c58e5c5; WORD $0x60fa             // vaddpd    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_655
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_153
	JMP  LBB0_1177

LBB0_657:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_164
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_164
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_660:
	LONG $0x0410fdc5; BYTE $0xf9               // vmovupd    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20f9             // vmovupd    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40f9             // vmovupd    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60f9             // vmovupd    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x0459fdc5; BYTE $0xfa               // vmulpd    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4c59f5c5; WORD $0x20fa             // vmulpd    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5459edc5; WORD $0x40fa             // vmulpd    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c59e5c5; WORD $0x60fa             // vmulpd    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_660
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_164
	JMP  LBB0_1177

LBB0_662:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_175
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_175
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_665:
	LONG $0x0410fdc5; BYTE $0xf9               // vmovupd    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c10fdc5; WORD $0x20f9             // vmovupd    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x5410fdc5; WORD $0x40f9             // vmovupd    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c10fdc5; WORD $0x60f9             // vmovupd    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x0459fdc5; BYTE $0xfa               // vmulpd    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4c59f5c5; WORD $0x20fa             // vmulpd    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5459edc5; WORD $0x40fa             // vmulpd    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c59e5c5; WORD $0x60fa             // vmulpd    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf804             // vmovupd    yword [r8 + 8*rdi], ymm0
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117dc1c4; WORD $0xf854; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_665
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_175
	JMP  LBB0_1177

LBB0_667:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_184
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_184
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_670:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_670
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_184
	JMP  LBB0_1177

LBB0_672:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_193
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_193
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_675:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_675
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_193
	JMP  LBB0_1177

LBB0_683:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_212
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_212
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_686:
	LONG $0x046ffec5; BYTE $0x39               // vmovdqu    ymm0, yword [rcx + rdi]
	LONG $0x4c6ffec5; WORD $0x2039             // vmovdqu    ymm1, yword [rcx + rdi + 32]
	LONG $0x546ffec5; WORD $0x4039             // vmovdqu    ymm2, yword [rcx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6039             // vmovdqu    ymm3, yword [rcx + rdi + 96]
	LONG $0x04fcfdc5; BYTE $0x3a               // vpaddb    ymm0, ymm0, yword [rdx + rdi]
	LONG $0x4cfcf5c5; WORD $0x203a             // vpaddb    ymm1, ymm1, yword [rdx + rdi + 32]
	LONG $0x54fcedc5; WORD $0x403a             // vpaddb    ymm2, ymm2, yword [rdx + rdi + 64]
	LONG $0x5cfce5c5; WORD $0x603a             // vpaddb    ymm3, ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_686
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_212
	JMP  LBB0_1177

LBB0_688:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_221
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_221
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_691:
	LONG $0x046ffec5; BYTE $0x39               // vmovdqu    ymm0, yword [rcx + rdi]
	LONG $0x4c6ffec5; WORD $0x2039             // vmovdqu    ymm1, yword [rcx + rdi + 32]
	LONG $0x546ffec5; WORD $0x4039             // vmovdqu    ymm2, yword [rcx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6039             // vmovdqu    ymm3, yword [rcx + rdi + 96]
	LONG $0x04fcfdc5; BYTE $0x3a               // vpaddb    ymm0, ymm0, yword [rdx + rdi]
	LONG $0x4cfcf5c5; WORD $0x203a             // vpaddb    ymm1, ymm1, yword [rdx + rdi + 32]
	LONG $0x54fcedc5; WORD $0x403a             // vpaddb    ymm2, ymm2, yword [rdx + rdi + 64]
	LONG $0x5cfce5c5; WORD $0x603a             // vpaddb    ymm3, ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_691
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_221
	JMP  LBB0_1177

LBB0_693:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd6970f40         // seta    sil
	WORD $0xff31             // xor    edi, edi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_230
	WORD $0x2040; BYTE $0xf0 // and    al, sil
	JNE  LBB0_230
	WORD $0x8944; BYTE $0xd7 // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0 // and    edi, -32
	LONG $0xe0778d48         // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x05e8c148         // shr    rax, 5
	LONG $0x01c08348         // add    rax, 1
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60fe8348         // cmp    rsi, 96
	JAE  LBB0_1033
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_1035

LBB0_697:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd6970f40         // seta    sil
	WORD $0xff31             // xor    edi, edi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_239
	WORD $0x2040; BYTE $0xf0 // and    al, sil
	JNE  LBB0_239
	WORD $0x8944; BYTE $0xd7 // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0 // and    edi, -32
	LONG $0xe0778d48         // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x05e8c148         // shr    rax, 5
	LONG $0x01c08348         // add    rax, 1
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60fe8348         // cmp    rsi, 96
	JAE  LBB0_1039
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_1041

LBB0_701:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_248
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_248
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_704:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_704
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_248
	JMP  LBB0_1177

LBB0_706:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_257
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_257
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_709:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_709
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_257
	JMP  LBB0_1177

LBB0_717:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_276
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_276
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_720:
	LONG $0x046ffec5; BYTE $0xf9               // vmovdqu    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20f9             // vmovdqu    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40f9             // vmovdqu    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x04d4fdc5; BYTE $0xfa               // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4cd4f5c5; WORD $0x20fa             // vpaddq    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x54d4edc5; WORD $0x40fa             // vpaddq    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5cd4e5c5; WORD $0x60fa             // vpaddq    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_720
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_276
	JMP  LBB0_1177

LBB0_722:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_285
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_285
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_725:
	LONG $0x046ffec5; BYTE $0xf9               // vmovdqu    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20f9             // vmovdqu    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40f9             // vmovdqu    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x04d4fdc5; BYTE $0xfa               // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4cd4f5c5; WORD $0x20fa             // vpaddq    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x54d4edc5; WORD $0x40fa             // vpaddq    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5cd4e5c5; WORD $0x60fa             // vpaddq    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_725
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_285
	JMP  LBB0_1177

LBB0_727:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_294
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_294
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_730:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x446ffec5; WORD $0x60fa             // vmovdqu    ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x246ffec5; BYTE $0xf9               // vmovdqu    ymm4, yword [rcx + 8*rdi]
	LONG $0x6c6ffec5; WORD $0x20f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 32]
	LONG $0x746ffec5; WORD $0x40f9             // vmovdqu    ymm6, yword [rcx + 8*rdi + 64]
	LONG $0x7c6ffec5; WORD $0x60f9             // vmovdqu    ymm7, yword [rcx + 8*rdi + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_730
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_294
	JMP  LBB0_1177

LBB0_732:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_303
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_303
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_735:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x446ffec5; WORD $0x60fa             // vmovdqu    ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x246ffec5; BYTE $0xf9               // vmovdqu    ymm4, yword [rcx + 8*rdi]
	LONG $0x6c6ffec5; WORD $0x20f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 32]
	LONG $0x746ffec5; WORD $0x40f9             // vmovdqu    ymm6, yword [rcx + 8*rdi + 64]
	LONG $0x7c6ffec5; WORD $0x60f9             // vmovdqu    ymm7, yword [rcx + 8*rdi + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_735
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_303
	JMP  LBB0_1177

LBB0_737:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_310
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_310
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_740:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_740
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_310
	JMP  LBB0_1177

LBB0_742:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_317
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_317
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_745:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_745
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_317
	JMP  LBB0_1177

LBB0_747:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_324
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_324
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_750:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_750
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_324
	JMP  LBB0_1177

LBB0_752:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_331
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_331
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_755:
	LONG $0x046ffec5; BYTE $0x7a               // vmovdqu    ymm0, yword [rdx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x207a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x407a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x607a             // vmovdqu    ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x04f9fdc5; BYTE $0x79               // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi]
	LONG $0x4cf9f5c5; WORD $0x2079             // vpsubw    ymm1, ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x54f9edc5; WORD $0x4079             // vpsubw    ymm2, ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5cf9e5c5; WORD $0x6079             // vpsubw    ymm3, ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_755
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_331
	JMP  LBB0_1177

LBB0_769:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_350
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_350
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_772:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04fdfdc5; BYTE $0x7a               // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cfdf5c5; WORD $0x207a             // vpaddw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54fdedc5; WORD $0x407a             // vpaddw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cfde5c5; WORD $0x607a             // vpaddw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_772
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_350
	JMP  LBB0_1177

LBB0_774:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_357
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_357
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_777:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04fdfdc5; BYTE $0x7a               // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cfdf5c5; WORD $0x207a             // vpaddw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54fdedc5; WORD $0x407a             // vpaddw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cfde5c5; WORD $0x607a             // vpaddw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_777
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_357
	JMP  LBB0_1177

LBB0_779:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_364
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_364
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_782:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04fdfdc5; BYTE $0x7a               // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cfdf5c5; WORD $0x207a             // vpaddw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54fdedc5; WORD $0x407a             // vpaddw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cfde5c5; WORD $0x607a             // vpaddw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_782
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_364
	JMP  LBB0_1177

LBB0_784:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_371
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_371
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_787:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04fdfdc5; BYTE $0x7a               // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cfdf5c5; WORD $0x207a             // vpaddw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54fdedc5; WORD $0x407a             // vpaddw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cfde5c5; WORD $0x607a             // vpaddw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_787
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_371
	JMP  LBB0_1177

LBB0_789:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_378
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_378
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_792:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04d5fdc5; BYTE $0x7a               // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cd5f5c5; WORD $0x207a             // vpmullw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54d5edc5; WORD $0x407a             // vpmullw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cd5e5c5; WORD $0x607a             // vpmullw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_792
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_378
	JMP  LBB0_1177

LBB0_794:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_385
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_385
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_797:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04d5fdc5; BYTE $0x7a               // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cd5f5c5; WORD $0x207a             // vpmullw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54d5edc5; WORD $0x407a             // vpmullw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cd5e5c5; WORD $0x607a             // vpmullw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_797
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_385
	JMP  LBB0_1177

LBB0_799:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_392
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_392
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_802:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04d5fdc5; BYTE $0x7a               // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cd5f5c5; WORD $0x207a             // vpmullw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54d5edc5; WORD $0x407a             // vpmullw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cd5e5c5; WORD $0x607a             // vpmullw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_802
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_392
	JMP  LBB0_1177

LBB0_804:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_399
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_399
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xc0 // and    esi, -64
	WORD $0xff31             // xor    edi, edi

LBB0_807:
	LONG $0x046ffec5; BYTE $0x79               // vmovdqu    ymm0, yword [rcx + 2*rdi]
	LONG $0x4c6ffec5; WORD $0x2079             // vmovdqu    ymm1, yword [rcx + 2*rdi + 32]
	LONG $0x546ffec5; WORD $0x4079             // vmovdqu    ymm2, yword [rcx + 2*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6079             // vmovdqu    ymm3, yword [rcx + 2*rdi + 96]
	LONG $0x04d5fdc5; BYTE $0x7a               // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi]
	LONG $0x4cd5f5c5; WORD $0x207a             // vpmullw    ymm1, ymm1, yword [rdx + 2*rdi + 32]
	LONG $0x54d5edc5; WORD $0x407a             // vpmullw    ymm2, ymm2, yword [rdx + 2*rdi + 64]
	LONG $0x5cd5e5c5; WORD $0x607a             // vpmullw    ymm3, ymm3, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x7804             // vmovdqu    yword [r8 + 2*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x785c; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_807
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_399
	JMP  LBB0_1177

LBB0_809:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_406
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_406
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_812:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_812
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_406
	JMP  LBB0_1177

LBB0_814:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_413
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_413
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_817:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x045cfcc5; BYTE $0xb9               // vsubps    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4c5cf4c5; WORD $0x20b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x545cecc5; WORD $0x40b9             // vsubps    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c5ce4c5; WORD $0x60b9             // vsubps    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_817
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_413
	JMP  LBB0_1177

LBB0_819:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_420
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_420
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_822:
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x04fbfdc5; BYTE $0xf9               // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi]
	LONG $0x4cfbf5c5; WORD $0x20f9             // vpsubq    ymm1, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x54fbedc5; WORD $0x40f9             // vpsubq    ymm2, ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5cfbe5c5; WORD $0x60f9             // vpsubq    ymm3, ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_822
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_420
	JMP  LBB0_1177

LBB0_824:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_427
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_427
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_827:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x045cfcc5; BYTE $0xb9               // vsubps    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4c5cf4c5; WORD $0x20b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x545cecc5; WORD $0x40b9             // vsubps    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c5ce4c5; WORD $0x60b9             // vsubps    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_827
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_427
	JMP  LBB0_1177

LBB0_841:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_446
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_446
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_844:
	LONG $0x046ffec5; BYTE $0xf9               // vmovdqu    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20f9             // vmovdqu    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40f9             // vmovdqu    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x04d4fdc5; BYTE $0xfa               // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4cd4f5c5; WORD $0x20fa             // vpaddq    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x54d4edc5; WORD $0x40fa             // vpaddq    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5cd4e5c5; WORD $0x60fa             // vpaddq    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_844
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_446
	JMP  LBB0_1177

LBB0_846:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_453
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_453
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_849:
	LONG $0x0410fcc5; BYTE $0xb9               // vmovups    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20b9             // vmovups    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40b9             // vmovups    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60b9             // vmovups    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x0458fcc5; BYTE $0xba               // vaddps    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4c58f4c5; WORD $0x20ba             // vaddps    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5458ecc5; WORD $0x40ba             // vaddps    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c58e4c5; WORD $0x60ba             // vaddps    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_849
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_453
	JMP  LBB0_1177

LBB0_851:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_460
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_460
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_854:
	LONG $0x046ffec5; BYTE $0xf9               // vmovdqu    ymm0, yword [rcx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20f9             // vmovdqu    ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40f9             // vmovdqu    ymm2, yword [rcx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 96]
	LONG $0x04d4fdc5; BYTE $0xfa               // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi]
	LONG $0x4cd4f5c5; WORD $0x20fa             // vpaddq    ymm1, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x54d4edc5; WORD $0x40fa             // vpaddq    ymm2, ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5cd4e5c5; WORD $0x60fa             // vpaddq    ymm3, ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_854
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_460
	JMP  LBB0_1177

LBB0_856:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_467
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_467
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_859:
	LONG $0x0410fcc5; BYTE $0xb9               // vmovups    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20b9             // vmovups    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40b9             // vmovups    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60b9             // vmovups    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x0458fcc5; BYTE $0xba               // vaddps    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4c58f4c5; WORD $0x20ba             // vaddps    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5458ecc5; WORD $0x40ba             // vaddps    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c58e4c5; WORD $0x60ba             // vaddps    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_859
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_467
	JMP  LBB0_1177

LBB0_861:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_474
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_474
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_864:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x446ffec5; WORD $0x60fa             // vmovdqu    ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x246ffec5; BYTE $0xf9               // vmovdqu    ymm4, yword [rcx + 8*rdi]
	LONG $0x6c6ffec5; WORD $0x20f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 32]
	LONG $0x746ffec5; WORD $0x40f9             // vmovdqu    ymm6, yword [rcx + 8*rdi + 64]
	LONG $0x7c6ffec5; WORD $0x60f9             // vmovdqu    ymm7, yword [rcx + 8*rdi + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_864
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_474
	JMP  LBB0_1177

LBB0_866:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_481
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_481
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_869:
	LONG $0x0410fcc5; BYTE $0xb9               // vmovups    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20b9             // vmovups    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40b9             // vmovups    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60b9             // vmovups    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x0459fcc5; BYTE $0xba               // vmulps    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4c59f4c5; WORD $0x20ba             // vmulps    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5459ecc5; WORD $0x40ba             // vmulps    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c59e4c5; WORD $0x60ba             // vmulps    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_869
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_481
	JMP  LBB0_1177

LBB0_871:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_488
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_488
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	WORD $0xff31             // xor    edi, edi

LBB0_874:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x446ffec5; WORD $0x60fa             // vmovdqu    ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x246ffec5; BYTE $0xf9               // vmovdqu    ymm4, yword [rcx + 8*rdi]
	LONG $0x6c6ffec5; WORD $0x20f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 32]
	LONG $0x746ffec5; WORD $0x40f9             // vmovdqu    ymm6, yword [rcx + 8*rdi + 64]
	LONG $0x7c6ffec5; WORD $0x60f9             // vmovdqu    ymm7, yword [rcx + 8*rdi + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_874
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_488
	JMP  LBB0_1177

LBB0_876:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_495
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_495
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_879:
	LONG $0x0410fcc5; BYTE $0xb9               // vmovups    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20b9             // vmovups    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40b9             // vmovups    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60b9             // vmovups    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x0459fcc5; BYTE $0xba               // vmulps    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4c59f4c5; WORD $0x20ba             // vmulps    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5459ecc5; WORD $0x40ba             // vmulps    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c59e4c5; WORD $0x60ba             // vmulps    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_879
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_495
	JMP  LBB0_1177

LBB0_881:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_502
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_502
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_884:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_884
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_502
	JMP  LBB0_1177

LBB0_886:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_509
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_509
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_889:
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x04f8fdc5; BYTE $0x39               // vpsubb    ymm0, ymm0, yword [rcx + rdi]
	LONG $0x4cf8f5c5; WORD $0x2039             // vpsubb    ymm1, ymm1, yword [rcx + rdi + 32]
	LONG $0x54f8edc5; WORD $0x4039             // vpsubb    ymm2, ymm2, yword [rcx + rdi + 64]
	LONG $0x5cf8e5c5; WORD $0x6039             // vpsubb    ymm3, ymm3, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_889
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_509
	JMP  LBB0_1177

LBB0_897:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_522
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_522
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_900:
	LONG $0x046ffec5; BYTE $0x39               // vmovdqu    ymm0, yword [rcx + rdi]
	LONG $0x4c6ffec5; WORD $0x2039             // vmovdqu    ymm1, yword [rcx + rdi + 32]
	LONG $0x546ffec5; WORD $0x4039             // vmovdqu    ymm2, yword [rcx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6039             // vmovdqu    ymm3, yword [rcx + rdi + 96]
	LONG $0x04fcfdc5; BYTE $0x3a               // vpaddb    ymm0, ymm0, yword [rdx + rdi]
	LONG $0x4cfcf5c5; WORD $0x203a             // vpaddb    ymm1, ymm1, yword [rdx + rdi + 32]
	LONG $0x54fcedc5; WORD $0x403a             // vpaddb    ymm2, ymm2, yword [rdx + rdi + 64]
	LONG $0x5cfce5c5; WORD $0x603a             // vpaddb    ymm3, ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_900
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_522
	JMP  LBB0_1177

LBB0_902:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_529
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_529
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0x80 // and    esi, -128
	WORD $0xff31             // xor    edi, edi

LBB0_905:
	LONG $0x046ffec5; BYTE $0x39               // vmovdqu    ymm0, yword [rcx + rdi]
	LONG $0x4c6ffec5; WORD $0x2039             // vmovdqu    ymm1, yword [rcx + rdi + 32]
	LONG $0x546ffec5; WORD $0x4039             // vmovdqu    ymm2, yword [rcx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x6039             // vmovdqu    ymm3, yword [rcx + rdi + 96]
	LONG $0x04fcfdc5; BYTE $0x3a               // vpaddb    ymm0, ymm0, yword [rdx + rdi]
	LONG $0x4cfcf5c5; WORD $0x203a             // vpaddb    ymm1, ymm1, yword [rdx + rdi + 32]
	LONG $0x54fcedc5; WORD $0x403a             // vpaddb    ymm2, ymm2, yword [rdx + rdi + 64]
	LONG $0x5cfce5c5; WORD $0x603a             // vpaddb    ymm3, ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3
	LONG $0x80ef8348                           // sub    rdi, -128
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_905
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_529
	JMP  LBB0_1177

LBB0_907:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd6970f40         // seta    sil
	WORD $0xff31             // xor    edi, edi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_536
	WORD $0x2040; BYTE $0xf0 // and    al, sil
	JNE  LBB0_536
	WORD $0x8944; BYTE $0xd7 // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0 // and    edi, -32
	LONG $0xe0778d48         // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x05e8c148         // shr    rax, 5
	LONG $0x01c08348         // add    rax, 1
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60fe8348         // cmp    rsi, 96
	JAE  LBB0_1045
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_1047

LBB0_911:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd6970f40         // seta    sil
	WORD $0xff31             // xor    edi, edi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_543
	WORD $0x2040; BYTE $0xf0 // and    al, sil
	JNE  LBB0_543
	WORD $0x8944; BYTE $0xd7 // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0 // and    edi, -32
	LONG $0xe0778d48         // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	LONG $0x05e8c148         // shr    rax, 5
	LONG $0x01c08348         // add    rax, 1
	WORD $0x8941; BYTE $0xc1 // mov    r9d, eax
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60fe8348         // cmp    rsi, 96
	JAE  LBB0_1051
	WORD $0xf631             // xor    esi, esi
	JMP  LBB0_1053

LBB0_915:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_550
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_550
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_918:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_918
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_550
	JMP  LBB0_1177

LBB0_920:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_557
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_557
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_923:
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x04fafdc5; BYTE $0xb9               // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi]
	LONG $0x4cfaf5c5; WORD $0x20b9             // vpsubd    ymm1, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x54faedc5; WORD $0x40b9             // vpsubd    ymm2, ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5cfae5c5; WORD $0x60b9             // vpsubd    ymm3, ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_923
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_557
	JMP  LBB0_1177

LBB0_931:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_570
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_570
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_934:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x04fefdc5; BYTE $0xba               // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4cfef5c5; WORD $0x20ba             // vpaddd    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x54feedc5; WORD $0x40ba             // vpaddd    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5cfee5c5; WORD $0x60ba             // vpaddd    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_934
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_570
	JMP  LBB0_1177

LBB0_936:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_577
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_577
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_939:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x04fefdc5; BYTE $0xba               // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4cfef5c5; WORD $0x20ba             // vpaddd    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x54feedc5; WORD $0x40ba             // vpaddd    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5cfee5c5; WORD $0x60ba             // vpaddd    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_939
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_577
	JMP  LBB0_1177

LBB0_941:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_584
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_584
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_944:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x407de2c4; WORD $0xba04             // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4075e2c4; WORD $0xba4c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x406de2c4; WORD $0xba54; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x4065e2c4; WORD $0xba5c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_944
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_584
	JMP  LBB0_1177

LBB0_946:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_591
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_591
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	WORD $0xff31             // xor    edi, edi

LBB0_949:
	LONG $0x046ffec5; BYTE $0xb9               // vmovdqu    ymm0, yword [rcx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20b9             // vmovdqu    ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40b9             // vmovdqu    ymm2, yword [rcx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60b9             // vmovdqu    ymm3, yword [rcx + 4*rdi + 96]
	LONG $0x407de2c4; WORD $0xba04             // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi]
	LONG $0x4075e2c4; WORD $0xba4c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x406de2c4; WORD $0xba54; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x4065e2c4; WORD $0xba5c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_949
	WORD $0x394c; BYTE $0xd6                   // cmp    rsi, r10
	JNE  LBB0_591
	JMP  LBB0_1177

LBB0_951:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1077
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_953:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_953
	JMP  LBB0_1078

LBB0_954:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1085
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_956:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_956
	JMP  LBB0_1086

LBB0_957:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB0_1093
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_959:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_959
	JMP  LBB0_1094

LBB0_960:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB0_1101
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_962:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_962
	JMP  LBB0_1102

LBB0_963:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x60 // vmovdqa    xmm0, oword 96[rbp] /* [rip + .LCPI0_3] */

LBB0_964:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_964
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_966

LBB0_970:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x60 // vmovdqa    xmm0, oword 96[rbp] /* [rip + .LCPI0_3] */

LBB0_971:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_971
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_973

LBB0_977:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1109
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_979:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_979
	JMP  LBB0_1110

LBB0_980:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1117
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_982:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_982
	JMP  LBB0_1118

LBB0_983:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB0_1057
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1059

LBB0_985:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1125
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x20 // vmovdqa    ymm0, yword 32[rbp] /* [rip + .LCPI0_2] */

LBB0_987:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_987
	JMP  LBB0_1126

LBB0_988:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB0_1067
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1069

LBB0_990:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1133
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x20 // vmovdqa    ymm0, yword 32[rbp] /* [rip + .LCPI0_2] */

LBB0_992:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_992
	JMP  LBB0_1134

LBB0_993:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_994:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_994
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_996

LBB0_1000:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1141
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x0845 // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI0_1] */

LBB0_1002:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1002
	JMP  LBB0_1142

LBB0_1003:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB0_1004:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1004
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1006

LBB0_1010:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1151
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x0845 // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI0_1] */

LBB0_1012:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1012
	JMP  LBB0_1152

LBB0_1013:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1161
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1015:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1015
	JMP  LBB0_1162

LBB0_1016:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1169
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1018:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1018
	JMP  LBB0_1170

LBB0_1019:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB0_1020:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1020
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1022

LBB0_1026:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB0_1027:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB0_1027
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1029

LBB0_1033:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1034:
	LONG $0x0c6ffec5; BYTE $0x32               // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31               // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x4c6ffec5; WORD $0x2032             // vmovdqu    ymm1, yword [rdx + rsi + 32]
	LONG $0x546ffec5; WORD $0x2031             // vmovdqu    ymm2, yword [rcx + rsi + 32]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm1
	LONG $0x4c6ffec5; WORD $0x4032             // vmovdqu    ymm1, yword [rdx + rsi + 64]
	LONG $0x546ffec5; WORD $0x4031             // vmovdqu    ymm2, yword [rcx + rsi + 64]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm1
	LONG $0x4c6ffec5; WORD $0x6032             // vmovdqu    ymm1, yword [rdx + rsi + 96]
	LONG $0x546ffec5; WORD $0x6031             // vmovdqu    ymm2, yword [rcx + rsi + 96]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm1
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_1034

LBB0_1035:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB0_1038
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1037:
	LONG $0x0c6ffec5; BYTE $0x32   // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31   // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5               // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5               // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5               // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5               // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5               // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5               // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB0_1037

LBB0_1038:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_230
	JMP  LBB0_1177

LBB0_1039:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1040:
	LONG $0x0c6ffec5; BYTE $0x32               // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31               // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x4c6ffec5; WORD $0x2032             // vmovdqu    ymm1, yword [rdx + rsi + 32]
	LONG $0x546ffec5; WORD $0x2031             // vmovdqu    ymm2, yword [rcx + rsi + 32]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm1
	LONG $0x4c6ffec5; WORD $0x4032             // vmovdqu    ymm1, yword [rdx + rsi + 64]
	LONG $0x546ffec5; WORD $0x4031             // vmovdqu    ymm2, yword [rcx + rsi + 64]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm1
	LONG $0x4c6ffec5; WORD $0x6032             // vmovdqu    ymm1, yword [rdx + rsi + 96]
	LONG $0x546ffec5; WORD $0x6031             // vmovdqu    ymm2, yword [rcx + rsi + 96]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm1
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_1040

LBB0_1041:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB0_1044
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1043:
	LONG $0x0c6ffec5; BYTE $0x32   // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31   // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5               // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5               // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5               // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5               // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5               // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5               // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB0_1043

LBB0_1044:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_239
	JMP  LBB0_1177

LBB0_1045:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1046:
	LONG $0x0c6ffec5; BYTE $0x32               // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31               // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x4c6ffec5; WORD $0x2032             // vmovdqu    ymm1, yword [rdx + rsi + 32]
	LONG $0x546ffec5; WORD $0x2031             // vmovdqu    ymm2, yword [rcx + rsi + 32]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm1
	LONG $0x4c6ffec5; WORD $0x4032             // vmovdqu    ymm1, yword [rdx + rsi + 64]
	LONG $0x546ffec5; WORD $0x4031             // vmovdqu    ymm2, yword [rcx + rsi + 64]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm1
	LONG $0x4c6ffec5; WORD $0x6032             // vmovdqu    ymm1, yword [rdx + rsi + 96]
	LONG $0x546ffec5; WORD $0x6031             // vmovdqu    ymm2, yword [rcx + rsi + 96]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm1
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_1046

LBB0_1047:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB0_1050
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1049:
	LONG $0x0c6ffec5; BYTE $0x32   // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31   // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5               // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5               // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5               // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5               // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5               // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5               // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB0_1049

LBB0_1050:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_536
	JMP  LBB0_1177

LBB0_1051:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1052:
	LONG $0x0c6ffec5; BYTE $0x32               // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31               // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x4c6ffec5; WORD $0x2032             // vmovdqu    ymm1, yword [rdx + rsi + 32]
	LONG $0x546ffec5; WORD $0x2031             // vmovdqu    ymm2, yword [rcx + rsi + 32]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm1
	LONG $0x4c6ffec5; WORD $0x4032             // vmovdqu    ymm1, yword [rdx + rsi + 64]
	LONG $0x546ffec5; WORD $0x4031             // vmovdqu    ymm2, yword [rcx + rsi + 64]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm1
	LONG $0x4c6ffec5; WORD $0x6032             // vmovdqu    ymm1, yword [rdx + rsi + 96]
	LONG $0x546ffec5; WORD $0x6031             // vmovdqu    ymm2, yword [rcx + rsi + 96]
	LONG $0xd968f5c5                           // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5                           // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5                           // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5                           // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5                           // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5                           // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x304c; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm1
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_1052

LBB0_1053:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB0_1056
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x456ffdc5; BYTE $0x40 // vmovdqa    ymm0, yword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1055:
	LONG $0x0c6ffec5; BYTE $0x32   // vmovdqu    ymm1, yword [rdx + rsi]
	LONG $0x146ffec5; BYTE $0x31   // vmovdqu    ymm2, yword [rcx + rsi]
	LONG $0xd968f5c5               // vpunpckhbw    ymm3, ymm1, ymm1
	LONG $0xe268edc5               // vpunpckhbw    ymm4, ymm2, ymm2
	LONG $0xdbd5ddc5               // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5               // vpand    ymm3, ymm3, ymm0
	LONG $0xc960f5c5               // vpunpcklbw    ymm1, ymm1, ymm1
	LONG $0xd260edc5               // vpunpcklbw    ymm2, ymm2, ymm2
	LONG $0xc9d5edc5               // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5               // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x7f7ec1c4; WORD $0x300c // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB0_1055

LBB0_1056:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_543
	JMP  LBB0_1177

LBB0_1057:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1058:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1058

LBB0_1059:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1062
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1061:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1061

LBB0_1062:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1177
	JMP  LBB0_1063

LBB0_1067:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1068:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1068

LBB0_1069:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1072
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1071:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1071

LBB0_1072:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1177
	JMP  LBB0_1073

LBB0_1077:
	WORD $0xff31 // xor    edi, edi

LBB0_1078:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1080
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB0_1080:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1081

LBB0_1085:
	WORD $0xff31 // xor    edi, edi

LBB0_1086:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1088
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB0_1088:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1089

LBB0_1093:
	WORD $0xff31 // xor    edi, edi

LBB0_1094:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1096
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1096:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1177
	JMP  LBB0_1097

LBB0_1101:
	WORD $0xff31 // xor    edi, edi

LBB0_1102:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1104
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB0_1104:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1177
	JMP  LBB0_1105

LBB0_1109:
	WORD $0xff31 // xor    edi, edi

LBB0_1110:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1112
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB0_1112:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1113

LBB0_1117:
	WORD $0xff31 // xor    edi, edi

LBB0_1118:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1120
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB0_1120:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1121

LBB0_1125:
	WORD $0xf631 // xor    esi, esi

LBB0_1126:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1128
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x20               // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB0_1128:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1129

LBB0_1133:
	WORD $0xf631 // xor    esi, esi

LBB0_1134:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1136
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x20               // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB0_1136:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1177
	JMP  LBB0_1137

LBB0_1141:
	WORD $0xff31 // xor    edi, edi

LBB0_1142:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1144
	LONG $0x587de2c4; WORD $0x0845             // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI0_1] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1144:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1177
	JMP  LBB0_1145

LBB0_1151:
	WORD $0xff31 // xor    edi, edi

LBB0_1152:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1154
	LONG $0x587de2c4; WORD $0x0845             // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI0_1] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB0_1154:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1177
	JMP  LBB0_1155

LBB0_1161:
	WORD $0xff31 // xor    edi, edi

LBB0_1162:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1164
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB0_1164:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1177
	JMP  LBB0_1165

LBB0_1169:
	WORD $0xff31 // xor    edi, edi

LBB0_1170:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1172
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB0_1172:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JNE  LBB0_1173

LBB0_1177:
	VZEROUPPER
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x008(SB)/8, $0x000000007fffffff
DATA LCDATA2<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x018(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x020(SB)/8, $0x0d0c090805040100
DATA LCDATA2<>+0x028(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA2<>+0x030(SB)/8, $0x1d1c191815141110
DATA LCDATA2<>+0x038(SB)/8, $0x1f1e1d1c1d1c1918
DATA LCDATA2<>+0x040(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x048(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x050(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x058(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x060(SB)/8, $0x000000000c080400
DATA LCDATA2<>+0x068(SB)/8, $0x0000000000000000
GLOBL LCDATA2<>(SB), 8, $112

TEXT Â·_arithmetic_arr_scalar_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA2<>(SB), BP

	LONG $0x04fe8040         // cmp    sil, 4
	JG   LBB1_12
	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB1_23
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB1_43
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB1_1461
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_75
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_131
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_211
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_214
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_11
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_595
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_595

LBB1_11:
	WORD $0xf631 // xor    esi, esi

LBB1_917:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_919

LBB1_918:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_918

LBB1_919:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_920:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_920
	JMP  LBB1_1461

LBB1_12:
	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB1_33
	LONG $0x05fe8040         // cmp    sil, 5
	JE   LBB1_51
	LONG $0x06fe8040         // cmp    sil, 6
	JNE  LBB1_1461
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_82
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_136
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_217
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_220
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_22
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_598
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_598

LBB1_22:
	WORD $0xf631 // xor    esi, esi

LBB1_925:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_927

LBB1_926:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_926

LBB1_927:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_928:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_928
	JMP  LBB1_1461

LBB1_23:
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB1_59
	LONG $0x04fe8040         // cmp    sil, 4
	JNE  LBB1_1461
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_89
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_141
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_223
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_226
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_32
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_601
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_601

LBB1_32:
	WORD $0xc931 // xor    ecx, ecx

LBB1_933:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_935

LBB1_934:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_934

LBB1_935:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_936:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_936
	JMP  LBB1_1461

LBB1_33:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB1_67
	LONG $0x09fe8040         // cmp    sil, 9
	JNE  LBB1_1461
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_96
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_146
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_229
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_232
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_42
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_604
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_604

LBB1_42:
	WORD $0xc931 // xor    ecx, ecx

LBB1_941:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_943

LBB1_942:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_942

LBB1_943:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_944:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_944
	JMP  LBB1_1461

LBB1_43:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_103
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_151
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_235
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_238
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_50
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_607
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_607

LBB1_50:
	WORD $0xf631 // xor    esi, esi

LBB1_949:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_951

LBB1_950:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_950

LBB1_951:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_952:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_952
	JMP  LBB1_1461

LBB1_51:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_110
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_156
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_241
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_244
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_58
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_610
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_610

LBB1_58:
	WORD $0xf631 // xor    esi, esi

LBB1_957:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_959

LBB1_958:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_958

LBB1_959:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_960:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_960
	JMP  LBB1_1461

LBB1_59:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_117
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_161
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_247
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_250
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_66
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_613
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_613

LBB1_66:
	WORD $0xf631 // xor    esi, esi

LBB1_965:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_967

LBB1_966:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_966

LBB1_967:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_968:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_968
	JMP  LBB1_1461

LBB1_67:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_124
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_166
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_253
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_256
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_74
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_616
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_616

LBB1_74:
	WORD $0xf631 // xor    esi, esi

LBB1_973:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_975

LBB1_974:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_974

LBB1_975:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_976:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_976
	JMP  LBB1_1461

LBB1_75:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_171
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_259
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_262
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_81
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_619
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_619

LBB1_81:
	WORD $0xc931 // xor    ecx, ecx

LBB1_981:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_983

LBB1_982:
	LONG $0x0c10fbc5; BYTE $0xca   // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5               // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_982

LBB1_983:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_984:
	LONG $0x0c10fbc5; BYTE $0xca               // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c10fbc5; WORD $0x08ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c10fbc5; WORD $0x10ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c10fbc5; WORD $0x18ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_984
	JMP  LBB1_1461

LBB1_82:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_176
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_265
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_268
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_88
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_622
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_622

LBB1_88:
	WORD $0xc931 // xor    ecx, ecx

LBB1_989:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_991

LBB1_990:
	LONG $0x0c10fbc5; BYTE $0xca   // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5               // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_990

LBB1_991:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_992:
	LONG $0x0c10fbc5; BYTE $0xca               // vmovsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c10fbc5; WORD $0x08ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c10fbc5; WORD $0x10ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c10fbc5; WORD $0x18ca             // vmovsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85cf3c5                           // vsubsd    xmm1, xmm1, xmm0
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_992
	JMP  LBB1_1461

LBB1_89:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_181
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_271
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_274
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_95
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_625
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_625

LBB1_95:
	WORD $0xc931 // xor    ecx, ecx

LBB1_997:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB1_999

LBB1_998:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB1_998

LBB1_999:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1000:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1000
	JMP  LBB1_1461

LBB1_96:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_186
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_277
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_280
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_102
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_628
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_628

LBB1_102:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1005:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB1_1007

LBB1_1006:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB1_1006

LBB1_1007:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1008:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1008
	JMP  LBB1_1461

LBB1_103:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_191
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_283
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_286
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_109
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_631
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_631

LBB1_109:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1013:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1015

LBB1_1014:
	LONG $0x0c58fbc5; BYTE $0xca   // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1014

LBB1_1015:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1016:
	LONG $0x0c58fbc5; BYTE $0xca               // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c58fbc5; WORD $0x08ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 8]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 16]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 24]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1016
	JMP  LBB1_1461

LBB1_110:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_196
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_289
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_292
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_116
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_634
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_634

LBB1_116:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1021:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1023

LBB1_1022:
	LONG $0x0c58fbc5; BYTE $0xca   // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1022

LBB1_1023:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1024:
	LONG $0x0c58fbc5; BYTE $0xca               // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c58fbc5; WORD $0x08ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 8]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 16]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18ca             // vaddsd    xmm1, xmm0, qword [rdx + 8*rcx + 24]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1024
	JMP  LBB1_1461

LBB1_117:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_201
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_295
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_298
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_123
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_637
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_637

LBB1_123:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1029:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1031

LBB1_1030:
	LONG $0x0c59fbc5; BYTE $0xca   // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1030

LBB1_1031:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1032:
	LONG $0x0c59fbc5; BYTE $0xca               // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c59fbc5; WORD $0x08ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 8]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c59fbc5; WORD $0x10ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 16]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c59fbc5; WORD $0x18ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 24]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1032
	JMP  LBB1_1461

LBB1_124:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_206
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_301
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_304
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fbc5         // vmovsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_130
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_640
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_640

LBB1_130:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1037:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1039

LBB1_1038:
	LONG $0x0c59fbc5; BYTE $0xca   // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1038

LBB1_1039:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1040:
	LONG $0x0c59fbc5; BYTE $0xca               // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx]
	LONG $0x117bc1c4; WORD $0xc80c             // vmovsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c59fbc5; WORD $0x08ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 8]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x08 // vmovsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c59fbc5; WORD $0x10ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 16]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x10 // vmovsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c59fbc5; WORD $0x18ca             // vmulsd    xmm1, xmm0, qword [rdx + 8*rcx + 24]
	LONG $0x117bc1c4; WORD $0xc84c; BYTE $0x18 // vmovsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1040
	JMP  LBB1_1461

LBB1_131:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_307
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_135
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_643
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_643

LBB1_135:
	WORD $0xf631 // xor    esi, esi

LBB1_1045:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1047

LBB1_1046:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1046

LBB1_1047:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1048:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1048
	JMP  LBB1_1461

LBB1_136:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_310
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_140
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_646
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_646

LBB1_140:
	WORD $0xf631 // xor    esi, esi

LBB1_1053:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1055

LBB1_1054:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1054

LBB1_1055:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1056:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1056
	JMP  LBB1_1461

LBB1_141:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_313
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_145
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_649
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_649

LBB1_145:
	WORD $0xc931 // xor    ecx, ecx

LBB1_652:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_654
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB1_654:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1461

LBB1_655:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_655
	JMP  LBB1_1461

LBB1_146:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_316
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_150
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_656
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_656

LBB1_150:
	WORD $0xc931 // xor    ecx, ecx

LBB1_659:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_661
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB1_661:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1461

LBB1_662:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_662
	JMP  LBB1_1461

LBB1_151:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_319
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_155
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_663
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_663

LBB1_155:
	WORD $0xf631 // xor    esi, esi

LBB1_1061:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1063

LBB1_1062:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1062

LBB1_1063:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1064:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1064
	JMP  LBB1_1461

LBB1_156:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB1_322
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_160
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_666
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_666

LBB1_160:
	WORD $0xf631 // xor    esi, esi

LBB1_1069:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1071

LBB1_1070:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1070

LBB1_1071:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1072:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1072
	JMP  LBB1_1461

LBB1_161:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_325
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_165
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_669
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_669

LBB1_165:
	WORD $0xff31 // xor    edi, edi

LBB1_859:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_861

LBB1_860:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_860

LBB1_861:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_862:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_862
	JMP  LBB1_1461

LBB1_166:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_328
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_170
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_671
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_671

LBB1_170:
	WORD $0xff31 // xor    edi, edi

LBB1_869:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_871

LBB1_870:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_870

LBB1_871:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_872:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_872
	JMP  LBB1_1461

LBB1_171:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_331
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_175
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_673
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_673

LBB1_175:
	WORD $0xf631 // xor    esi, esi

LBB1_1077:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1079

LBB1_1078:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1078

LBB1_1079:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1080:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1080
	JMP  LBB1_1461

LBB1_176:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_334
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_180
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_676
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_676

LBB1_180:
	WORD $0xf631 // xor    esi, esi

LBB1_1085:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1087

LBB1_1086:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1086

LBB1_1087:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1088:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1088
	JMP  LBB1_1461

LBB1_181:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_337
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_185
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_679
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_679

LBB1_185:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1093:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1095

LBB1_1094:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1094

LBB1_1095:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1096:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1096
	JMP  LBB1_1461

LBB1_186:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_340
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_190
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_682
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_682

LBB1_190:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1101:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1103

LBB1_1102:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1102

LBB1_1103:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1104:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1104
	JMP  LBB1_1461

LBB1_191:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_343
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_195
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_685
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_685

LBB1_195:
	WORD $0xf631 // xor    esi, esi

LBB1_1109:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1111

LBB1_1110:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1110

LBB1_1111:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1112:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1112
	JMP  LBB1_1461

LBB1_196:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_346
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_200
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_688
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_688

LBB1_200:
	WORD $0xf631 // xor    esi, esi

LBB1_1117:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1119

LBB1_1118:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1118

LBB1_1119:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1120:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1120
	JMP  LBB1_1461

LBB1_201:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_349
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_205
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_691
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_691

LBB1_205:
	WORD $0xf631 // xor    esi, esi

LBB1_1125:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1127

LBB1_1126:
	LONG $0xf20c8b48 // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48 // imul    rcx, rax
	LONG $0xf00c8949 // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1126

LBB1_1127:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1128:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1128
	JMP  LBB1_1461

LBB1_206:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_352
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_210
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_694
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_694

LBB1_210:
	WORD $0xf631 // xor    esi, esi

LBB1_1133:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1135

LBB1_1134:
	LONG $0xf20c8b48 // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48 // imul    rcx, rax
	LONG $0xf00c8949 // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1134

LBB1_1135:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1136:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1136
	JMP  LBB1_1461

LBB1_211:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_213
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_697
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_697

LBB1_213:
	WORD $0xf631 // xor    esi, esi

LBB1_1141:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1143

LBB1_1142:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0xc729                 // sub    edi, eax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1142

LBB1_1143:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1144:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1144
	JMP  LBB1_1461

LBB1_214:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_216
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_700
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_700

LBB1_216:
	WORD $0xf631 // xor    esi, esi

LBB1_1149:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1151

LBB1_1150:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0xc729                 // sub    edi, eax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1150

LBB1_1151:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1152:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1152
	JMP  LBB1_1461

LBB1_217:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_219
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_703
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_703

LBB1_219:
	WORD $0xf631 // xor    esi, esi

LBB1_1157:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1159

LBB1_1158:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0xc729                 // sub    edi, eax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1158

LBB1_1159:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1160:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1160
	JMP  LBB1_1461

LBB1_220:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_222
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_706
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_706

LBB1_222:
	WORD $0xf631 // xor    esi, esi

LBB1_1165:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1167

LBB1_1166:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0xc729                 // sub    edi, eax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1166

LBB1_1167:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1168:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1168
	JMP  LBB1_1461

LBB1_223:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_225
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_709
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_709

LBB1_225:
	WORD $0xc931 // xor    ecx, ecx

LBB1_879:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_881

LBB1_880:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB1_880

LBB1_881:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1461

LBB1_882:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB1_882
	JMP  LBB1_1461

LBB1_226:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_228
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_711
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_711

LBB1_228:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1173:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_1175
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB1_1175:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1461

LBB1_1176:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1176
	JMP  LBB1_1461

LBB1_229:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_231
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_714
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_714

LBB1_231:
	WORD $0xc931 // xor    ecx, ecx

LBB1_889:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_891

LBB1_890:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB1_890

LBB1_891:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1461

LBB1_892:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB1_892
	JMP  LBB1_1461

LBB1_232:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_234
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_716
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_716

LBB1_234:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1181:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_1183
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB1_1183:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1461

LBB1_1184:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1184
	JMP  LBB1_1461

LBB1_235:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_237
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_719
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_719

LBB1_237:
	WORD $0xf631 // xor    esi, esi

LBB1_1189:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1191

LBB1_1190:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1190

LBB1_1191:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1192:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1192
	JMP  LBB1_1461

LBB1_238:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_240
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_722
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_722

LBB1_240:
	WORD $0xf631 // xor    esi, esi

LBB1_1197:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1199

LBB1_1198:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1198

LBB1_1199:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1200:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1200
	JMP  LBB1_1461

LBB1_241:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_243
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_725
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_725

LBB1_243:
	WORD $0xf631 // xor    esi, esi

LBB1_1205:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1207

LBB1_1206:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1206

LBB1_1207:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1208:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1208
	JMP  LBB1_1461

LBB1_244:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_246
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_728
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_728

LBB1_246:
	WORD $0xf631 // xor    esi, esi

LBB1_1213:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1215

LBB1_1214:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1214

LBB1_1215:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1216:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1216
	JMP  LBB1_1461

LBB1_247:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_249
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_731
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_731

LBB1_249:
	WORD $0xf631 // xor    esi, esi

LBB1_1221:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1223

LBB1_1222:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1222

LBB1_1223:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1224:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1224
	JMP  LBB1_1461

LBB1_250:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_252
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_734
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_734

LBB1_252:
	WORD $0xf631 // xor    esi, esi

LBB1_1229:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1231

LBB1_1230:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1230

LBB1_1231:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1232:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1232
	JMP  LBB1_1461

LBB1_253:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_255
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_737
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_737

LBB1_255:
	WORD $0xf631 // xor    esi, esi

LBB1_1237:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1239

LBB1_1238:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1238

LBB1_1239:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1240:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1240
	JMP  LBB1_1461

LBB1_256:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_258
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_740
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_740

LBB1_258:
	WORD $0xf631 // xor    esi, esi

LBB1_1245:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB1_1247

LBB1_1246:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB1_1246

LBB1_1247:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1248:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1248
	JMP  LBB1_1461

LBB1_259:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_261
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_743
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_743

LBB1_261:
	WORD $0xf631 // xor    esi, esi

LBB1_1253:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1255

LBB1_1254:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1254

LBB1_1255:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1256:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1256
	JMP  LBB1_1461

LBB1_262:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_264
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_746
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_746

LBB1_264:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1261:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1263

LBB1_1262:
	LONG $0x0c10fac5; BYTE $0x8a   // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5               // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1262

LBB1_1263:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1264:
	LONG $0x0c10fac5; BYTE $0x8a               // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c10fac5; WORD $0x048a             // vmovss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c10fac5; WORD $0x088a             // vmovss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c10fac5; WORD $0x0c8a             // vmovss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1264
	JMP  LBB1_1461

LBB1_265:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_267
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_749
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_749

LBB1_267:
	WORD $0xf631 // xor    esi, esi

LBB1_1269:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1271

LBB1_1270:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1270

LBB1_1271:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1272:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1272
	JMP  LBB1_1461

LBB1_268:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_270
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_752
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_752

LBB1_270:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1277:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1279

LBB1_1278:
	LONG $0x0c10fac5; BYTE $0x8a   // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5               // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1278

LBB1_1279:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1280:
	LONG $0x0c10fac5; BYTE $0x8a               // vmovss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c10fac5; WORD $0x048a             // vmovss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c10fac5; WORD $0x088a             // vmovss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c10fac5; WORD $0x0c8a             // vmovss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85cf2c5                           // vsubss    xmm1, xmm1, xmm0
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1280
	JMP  LBB1_1461

LBB1_271:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_273
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_755
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_755

LBB1_273:
	WORD $0xc931 // xor    ecx, ecx

LBB1_758:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_760
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB1_760:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1461

LBB1_761:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_761
	JMP  LBB1_1461

LBB1_274:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_276
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_762
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_762

LBB1_276:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1285:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1288
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1287:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1287

LBB1_1288:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB1_1461
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1290:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1290
	JMP  LBB1_1461

LBB1_277:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_279
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_765
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_765

LBB1_279:
	WORD $0xc931 // xor    ecx, ecx

LBB1_768:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_770
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB1_770:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1461

LBB1_771:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_771
	JMP  LBB1_1461

LBB1_280:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_282
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_772
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_772

LBB1_282:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1295:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1298
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1297:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1297

LBB1_1298:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB1_1461
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1300:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1300
	JMP  LBB1_1461

LBB1_283:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_285
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_775
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_775

LBB1_285:
	WORD $0xf631 // xor    esi, esi

LBB1_1305:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1307

LBB1_1306:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1306

LBB1_1307:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1308:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1308
	JMP  LBB1_1461

LBB1_286:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_288
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_778
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_778

LBB1_288:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1313:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1315

LBB1_1314:
	LONG $0x0c58fac5; BYTE $0x8a   // vaddss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1314

LBB1_1315:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1316:
	LONG $0x0c58fac5; BYTE $0x8a               // vaddss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c58fac5; WORD $0x048a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 4]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c58fac5; WORD $0x088a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 8]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0c8a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 12]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1316
	JMP  LBB1_1461

LBB1_289:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_291
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_781
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_781

LBB1_291:
	WORD $0xf631 // xor    esi, esi

LBB1_1321:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1323

LBB1_1322:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1322

LBB1_1323:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1324:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1324
	JMP  LBB1_1461

LBB1_292:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_294
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_784
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_784

LBB1_294:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1329:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1331

LBB1_1330:
	LONG $0x0c58fac5; BYTE $0x8a   // vaddss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1330

LBB1_1331:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1332:
	LONG $0x0c58fac5; BYTE $0x8a               // vaddss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c58fac5; WORD $0x048a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 4]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c58fac5; WORD $0x088a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 8]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0c8a             // vaddss    xmm1, xmm0, dword [rdx + 4*rcx + 12]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1332
	JMP  LBB1_1461

LBB1_295:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_297
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_787
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_787

LBB1_297:
	WORD $0xf631 // xor    esi, esi

LBB1_1337:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1339

LBB1_1338:
	LONG $0xf20c8b48 // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48 // imul    rcx, rax
	LONG $0xf00c8949 // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1338

LBB1_1339:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1340:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1340
	JMP  LBB1_1461

LBB1_298:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_300
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_790
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_790

LBB1_300:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1345:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1347

LBB1_1346:
	LONG $0x0c59fac5; BYTE $0x8a   // vmulss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1346

LBB1_1347:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1348:
	LONG $0x0c59fac5; BYTE $0x8a               // vmulss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c59fac5; WORD $0x048a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 4]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c59fac5; WORD $0x088a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 8]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c59fac5; WORD $0x0c8a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 12]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1348
	JMP  LBB1_1461

LBB1_301:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_303
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_793
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_793

LBB1_303:
	WORD $0xf631 // xor    esi, esi

LBB1_1353:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1355

LBB1_1354:
	LONG $0xf20c8b48 // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48 // imul    rcx, rax
	LONG $0xf00c8949 // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1354

LBB1_1355:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1356:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1356
	JMP  LBB1_1461

LBB1_304:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	LONG $0x0110fac5         // vmovss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_306
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_796
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_796

LBB1_306:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1361:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1363

LBB1_1362:
	LONG $0x0c59fac5; BYTE $0x8a   // vmulss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1362

LBB1_1363:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1364:
	LONG $0x0c59fac5; BYTE $0x8a               // vmulss    xmm1, xmm0, dword [rdx + 4*rcx]
	LONG $0x117ac1c4; WORD $0x880c             // vmovss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c59fac5; WORD $0x048a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 4]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x04 // vmovss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c59fac5; WORD $0x088a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 8]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x08 // vmovss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c59fac5; WORD $0x0c8a             // vmulss    xmm1, xmm0, dword [rdx + 4*rcx + 12]
	LONG $0x117ac1c4; WORD $0x884c; BYTE $0x0c // vmovss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1364
	JMP  LBB1_1461

LBB1_307:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_309
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_799
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_799

LBB1_309:
	WORD $0xf631 // xor    esi, esi

LBB1_1369:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1371

LBB1_1370:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1370

LBB1_1371:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1372:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1372
	JMP  LBB1_1461

LBB1_310:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_312
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_802
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_802

LBB1_312:
	WORD $0xf631 // xor    esi, esi

LBB1_1377:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1379

LBB1_1378:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1378

LBB1_1379:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1380:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1380
	JMP  LBB1_1461

LBB1_313:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_315
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_805
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_805

LBB1_315:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1385:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1387

LBB1_1386:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1386

LBB1_1387:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1388:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1388
	JMP  LBB1_1461

LBB1_316:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_318
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_808
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_808

LBB1_318:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1393:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1395

LBB1_1394:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1394

LBB1_1395:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1461

LBB1_1396:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1396
	JMP  LBB1_1461

LBB1_319:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_321
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_811
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_811

LBB1_321:
	WORD $0xf631 // xor    esi, esi

LBB1_1401:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1403

LBB1_1402:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1402

LBB1_1403:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1404:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1404
	JMP  LBB1_1461

LBB1_322:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018a                               // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB1_324
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB1_814
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB1_814

LBB1_324:
	WORD $0xf631 // xor    esi, esi

LBB1_1409:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1411

LBB1_1410:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1410

LBB1_1411:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1412:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1412
	JMP  LBB1_1461

LBB1_325:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_327
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_817
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_817

LBB1_327:
	WORD $0xff31 // xor    edi, edi

LBB1_899:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_901

LBB1_900:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_900

LBB1_901:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_902:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_902
	JMP  LBB1_1461

LBB1_328:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_330
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_819
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_819

LBB1_330:
	WORD $0xff31 // xor    edi, edi

LBB1_909:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_911

LBB1_910:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_910

LBB1_911:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_912:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_912
	JMP  LBB1_1461

LBB1_331:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_333
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_821
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_821

LBB1_333:
	WORD $0xf631 // xor    esi, esi

LBB1_1417:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1419

LBB1_1418:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1418

LBB1_1419:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1420:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1420
	JMP  LBB1_1461

LBB1_334:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_336
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_824
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_824

LBB1_336:
	WORD $0xf631 // xor    esi, esi

LBB1_1425:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1427

LBB1_1426:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1426

LBB1_1427:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1428:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1428
	JMP  LBB1_1461

LBB1_337:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_339
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_827
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_827

LBB1_339:
	WORD $0xc931 // xor    ecx, ecx

LBB1_830:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_832
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB1_832:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1461

LBB1_833:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_833
	JMP  LBB1_1461

LBB1_340:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_342
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_834
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_834

LBB1_342:
	WORD $0xc931 // xor    ecx, ecx

LBB1_837:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_839
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB1_839:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1461

LBB1_840:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_840
	JMP  LBB1_1461

LBB1_343:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_345
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_841
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_841

LBB1_345:
	WORD $0xf631 // xor    esi, esi

LBB1_1433:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1435

LBB1_1434:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1434

LBB1_1435:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1436:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1436
	JMP  LBB1_1461

LBB1_346:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_348
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_844
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_844

LBB1_348:
	WORD $0xf631 // xor    esi, esi

LBB1_1441:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1443

LBB1_1442:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1442

LBB1_1443:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1444:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1444
	JMP  LBB1_1461

LBB1_349:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_351
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_847
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_847

LBB1_351:
	WORD $0xf631 // xor    esi, esi

LBB1_1449:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1451

LBB1_1450:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1450

LBB1_1451:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1452:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1452
	JMP  LBB1_1461

LBB1_352:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1461
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_354
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_850
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_850

LBB1_354:
	WORD $0xf631 // xor    esi, esi

LBB1_1457:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1459

LBB1_1458:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1458

LBB1_1459:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1461

LBB1_1460:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1460
	JMP  LBB1_1461

LBB1_595:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_913
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_597:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_597
	JMP  LBB1_914

LBB1_598:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_921
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_600:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_600
	JMP  LBB1_922

LBB1_601:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_929
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_603:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_603
	JMP  LBB1_930

LBB1_604:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_937
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_606:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_606
	JMP  LBB1_938

LBB1_607:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_945
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_609:
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60ba             // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_609
	JMP  LBB1_946

LBB1_610:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_953
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_612:
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60ba             // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_612
	JMP  LBB1_954

LBB1_613:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_961
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_615:
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba64; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080ba8c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x00a0ba94407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x00c0ba9c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x00e0baa4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_615
	JMP  LBB1_962

LBB1_616:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_969
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_618:
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba64; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080ba8c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x00a0ba94407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x00c0ba9c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x00e0baa4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_618
	JMP  LBB1_970

LBB1_619:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_977
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_621:
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf06c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm5
	QUAD $0x000080f29410fdc5; BYTE $0x00       // vmovupd    ymm2, yword [rdx + 8*rsi + 128]
	QUAD $0x0000a0f29c10fdc5; BYTE $0x00       // vmovupd    ymm3, yword [rdx + 8*rsi + 160]
	QUAD $0x0000c0f2a410fdc5; BYTE $0x00       // vmovupd    ymm4, yword [rdx + 8*rsi + 192]
	QUAD $0x0000e0f2ac10fdc5; BYTE $0x00       // vmovupd    ymm5, yword [rdx + 8*rsi + 224]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	QUAD $0x0080f094117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 128], ymm2
	QUAD $0x00a0f09c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 160], ymm3
	QUAD $0x00c0f0a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 192], ymm4
	QUAD $0x00e0f0ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 224], ymm5
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_621
	JMP  LBB1_978

LBB1_622:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_985
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_624:
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf06c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm5
	QUAD $0x000080f29410fdc5; BYTE $0x00       // vmovupd    ymm2, yword [rdx + 8*rsi + 128]
	QUAD $0x0000a0f29c10fdc5; BYTE $0x00       // vmovupd    ymm3, yword [rdx + 8*rsi + 160]
	QUAD $0x0000c0f2a410fdc5; BYTE $0x00       // vmovupd    ymm4, yword [rdx + 8*rsi + 192]
	QUAD $0x0000e0f2ac10fdc5; BYTE $0x00       // vmovupd    ymm5, yword [rdx + 8*rsi + 224]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xe95cd5c5                           // vsubpd    ymm5, ymm5, ymm1
	QUAD $0x0080f094117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 128], ymm2
	QUAD $0x00a0f09c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 160], ymm3
	QUAD $0x00c0f0a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 192], ymm4
	QUAD $0x00e0f0ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rsi + 224], ymm5
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_624
	JMP  LBB1_986

LBB1_625:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB1_993
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_627:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_627
	JMP  LBB1_994

LBB1_628:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB1_1001
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_630:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_630
	JMP  LBB1_1002

LBB1_631:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1009
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_633:
	LONG $0x1458f5c5; BYTE $0xfa               // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20fa             // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40fa             // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x6c58f5c5; WORD $0x60fa             // vaddpd    ymm5, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa9458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_633
	JMP  LBB1_1010

LBB1_634:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1017
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_636:
	LONG $0x1458f5c5; BYTE $0xfa               // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20fa             // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40fa             // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x6c58f5c5; WORD $0x60fa             // vaddpd    ymm5, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa9458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_636
	JMP  LBB1_1018

LBB1_637:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1025
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_639:
	LONG $0x1459f5c5; BYTE $0xfa               // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20fa             // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40fa             // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x6c59f5c5; WORD $0x60fa             // vmulpd    ymm5, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa9459f5c5; BYTE $0x00       // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c59f5c5; BYTE $0x00       // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa459f5c5; BYTE $0x00       // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac59f5c5; BYTE $0x00       // vmulpd    ymm5, ymm1, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_639
	JMP  LBB1_1026

LBB1_640:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1033
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_642:
	LONG $0x1459f5c5; BYTE $0xfa               // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20fa             // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40fa             // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x6c59f5c5; WORD $0x60fa             // vmulpd    ymm5, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa9459f5c5; BYTE $0x00       // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c59f5c5; BYTE $0x00       // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa459f5c5; BYTE $0x00       // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac59f5c5; BYTE $0x00       // vmulpd    ymm5, ymm1, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_642
	JMP  LBB1_1034

LBB1_643:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1041
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_645:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_645
	JMP  LBB1_1042

LBB1_646:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1049
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_648:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_648
	JMP  LBB1_1050

LBB1_649:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x60 // vmovdqa    xmm0, oword 96[rbp] /* [rip + .LCPI1_3] */

LBB1_650:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_650
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_652

LBB1_656:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x60 // vmovdqa    xmm0, oword 96[rbp] /* [rip + .LCPI1_3] */

LBB1_657:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_657
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_659

LBB1_663:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1057
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_665:
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x603a             // vpaddb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_665
	JMP  LBB1_1058

LBB1_666:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1065
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_668:
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x603a             // vpaddb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_668
	JMP  LBB1_1066

LBB1_669:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc16ef9c5             // vmovd    xmm0, ecx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB1_853
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB1_855

LBB1_671:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc16ef9c5             // vmovd    xmm0, ecx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB1_863
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB1_865

LBB1_673:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1073
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_675:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_675
	JMP  LBB1_1074

LBB1_676:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1081
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_678:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_678
	JMP  LBB1_1082

LBB1_679:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1089
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_681:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_681
	JMP  LBB1_1090

LBB1_682:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1097
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_684:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_684
	JMP  LBB1_1098

LBB1_685:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1105
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_687:
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60fa             // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_687
	JMP  LBB1_1106

LBB1_688:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1113
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_690:
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60fa             // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_690
	JMP  LBB1_1114

LBB1_691:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1121
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_693:
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rdx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_693
	JMP  LBB1_1122

LBB1_694:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1129
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_696:
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rdx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_696
	JMP  LBB1_1130

LBB1_697:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1137
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_699:
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x407a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 64]
	LONG $0x546ffec5; WORD $0x607a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_699
	JMP  LBB1_1138

LBB1_700:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1145
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_702:
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x407a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 64]
	LONG $0x546ffec5; WORD $0x607a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_702
	JMP  LBB1_1146

LBB1_703:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1153
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_705:
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x407a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 64]
	LONG $0x546ffec5; WORD $0x607a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_705
	JMP  LBB1_1154

LBB1_706:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1161
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_708:
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4c6ffec5; WORD $0x407a             // vmovdqu    ymm1, yword [rdx + 2*rdi + 64]
	LONG $0x546ffec5; WORD $0x607a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 96]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xd0f9edc5                           // vpsubw    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_708
	JMP  LBB1_1162

LBB1_709:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB1_873
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_875

LBB1_711:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1169
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x20 // vmovdqa    ymm0, yword 32[rbp] /* [rip + .LCPI1_2] */

LBB1_713:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_713
	JMP  LBB1_1170

LBB1_714:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB1_883
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_885

LBB1_716:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1177
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x20 // vmovdqa    ymm0, yword 32[rbp] /* [rip + .LCPI1_2] */

LBB1_718:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_718
	JMP  LBB1_1178

LBB1_719:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1185
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_721:
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x207a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x407a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x607a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_721
	JMP  LBB1_1186

LBB1_722:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1193
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_724:
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x207a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x407a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x607a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_724
	JMP  LBB1_1194

LBB1_725:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1201
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_727:
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x207a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x407a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x607a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_727
	JMP  LBB1_1202

LBB1_728:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1209
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_730:
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x207a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x407a             // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x607a             // vpaddw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_730
	JMP  LBB1_1210

LBB1_731:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1217
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_733:
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x207a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x407a             // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x607a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_733
	JMP  LBB1_1218

LBB1_734:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1225
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_736:
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x207a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x407a             // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x607a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_736
	JMP  LBB1_1226

LBB1_737:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1233
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_739:
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x207a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x407a             // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x607a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_739
	JMP  LBB1_1234

LBB1_740:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1241
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_742:
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x207a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x407a             // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x607a             // vpmullw    ymm2, ymm0, yword [rdx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_742
	JMP  LBB1_1242

LBB1_743:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1249
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_745:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_745
	JMP  LBB1_1250

LBB1_746:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1257
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_748:
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb06c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm5
	QUAD $0x000080b29410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdx + 4*rsi + 128]
	QUAD $0x0000a0b29c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdx + 4*rsi + 160]
	QUAD $0x0000c0b2a410fcc5; BYTE $0x00       // vmovups    ymm4, yword [rdx + 4*rsi + 192]
	QUAD $0x0000e0b2ac10fcc5; BYTE $0x00       // vmovups    ymm5, yword [rdx + 4*rsi + 224]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	QUAD $0x0080b094117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 128], ymm2
	QUAD $0x00a0b09c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 160], ymm3
	QUAD $0x00c0b0a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 192], ymm4
	QUAD $0x00e0b0ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 224], ymm5
	LONG $0x40c68348                           // add    rsi, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_748
	JMP  LBB1_1258

LBB1_749:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1265
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_751:
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 224]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xe0fbddc5                           // vpsubq    ymm4, ymm4, ymm0
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_751
	JMP  LBB1_1266

LBB1_752:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1273
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_754:
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb06c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm5
	QUAD $0x000080b29410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdx + 4*rsi + 128]
	QUAD $0x0000a0b29c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdx + 4*rsi + 160]
	QUAD $0x0000c0b2a410fcc5; BYTE $0x00       // vmovups    ymm4, yword [rdx + 4*rsi + 192]
	QUAD $0x0000e0b2ac10fcc5; BYTE $0x00       // vmovups    ymm5, yword [rdx + 4*rsi + 224]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xe95cd4c5                           // vsubps    ymm5, ymm5, ymm1
	QUAD $0x0080b094117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 128], ymm2
	QUAD $0x00a0b09c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 160], ymm3
	QUAD $0x00c0b0a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 192], ymm4
	QUAD $0x00e0b0ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rsi + 224], ymm5
	LONG $0x40c68348                           // add    rsi, 64
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_754
	JMP  LBB1_1274

LBB1_755:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_756:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_756
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_758

LBB1_762:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1281
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x0845 // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI1_1] */

LBB1_764:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_764
	JMP  LBB1_1282

LBB1_765:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB1_766:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_766
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_768

LBB1_772:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1291
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x0845 // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI1_1] */

LBB1_774:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_774
	JMP  LBB1_1292

LBB1_775:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1301
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_777:
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60fa             // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_777
	JMP  LBB1_1302

LBB1_778:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1309
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_780:
	LONG $0x1458f4c5; BYTE $0xba               // vaddps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20ba             // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40ba             // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x6c58f4c5; WORD $0x60ba             // vaddps    ymm5, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080ba9458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba9c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0baa458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_780
	JMP  LBB1_1310

LBB1_781:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1317
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_783:
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60fa             // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_783
	JMP  LBB1_1318

LBB1_784:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1325
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_786:
	LONG $0x1458f4c5; BYTE $0xba               // vaddps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20ba             // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40ba             // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x6c58f4c5; WORD $0x60ba             // vaddps    ymm5, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080ba9458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba9c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0baa458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_786
	JMP  LBB1_1326

LBB1_787:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1333
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_789:
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rdx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_789
	JMP  LBB1_1334

LBB1_790:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1341
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_792:
	LONG $0x1459f4c5; BYTE $0xba               // vmulps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20ba             // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40ba             // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x6c59f4c5; WORD $0x60ba             // vmulps    ymm5, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080ba9459f4c5; BYTE $0x00       // vmulps    ymm2, ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba9c59f4c5; BYTE $0x00       // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0baa459f4c5; BYTE $0x00       // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baac59f4c5; BYTE $0x00       // vmulps    ymm5, ymm1, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_792
	JMP  LBB1_1342

LBB1_793:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1349
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_795:
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0faa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rdx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_795
	JMP  LBB1_1350

LBB1_796:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0718d48             // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1357
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB1_798:
	LONG $0x1459f4c5; BYTE $0xba               // vmulps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20ba             // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40ba             // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x6c59f4c5; WORD $0x60ba             // vmulps    ymm5, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080ba9459f4c5; BYTE $0x00       // vmulps    ymm2, ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba9c59f4c5; BYTE $0x00       // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0baa459f4c5; BYTE $0x00       // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baac59f4c5; BYTE $0x00       // vmulps    ymm5, ymm1, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_798
	JMP  LBB1_1358

LBB1_799:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1365
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_801:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_801
	JMP  LBB1_1366

LBB1_802:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1373
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_804:
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 128]
	QUAD $0x0000a03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + rdi + 224]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xe0f8ddc5                           // vpsubb    ymm4, ymm4, ymm0
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_804
	JMP  LBB1_1374

LBB1_805:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1381
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_807:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_807
	JMP  LBB1_1382

LBB1_808:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1389
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_810:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_810
	JMP  LBB1_1390

LBB1_811:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1397
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_813:
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x603a             // vpaddb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_813
	JMP  LBB1_1398

LBB1_814:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x804e8d48             // lea    rcx, [rsi - 128]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1405
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_816:
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x603a             // vpaddb    ymm4, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x0000803a8cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a94fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rdx + rdi + 160]
	QUAD $0x0000c03a9cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rdx + rdi + 192]
	QUAD $0x0000e03aa4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rdx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_816
	JMP  LBB1_1406

LBB1_817:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc16ef9c5             // vmovd    xmm0, ecx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB1_893
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB1_895

LBB1_819:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc16ef9c5             // vmovd    xmm0, ecx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB1_903
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB1_905

LBB1_821:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1413
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_823:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_823
	JMP  LBB1_1414

LBB1_824:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1421
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_826:
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rdx + 4*rdi + 224]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xe0faddc5                           // vpsubd    ymm4, ymm4, ymm0
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_826
	JMP  LBB1_1422

LBB1_827:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB1_828:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_828
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_830

LBB1_834:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB1_835:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB1_835
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_837

LBB1_841:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1429
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_843:
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60ba             // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_843
	JMP  LBB1_1430

LBB1_844:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1437
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_846:
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60ba             // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_846
	JMP  LBB1_1438

LBB1_847:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1445
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_849:
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba64; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080ba8c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x00a0ba94407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x00c0ba9c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x00e0baa4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_849
	JMP  LBB1_1446

LBB1_850:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1453
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_852:
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba64; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080ba8c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x00a0ba94407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x00c0ba9c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x00e0baa4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_852
	JMP  LBB1_1454

LBB1_853:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB1_854:
	LONG $0x246ffec5; BYTE $0x32               // vmovdqu    ymm4, yword [rdx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2032             // vmovdqu    ymm4, yword [rdx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4032             // vmovdqu    ymm4, yword [rdx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6032             // vmovdqu    ymm4, yword [rdx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB1_854

LBB1_855:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB1_858
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB1_857:
	LONG $0x1c6ffec5; BYTE $0x32   // vmovdqu    ymm3, yword [rdx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_857

LBB1_858:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1461
	JMP  LBB1_859

LBB1_863:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB1_864:
	LONG $0x246ffec5; BYTE $0x32               // vmovdqu    ymm4, yword [rdx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2032             // vmovdqu    ymm4, yword [rdx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4032             // vmovdqu    ymm4, yword [rdx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6032             // vmovdqu    ymm4, yword [rdx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB1_864

LBB1_865:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB1_868
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB1_867:
	LONG $0x1c6ffec5; BYTE $0x32   // vmovdqu    ymm3, yword [rdx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_867

LBB1_868:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1461
	JMP  LBB1_869

LBB1_873:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_874:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_874

LBB1_875:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_878
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_877:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_877

LBB1_878:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1461
	JMP  LBB1_879

LBB1_883:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_884:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_884

LBB1_885:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_888
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_887:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_887

LBB1_888:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1461
	JMP  LBB1_889

LBB1_893:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB1_894:
	LONG $0x246ffec5; BYTE $0x32               // vmovdqu    ymm4, yword [rdx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2032             // vmovdqu    ymm4, yword [rdx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4032             // vmovdqu    ymm4, yword [rdx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6032             // vmovdqu    ymm4, yword [rdx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB1_894

LBB1_895:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB1_898
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB1_897:
	LONG $0x1c6ffec5; BYTE $0x32   // vmovdqu    ymm3, yword [rdx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_897

LBB1_898:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1461
	JMP  LBB1_899

LBB1_903:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB1_904:
	LONG $0x246ffec5; BYTE $0x32               // vmovdqu    ymm4, yword [rdx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2032             // vmovdqu    ymm4, yword [rdx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4032             // vmovdqu    ymm4, yword [rdx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6032             // vmovdqu    ymm4, yword [rdx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB1_904

LBB1_905:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB1_908
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB1_907:
	LONG $0x1c6ffec5; BYTE $0x32   // vmovdqu    ymm3, yword [rdx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_907

LBB1_908:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1461
	JMP  LBB1_909

LBB1_913:
	WORD $0xff31 // xor    edi, edi

LBB1_914:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_916
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_916:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_917

LBB1_921:
	WORD $0xff31 // xor    edi, edi

LBB1_922:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_924
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_924:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_925

LBB1_929:
	WORD $0xff31 // xor    edi, edi

LBB1_930:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_932
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB1_932:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_933

LBB1_937:
	WORD $0xff31 // xor    edi, edi

LBB1_938:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_940
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB1_940:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_941

LBB1_945:
	WORD $0xff31 // xor    edi, edi

LBB1_946:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_948
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60ba             // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_948:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_949

LBB1_953:
	WORD $0xff31 // xor    edi, edi

LBB1_954:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_956
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60ba             // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_956:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_957

LBB1_961:
	WORD $0xff31 // xor    edi, edi

LBB1_962:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_964
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba44; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_964:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_965

LBB1_969:
	WORD $0xff31 // xor    edi, edi

LBB1_970:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_972
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba44; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_972:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_973

LBB1_977:
	WORD $0xf631 // xor    esi, esi

LBB1_978:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_980
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xc95cd5c5                           // vsubpd    ymm1, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf04c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm1

LBB1_980:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_981

LBB1_985:
	WORD $0xf631 // xor    esi, esi

LBB1_986:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_988
	LONG $0x1410fdc5; BYTE $0xf2               // vmovupd    ymm2, yword [rdx + 8*rsi]
	LONG $0x5c10fdc5; WORD $0x20f2             // vmovupd    ymm3, yword [rdx + 8*rsi + 32]
	LONG $0x6410fdc5; WORD $0x40f2             // vmovupd    ymm4, yword [rdx + 8*rsi + 64]
	LONG $0x6c10fdc5; WORD $0x60f2             // vmovupd    ymm5, yword [rdx + 8*rsi + 96]
	LONG $0xd15cedc5                           // vsubpd    ymm2, ymm2, ymm1
	LONG $0xd95ce5c5                           // vsubpd    ymm3, ymm3, ymm1
	LONG $0xe15cddc5                           // vsubpd    ymm4, ymm4, ymm1
	LONG $0xc95cd5c5                           // vsubpd    ymm1, ymm5, ymm1
	LONG $0x117dc1c4; WORD $0xf014             // vmovupd    yword [r8 + 8*rsi], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf04c; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm1

LBB1_988:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_989

LBB1_993:
	WORD $0xff31 // xor    edi, edi

LBB1_994:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_996
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_996:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1461
	JMP  LBB1_997

LBB1_1001:
	WORD $0xff31 // xor    edi, edi

LBB1_1002:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1004
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1004:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1461
	JMP  LBB1_1005

LBB1_1009:
	WORD $0xff31 // xor    edi, edi

LBB1_1010:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1012
	LONG $0x1458f5c5; BYTE $0xfa               // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20fa             // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40fa             // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x4c58f5c5; WORD $0x60fa             // vaddpd    ymm1, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB1_1012:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1013

LBB1_1017:
	WORD $0xff31 // xor    edi, edi

LBB1_1018:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1020
	LONG $0x1458f5c5; BYTE $0xfa               // vaddpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20fa             // vaddpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40fa             // vaddpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x4c58f5c5; WORD $0x60fa             // vaddpd    ymm1, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB1_1020:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1021

LBB1_1025:
	WORD $0xff31 // xor    edi, edi

LBB1_1026:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1028
	LONG $0x1459f5c5; BYTE $0xfa               // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20fa             // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40fa             // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x4c59f5c5; WORD $0x60fa             // vmulpd    ymm1, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB1_1028:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1029

LBB1_1033:
	WORD $0xff31 // xor    edi, edi

LBB1_1034:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1036
	LONG $0x1459f5c5; BYTE $0xfa               // vmulpd    ymm2, ymm1, yword [rdx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20fa             // vmulpd    ymm3, ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40fa             // vmulpd    ymm4, ymm1, yword [rdx + 8*rdi + 64]
	LONG $0x4c59f5c5; WORD $0x60fa             // vmulpd    ymm1, ymm1, yword [rdx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB1_1036:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1037

LBB1_1041:
	WORD $0xff31 // xor    edi, edi

LBB1_1042:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1044
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1044:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1045

LBB1_1049:
	WORD $0xff31 // xor    edi, edi

LBB1_1050:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1052
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1052:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1053

LBB1_1057:
	WORD $0xff31 // xor    edi, edi

LBB1_1058:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1060
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x603a             // vpaddb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1060:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1061

LBB1_1065:
	WORD $0xff31 // xor    edi, edi

LBB1_1066:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1068
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x603a             // vpaddb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1068:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1069

LBB1_1073:
	WORD $0xff31 // xor    edi, edi

LBB1_1074:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1076
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1076:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1077

LBB1_1081:
	WORD $0xff31 // xor    edi, edi

LBB1_1082:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1084
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1084:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1085

LBB1_1089:
	WORD $0xff31 // xor    edi, edi

LBB1_1090:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1092
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB1_1092:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1093

LBB1_1097:
	WORD $0xff31 // xor    edi, edi

LBB1_1098:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1100
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB1_1100:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1101

LBB1_1105:
	WORD $0xff31 // xor    edi, edi

LBB1_1106:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1108
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60fa             // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1108:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1109

LBB1_1113:
	WORD $0xff31 // xor    edi, edi

LBB1_1114:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1116
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60fa             // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1116:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1117

LBB1_1121:
	WORD $0xff31 // xor    edi, edi

LBB1_1122:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1124
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1124:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1125

LBB1_1129:
	WORD $0xff31 // xor    edi, edi

LBB1_1130:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1132
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1132:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1133

LBB1_1137:
	WORD $0xff31 // xor    edi, edi

LBB1_1138:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1140
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1140:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1141

LBB1_1145:
	WORD $0xff31 // xor    edi, edi

LBB1_1146:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1148
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1148:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1149

LBB1_1153:
	WORD $0xff31 // xor    edi, edi

LBB1_1154:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1156
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1156:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1157

LBB1_1161:
	WORD $0xff31 // xor    edi, edi

LBB1_1162:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1164
	LONG $0x0c6ffec5; BYTE $0x7a               // vmovdqu    ymm1, yword [rdx + 2*rdi]
	LONG $0x546ffec5; WORD $0x207a             // vmovdqu    ymm2, yword [rdx + 2*rdi + 32]
	LONG $0xc8f9f5c5                           // vpsubw    ymm1, ymm1, ymm0
	LONG $0xc0f9edc5                           // vpsubw    ymm0, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1164:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1165

LBB1_1169:
	WORD $0xf631 // xor    esi, esi

LBB1_1170:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1172
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x20               // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI1_2] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB1_1172:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1173

LBB1_1177:
	WORD $0xf631 // xor    esi, esi

LBB1_1178:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1180
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x20               // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI1_2] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB1_1180:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1181

LBB1_1185:
	WORD $0xff31 // xor    edi, edi

LBB1_1186:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1188
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x207a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1188:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1189

LBB1_1193:
	WORD $0xff31 // xor    edi, edi

LBB1_1194:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1196
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x207a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1196:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1197

LBB1_1201:
	WORD $0xff31 // xor    edi, edi

LBB1_1202:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1204
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x207a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1204:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1205

LBB1_1209:
	WORD $0xff31 // xor    edi, edi

LBB1_1210:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1212
	LONG $0x0cfdfdc5; BYTE $0x7a               // vpaddw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x207a             // vpaddw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1212:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1213

LBB1_1217:
	WORD $0xff31 // xor    edi, edi

LBB1_1218:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1220
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x207a             // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1220:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1221

LBB1_1225:
	WORD $0xff31 // xor    edi, edi

LBB1_1226:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1228
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x207a             // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1228:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1229

LBB1_1233:
	WORD $0xff31 // xor    edi, edi

LBB1_1234:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1236
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x207a             // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1236:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1237

LBB1_1241:
	WORD $0xff31 // xor    edi, edi

LBB1_1242:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1244
	LONG $0x0cd5fdc5; BYTE $0x7a               // vpmullw    ymm1, ymm0, yword [rdx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x207a             // vpmullw    ymm0, ymm0, yword [rdx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB1_1244:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1245

LBB1_1249:
	WORD $0xff31 // xor    edi, edi

LBB1_1250:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1252
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1252:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1253

LBB1_1257:
	WORD $0xf631 // xor    esi, esi

LBB1_1258:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1260
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xc95cd4c5                           // vsubps    ymm1, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb04c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm1

LBB1_1260:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1261

LBB1_1265:
	WORD $0xff31 // xor    edi, edi

LBB1_1266:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1268
	LONG $0x0c6ffec5; BYTE $0xfa               // vmovdqu    ymm1, yword [rdx + 8*rdi]
	LONG $0x546ffec5; WORD $0x20fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 64]
	LONG $0x646ffec5; WORD $0x60fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 96]
	LONG $0xc8fbf5c5                           // vpsubq    ymm1, ymm1, ymm0
	LONG $0xd0fbedc5                           // vpsubq    ymm2, ymm2, ymm0
	LONG $0xd8fbe5c5                           // vpsubq    ymm3, ymm3, ymm0
	LONG $0xc0fbddc5                           // vpsubq    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1268:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1269

LBB1_1273:
	WORD $0xf631 // xor    esi, esi

LBB1_1274:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1276
	LONG $0x1410fcc5; BYTE $0xb2               // vmovups    ymm2, yword [rdx + 4*rsi]
	LONG $0x5c10fcc5; WORD $0x20b2             // vmovups    ymm3, yword [rdx + 4*rsi + 32]
	LONG $0x6410fcc5; WORD $0x40b2             // vmovups    ymm4, yword [rdx + 4*rsi + 64]
	LONG $0x6c10fcc5; WORD $0x60b2             // vmovups    ymm5, yword [rdx + 4*rsi + 96]
	LONG $0xd15cecc5                           // vsubps    ymm2, ymm2, ymm1
	LONG $0xd95ce4c5                           // vsubps    ymm3, ymm3, ymm1
	LONG $0xe15cdcc5                           // vsubps    ymm4, ymm4, ymm1
	LONG $0xc95cd4c5                           // vsubps    ymm1, ymm5, ymm1
	LONG $0x117cc1c4; WORD $0xb014             // vmovups    yword [r8 + 4*rsi], ymm2
	LONG $0x117cc1c4; WORD $0xb05c; BYTE $0x20 // vmovups    yword [r8 + 4*rsi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb064; BYTE $0x40 // vmovups    yword [r8 + 4*rsi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb04c; BYTE $0x60 // vmovups    yword [r8 + 4*rsi + 96], ymm1

LBB1_1276:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1277

LBB1_1281:
	WORD $0xff31 // xor    edi, edi

LBB1_1282:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1284
	LONG $0x587de2c4; WORD $0x0845             // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI1_1] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1284:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1461
	JMP  LBB1_1285

LBB1_1291:
	WORD $0xff31 // xor    edi, edi

LBB1_1292:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1294
	LONG $0x587de2c4; WORD $0x0845             // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI1_1] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1294:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1461
	JMP  LBB1_1295

LBB1_1301:
	WORD $0xff31 // xor    edi, edi

LBB1_1302:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1304
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60fa             // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1304:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1305

LBB1_1309:
	WORD $0xff31 // xor    edi, edi

LBB1_1310:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1312
	LONG $0x1458f4c5; BYTE $0xba               // vaddps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20ba             // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40ba             // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x4c58f4c5; WORD $0x60ba             // vaddps    ymm1, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB1_1312:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1313

LBB1_1317:
	WORD $0xff31 // xor    edi, edi

LBB1_1318:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1320
	LONG $0x0cd4fdc5; BYTE $0xfa               // vpaddq    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20fa             // vpaddq    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40fa             // vpaddq    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60fa             // vpaddq    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1320:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1321

LBB1_1325:
	WORD $0xff31 // xor    edi, edi

LBB1_1326:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1328
	LONG $0x1458f4c5; BYTE $0xba               // vaddps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20ba             // vaddps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40ba             // vaddps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x4c58f4c5; WORD $0x60ba             // vaddps    ymm1, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB1_1328:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1329

LBB1_1333:
	WORD $0xff31 // xor    edi, edi

LBB1_1334:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1336
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1336:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1337

LBB1_1341:
	WORD $0xff31 // xor    edi, edi

LBB1_1342:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1344
	LONG $0x1459f4c5; BYTE $0xba               // vmulps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20ba             // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40ba             // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x4c59f4c5; WORD $0x60ba             // vmulps    ymm1, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB1_1344:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1345

LBB1_1349:
	WORD $0xff31 // xor    edi, edi

LBB1_1350:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1352
	LONG $0x146ffec5; BYTE $0xfa               // vmovdqu    ymm2, yword [rdx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40fa             // vmovdqu    ymm4, yword [rdx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60fa             // vmovdqu    ymm5, yword [rdx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB1_1352:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1353

LBB1_1357:
	WORD $0xff31 // xor    edi, edi

LBB1_1358:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1360
	LONG $0x1459f4c5; BYTE $0xba               // vmulps    ymm2, ymm1, yword [rdx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20ba             // vmulps    ymm3, ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40ba             // vmulps    ymm4, ymm1, yword [rdx + 4*rdi + 64]
	LONG $0x4c59f4c5; WORD $0x60ba             // vmulps    ymm1, ymm1, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB1_1360:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1461
	JMP  LBB1_1361

LBB1_1365:
	WORD $0xff31 // xor    edi, edi

LBB1_1366:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1368
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1368:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1369

LBB1_1373:
	WORD $0xff31 // xor    edi, edi

LBB1_1374:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1376
	LONG $0x0c6ffec5; BYTE $0x3a               // vmovdqu    ymm1, yword [rdx + rdi]
	LONG $0x546ffec5; WORD $0x203a             // vmovdqu    ymm2, yword [rdx + rdi + 32]
	LONG $0x5c6ffec5; WORD $0x403a             // vmovdqu    ymm3, yword [rdx + rdi + 64]
	LONG $0x646ffec5; WORD $0x603a             // vmovdqu    ymm4, yword [rdx + rdi + 96]
	LONG $0xc8f8f5c5                           // vpsubb    ymm1, ymm1, ymm0
	LONG $0xd0f8edc5                           // vpsubb    ymm2, ymm2, ymm0
	LONG $0xd8f8e5c5                           // vpsubb    ymm3, ymm3, ymm0
	LONG $0xc0f8ddc5                           // vpsubb    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1376:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1377

LBB1_1381:
	WORD $0xff31 // xor    edi, edi

LBB1_1382:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1384
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB1_1384:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1461
	JMP  LBB1_1385

LBB1_1389:
	WORD $0xff31 // xor    edi, edi

LBB1_1390:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1392
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB1_1392:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1461
	JMP  LBB1_1393

LBB1_1397:
	WORD $0xff31 // xor    edi, edi

LBB1_1398:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1400
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x603a             // vpaddb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1400:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1401

LBB1_1405:
	WORD $0xff31 // xor    edi, edi

LBB1_1406:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1408
	LONG $0x0cfcfdc5; BYTE $0x3a               // vpaddb    ymm1, ymm0, yword [rdx + rdi]
	LONG $0x54fcfdc5; WORD $0x203a             // vpaddb    ymm2, ymm0, yword [rdx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x403a             // vpaddb    ymm3, ymm0, yword [rdx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x603a             // vpaddb    ymm0, ymm0, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB1_1408:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1409

LBB1_1413:
	WORD $0xff31 // xor    edi, edi

LBB1_1414:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1416
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1416:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1417

LBB1_1421:
	WORD $0xff31 // xor    edi, edi

LBB1_1422:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1424
	LONG $0x0c6ffec5; BYTE $0xba               // vmovdqu    ymm1, yword [rdx + 4*rdi]
	LONG $0x546ffec5; WORD $0x20ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 32]
	LONG $0x5c6ffec5; WORD $0x40ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 64]
	LONG $0x646ffec5; WORD $0x60ba             // vmovdqu    ymm4, yword [rdx + 4*rdi + 96]
	LONG $0xc8faf5c5                           // vpsubd    ymm1, ymm1, ymm0
	LONG $0xd0faedc5                           // vpsubd    ymm2, ymm2, ymm0
	LONG $0xd8fae5c5                           // vpsubd    ymm3, ymm3, ymm0
	LONG $0xc0faddc5                           // vpsubd    ymm0, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1424:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1425

LBB1_1429:
	WORD $0xff31 // xor    edi, edi

LBB1_1430:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1432
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60ba             // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1432:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1433

LBB1_1437:
	WORD $0xff31 // xor    edi, edi

LBB1_1438:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1440
	LONG $0x0cfefdc5; BYTE $0xba               // vpaddd    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20ba             // vpaddd    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40ba             // vpaddd    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60ba             // vpaddd    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1440:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1441

LBB1_1445:
	WORD $0xff31 // xor    edi, edi

LBB1_1446:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1448
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba44; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1448:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1461
	JMP  LBB1_1449

LBB1_1453:
	WORD $0xff31 // xor    edi, edi

LBB1_1454:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1456
	LONG $0x407de2c4; WORD $0xba0c             // vpmulld    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x407de2c4; WORD $0xba54; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xba5c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xba44; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB1_1456:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB1_1457

LBB1_1461:
	VZEROUPPER
	RET

DATA LCDATA3<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA3<>+0x008(SB)/8, $0x000000007fffffff
DATA LCDATA3<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA3<>+0x018(SB)/8, $0x0000000000000000
DATA LCDATA3<>+0x020(SB)/8, $0x0d0c090805040100
DATA LCDATA3<>+0x028(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA3<>+0x030(SB)/8, $0x1d1c191815141110
DATA LCDATA3<>+0x038(SB)/8, $0x1f1e1d1c1d1c1918
DATA LCDATA3<>+0x040(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x048(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x050(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x058(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x060(SB)/8, $0x000000000c080400
DATA LCDATA3<>+0x068(SB)/8, $0x0000000000000000
GLOBL LCDATA3<>(SB), 8, $112

TEXT Â·_arithmetic_scalar_arr_avx2(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA3<>(SB), BP

	LONG $0x04fe8040         // cmp    sil, 4
	JG   LBB2_12
	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB2_23
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB2_43
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB2_1461
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_75
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_131
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_211
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_214
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_11
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_595
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_595

LBB2_11:
	WORD $0xf631 // xor    esi, esi

LBB2_917:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_919

LBB2_918:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_918

LBB2_919:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1461

LBB2_920:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_920
	JMP  LBB2_1461

LBB2_12:
	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB2_33
	LONG $0x05fe8040         // cmp    sil, 5
	JE   LBB2_51
	LONG $0x06fe8040         // cmp    sil, 6
	JNE  LBB2_1461
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_82
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_136
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_217
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_220
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_22
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_598
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_598

LBB2_22:
	WORD $0xf631 // xor    esi, esi

LBB2_925:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_927

LBB2_926:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_926

LBB2_927:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1461

LBB2_928:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_928
	JMP  LBB2_1461

LBB2_23:
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB2_59
	LONG $0x04fe8040         // cmp    sil, 4
	JNE  LBB2_1461
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_89
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_141
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_223
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_226
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_32
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_601
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_601

LBB2_32:
	WORD $0xc931 // xor    ecx, ecx

LBB2_933:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_935

LBB2_934:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_934

LBB2_935:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_936:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_936
	JMP  LBB2_1461

LBB2_33:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB2_67
	LONG $0x09fe8040         // cmp    sil, 9
	JNE  LBB2_1461
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_96
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_146
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_229
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_232
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_42
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_604
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_604

LBB2_42:
	WORD $0xc931 // xor    ecx, ecx

LBB2_941:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_943

LBB2_942:
	WORD $0x348b; BYTE $0x8a // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_942

LBB2_943:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_944:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	LONG $0x088a748b             // mov    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	LONG $0x0c8a748b             // mov    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_944
	JMP  LBB2_1461

LBB2_43:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_103
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_151
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_235
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_238
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_50
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_607
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_607

LBB2_50:
	WORD $0xf631 // xor    esi, esi

LBB2_949:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_951

LBB2_950:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_950

LBB2_951:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_952:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_952
	JMP  LBB2_1461

LBB2_51:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_110
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_156
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_241
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_244
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_58
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_610
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_610

LBB2_58:
	WORD $0xf631 // xor    esi, esi

LBB2_957:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_959

LBB2_958:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_958

LBB2_959:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_960:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_960
	JMP  LBB2_1461

LBB2_59:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_117
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_161
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_247
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_250
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_66
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_613
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_613

LBB2_66:
	WORD $0xf631 // xor    esi, esi

LBB2_965:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_967

LBB2_966:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_966

LBB2_967:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_968:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_968
	JMP  LBB2_1461

LBB2_67:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_124
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_166
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_253
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_256
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_74
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_616
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_616

LBB2_74:
	WORD $0xf631 // xor    esi, esi

LBB2_973:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_975

LBB2_974:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_974

LBB2_975:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_976:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_976
	JMP  LBB2_1461

LBB2_75:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_171
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_259
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_262
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_81
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_619
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_619

LBB2_81:
	WORD $0xd231 // xor    edx, edx

LBB2_981:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_983

LBB2_982:
	LONG $0x0c5cfbc5; BYTE $0xd1   // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_982

LBB2_983:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_984:
	LONG $0x0c5cfbc5; BYTE $0xd1               // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c5cfbc5; WORD $0x08d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c5cfbc5; WORD $0x10d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c5cfbc5; WORD $0x18d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_984
	JMP  LBB2_1461

LBB2_82:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_176
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_265
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_268
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_88
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_622
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_622

LBB2_88:
	WORD $0xd231 // xor    edx, edx

LBB2_989:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_991

LBB2_990:
	LONG $0x0c5cfbc5; BYTE $0xd1   // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_990

LBB2_991:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_992:
	LONG $0x0c5cfbc5; BYTE $0xd1               // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c5cfbc5; WORD $0x08d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c5cfbc5; WORD $0x10d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c5cfbc5; WORD $0x18d1             // vsubsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_992
	JMP  LBB2_1461

LBB2_89:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_181
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_271
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_274
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_95
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_625
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_625

LBB2_95:
	WORD $0xc931 // xor    ecx, ecx

LBB2_997:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB2_999

LBB2_998:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB2_998

LBB2_999:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1000:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1000
	JMP  LBB2_1461

LBB2_96:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_186
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_277
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_280
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_102
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_628
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_628

LBB2_102:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1005:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB2_1007

LBB2_1006:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB2_1006

LBB2_1007:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1008:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1008
	JMP  LBB2_1461

LBB2_103:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_191
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_283
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_286
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_109
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_631
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_631

LBB2_109:
	WORD $0xd231 // xor    edx, edx

LBB2_1013:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1015

LBB2_1014:
	LONG $0x0c58fbc5; BYTE $0xd1   // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1014

LBB2_1015:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1016:
	LONG $0x0c58fbc5; BYTE $0xd1               // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c58fbc5; WORD $0x08d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1016
	JMP  LBB2_1461

LBB2_110:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_196
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_289
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_292
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_116
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_634
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_634

LBB2_116:
	WORD $0xd231 // xor    edx, edx

LBB2_1021:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1023

LBB2_1022:
	LONG $0x0c58fbc5; BYTE $0xd1   // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1022

LBB2_1023:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1024:
	LONG $0x0c58fbc5; BYTE $0xd1               // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c58fbc5; WORD $0x08d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c58fbc5; WORD $0x10d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c58fbc5; WORD $0x18d1             // vaddsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1024
	JMP  LBB2_1461

LBB2_117:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_201
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_295
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_298
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_123
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_637
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_637

LBB2_123:
	WORD $0xd231 // xor    edx, edx

LBB2_1029:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1031

LBB2_1030:
	LONG $0x0c59fbc5; BYTE $0xd1   // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1030

LBB2_1031:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1032:
	LONG $0x0c59fbc5; BYTE $0xd1               // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c59fbc5; WORD $0x08d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c59fbc5; WORD $0x10d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c59fbc5; WORD $0x18d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1032
	JMP  LBB2_1461

LBB2_124:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_206
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_301
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_304
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fbc5         // vmovsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_130
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_640
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_640

LBB2_130:
	WORD $0xd231 // xor    edx, edx

LBB2_1037:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1039

LBB2_1038:
	LONG $0x0c59fbc5; BYTE $0xd1   // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1038

LBB2_1039:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1040:
	LONG $0x0c59fbc5; BYTE $0xd1               // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx]
	LONG $0x117bc1c4; WORD $0xd00c             // vmovsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c59fbc5; WORD $0x08d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 8]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x08 // vmovsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c59fbc5; WORD $0x10d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 16]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x10 // vmovsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c59fbc5; WORD $0x18d1             // vmulsd    xmm1, xmm0, qword [rcx + 8*rdx + 24]
	LONG $0x117bc1c4; WORD $0xd04c; BYTE $0x18 // vmovsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1040
	JMP  LBB2_1461

LBB2_131:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_307
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_135
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_643
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_643

LBB2_135:
	WORD $0xf631 // xor    esi, esi

LBB2_1045:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1047

LBB2_1046:
	WORD $0xc289             // mov    edx, eax
	WORD $0x142a; BYTE $0x31 // sub    dl, byte [rcx + rsi]
	LONG $0x30148841         // mov    byte [r8 + rsi], dl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1046

LBB2_1047:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1048:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1048
	JMP  LBB2_1461

LBB2_136:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_310
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_140
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_646
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_646

LBB2_140:
	WORD $0xf631 // xor    esi, esi

LBB2_1053:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1055

LBB2_1054:
	WORD $0xc289             // mov    edx, eax
	WORD $0x142a; BYTE $0x31 // sub    dl, byte [rcx + rsi]
	LONG $0x30148841         // mov    byte [r8 + rsi], dl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1054

LBB2_1055:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1056:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1056
	JMP  LBB2_1461

LBB2_141:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_313
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_145
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_649
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_649

LBB2_145:
	WORD $0xc931 // xor    ecx, ecx

LBB2_652:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_654
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB2_654:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1461

LBB2_655:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_655
	JMP  LBB2_1461

LBB2_146:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_316
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_150
	LONG $0x020c8d48         // lea    rcx, [rdx + rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_656
	LONG $0x000c8d49         // lea    rcx, [r8 + rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_656

LBB2_150:
	WORD $0xc931 // xor    ecx, ecx

LBB2_659:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_661
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0x8941; BYTE $0xf9 // mov    r9d, edi
	LONG $0x07f9c141         // sar    r9d, 7
	WORD $0x0144; BYTE $0xcf // add    edi, r9d
	WORD $0x3144; BYTE $0xcf // xor    edi, r9d
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB2_661:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1461

LBB2_662:
	LONG $0x0a34be0f             // movsx    esi, byte [rdx + rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08348841             // mov    byte [r8 + rcx], sil
	LONG $0x0a74be0f; BYTE $0x01 // movsx    esi, byte [rdx + rcx + 1]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xffc1; BYTE $0x07     // sar    edi, 7
	WORD $0xfe01                 // add    esi, edi
	WORD $0xfe31                 // xor    esi, edi
	LONG $0x08748841; BYTE $0x01 // mov    byte [r8 + rcx + 1], sil
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_662
	JMP  LBB2_1461

LBB2_151:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_319
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_155
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_663
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_663

LBB2_155:
	WORD $0xf631 // xor    esi, esi

LBB2_1061:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1063

LBB2_1062:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1062

LBB2_1063:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1064:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1064
	JMP  LBB2_1461

LBB2_156:
	WORD $0xff83; BYTE $0x02                   // cmp    edi, 2
	JE   LBB2_322
	WORD $0xff83; BYTE $0x03                   // cmp    edi, 3
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_160
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_666
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_666

LBB2_160:
	WORD $0xf631 // xor    esi, esi

LBB2_1069:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1071

LBB2_1070:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1070

LBB2_1071:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1072:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1072
	JMP  LBB2_1461

LBB2_161:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_325
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_165
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_669
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_669

LBB2_165:
	WORD $0xff31 // xor    edi, edi

LBB2_859:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_861

LBB2_860:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_860

LBB2_861:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_862:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_862
	JMP  LBB2_1461

LBB2_166:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_328
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_170
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_671
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_671

LBB2_170:
	WORD $0xff31 // xor    edi, edi

LBB2_869:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_871

LBB2_870:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_870

LBB2_871:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_872:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_872
	JMP  LBB2_1461

LBB2_171:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_331
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_175
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_673
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_673

LBB2_175:
	WORD $0xf631 // xor    esi, esi

LBB2_1077:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1079

LBB2_1078:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1078

LBB2_1079:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1461

LBB2_1080:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1080
	JMP  LBB2_1461

LBB2_176:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_334
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_180
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_676
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_676

LBB2_180:
	WORD $0xf631 // xor    esi, esi

LBB2_1085:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1087

LBB2_1086:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1086

LBB2_1087:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1461

LBB2_1088:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1088
	JMP  LBB2_1461

LBB2_181:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_337
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_185
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_679
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_679

LBB2_185:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1093:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1095

LBB2_1094:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1094

LBB2_1095:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1096:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1096
	JMP  LBB2_1461

LBB2_186:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_340
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_190
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_682
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_682

LBB2_190:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1101:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1103

LBB2_1102:
	LONG $0xca348b48 // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1102

LBB2_1103:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1104:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	LONG $0xca748b48; BYTE $0x10 // mov    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	LONG $0xca748b48; BYTE $0x18 // mov    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1104
	JMP  LBB2_1461

LBB2_191:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_343
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_195
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_685
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_685

LBB2_195:
	WORD $0xf631 // xor    esi, esi

LBB2_1109:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1111

LBB2_1110:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1110

LBB2_1111:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1112:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1112
	JMP  LBB2_1461

LBB2_196:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_346
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_200
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_688
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_688

LBB2_200:
	WORD $0xf631 // xor    esi, esi

LBB2_1117:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1119

LBB2_1118:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1118

LBB2_1119:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1120:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1120
	JMP  LBB2_1461

LBB2_201:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_349
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_205
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_691
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_691

LBB2_205:
	WORD $0xf631 // xor    esi, esi

LBB2_1125:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1127

LBB2_1126:
	LONG $0xf1148b48 // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48 // imul    rdx, rax
	LONG $0xf0148949 // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1126

LBB2_1127:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1128:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1128
	JMP  LBB2_1461

LBB2_206:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_352
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1461
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_210
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_694
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_694

LBB2_210:
	WORD $0xf631 // xor    esi, esi

LBB2_1133:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1135

LBB2_1134:
	LONG $0xf1148b48 // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48 // imul    rdx, rax
	LONG $0xf0148949 // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1134

LBB2_1135:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1136:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1136
	JMP  LBB2_1461

LBB2_211:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_213
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_697
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_697

LBB2_213:
	WORD $0xf631 // xor    esi, esi

LBB2_1141:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1143

LBB2_1142:
	WORD $0xc789                 // mov    edi, eax
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1142

LBB2_1143:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1144:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1144
	JMP  LBB2_1461

LBB2_214:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_216
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_700
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_700

LBB2_216:
	WORD $0xf631 // xor    esi, esi

LBB2_1149:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1151

LBB2_1150:
	WORD $0xc789                 // mov    edi, eax
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1150

LBB2_1151:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1152:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1152
	JMP  LBB2_1461

LBB2_217:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_219
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_703
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_703

LBB2_219:
	WORD $0xf631 // xor    esi, esi

LBB2_1157:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1159

LBB2_1158:
	WORD $0xc789                 // mov    edi, eax
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1158

LBB2_1159:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1160:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1160
	JMP  LBB2_1461

LBB2_220:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_222
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_706
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_706

LBB2_222:
	WORD $0xf631 // xor    esi, esi

LBB2_1165:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1167

LBB2_1166:
	WORD $0xc789                 // mov    edi, eax
	LONG $0x713c2b66             // sub    di, word [rcx + 2*rsi]
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1166

LBB2_1167:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1168:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1168
	JMP  LBB2_1461

LBB2_223:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_225
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_709
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_709

LBB2_225:
	WORD $0xc931 // xor    ecx, ecx

LBB2_879:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_881

LBB2_880:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB2_880

LBB2_881:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1461

LBB2_882:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB2_882
	JMP  LBB2_1461

LBB2_226:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_228
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_711
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_711

LBB2_228:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1173:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB2_1175
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB2_1175:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1461

LBB2_1176:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1176
	JMP  LBB2_1461

LBB2_229:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_231
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_714
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_714

LBB2_231:
	WORD $0xc931 // xor    ecx, ecx

LBB2_889:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_891

LBB2_890:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB2_890

LBB2_891:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1461

LBB2_892:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB2_892
	JMP  LBB2_1461

LBB2_232:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_234
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_716
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_716

LBB2_234:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1181:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB2_1183
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB2_1183:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1461

LBB2_1184:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1184
	JMP  LBB2_1461

LBB2_235:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_237
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_719
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_719

LBB2_237:
	WORD $0xf631 // xor    esi, esi

LBB2_1189:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1191

LBB2_1190:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1190

LBB2_1191:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1192:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1192
	JMP  LBB2_1461

LBB2_238:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_240
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_722
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_722

LBB2_240:
	WORD $0xf631 // xor    esi, esi

LBB2_1197:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1199

LBB2_1198:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1198

LBB2_1199:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1200:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1200
	JMP  LBB2_1461

LBB2_241:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_243
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_725
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_725

LBB2_243:
	WORD $0xf631 // xor    esi, esi

LBB2_1205:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1207

LBB2_1206:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1206

LBB2_1207:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1208:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1208
	JMP  LBB2_1461

LBB2_244:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_246
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_728
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_728

LBB2_246:
	WORD $0xf631 // xor    esi, esi

LBB2_1213:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1215

LBB2_1214:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc7     // add    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1214

LBB2_1215:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1216:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1216
	JMP  LBB2_1461

LBB2_247:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_249
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_731
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_731

LBB2_249:
	WORD $0xf631 // xor    esi, esi

LBB2_1221:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1223

LBB2_1222:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1222

LBB2_1223:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1224:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1224
	JMP  LBB2_1461

LBB2_250:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_252
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_734
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_734

LBB2_252:
	WORD $0xf631 // xor    esi, esi

LBB2_1229:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1231

LBB2_1230:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1230

LBB2_1231:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1232:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1232
	JMP  LBB2_1461

LBB2_253:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_255
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_737
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_737

LBB2_255:
	WORD $0xf631 // xor    esi, esi

LBB2_1237:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1239

LBB2_1238:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1238

LBB2_1239:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1240:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1240
	JMP  LBB2_1461

LBB2_256:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_258
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_740
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_740

LBB2_258:
	WORD $0xf631 // xor    esi, esi

LBB2_1245:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd2 // mov    rdx, r10
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_1247

LBB2_1246:
	LONG $0x713cb70f             // movzx    edi, word [rcx + 2*rsi]
	LONG $0xf8af0f66             // imul    di, ax
	LONG $0x3c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], di
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB2_1246

LBB2_1247:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1248:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1248
	JMP  LBB2_1461

LBB2_259:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_261
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_743
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_743

LBB2_261:
	WORD $0xf631 // xor    esi, esi

LBB2_1253:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1255

LBB2_1254:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1254

LBB2_1255:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1461

LBB2_1256:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1256
	JMP  LBB2_1461

LBB2_262:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_264
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_746
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_746

LBB2_264:
	WORD $0xd231 // xor    edx, edx

LBB2_1261:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1263

LBB2_1262:
	LONG $0x0c5cfac5; BYTE $0x91   // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1262

LBB2_1263:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1264:
	LONG $0x0c5cfac5; BYTE $0x91               // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c5cfac5; WORD $0x0491             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c5cfac5; WORD $0x0891             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c5cfac5; WORD $0x0c91             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1264
	JMP  LBB2_1461

LBB2_265:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_267
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_749
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_749

LBB2_267:
	WORD $0xf631 // xor    esi, esi

LBB2_1269:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1271

LBB2_1270:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1270

LBB2_1271:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1461

LBB2_1272:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1272
	JMP  LBB2_1461

LBB2_268:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_270
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_752
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_752

LBB2_270:
	WORD $0xd231 // xor    edx, edx

LBB2_1277:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1279

LBB2_1278:
	LONG $0x0c5cfac5; BYTE $0x91   // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1278

LBB2_1279:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1280:
	LONG $0x0c5cfac5; BYTE $0x91               // vsubss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c5cfac5; WORD $0x0491             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c5cfac5; WORD $0x0891             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c5cfac5; WORD $0x0c91             // vsubss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1280
	JMP  LBB2_1461

LBB2_271:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_273
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_755
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_755

LBB2_273:
	WORD $0xc931 // xor    ecx, ecx

LBB2_758:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_760
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB2_760:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1461

LBB2_761:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_761
	JMP  LBB2_1461

LBB2_274:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_276
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_762
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_762

LBB2_276:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1285:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1288
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1287:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1287

LBB2_1288:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB2_1461
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1290:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1290
	JMP  LBB2_1461

LBB2_277:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_279
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_765
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_765

LBB2_279:
	WORD $0xc931 // xor    ecx, ecx

LBB2_768:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_770
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB2_770:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1461

LBB2_771:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_771
	JMP  LBB2_1461

LBB2_280:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_282
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_772
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_772

LBB2_282:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1295:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1298
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1297:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1297

LBB2_1298:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB2_1461
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1300:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1300
	JMP  LBB2_1461

LBB2_283:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_285
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_775
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_775

LBB2_285:
	WORD $0xf631 // xor    esi, esi

LBB2_1305:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1307

LBB2_1306:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1306

LBB2_1307:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1308:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1308
	JMP  LBB2_1461

LBB2_286:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_288
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_778
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_778

LBB2_288:
	WORD $0xd231 // xor    edx, edx

LBB2_1313:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1315

LBB2_1314:
	LONG $0x0c58fac5; BYTE $0x91   // vaddss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1314

LBB2_1315:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1316:
	LONG $0x0c58fac5; BYTE $0x91               // vaddss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c58fac5; WORD $0x0491             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c58fac5; WORD $0x0891             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0c91             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1316
	JMP  LBB2_1461

LBB2_289:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_291
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_781
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_781

LBB2_291:
	WORD $0xf631 // xor    esi, esi

LBB2_1321:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1323

LBB2_1322:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1322

LBB2_1323:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1324:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1324
	JMP  LBB2_1461

LBB2_292:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_294
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_784
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_784

LBB2_294:
	WORD $0xd231 // xor    edx, edx

LBB2_1329:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1331

LBB2_1330:
	LONG $0x0c58fac5; BYTE $0x91   // vaddss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1330

LBB2_1331:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1332:
	LONG $0x0c58fac5; BYTE $0x91               // vaddss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c58fac5; WORD $0x0491             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c58fac5; WORD $0x0891             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c58fac5; WORD $0x0c91             // vaddss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1332
	JMP  LBB2_1461

LBB2_295:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_297
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_787
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_787

LBB2_297:
	WORD $0xf631 // xor    esi, esi

LBB2_1337:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1339

LBB2_1338:
	LONG $0xf1148b48 // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48 // imul    rdx, rax
	LONG $0xf0148949 // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1338

LBB2_1339:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1340:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1340
	JMP  LBB2_1461

LBB2_298:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_300
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_790
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_790

LBB2_300:
	WORD $0xd231 // xor    edx, edx

LBB2_1345:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1347

LBB2_1346:
	LONG $0x0c59fac5; BYTE $0x91   // vmulss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1346

LBB2_1347:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1348:
	LONG $0x0c59fac5; BYTE $0x91               // vmulss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c59fac5; WORD $0x0491             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c59fac5; WORD $0x0891             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c59fac5; WORD $0x0c91             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1348
	JMP  LBB2_1461

LBB2_301:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_303
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_793
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_793

LBB2_303:
	WORD $0xf631 // xor    esi, esi

LBB2_1353:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1355

LBB2_1354:
	LONG $0xf1148b48 // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48 // imul    rdx, rax
	LONG $0xf0148949 // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1354

LBB2_1355:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1356:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1356
	JMP  LBB2_1461

LBB2_304:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	LONG $0x0210fac5         // vmovss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_306
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_796
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_796

LBB2_306:
	WORD $0xd231 // xor    edx, edx

LBB2_1361:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1363

LBB2_1362:
	LONG $0x0c59fac5; BYTE $0x91   // vmulss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1362

LBB2_1363:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1364:
	LONG $0x0c59fac5; BYTE $0x91               // vmulss    xmm1, xmm0, dword [rcx + 4*rdx]
	LONG $0x117ac1c4; WORD $0x900c             // vmovss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c59fac5; WORD $0x0491             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 4]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x04 // vmovss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c59fac5; WORD $0x0891             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 8]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x08 // vmovss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c59fac5; WORD $0x0c91             // vmulss    xmm1, xmm0, dword [rcx + 4*rdx + 12]
	LONG $0x117ac1c4; WORD $0x904c; BYTE $0x0c // vmovss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1364
	JMP  LBB2_1461

LBB2_307:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_309
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_799
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_799

LBB2_309:
	WORD $0xf631 // xor    esi, esi

LBB2_1369:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1371

LBB2_1370:
	WORD $0xc289             // mov    edx, eax
	WORD $0x142a; BYTE $0x31 // sub    dl, byte [rcx + rsi]
	LONG $0x30148841         // mov    byte [r8 + rsi], dl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1370

LBB2_1371:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1372:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1372
	JMP  LBB2_1461

LBB2_310:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_312
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_802
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_802

LBB2_312:
	WORD $0xf631 // xor    esi, esi

LBB2_1377:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1379

LBB2_1378:
	WORD $0xc289             // mov    edx, eax
	WORD $0x142a; BYTE $0x31 // sub    dl, byte [rcx + rsi]
	LONG $0x30148841         // mov    byte [r8 + rsi], dl
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1378

LBB2_1379:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1380:
	WORD $0xc289                 // mov    edx, eax
	WORD $0x142a; BYTE $0x31     // sub    dl, byte [rcx + rsi]
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0131542a             // sub    dl, byte [rcx + rsi + 1]
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0231542a             // sub    dl, byte [rcx + rsi + 2]
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	WORD $0xc289                 // mov    edx, eax
	LONG $0x0331542a             // sub    dl, byte [rcx + rsi + 3]
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1380
	JMP  LBB2_1461

LBB2_313:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_315
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB2_805
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB2_805

LBB2_315:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1385:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1387

LBB2_1386:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1386

LBB2_1387:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1388:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1388
	JMP  LBB2_1461

LBB2_316:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_318
	LONG $0x120c8d4a                           // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1                   // cmp    rcx, r8
	JBE  LBB2_808
	LONG $0x100c8d4b                           // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JBE  LBB2_808

LBB2_318:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1393:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1395

LBB2_1394:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1394

LBB2_1395:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1461

LBB2_1396:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1396
	JMP  LBB2_1461

LBB2_319:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_321
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_811
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_811

LBB2_321:
	WORD $0xf631 // xor    esi, esi

LBB2_1401:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1403

LBB2_1402:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1402

LBB2_1403:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1404:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1404
	JMP  LBB2_1461

LBB2_322:
	WORD $0x8545; BYTE $0xc9                   // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028a                               // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca                   // mov    r10d, r9d
	LONG $0x80f98141; WORD $0x0000; BYTE $0x00 // cmp    r9d, 128
	JB   LBB2_324
	LONG $0x11148d4a                           // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2                   // cmp    rdx, r8
	JBE  LBB2_814
	LONG $0x10148d4b                           // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JBE  LBB2_814

LBB2_324:
	WORD $0xf631 // xor    esi, esi

LBB2_1409:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1411

LBB2_1410:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1410

LBB2_1411:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1412:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1412
	JMP  LBB2_1461

LBB2_325:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_327
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_817
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_817

LBB2_327:
	WORD $0xff31 // xor    edi, edi

LBB2_899:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_901

LBB2_900:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_900

LBB2_901:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_902:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_902
	JMP  LBB2_1461

LBB2_328:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_330
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_819
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_819

LBB2_330:
	WORD $0xff31 // xor    edi, edi

LBB2_909:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_911

LBB2_910:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_910

LBB2_911:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_912:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_912
	JMP  LBB2_1461

LBB2_331:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_333
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_821
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_821

LBB2_333:
	WORD $0xf631 // xor    esi, esi

LBB2_1417:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1419

LBB2_1418:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1418

LBB2_1419:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1461

LBB2_1420:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1420
	JMP  LBB2_1461

LBB2_334:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_336
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_824
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_824

LBB2_336:
	WORD $0xf631 // xor    esi, esi

LBB2_1425:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1427

LBB2_1426:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1426

LBB2_1427:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1461

LBB2_1428:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1428
	JMP  LBB2_1461

LBB2_337:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_339
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_827
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_827

LBB2_339:
	WORD $0xc931 // xor    ecx, ecx

LBB2_830:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_832
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB2_832:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1461

LBB2_833:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_833
	JMP  LBB2_1461

LBB2_340:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_342
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_834
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_834

LBB2_342:
	WORD $0xc931 // xor    ecx, ecx

LBB2_837:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_839
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB2_839:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1461

LBB2_840:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_840
	JMP  LBB2_1461

LBB2_343:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_345
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_841
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_841

LBB2_345:
	WORD $0xf631 // xor    esi, esi

LBB2_1433:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1435

LBB2_1434:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1434

LBB2_1435:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1436:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1436
	JMP  LBB2_1461

LBB2_346:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_348
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_844
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_844

LBB2_348:
	WORD $0xf631 // xor    esi, esi

LBB2_1441:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1443

LBB2_1442:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1442

LBB2_1443:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1444:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1444
	JMP  LBB2_1461

LBB2_349:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_351
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_847
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_847

LBB2_351:
	WORD $0xf631 // xor    esi, esi

LBB2_1449:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1451

LBB2_1450:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1450

LBB2_1451:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1452:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1452
	JMP  LBB2_1461

LBB2_352:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1461
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_354
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_850
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_850

LBB2_354:
	WORD $0xf631 // xor    esi, esi

LBB2_1457:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1459

LBB2_1458:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1458

LBB2_1459:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1461

LBB2_1460:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1460
	JMP  LBB2_1461

LBB2_595:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_913
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_597:
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60b9             // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_597
	JMP  LBB2_914

LBB2_598:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_921
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_600:
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60b9             // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_600
	JMP  LBB2_922

LBB2_601:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_929
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_603:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_603
	JMP  LBB2_930

LBB2_604:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_937
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_606:
	LONG $0x0410fcc5; BYTE $0xba               // vmovups    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c10fcc5; WORD $0x20ba             // vmovups    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40ba             // vmovups    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60ba             // vmovups    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb804             // vmovups    yword [r8 + 4*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xb854; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm3
	QUAD $0x000080ba846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0ba9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm0
	QUAD $0x00a0b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm1
	QUAD $0x00c0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm2
	QUAD $0x00e0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm3
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_606
	JMP  LBB2_938

LBB2_607:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_945
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_609:
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60b9             // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_609
	JMP  LBB2_946

LBB2_610:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_953
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_612:
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60b9             // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_612
	JMP  LBB2_954

LBB2_613:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_961
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_615:
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb964; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080b98c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x00a0b994407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x00c0b99c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x00e0b9a4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_615
	JMP  LBB2_962

LBB2_616:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_969
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_618:
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb964; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080b98c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x00a0b994407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x00c0b99c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x00e0b9a4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_618
	JMP  LBB2_970

LBB2_619:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_977
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_621:
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c5cf5c5; WORD $0x60f9             // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9945cf5c5; BYTE $0x00       // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c5cf5c5; BYTE $0x00       // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a45cf5c5; BYTE $0x00       // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac5cf5c5; BYTE $0x00       // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_621
	JMP  LBB2_978

LBB2_622:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_985
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_624:
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c5cf5c5; WORD $0x60f9             // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9945cf5c5; BYTE $0x00       // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c5cf5c5; BYTE $0x00       // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a45cf5c5; BYTE $0x00       // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac5cf5c5; BYTE $0x00       // vsubpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_624
	JMP  LBB2_986

LBB2_625:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB2_993
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_627:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_627
	JMP  LBB2_994

LBB2_628:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc1       // mov    r9, rax
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB2_1001
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_630:
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60fa             // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080fa8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0faa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_630
	JMP  LBB2_1002

LBB2_631:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1009
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_633:
	LONG $0x1458f5c5; BYTE $0xf9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20f9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40f9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c58f5c5; WORD $0x60f9             // vaddpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f99458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_633
	JMP  LBB2_1010

LBB2_634:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1017
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_636:
	LONG $0x1458f5c5; BYTE $0xf9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20f9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40f9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c58f5c5; WORD $0x60f9             // vaddpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f99458f5c5; BYTE $0x00       // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c58f5c5; BYTE $0x00       // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a458f5c5; BYTE $0x00       // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac58f5c5; BYTE $0x00       // vaddpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_636
	JMP  LBB2_1018

LBB2_637:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1025
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_639:
	LONG $0x1459f5c5; BYTE $0xf9               // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20f9             // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40f9             // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c59f5c5; WORD $0x60f9             // vmulpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f99459f5c5; BYTE $0x00       // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c59f5c5; BYTE $0x00       // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a459f5c5; BYTE $0x00       // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac59f5c5; BYTE $0x00       // vmulpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_639
	JMP  LBB2_1026

LBB2_640:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xf0     // and    edx, -16
	LONG $0x197de2c4; BYTE $0xc8 // vbroadcastsd    ymm1, xmm0
	LONG $0xf0728d48             // lea    rsi, [rdx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1033
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_642:
	LONG $0x1459f5c5; BYTE $0xf9               // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20f9             // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40f9             // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x6c59f5c5; WORD $0x60f9             // vmulpd    ymm5, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf86c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f99459f5c5; BYTE $0x00       // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c59f5c5; BYTE $0x00       // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a459f5c5; BYTE $0x00       // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac59f5c5; BYTE $0x00       // vmulpd    ymm5, ymm1, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f894117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a4117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac117dc1c4; WORD $0x0000     // vmovupd    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_642
	JMP  LBB2_1034

LBB2_643:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1041
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_645:
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x6039             // vpsubb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_645
	JMP  LBB2_1042

LBB2_646:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1049
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_648:
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x6039             // vpsubb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_648
	JMP  LBB2_1050

LBB2_649:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x60 // vmovdqa    xmm0, oword 96[rbp] /* [rip + .LCPI2_3] */

LBB2_650:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_650
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_652

LBB2_656:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ff9c5; BYTE $0x60 // vmovdqa    xmm0, oword 96[rbp] /* [rip + .LCPI2_3] */

LBB2_657:
	LONG $0x217de2c4; WORD $0x320c             // vpmovsxbd    ymm1, qword [rdx + rsi]
	LONG $0x217de2c4; WORD $0x3254; BYTE $0x08 // vpmovsxbd    ymm2, qword [rdx + rsi + 8]
	LONG $0x217de2c4; WORD $0x325c; BYTE $0x10 // vpmovsxbd    ymm3, qword [rdx + rsi + 16]
	LONG $0x217de2c4; WORD $0x3264; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdx + rsi + 24]
	LONG $0xe172d5c5; BYTE $0x07               // vpsrad    ymm5, ymm1, 7
	LONG $0xe272cdc5; BYTE $0x07               // vpsrad    ymm6, ymm2, 7
	LONG $0xe372c5c5; BYTE $0x07               // vpsrad    ymm7, ymm3, 7
	LONG $0xe472bdc5; BYTE $0x07               // vpsrad    ymm8, ymm4, 7
	LONG $0xc9fed5c5                           // vpaddd    ymm1, ymm5, ymm1
	LONG $0xd2fecdc5                           // vpaddd    ymm2, ymm6, ymm2
	LONG $0xdbfec5c5                           // vpaddd    ymm3, ymm7, ymm3
	LONG $0xe4febdc5                           // vpaddd    ymm4, ymm8, ymm4
	LONG $0xcdeff5c5                           // vpxor    ymm1, ymm1, ymm5
	LONG $0xd6efedc5                           // vpxor    ymm2, ymm2, ymm6
	LONG $0xdfefe5c5                           // vpxor    ymm3, ymm3, ymm7
	LONG $0xe4efbdc5                           // vpxor    ymm4, ymm8, ymm4
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x7f7ec1c4; WORD $0x300c             // vmovdqu    yword [r8 + rsi], ymm1
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_657
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_659

LBB2_663:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1057
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_665:
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x6039             // vpaddb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_665
	JMP  LBB2_1058

LBB2_666:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1065
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_668:
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x6039             // vpaddb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_668
	JMP  LBB2_1066

LBB2_669:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB2_853
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB2_855

LBB2_671:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB2_863
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB2_865

LBB2_673:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1073
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_675:
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60f9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_675
	JMP  LBB2_1074

LBB2_676:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1081
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_678:
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60f9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_678
	JMP  LBB2_1082

LBB2_679:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1089
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_681:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_681
	JMP  LBB2_1090

LBB2_682:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1097
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_684:
	LONG $0x0410fcc5; BYTE $0xfa               // vmovups    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c10fcc5; WORD $0x20fa             // vmovups    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x5410fcc5; WORD $0x40fa             // vmovups    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c10fcc5; WORD $0x60fa             // vmovups    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x117cc1c4; WORD $0xf804             // vmovups    yword [r8 + 8*rdi], ymm0
	LONG $0x117cc1c4; WORD $0xf84c; BYTE $0x20 // vmovups    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0xf854; BYTE $0x40 // vmovups    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0xf85c; BYTE $0x60 // vmovups    yword [r8 + 8*rdi + 96], ymm3
	QUAD $0x000080fa846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 8*rdi + 128]
	QUAD $0x0000a0fa8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 8*rdi + 160]
	QUAD $0x0000c0fa946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + 8*rdi + 192]
	QUAD $0x0000e0fa9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + 8*rdi + 224]
	QUAD $0x0080f8847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm0
	QUAD $0x00a0f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm1
	QUAD $0x00c0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm2
	QUAD $0x00e0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm3
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_684
	JMP  LBB2_1098

LBB2_685:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1105
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_687:
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60f9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_687
	JMP  LBB2_1106

LBB2_688:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1113
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_690:
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60f9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_690
	JMP  LBB2_1114

LBB2_691:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1121
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_693:
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rcx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_693
	JMP  LBB2_1122

LBB2_694:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1129
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_696:
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rcx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_696
	JMP  LBB2_1130

LBB2_697:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1137
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_699:
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x2079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4079             // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x6079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_699
	JMP  LBB2_1138

LBB2_700:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1145
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_702:
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x2079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4079             // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x6079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_702
	JMP  LBB2_1146

LBB2_703:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1153
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_705:
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x2079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4079             // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x6079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_705
	JMP  LBB2_1154

LBB2_706:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1161
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_708:
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54f9fdc5; WORD $0x2079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cf9fdc5; WORD $0x4079             // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54f9fdc5; WORD $0x6079             // vpsubw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_708
	JMP  LBB2_1162

LBB2_709:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB2_873
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_875

LBB2_711:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1169
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x20 // vmovdqa    ymm0, yword 32[rbp] /* [rip + .LCPI2_2] */

LBB2_713:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_713
	JMP  LBB2_1170

LBB2_714:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x05efc148         // shr    rdi, 5
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB2_883
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_885

LBB2_716:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0718d48             // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1177
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0xfee78348             // and    rdi, -2
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x456ffdc5; BYTE $0x20 // vmovdqa    ymm0, yword 32[rbp] /* [rip + .LCPI2_2] */

LBB2_718:
	LONG $0x237de2c4; WORD $0x720c             // vpmovsxwd    ymm1, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x10 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 16]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x7f7ac1c4; WORD $0x700c             // vmovdqu    oword [r8 + 2*rsi], xmm1
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x20 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 32]
	LONG $0x237de2c4; WORD $0x7254; BYTE $0x30 // vpmovsxwd    ymm2, oword [rdx + 2*rsi + 48]
	LONG $0xe272e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm2, 15
	LONG $0xe172ddc5; BYTE $0x0f               // vpsrad    ymm4, ymm1, 15
	LONG $0xc9feddc5                           // vpaddd    ymm1, ymm4, ymm1
	LONG $0xd2fee5c5                           // vpaddd    ymm2, ymm3, ymm2
	LONG $0xd3efedc5                           // vpxor    ymm2, ymm2, ymm3
	LONG $0xcceff5c5                           // vpxor    ymm1, ymm1, ymm4
	LONG $0x0075e2c4; BYTE $0xc8               // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0               // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0x7f7ac1c4; WORD $0x7054; BYTE $0x30 // vmovdqu    oword [r8 + 2*rsi + 48], xmm2
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x20 // vmovdqu    oword [r8 + 2*rsi + 32], xmm1
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_718
	JMP  LBB2_1178

LBB2_719:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1185
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_721:
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x2079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4079             // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x6079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_721
	JMP  LBB2_1186

LBB2_722:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1193
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_724:
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x2079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4079             // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x6079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_724
	JMP  LBB2_1194

LBB2_725:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1201
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_727:
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x2079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4079             // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x6079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_727
	JMP  LBB2_1202

LBB2_728:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1209
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_730:
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54fdfdc5; WORD $0x2079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cfdfdc5; WORD $0x4079             // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54fdfdc5; WORD $0x6079             // vpaddw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_730
	JMP  LBB2_1210

LBB2_731:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1217
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_733:
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x2079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x4079             // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x6079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_733
	JMP  LBB2_1218

LBB2_734:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1225
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_736:
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x2079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x4079             // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x6079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_736
	JMP  LBB2_1226

LBB2_737:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1233
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_739:
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x2079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x4079             // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x6079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_739
	JMP  LBB2_1234

LBB2_740:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1241
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_742:
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x54d5fdc5; WORD $0x2079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm2
	LONG $0x4cd5fdc5; WORD $0x4079             // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi + 64]
	LONG $0x54d5fdc5; WORD $0x6079             // vpmullw    ymm2, ymm0, yword [rcx + 2*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x784c; BYTE $0x40 // vmovdqu    yword [r8 + 2*rdi + 64], ymm1
	LONG $0x7f7ec1c4; WORD $0x7854; BYTE $0x60 // vmovdqu    yword [r8 + 2*rdi + 96], ymm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_742
	JMP  LBB2_1242

LBB2_743:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1249
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_745:
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60f9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_745
	JMP  LBB2_1250

LBB2_746:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1257
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_748:
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c5cf4c5; WORD $0x60b9             // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b9945cf4c5; BYTE $0x00       // vsubps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c5cf4c5; BYTE $0x00       // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a45cf4c5; BYTE $0x00       // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac5cf4c5; BYTE $0x00       // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_748
	JMP  LBB2_1258

LBB2_749:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9c1c4; BYTE $0xc3 // vmovq    xmm0, r11
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1265
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_751:
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64fbfdc5; WORD $0x60f9             // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cfbfdc5; BYTE $0x00       // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994fbfdc5; BYTE $0x00       // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cfbfdc5; BYTE $0x00       // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4fbfdc5; BYTE $0x00       // vpsubq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_751
	JMP  LBB2_1266

LBB2_752:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1273
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_754:
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c5cf4c5; WORD $0x60b9             // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b9945cf4c5; BYTE $0x00       // vsubps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c5cf4c5; BYTE $0x00       // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a45cf4c5; BYTE $0x00       // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac5cf4c5; BYTE $0x00       // vsubps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_754
	JMP  LBB2_1274

LBB2_755:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_756:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_756
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_758

LBB2_762:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1281
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x0845 // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI2_1] */

LBB2_764:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_764
	JMP  LBB2_1282

LBB2_765:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB2_766:
	LONG $0x0c6ffec5; BYTE $0xf2               // vmovdqu    ymm1, yword [rdx + 8*rsi]
	LONG $0x546ffec5; WORD $0x20f2             // vmovdqu    ymm2, yword [rdx + 8*rsi + 32]
	LONG $0x5c6ffec5; WORD $0x40f2             // vmovdqu    ymm3, yword [rdx + 8*rsi + 64]
	LONG $0xe1fbfdc5                           // vpsubq    ymm4, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x10cc             // vblendvpd    ymm1, ymm1, ymm4, ymm1
	LONG $0x646ffec5; WORD $0x60f2             // vmovdqu    ymm4, yword [rdx + 8*rsi + 96]
	LONG $0xeafbfdc5                           // vpsubq    ymm5, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x20d5             // vblendvpd    ymm2, ymm2, ymm5, ymm2
	LONG $0xebfbfdc5                           // vpsubq    ymm5, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x30dd             // vblendvpd    ymm3, ymm3, ymm5, ymm3
	LONG $0xecfbfdc5                           // vpsubq    ymm5, ymm0, ymm4
	LONG $0x4b5de3c4; WORD $0x40e5             // vblendvpd    ymm4, ymm4, ymm5, ymm4
	LONG $0x117dc1c4; WORD $0xf00c             // vmovupd    yword [r8 + 8*rsi], ymm1
	LONG $0x117dc1c4; WORD $0xf054; BYTE $0x20 // vmovupd    yword [r8 + 8*rsi + 32], ymm2
	LONG $0x117dc1c4; WORD $0xf05c; BYTE $0x40 // vmovupd    yword [r8 + 8*rsi + 64], ymm3
	LONG $0x117dc1c4; WORD $0xf064; BYTE $0x60 // vmovupd    yword [r8 + 8*rsi + 96], ymm4
	LONG $0x10c68348                           // add    rsi, 16
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_766
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_768

LBB2_772:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0718d48               // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x05e9c149               // shr    r9, 5
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1291
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0xfee68348               // and    rsi, -2
	WORD $0xf748; BYTE $0xde       // neg    rsi
	WORD $0xff31                   // xor    edi, edi
	LONG $0x587de2c4; WORD $0x0845 // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI2_1] */

LBB2_774:
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x64dbfdc5; WORD $0x60ba             // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080ba8cdbfdc5; BYTE $0x00       // vpand    ymm1, ymm0, yword [rdx + 4*rdi + 128]
	QUAD $0x0000a0ba94dbfdc5; BYTE $0x00       // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 160]
	QUAD $0x0000c0ba9cdbfdc5; BYTE $0x00       // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 192]
	QUAD $0x0000e0baa4dbfdc5; BYTE $0x00       // vpand    ymm4, ymm0, yword [rdx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_774
	JMP  LBB2_1292

LBB2_775:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1301
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_777:
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60f9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_777
	JMP  LBB2_1302

LBB2_778:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1309
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_780:
	LONG $0x1458f4c5; BYTE $0xb9               // vaddps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20b9             // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40b9             // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c58f4c5; WORD $0x60b9             // vaddps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b99458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_780
	JMP  LBB2_1310

LBB2_781:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1317
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_783:
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x64d4fdc5; WORD $0x60f9             // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm4
	QUAD $0x000080f98cd4fdc5; BYTE $0x00       // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f994d4fdc5; BYTE $0x00       // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f99cd4fdc5; BYTE $0x00       // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9a4d4fdc5; BYTE $0x00       // vpaddq    ymm4, ymm0, yword [rcx + 8*rdi + 224]
	QUAD $0x0080f88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm1
	QUAD $0x00a0f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm2
	QUAD $0x00c0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm3
	QUAD $0x00e0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm4
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_783
	JMP  LBB2_1318

LBB2_784:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1325
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_786:
	LONG $0x1458f4c5; BYTE $0xb9               // vaddps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20b9             // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40b9             // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c58f4c5; WORD $0x60b9             // vaddps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b99458f4c5; BYTE $0x00       // vaddps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c58f4c5; BYTE $0x00       // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a458f4c5; BYTE $0x00       // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac58f4c5; BYTE $0x00       // vaddps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_786
	JMP  LBB2_1326

LBB2_787:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1333
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_789:
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rcx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_789
	JMP  LBB2_1334

LBB2_790:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1341
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_792:
	LONG $0x1459f4c5; BYTE $0xb9               // vmulps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20b9             // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40b9             // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c59f4c5; WORD $0x60b9             // vmulps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b99459f4c5; BYTE $0x00       // vmulps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c59f4c5; BYTE $0x00       // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a459f4c5; BYTE $0x00       // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac59f4c5; BYTE $0x00       // vmulps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_792
	JMP  LBB2_1342

LBB2_793:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	LONG $0xd073f5c5; BYTE $0x20 // vpsrlq    ymm1, ymm0, 32
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1349
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_795:
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf86c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm5
	QUAD $0x000080f9946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rcx + 8*rdi + 128]
	QUAD $0x0000a0f99c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rcx + 8*rdi + 160]
	QUAD $0x0000c0f9a46ffec5; BYTE $0x00       // vmovdqu    ymm4, yword [rcx + 8*rdi + 192]
	QUAD $0x0000e0f9ac6ffec5; BYTE $0x00       // vmovdqu    ymm5, yword [rcx + 8*rdi + 224]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xf1f4d5c5                           // vpmuludq    ymm6, ymm5, ymm1
	LONG $0xd573c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm5, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe8f4d5c5                           // vpmuludq    ymm5, ymm5, ymm0
	LONG $0xeed4d5c5                           // vpaddq    ymm5, ymm5, ymm6
	QUAD $0x0080f8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 128], ymm2
	QUAD $0x00a0f89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 160], ymm3
	QUAD $0x00c0f8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 192], ymm4
	QUAD $0x00e0f8ac7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 8*rdi + 224], ymm5
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_795
	JMP  LBB2_1350

LBB2_796:
	WORD $0xc289                 // mov    edx, eax
	WORD $0xe283; BYTE $0xe0     // and    edx, -32
	LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
	LONG $0xe0728d48             // lea    rsi, [rdx - 32]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1357
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi

LBB2_798:
	LONG $0x1459f4c5; BYTE $0xb9               // vmulps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20b9             // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40b9             // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x6c59f4c5; WORD $0x60b9             // vmulps    ymm5, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb86c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm5
	QUAD $0x000080b99459f4c5; BYTE $0x00       // vmulps    ymm2, ymm1, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b99c59f4c5; BYTE $0x00       // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b9a459f4c5; BYTE $0x00       // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9ac59f4c5; BYTE $0x00       // vmulps    ymm5, ymm1, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b894117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 128], ymm2
	QUAD $0x00a0b89c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 160], ymm3
	QUAD $0x00c0b8a4117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 192], ymm4
	QUAD $0x00e0b8ac117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 4*rdi + 224], ymm5
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_798
	JMP  LBB2_1358

LBB2_799:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1365
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_801:
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x6039             // vpsubb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_801
	JMP  LBB2_1366

LBB2_802:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1373
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_804:
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64f8fdc5; WORD $0x6039             // vpsubb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cf8fdc5; BYTE $0x00       // vpsubb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994f8fdc5; BYTE $0x00       // vpsubb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cf8fdc5; BYTE $0x00       // vpsubb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4f8fdc5; BYTE $0x00       // vpsubb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_804
	JMP  LBB2_1374

LBB2_805:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1381
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_807:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_807
	JMP  LBB2_1382

LBB2_808:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80718d48         // lea    rsi, [rcx - 128]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x07e9c149         // shr    r9, 7
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1389
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_810:
	LONG $0x0410fcc5; BYTE $0x3a               // vmovups    ymm0, yword [rdx + rdi]
	LONG $0x4c10fcc5; WORD $0x203a             // vmovups    ymm1, yword [rdx + rdi + 32]
	LONG $0x5410fcc5; WORD $0x403a             // vmovups    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c10fcc5; WORD $0x603a             // vmovups    ymm3, yword [rdx + rdi + 96]
	LONG $0x117cc1c4; WORD $0x3804             // vmovups    yword [r8 + rdi], ymm0
	LONG $0x117cc1c4; WORD $0x384c; BYTE $0x20 // vmovups    yword [r8 + rdi + 32], ymm1
	LONG $0x117cc1c4; WORD $0x3854; BYTE $0x40 // vmovups    yword [r8 + rdi + 64], ymm2
	LONG $0x117cc1c4; WORD $0x385c; BYTE $0x60 // vmovups    yword [r8 + rdi + 96], ymm3
	QUAD $0x0000803a846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + rdi + 128]
	QUAD $0x0000a03a8c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + rdi + 160]
	QUAD $0x0000c03a946ffec5; BYTE $0x00       // vmovdqu    ymm2, yword [rdx + rdi + 192]
	QUAD $0x0000e03a9c6ffec5; BYTE $0x00       // vmovdqu    ymm3, yword [rdx + rdi + 224]
	QUAD $0x008038847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm0
	QUAD $0x00a0388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm1
	QUAD $0x00c038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm2
	QUAD $0x00e0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm3
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_810
	JMP  LBB2_1390

LBB2_811:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1397
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_813:
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x6039             // vpaddb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_813
	JMP  LBB2_1398

LBB2_814:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0x80     // and    esi, -128
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0x80568d48             // lea    rdx, [rsi - 128]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x07e9c149             // shr    r9, 7
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1405
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_816:
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x64fcfdc5; WORD $0x6039             // vpaddb    ymm4, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3864; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm4
	QUAD $0x000080398cfcfdc5; BYTE $0x00       // vpaddb    ymm1, ymm0, yword [rcx + rdi + 128]
	QUAD $0x0000a03994fcfdc5; BYTE $0x00       // vpaddb    ymm2, ymm0, yword [rcx + rdi + 160]
	QUAD $0x0000c0399cfcfdc5; BYTE $0x00       // vpaddb    ymm3, ymm0, yword [rcx + rdi + 192]
	QUAD $0x0000e039a4fcfdc5; BYTE $0x00       // vpaddb    ymm4, ymm0, yword [rcx + rdi + 224]
	QUAD $0x0080388c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 128], ymm1
	QUAD $0x00a038947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 160], ymm2
	QUAD $0x00c0389c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 192], ymm3
	QUAD $0x00e038a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + rdi + 224], ymm4
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_816
	JMP  LBB2_1406

LBB2_817:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB2_893
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB2_895

LBB2_819:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xc26ef9c5             // vmovd    xmm0, edx
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xe0778d48             // lea    rsi, [rdi - 32]
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x03e18341             // and    r9d, 3
	LONG $0x60fe8348             // cmp    rsi, 96
	JAE  LBB2_903
	WORD $0xf631                 // xor    esi, esi
	JMP  LBB2_905

LBB2_821:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1413
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_823:
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60b9             // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_823
	JMP  LBB2_1414

LBB2_824:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0x6e79c1c4; BYTE $0xc3 // vmovd    xmm0, r11d
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1421
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_826:
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fafdc5; WORD $0x60b9             // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfafdc5; BYTE $0x00       // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fafdc5; BYTE $0x00       // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfafdc5; BYTE $0x00       // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fafdc5; BYTE $0x00       // vpsubd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_826
	JMP  LBB2_1422

LBB2_827:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB2_828:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_828
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_830

LBB2_834:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	WORD $0xf631             // xor    esi, esi

LBB2_835:
	LONG $0x1e7de2c4; WORD $0xb204             // vpabsd    ymm0, yword [rdx + 4*rsi]
	LONG $0x1e7de2c4; WORD $0xb24c; BYTE $0x20 // vpabsd    ymm1, yword [rdx + 4*rsi + 32]
	LONG $0x1e7de2c4; WORD $0xb254; BYTE $0x40 // vpabsd    ymm2, yword [rdx + 4*rsi + 64]
	LONG $0x1e7de2c4; WORD $0xb25c; BYTE $0x60 // vpabsd    ymm3, yword [rdx + 4*rsi + 96]
	LONG $0x7f7ec1c4; WORD $0xb004             // vmovdqu    yword [r8 + 4*rsi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb04c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rsi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb054; BYTE $0x40 // vmovdqu    yword [r8 + 4*rsi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb05c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rsi + 96], ymm3
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xf1                   // cmp    rcx, rsi
	JNE  LBB2_835
	WORD $0x3948; BYTE $0xc1                   // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_837

LBB2_841:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1429
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_843:
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60b9             // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_843
	JMP  LBB2_1430

LBB2_844:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1437
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_846:
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x64fefdc5; WORD $0x60b9             // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x000080b98cfefdc5; BYTE $0x00       // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x0000a0b994fefdc5; BYTE $0x00       // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x0000c0b99cfefdc5; BYTE $0x00       // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x0000e0b9a4fefdc5; BYTE $0x00       // vpaddd    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_846
	JMP  LBB2_1438

LBB2_847:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1445
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_849:
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb964; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080b98c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x00a0b994407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x00c0b99c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x00e0b9a4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_849
	JMP  LBB2_1446

LBB2_850:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1453
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_852:
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb964; BYTE $0x60 // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb864; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm4
	QUAD $0x0080b98c407de2c4; WORD $0x0000     // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi + 128]
	QUAD $0x00a0b994407de2c4; WORD $0x0000     // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 160]
	QUAD $0x00c0b99c407de2c4; WORD $0x0000     // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 192]
	QUAD $0x00e0b9a4407de2c4; WORD $0x0000     // vpmulld    ymm4, ymm0, yword [rcx + 4*rdi + 224]
	QUAD $0x0080b88c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 128], ymm1
	QUAD $0x00a0b8947f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 160], ymm2
	QUAD $0x00c0b89c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 192], ymm3
	QUAD $0x00e0b8a47f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 4*rdi + 224], ymm4
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_852
	JMP  LBB2_1454

LBB2_853:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB2_854:
	LONG $0x246ffec5; BYTE $0x31               // vmovdqu    ymm4, yword [rcx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2031             // vmovdqu    ymm4, yword [rcx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4031             // vmovdqu    ymm4, yword [rcx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6031             // vmovdqu    ymm4, yword [rcx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB2_854

LBB2_855:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB2_858
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB2_857:
	LONG $0x1c6ffec5; BYTE $0x31   // vmovdqu    ymm3, yword [rcx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB2_857

LBB2_858:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1461
	JMP  LBB2_859

LBB2_863:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB2_864:
	LONG $0x246ffec5; BYTE $0x31               // vmovdqu    ymm4, yword [rcx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2031             // vmovdqu    ymm4, yword [rcx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4031             // vmovdqu    ymm4, yword [rcx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6031             // vmovdqu    ymm4, yword [rcx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB2_864

LBB2_865:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB2_868
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB2_867:
	LONG $0x1c6ffec5; BYTE $0x31   // vmovdqu    ymm3, yword [rcx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB2_867

LBB2_868:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1461
	JMP  LBB2_869

LBB2_873:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_874:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_874

LBB2_875:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_878
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_877:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_877

LBB2_878:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1461
	JMP  LBB2_879

LBB2_883:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_884:
	LONG $0x0410fcc5; BYTE $0x42               // vmovups    ymm0, yword [rdx + 2*rax]
	LONG $0x4c10fcc5; WORD $0x2042             // vmovups    ymm1, yword [rdx + 2*rax + 32]
	LONG $0x117cc1c4; WORD $0x4004             // vmovups    yword [r8 + 2*rax], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x20 // vmovups    yword [r8 + 2*rax + 32], ymm1
	LONG $0x4410fcc5; WORD $0x4042             // vmovups    ymm0, yword [rdx + 2*rax + 64]
	LONG $0x4c10fcc5; WORD $0x6042             // vmovups    ymm1, yword [rdx + 2*rax + 96]
	LONG $0x117cc1c4; WORD $0x4044; BYTE $0x40 // vmovups    yword [r8 + 2*rax + 64], ymm0
	LONG $0x117cc1c4; WORD $0x404c; BYTE $0x60 // vmovups    yword [r8 + 2*rax + 96], ymm1
	QUAD $0x000080428410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdx + 2*rax + 128]
	QUAD $0x0000a0428c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdx + 2*rax + 160]
	QUAD $0x00804084117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 128], ymm0
	QUAD $0x00a0408c117cc1c4; WORD $0x0000     // vmovups    yword [r8 + 2*rax + 160], ymm1
	QUAD $0x0000c042846ffec5; BYTE $0x00       // vmovdqu    ymm0, yword [rdx + 2*rax + 192]
	QUAD $0x0000e0428c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdx + 2*rax + 224]
	QUAD $0x00c040847f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 192], ymm0
	QUAD $0x00e0408c7f7ec1c4; WORD $0x0000     // vmovdqu    yword [r8 + 2*rax + 224], ymm1
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_884

LBB2_885:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_888
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x20c08348         // add    rax, 32
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_887:
	LONG $0x446ffec5; WORD $0xe002             // vmovdqu    ymm0, yword [rdx + rax - 32]
	LONG $0x0c6ffec5; BYTE $0x02               // vmovdqu    ymm1, yword [rdx + rax]
	LONG $0x7f7ec1c4; WORD $0x0044; BYTE $0xe0 // vmovdqu    yword [r8 + rax - 32], ymm0
	LONG $0x7f7ec1c4; WORD $0x000c             // vmovdqu    yword [r8 + rax], ymm1
	LONG $0x40c08348                           // add    rax, 64
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_887

LBB2_888:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1461
	JMP  LBB2_889

LBB2_893:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB2_894:
	LONG $0x246ffec5; BYTE $0x31               // vmovdqu    ymm4, yword [rcx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2031             // vmovdqu    ymm4, yword [rcx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4031             // vmovdqu    ymm4, yword [rcx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6031             // vmovdqu    ymm4, yword [rcx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB2_894

LBB2_895:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB2_898
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB2_897:
	LONG $0x1c6ffec5; BYTE $0x31   // vmovdqu    ymm3, yword [rcx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB2_897

LBB2_898:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1461
	JMP  LBB2_899

LBB2_903:
	LONG $0xfce08348             // and    rax, -4
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xf631                 // xor    esi, esi
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xd860fdc5             // vpunpcklbw    ymm3, ymm0, ymm0

LBB2_904:
	LONG $0x246ffec5; BYTE $0x31               // vmovdqu    ymm4, yword [rcx + rsi]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3024             // vmovdqu    yword [r8 + rsi], ymm4
	LONG $0x646ffec5; WORD $0x2031             // vmovdqu    ymm4, yword [rcx + rsi + 32]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x20 // vmovdqu    yword [r8 + rsi + 32], ymm4
	LONG $0x646ffec5; WORD $0x4031             // vmovdqu    ymm4, yword [rcx + rsi + 64]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x40 // vmovdqu    yword [r8 + rsi + 64], ymm4
	LONG $0x646ffec5; WORD $0x6031             // vmovdqu    ymm4, yword [rcx + rsi + 96]
	LONG $0xec68ddc5                           // vpunpckhbw    ymm5, ymm4, ymm4
	LONG $0xe9d5d5c5                           // vpmullw    ymm5, ymm5, ymm1
	LONG $0xeadbd5c5                           // vpand    ymm5, ymm5, ymm2
	LONG $0xe460ddc5                           // vpunpcklbw    ymm4, ymm4, ymm4
	LONG $0xe3d5ddc5                           // vpmullw    ymm4, ymm4, ymm3
	LONG $0xe2dbddc5                           // vpand    ymm4, ymm4, ymm2
	LONG $0xe567ddc5                           // vpackuswb    ymm4, ymm4, ymm5
	LONG $0x7f7ec1c4; WORD $0x3064; BYTE $0x60 // vmovdqu    yword [r8 + rsi + 96], ymm4
	LONG $0x80ee8348                           // sub    rsi, -128
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB2_904

LBB2_905:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB2_908
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0xc868fdc5             // vpunpckhbw    ymm1, ymm0, ymm0
	LONG $0x556ffdc5; BYTE $0x40 // vmovdqa    ymm2, yword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xc060fdc5             // vpunpcklbw    ymm0, ymm0, ymm0

LBB2_907:
	LONG $0x1c6ffec5; BYTE $0x31   // vmovdqu    ymm3, yword [rcx + rsi]
	LONG $0xe368e5c5               // vpunpckhbw    ymm4, ymm3, ymm3
	LONG $0xe1d5ddc5               // vpmullw    ymm4, ymm4, ymm1
	LONG $0xe2dbddc5               // vpand    ymm4, ymm4, ymm2
	LONG $0xdb60e5c5               // vpunpcklbw    ymm3, ymm3, ymm3
	LONG $0xd8d5e5c5               // vpmullw    ymm3, ymm3, ymm0
	LONG $0xdadbe5c5               // vpand    ymm3, ymm3, ymm2
	LONG $0xdc67e5c5               // vpackuswb    ymm3, ymm3, ymm4
	LONG $0x7f7ec1c4; WORD $0x301c // vmovdqu    yword [r8 + rsi], ymm3
	LONG $0x20c68348               // add    rsi, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB2_907

LBB2_908:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1461
	JMP  LBB2_909

LBB2_913:
	WORD $0xff31 // xor    edi, edi

LBB2_914:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_916
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60b9             // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_916:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_917

LBB2_921:
	WORD $0xff31 // xor    edi, edi

LBB2_922:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_924
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60b9             // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_924:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_925

LBB2_929:
	WORD $0xff31 // xor    edi, edi

LBB2_930:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_932
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB2_932:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_933

LBB2_937:
	WORD $0xff31 // xor    edi, edi

LBB2_938:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_940
	LONG $0x046ffec5; BYTE $0xba               // vmovdqu    ymm0, yword [rdx + 4*rdi]
	LONG $0x4c6ffec5; WORD $0x20ba             // vmovdqu    ymm1, yword [rdx + 4*rdi + 32]
	LONG $0x546ffec5; WORD $0x40ba             // vmovdqu    ymm2, yword [rdx + 4*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60ba             // vmovdqu    ymm3, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb804             // vmovdqu    yword [r8 + 4*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xb84c; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm3

LBB2_940:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_941

LBB2_945:
	WORD $0xff31 // xor    edi, edi

LBB2_946:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_948
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60b9             // vpaddd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_948:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_949

LBB2_953:
	WORD $0xff31 // xor    edi, edi

LBB2_954:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_956
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60b9             // vpaddd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_956:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_957

LBB2_961:
	WORD $0xff31 // xor    edi, edi

LBB2_962:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_964
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb944; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_964:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_965

LBB2_969:
	WORD $0xff31 // xor    edi, edi

LBB2_970:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_972
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb944; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_972:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_973

LBB2_977:
	WORD $0xff31 // xor    edi, edi

LBB2_978:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_980
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c5cf5c5; WORD $0x60f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_980:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_981

LBB2_985:
	WORD $0xff31 // xor    edi, edi

LBB2_986:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_988
	LONG $0x145cf5c5; BYTE $0xf9               // vsubpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c5cf5c5; WORD $0x20f9             // vsubpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x645cf5c5; WORD $0x40f9             // vsubpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c5cf5c5; WORD $0x60f9             // vsubpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_988:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_989

LBB2_993:
	WORD $0xff31 // xor    edi, edi

LBB2_994:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_996
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_996:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1461
	JMP  LBB2_997

LBB2_1001:
	WORD $0xff31 // xor    edi, edi

LBB2_1002:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1004
	LONG $0x597de2c4; WORD $0x0045             // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x0cdbfdc5; BYTE $0xfa               // vpand    ymm1, ymm0, yword [rdx + 8*rdi]
	LONG $0x54dbfdc5; WORD $0x20fa             // vpand    ymm2, ymm0, yword [rdx + 8*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40fa             // vpand    ymm3, ymm0, yword [rdx + 8*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60fa             // vpand    ymm0, ymm0, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1004:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1461
	JMP  LBB2_1005

LBB2_1009:
	WORD $0xff31 // xor    edi, edi

LBB2_1010:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1012
	LONG $0x1458f5c5; BYTE $0xf9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20f9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40f9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c58f5c5; WORD $0x60f9             // vaddpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1012:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1013

LBB2_1017:
	WORD $0xff31 // xor    edi, edi

LBB2_1018:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1020
	LONG $0x1458f5c5; BYTE $0xf9               // vaddpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c58f5c5; WORD $0x20f9             // vaddpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6458f5c5; WORD $0x40f9             // vaddpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c58f5c5; WORD $0x60f9             // vaddpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1020:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1021

LBB2_1025:
	WORD $0xff31 // xor    edi, edi

LBB2_1026:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1028
	LONG $0x1459f5c5; BYTE $0xf9               // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20f9             // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40f9             // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c59f5c5; WORD $0x60f9             // vmulpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1028:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1029

LBB2_1033:
	WORD $0xff31 // xor    edi, edi

LBB2_1034:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1036
	LONG $0x1459f5c5; BYTE $0xf9               // vmulpd    ymm2, ymm1, yword [rcx + 8*rdi]
	LONG $0x5c59f5c5; WORD $0x20f9             // vmulpd    ymm3, ymm1, yword [rcx + 8*rdi + 32]
	LONG $0x6459f5c5; WORD $0x40f9             // vmulpd    ymm4, ymm1, yword [rcx + 8*rdi + 64]
	LONG $0x4c59f5c5; WORD $0x60f9             // vmulpd    ymm1, ymm1, yword [rcx + 8*rdi + 96]
	LONG $0x117dc1c4; WORD $0xf814             // vmovupd    yword [r8 + 8*rdi], ymm2
	LONG $0x117dc1c4; WORD $0xf85c; BYTE $0x20 // vmovupd    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x117dc1c4; WORD $0xf864; BYTE $0x40 // vmovupd    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x117dc1c4; WORD $0xf84c; BYTE $0x60 // vmovupd    yword [r8 + 8*rdi + 96], ymm1

LBB2_1036:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1037

LBB2_1041:
	WORD $0xff31 // xor    edi, edi

LBB2_1042:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1044
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x6039             // vpsubb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1044:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1045

LBB2_1049:
	WORD $0xff31 // xor    edi, edi

LBB2_1050:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1052
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x6039             // vpsubb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1052:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1053

LBB2_1057:
	WORD $0xff31 // xor    edi, edi

LBB2_1058:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1060
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x6039             // vpaddb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1060:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1061

LBB2_1065:
	WORD $0xff31 // xor    edi, edi

LBB2_1066:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1068
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x6039             // vpaddb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1068:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1069

LBB2_1073:
	WORD $0xff31 // xor    edi, edi

LBB2_1074:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1076
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60f9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1076:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1077

LBB2_1081:
	WORD $0xff31 // xor    edi, edi

LBB2_1082:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1084
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60f9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1084:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1085

LBB2_1089:
	WORD $0xff31 // xor    edi, edi

LBB2_1090:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1092
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB2_1092:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_1093

LBB2_1097:
	WORD $0xff31 // xor    edi, edi

LBB2_1098:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1100
	LONG $0x046ffec5; BYTE $0xfa               // vmovdqu    ymm0, yword [rdx + 8*rdi]
	LONG $0x4c6ffec5; WORD $0x20fa             // vmovdqu    ymm1, yword [rdx + 8*rdi + 32]
	LONG $0x546ffec5; WORD $0x40fa             // vmovdqu    ymm2, yword [rdx + 8*rdi + 64]
	LONG $0x5c6ffec5; WORD $0x60fa             // vmovdqu    ymm3, yword [rdx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf804             // vmovdqu    yword [r8 + 8*rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0xf84c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm3

LBB2_1100:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_1101

LBB2_1105:
	WORD $0xff31 // xor    edi, edi

LBB2_1106:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1108
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60f9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1108:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1109

LBB2_1113:
	WORD $0xff31 // xor    edi, edi

LBB2_1114:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1116
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60f9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1116:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1117

LBB2_1121:
	WORD $0xff31 // xor    edi, edi

LBB2_1122:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1124
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1124:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1125

LBB2_1129:
	WORD $0xff31 // xor    edi, edi

LBB2_1130:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1132
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1132:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1133

LBB2_1137:
	WORD $0xff31 // xor    edi, edi

LBB2_1138:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1140
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x2079             // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1140:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1141

LBB2_1145:
	WORD $0xff31 // xor    edi, edi

LBB2_1146:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1148
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x2079             // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1148:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1149

LBB2_1153:
	WORD $0xff31 // xor    edi, edi

LBB2_1154:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1156
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x2079             // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1156:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1157

LBB2_1161:
	WORD $0xff31 // xor    edi, edi

LBB2_1162:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1164
	LONG $0x0cf9fdc5; BYTE $0x79               // vpsubw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44f9fdc5; WORD $0x2079             // vpsubw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1164:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1165

LBB2_1169:
	WORD $0xf631 // xor    esi, esi

LBB2_1170:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1172
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x20               // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI2_2] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB2_1172:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_1173

LBB2_1177:
	WORD $0xf631 // xor    esi, esi

LBB2_1178:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1180
	LONG $0x237de2c4; WORD $0x7204             // vpmovsxwd    ymm0, oword [rdx + 2*rsi]
	LONG $0x237de2c4; WORD $0x724c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdx + 2*rsi + 16]
	LONG $0xe172edc5; BYTE $0x0f               // vpsrad    ymm2, ymm1, 15
	LONG $0xe072e5c5; BYTE $0x0f               // vpsrad    ymm3, ymm0, 15
	LONG $0xc0fee5c5                           // vpaddd    ymm0, ymm3, ymm0
	LONG $0xc9feedc5                           // vpaddd    ymm1, ymm2, ymm1
	LONG $0xcaeff5c5                           // vpxor    ymm1, ymm1, ymm2
	LONG $0xc3effdc5                           // vpxor    ymm0, ymm0, ymm3
	LONG $0x556ffdc5; BYTE $0x20               // vmovdqa    ymm2, yword 32[rbp] /* [rip + .LCPI2_2] */
	LONG $0x007de2c4; BYTE $0xc2               // vpshufb    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xe8c0             // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xca               // vpshufb    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x704c; BYTE $0x10 // vmovdqu    oword [r8 + 2*rsi + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0x7004             // vmovdqu    oword [r8 + 2*rsi], xmm0

LBB2_1180:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1461
	JMP  LBB2_1181

LBB2_1185:
	WORD $0xff31 // xor    edi, edi

LBB2_1186:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1188
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x2079             // vpaddw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1188:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1189

LBB2_1193:
	WORD $0xff31 // xor    edi, edi

LBB2_1194:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1196
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x2079             // vpaddw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1196:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1197

LBB2_1201:
	WORD $0xff31 // xor    edi, edi

LBB2_1202:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1204
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x2079             // vpaddw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1204:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1205

LBB2_1209:
	WORD $0xff31 // xor    edi, edi

LBB2_1210:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1212
	LONG $0x0cfdfdc5; BYTE $0x79               // vpaddw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44fdfdc5; WORD $0x2079             // vpaddw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1212:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1213

LBB2_1217:
	WORD $0xff31 // xor    edi, edi

LBB2_1218:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1220
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x2079             // vpmullw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1220:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1221

LBB2_1225:
	WORD $0xff31 // xor    edi, edi

LBB2_1226:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1228
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x2079             // vpmullw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1228:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1229

LBB2_1233:
	WORD $0xff31 // xor    edi, edi

LBB2_1234:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1236
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x2079             // vpmullw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1236:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1237

LBB2_1241:
	WORD $0xff31 // xor    edi, edi

LBB2_1242:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1244
	LONG $0x0cd5fdc5; BYTE $0x79               // vpmullw    ymm1, ymm0, yword [rcx + 2*rdi]
	LONG $0x44d5fdc5; WORD $0x2079             // vpmullw    ymm0, ymm0, yword [rcx + 2*rdi + 32]
	LONG $0x7f7ec1c4; WORD $0x780c             // vmovdqu    yword [r8 + 2*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x7844; BYTE $0x20 // vmovdqu    yword [r8 + 2*rdi + 32], ymm0

LBB2_1244:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1245

LBB2_1249:
	WORD $0xff31 // xor    edi, edi

LBB2_1250:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1252
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60f9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1252:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1253

LBB2_1257:
	WORD $0xff31 // xor    edi, edi

LBB2_1258:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1260
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c5cf4c5; WORD $0x60b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1260:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1261

LBB2_1265:
	WORD $0xff31 // xor    edi, edi

LBB2_1266:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1268
	LONG $0x0cfbfdc5; BYTE $0xf9               // vpsubq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54fbfdc5; WORD $0x20f9             // vpsubq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cfbfdc5; WORD $0x40f9             // vpsubq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44fbfdc5; WORD $0x60f9             // vpsubq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1268:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1269

LBB2_1273:
	WORD $0xff31 // xor    edi, edi

LBB2_1274:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1276
	LONG $0x145cf4c5; BYTE $0xb9               // vsubps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c5cf4c5; WORD $0x20b9             // vsubps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x645cf4c5; WORD $0x40b9             // vsubps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c5cf4c5; WORD $0x60b9             // vsubps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1276:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1277

LBB2_1281:
	WORD $0xff31 // xor    edi, edi

LBB2_1282:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1284
	LONG $0x587de2c4; WORD $0x0845             // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI2_1] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1284:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1461
	JMP  LBB2_1285

LBB2_1291:
	WORD $0xff31 // xor    edi, edi

LBB2_1292:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1294
	LONG $0x587de2c4; WORD $0x0845             // vpbroadcastd    ymm0, dword 8[rbp] /* [rip + .LCPI2_1] */
	LONG $0x0cdbfdc5; BYTE $0xba               // vpand    ymm1, ymm0, yword [rdx + 4*rdi]
	LONG $0x54dbfdc5; WORD $0x20ba             // vpand    ymm2, ymm0, yword [rdx + 4*rdi + 32]
	LONG $0x5cdbfdc5; WORD $0x40ba             // vpand    ymm3, ymm0, yword [rdx + 4*rdi + 64]
	LONG $0x44dbfdc5; WORD $0x60ba             // vpand    ymm0, ymm0, yword [rdx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1294:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1461
	JMP  LBB2_1295

LBB2_1301:
	WORD $0xff31 // xor    edi, edi

LBB2_1302:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1304
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60f9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1304:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1305

LBB2_1309:
	WORD $0xff31 // xor    edi, edi

LBB2_1310:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1312
	LONG $0x1458f4c5; BYTE $0xb9               // vaddps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20b9             // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40b9             // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c58f4c5; WORD $0x60b9             // vaddps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1312:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1313

LBB2_1317:
	WORD $0xff31 // xor    edi, edi

LBB2_1318:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1320
	LONG $0x0cd4fdc5; BYTE $0xf9               // vpaddq    ymm1, ymm0, yword [rcx + 8*rdi]
	LONG $0x54d4fdc5; WORD $0x20f9             // vpaddq    ymm2, ymm0, yword [rcx + 8*rdi + 32]
	LONG $0x5cd4fdc5; WORD $0x40f9             // vpaddq    ymm3, ymm0, yword [rcx + 8*rdi + 64]
	LONG $0x44d4fdc5; WORD $0x60f9             // vpaddq    ymm0, ymm0, yword [rcx + 8*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xf80c             // vmovdqu    yword [r8 + 8*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xf854; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1320:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1321

LBB2_1325:
	WORD $0xff31 // xor    edi, edi

LBB2_1326:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1328
	LONG $0x1458f4c5; BYTE $0xb9               // vaddps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c58f4c5; WORD $0x20b9             // vaddps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6458f4c5; WORD $0x40b9             // vaddps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c58f4c5; WORD $0x60b9             // vaddps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1328:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1329

LBB2_1333:
	WORD $0xff31 // xor    edi, edi

LBB2_1334:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1336
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1336:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1337

LBB2_1341:
	WORD $0xff31 // xor    edi, edi

LBB2_1342:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1344
	LONG $0x1459f4c5; BYTE $0xb9               // vmulps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20b9             // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40b9             // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c59f4c5; WORD $0x60b9             // vmulps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1344:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1345

LBB2_1349:
	WORD $0xff31 // xor    edi, edi

LBB2_1350:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1352
	LONG $0x146ffec5; BYTE $0xf9               // vmovdqu    ymm2, yword [rcx + 8*rdi]
	LONG $0x5c6ffec5; WORD $0x20f9             // vmovdqu    ymm3, yword [rcx + 8*rdi + 32]
	LONG $0x646ffec5; WORD $0x40f9             // vmovdqu    ymm4, yword [rcx + 8*rdi + 64]
	LONG $0x6c6ffec5; WORD $0x60f9             // vmovdqu    ymm5, yword [rcx + 8*rdi + 96]
	LONG $0xf1f4edc5                           // vpmuludq    ymm6, ymm2, ymm1
	LONG $0xd273c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm2, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd0f4edc5                           // vpmuludq    ymm2, ymm2, ymm0
	LONG $0xd6d4edc5                           // vpaddq    ymm2, ymm2, ymm6
	LONG $0xf1f4e5c5                           // vpmuludq    ymm6, ymm3, ymm1
	LONG $0xd373c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm3, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xd8f4e5c5                           // vpmuludq    ymm3, ymm3, ymm0
	LONG $0xded4e5c5                           // vpaddq    ymm3, ymm3, ymm6
	LONG $0xf1f4ddc5                           // vpmuludq    ymm6, ymm4, ymm1
	LONG $0xd473c5c5; BYTE $0x20               // vpsrlq    ymm7, ymm4, 32
	LONG $0xf8f4c5c5                           // vpmuludq    ymm7, ymm7, ymm0
	LONG $0xf7d4cdc5                           // vpaddq    ymm6, ymm6, ymm7
	LONG $0xf673cdc5; BYTE $0x20               // vpsllq    ymm6, ymm6, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xe6d4ddc5                           // vpaddq    ymm4, ymm4, ymm6
	LONG $0xc9f4d5c5                           // vpmuludq    ymm1, ymm5, ymm1
	LONG $0xd573cdc5; BYTE $0x20               // vpsrlq    ymm6, ymm5, 32
	LONG $0xf0f4cdc5                           // vpmuludq    ymm6, ymm6, ymm0
	LONG $0xced4f5c5                           // vpaddq    ymm1, ymm1, ymm6
	LONG $0xf173f5c5; BYTE $0x20               // vpsllq    ymm1, ymm1, 32
	LONG $0xc0f4d5c5                           // vpmuludq    ymm0, ymm5, ymm0
	LONG $0xc1d4fdc5                           // vpaddq    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xf814             // vmovdqu    yword [r8 + 8*rdi], ymm2
	LONG $0x7f7ec1c4; WORD $0xf85c; BYTE $0x20 // vmovdqu    yword [r8 + 8*rdi + 32], ymm3
	LONG $0x7f7ec1c4; WORD $0xf864; BYTE $0x40 // vmovdqu    yword [r8 + 8*rdi + 64], ymm4
	LONG $0x7f7ec1c4; WORD $0xf844; BYTE $0x60 // vmovdqu    yword [r8 + 8*rdi + 96], ymm0

LBB2_1352:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1353

LBB2_1357:
	WORD $0xff31 // xor    edi, edi

LBB2_1358:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1360
	LONG $0x1459f4c5; BYTE $0xb9               // vmulps    ymm2, ymm1, yword [rcx + 4*rdi]
	LONG $0x5c59f4c5; WORD $0x20b9             // vmulps    ymm3, ymm1, yword [rcx + 4*rdi + 32]
	LONG $0x6459f4c5; WORD $0x40b9             // vmulps    ymm4, ymm1, yword [rcx + 4*rdi + 64]
	LONG $0x4c59f4c5; WORD $0x60b9             // vmulps    ymm1, ymm1, yword [rcx + 4*rdi + 96]
	LONG $0x117cc1c4; WORD $0xb814             // vmovups    yword [r8 + 4*rdi], ymm2
	LONG $0x117cc1c4; WORD $0xb85c; BYTE $0x20 // vmovups    yword [r8 + 4*rdi + 32], ymm3
	LONG $0x117cc1c4; WORD $0xb864; BYTE $0x40 // vmovups    yword [r8 + 4*rdi + 64], ymm4
	LONG $0x117cc1c4; WORD $0xb84c; BYTE $0x60 // vmovups    yword [r8 + 4*rdi + 96], ymm1

LBB2_1360:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1461
	JMP  LBB2_1361

LBB2_1365:
	WORD $0xff31 // xor    edi, edi

LBB2_1366:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1368
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x6039             // vpsubb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1368:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1369

LBB2_1373:
	WORD $0xff31 // xor    edi, edi

LBB2_1374:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1376
	LONG $0x0cf8fdc5; BYTE $0x39               // vpsubb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54f8fdc5; WORD $0x2039             // vpsubb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cf8fdc5; WORD $0x4039             // vpsubb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44f8fdc5; WORD $0x6039             // vpsubb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1376:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1377

LBB2_1381:
	WORD $0xff31 // xor    edi, edi

LBB2_1382:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1384
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB2_1384:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1461
	JMP  LBB2_1385

LBB2_1389:
	WORD $0xff31 // xor    edi, edi

LBB2_1390:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1392
	LONG $0x046ffec5; BYTE $0x3a               // vmovdqu    ymm0, yword [rdx + rdi]
	LONG $0x4c6ffec5; WORD $0x203a             // vmovdqu    ymm1, yword [rdx + rdi + 32]
	LONG $0x546ffec5; WORD $0x403a             // vmovdqu    ymm2, yword [rdx + rdi + 64]
	LONG $0x5c6ffec5; WORD $0x603a             // vmovdqu    ymm3, yword [rdx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x3804             // vmovdqu    yword [r8 + rdi], ymm0
	LONG $0x7f7ec1c4; WORD $0x384c; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm3

LBB2_1392:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1461
	JMP  LBB2_1393

LBB2_1397:
	WORD $0xff31 // xor    edi, edi

LBB2_1398:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1400
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x6039             // vpaddb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1400:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1401

LBB2_1405:
	WORD $0xff31 // xor    edi, edi

LBB2_1406:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1408
	LONG $0x0cfcfdc5; BYTE $0x39               // vpaddb    ymm1, ymm0, yword [rcx + rdi]
	LONG $0x54fcfdc5; WORD $0x2039             // vpaddb    ymm2, ymm0, yword [rcx + rdi + 32]
	LONG $0x5cfcfdc5; WORD $0x4039             // vpaddb    ymm3, ymm0, yword [rcx + rdi + 64]
	LONG $0x44fcfdc5; WORD $0x6039             // vpaddb    ymm0, ymm0, yword [rcx + rdi + 96]
	LONG $0x7f7ec1c4; WORD $0x380c             // vmovdqu    yword [r8 + rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0x3854; BYTE $0x20 // vmovdqu    yword [r8 + rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0x385c; BYTE $0x40 // vmovdqu    yword [r8 + rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0x3844; BYTE $0x60 // vmovdqu    yword [r8 + rdi + 96], ymm0

LBB2_1408:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1409

LBB2_1413:
	WORD $0xff31 // xor    edi, edi

LBB2_1414:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1416
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60b9             // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1416:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1417

LBB2_1421:
	WORD $0xff31 // xor    edi, edi

LBB2_1422:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1424
	LONG $0x0cfafdc5; BYTE $0xb9               // vpsubd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fafdc5; WORD $0x20b9             // vpsubd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfafdc5; WORD $0x40b9             // vpsubd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fafdc5; WORD $0x60b9             // vpsubd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1424:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1425

LBB2_1429:
	WORD $0xff31 // xor    edi, edi

LBB2_1430:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1432
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60b9             // vpaddd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1432:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1433

LBB2_1437:
	WORD $0xff31 // xor    edi, edi

LBB2_1438:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1440
	LONG $0x0cfefdc5; BYTE $0xb9               // vpaddd    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x54fefdc5; WORD $0x20b9             // vpaddd    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x5cfefdc5; WORD $0x40b9             // vpaddd    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x44fefdc5; WORD $0x60b9             // vpaddd    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1440:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1441

LBB2_1445:
	WORD $0xff31 // xor    edi, edi

LBB2_1446:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1448
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb944; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1448:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1461
	JMP  LBB2_1449

LBB2_1453:
	WORD $0xff31 // xor    edi, edi

LBB2_1454:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1456
	LONG $0x407de2c4; WORD $0xb90c             // vpmulld    ymm1, ymm0, yword [rcx + 4*rdi]
	LONG $0x407de2c4; WORD $0xb954; BYTE $0x20 // vpmulld    ymm2, ymm0, yword [rcx + 4*rdi + 32]
	LONG $0x407de2c4; WORD $0xb95c; BYTE $0x40 // vpmulld    ymm3, ymm0, yword [rcx + 4*rdi + 64]
	LONG $0x407de2c4; WORD $0xb944; BYTE $0x60 // vpmulld    ymm0, ymm0, yword [rcx + 4*rdi + 96]
	LONG $0x7f7ec1c4; WORD $0xb80c             // vmovdqu    yword [r8 + 4*rdi], ymm1
	LONG $0x7f7ec1c4; WORD $0xb854; BYTE $0x20 // vmovdqu    yword [r8 + 4*rdi + 32], ymm2
	LONG $0x7f7ec1c4; WORD $0xb85c; BYTE $0x40 // vmovdqu    yword [r8 + 4*rdi + 64], ymm3
	LONG $0x7f7ec1c4; WORD $0xb844; BYTE $0x60 // vmovdqu    yword [r8 + 4*rdi + 96], ymm0

LBB2_1456:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB2_1457

LBB2_1461:
	VZEROUPPER
	RET
