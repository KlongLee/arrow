//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_cast_numeric_uint8_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB0_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB0_2
	LONG $0x07048d4a         // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB0_9
	LONG $0x06048d4a         // lea    rax, [rsi + r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB0_9

LBB0_2:
	WORD $0xc931 // xor    ecx, ecx

LBB0_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB0_5

LBB0_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB0_4

LBB0_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_17

LBB0_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB0_6
	JMP  LBB0_17

LBB0_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x05eac148         // shr    rdx, 5
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB0_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_13

LBB0_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB0_12:
	LONG $0x0704100f             // movups    xmm0, oword [rdi + rax]
	LONG $0x074c100f; BYTE $0x10 // movups    xmm1, oword [rdi + rax + 16]
	LONG $0x0604110f             // movups    oword [rsi + rax], xmm0
	LONG $0x064c110f; BYTE $0x10 // movups    oword [rsi + rax + 16], xmm1
	LONG $0x0744100f; BYTE $0x20 // movups    xmm0, oword [rdi + rax + 32]
	LONG $0x074c100f; BYTE $0x30 // movups    xmm1, oword [rdi + rax + 48]
	LONG $0x0644110f; BYTE $0x20 // movups    oword [rsi + rax + 32], xmm0
	LONG $0x064c110f; BYTE $0x30 // movups    oword [rsi + rax + 48], xmm1
	LONG $0x0744100f; BYTE $0x40 // movups    xmm0, oword [rdi + rax + 64]
	LONG $0x074c100f; BYTE $0x50 // movups    xmm1, oword [rdi + rax + 80]
	LONG $0x0644110f; BYTE $0x40 // movups    oword [rsi + rax + 64], xmm0
	LONG $0x064c110f; BYTE $0x50 // movups    oword [rsi + rax + 80], xmm1
	LONG $0x0744100f; BYTE $0x60 // movups    xmm0, oword [rdi + rax + 96]
	LONG $0x074c100f; BYTE $0x70 // movups    xmm1, oword [rdi + rax + 112]
	LONG $0x0644110f; BYTE $0x60 // movups    oword [rsi + rax + 96], xmm0
	LONG $0x064c110f; BYTE $0x70 // movups    oword [rsi + rax + 112], xmm1
	LONG $0x80e88348             // sub    rax, -128
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB0_12

LBB0_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_16
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB0_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB0_15

LBB0_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB0_3

LBB0_17:
	RET

TEXT ·_cast_numeric_int8_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB1_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB1_2
	LONG $0x07048d4a         // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB1_9
	LONG $0x06048d4a         // lea    rax, [rsi + r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB1_9

LBB1_2:
	WORD $0xc931 // xor    ecx, ecx

LBB1_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB1_5

LBB1_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB1_4

LBB1_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_17

LBB1_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB1_6
	JMP  LBB1_17

LBB1_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x05eac148         // shr    rdx, 5
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB1_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_13

LBB1_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB1_12:
	LONG $0x0704100f             // movups    xmm0, oword [rdi + rax]
	LONG $0x074c100f; BYTE $0x10 // movups    xmm1, oword [rdi + rax + 16]
	LONG $0x0604110f             // movups    oword [rsi + rax], xmm0
	LONG $0x064c110f; BYTE $0x10 // movups    oword [rsi + rax + 16], xmm1
	LONG $0x0744100f; BYTE $0x20 // movups    xmm0, oword [rdi + rax + 32]
	LONG $0x074c100f; BYTE $0x30 // movups    xmm1, oword [rdi + rax + 48]
	LONG $0x0644110f; BYTE $0x20 // movups    oword [rsi + rax + 32], xmm0
	LONG $0x064c110f; BYTE $0x30 // movups    oword [rsi + rax + 48], xmm1
	LONG $0x0744100f; BYTE $0x40 // movups    xmm0, oword [rdi + rax + 64]
	LONG $0x074c100f; BYTE $0x50 // movups    xmm1, oword [rdi + rax + 80]
	LONG $0x0644110f; BYTE $0x40 // movups    oword [rsi + rax + 64], xmm0
	LONG $0x064c110f; BYTE $0x50 // movups    oword [rsi + rax + 80], xmm1
	LONG $0x0744100f; BYTE $0x60 // movups    xmm0, oword [rdi + rax + 96]
	LONG $0x074c100f; BYTE $0x70 // movups    xmm1, oword [rdi + rax + 112]
	LONG $0x0644110f; BYTE $0x60 // movups    oword [rsi + rax + 96], xmm0
	LONG $0x064c110f; BYTE $0x70 // movups    oword [rsi + rax + 112], xmm1
	LONG $0x80e88348             // sub    rax, -128
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB1_12

LBB1_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_16
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB1_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB1_15

LBB1_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB1_3

LBB1_17:
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x0e0c0a0806040200
DATA LCDATA1<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA1<>(SB), 8, $16

TEXT ·_cast_numeric_uint16_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA1<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB2_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB2_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB2_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB2_9

LBB2_2:
	WORD $0xc931 // xor    ecx, ecx

LBB2_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_5

LBB2_4:
	LONG $0x4f04b60f         // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB2_4

LBB2_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB2_16

LBB2_6:
	LONG $0x4f04b60f             // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x4f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + 2*rcx + 2]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x4f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 2*rcx + 4]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x4f44b60f; BYTE $0x06 // movzx    eax, byte [rdi + 2*rcx + 6]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB2_6
	JMP  LBB2_16

LBB2_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0418d48             // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x04e8c149             // shr    r8, 4
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_12:
	LONG $0x0c6f0ff3; BYTE $0x57   // movdqu    xmm1, oword [rdi + 2*rdx]
	LONG $0x546f0ff3; WORD $0x1057 // movdqu    xmm2, oword [rdi + 2*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x16   // movdqu    oword [rsi + rdx], xmm1
	LONG $0x4c6f0ff3; WORD $0x2057 // movdqu    xmm1, oword [rdi + 2*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3057 // movdqu    xmm2, oword [rdi + 2*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0x1016 // movdqu    oword [rsi + rdx + 16], xmm1
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB2_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB2_15

LBB2_14:
	LONG $0x046f0ff3; BYTE $0x57   // movdqu    xmm0, oword [rdi + 2*rdx]
	LONG $0x4c6f0ff3; WORD $0x1057 // movdqu    xmm1, oword [rdi + 2*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x16   // movdqu    oword [rsi + rdx], xmm0

LBB2_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB2_3

LBB2_16:
	RET

LBB2_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB2_14
	JMP  LBB2_15

DATA LCDATA2<>+0x000(SB)/8, $0x0e0c0a0806040200
DATA LCDATA2<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA2<>(SB), 8, $16

TEXT ·_cast_numeric_int16_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA2<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB3_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB3_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB3_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB3_9

LBB3_2:
	WORD $0xc931 // xor    ecx, ecx

LBB3_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB3_5

LBB3_4:
	LONG $0x4f04b60f         // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB3_4

LBB3_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB3_16

LBB3_6:
	LONG $0x4f04b60f             // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x4f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + 2*rcx + 2]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x4f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 2*rcx + 4]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x4f44b60f; BYTE $0x06 // movzx    eax, byte [rdi + 2*rcx + 6]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB3_6
	JMP  LBB3_16

LBB3_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0418d48             // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x04e8c149             // shr    r8, 4
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB3_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI3_0] */

LBB3_12:
	LONG $0x0c6f0ff3; BYTE $0x57   // movdqu    xmm1, oword [rdi + 2*rdx]
	LONG $0x546f0ff3; WORD $0x1057 // movdqu    xmm2, oword [rdi + 2*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x16   // movdqu    oword [rsi + rdx], xmm1
	LONG $0x4c6f0ff3; WORD $0x2057 // movdqu    xmm1, oword [rdi + 2*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3057 // movdqu    xmm2, oword [rdi + 2*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0x1016 // movdqu    oword [rsi + rdx + 16], xmm1
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB3_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB3_15

LBB3_14:
	LONG $0x046f0ff3; BYTE $0x57   // movdqu    xmm0, oword [rdi + 2*rdx]
	LONG $0x4c6f0ff3; WORD $0x1057 // movdqu    xmm1, oword [rdi + 2*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI3_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x16   // movdqu    oword [rsi + rdx], xmm0

LBB3_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB3_3

LBB3_16:
	RET

LBB3_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB3_14
	JMP  LBB3_15

DATA LCDATA3<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA3<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA3<>(SB), 8, $16

TEXT ·_cast_numeric_uint32_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA3<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB4_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB4_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB4_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB4_9

LBB4_2:
	WORD $0xc931 // xor    ecx, ecx

LBB4_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB4_5

LBB4_4:
	LONG $0x8f04b60f         // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB4_4

LBB4_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB4_16

LBB4_6:
	LONG $0x8f04b60f             // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x8f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 4*rcx + 4]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x8f44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 4*rcx + 8]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x8f44b60f; BYTE $0x0c // movzx    eax, byte [rdi + 4*rcx + 12]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB4_6
	JMP  LBB4_16

LBB4_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB4_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI4_0] */

LBB4_12:
	LONG $0x0c6f0ff3; BYTE $0x97   // movdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546f0ff3; WORD $0x1097 // movdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0x0c7e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm1
	LONG $0x547e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm2
	LONG $0x4c6f0ff3; WORD $0x2097 // movdqu    xmm1, oword [rdi + 4*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3097 // movdqu    xmm2, oword [rdi + 4*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0x4c7e0f66; WORD $0x0816 // movd    dword [rsi + rdx + 8], xmm1
	LONG $0x547e0f66; WORD $0x0c16 // movd    dword [rsi + rdx + 12], xmm2
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB4_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB4_15

LBB4_14:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI4_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0x047e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm1

LBB4_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB4_3

LBB4_16:
	RET

LBB4_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB4_14
	JMP  LBB4_15

DATA LCDATA4<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA4<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA4<>(SB), 8, $16

TEXT ·_cast_numeric_int32_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA4<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB5_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB5_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB5_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB5_9

LBB5_2:
	WORD $0xc931 // xor    ecx, ecx

LBB5_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB5_5

LBB5_4:
	LONG $0x8f04b60f         // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB5_4

LBB5_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB5_16

LBB5_6:
	LONG $0x8f04b60f             // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x8f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 4*rcx + 4]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x8f44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 4*rcx + 8]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x8f44b60f; BYTE $0x0c // movzx    eax, byte [rdi + 4*rcx + 12]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB5_6
	JMP  LBB5_16

LBB5_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB5_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI5_0] */

LBB5_12:
	LONG $0x0c6f0ff3; BYTE $0x97   // movdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546f0ff3; WORD $0x1097 // movdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0x0c7e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm1
	LONG $0x547e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm2
	LONG $0x4c6f0ff3; WORD $0x2097 // movdqu    xmm1, oword [rdi + 4*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3097 // movdqu    xmm2, oword [rdi + 4*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0x4c7e0f66; WORD $0x0816 // movd    dword [rsi + rdx + 8], xmm1
	LONG $0x547e0f66; WORD $0x0c16 // movd    dword [rsi + rdx + 12], xmm2
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB5_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB5_15

LBB5_14:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI5_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0x047e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm1

LBB5_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB5_3

LBB5_16:
	RET

LBB5_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB5_14
	JMP  LBB5_15

DATA LCDATA5<>+0x000(SB)/8, $0x0000000000000800
DATA LCDATA5<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA5<>(SB), 8, $16

TEXT ·_cast_numeric_uint64_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA5<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB6_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB6_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB6_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB6_9

LBB6_2:
	WORD $0xc931 // xor    ecx, ecx

LBB6_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB6_5

LBB6_4:
	LONG $0xcf04b60f         // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB6_4

LBB6_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB6_16

LBB6_6:
	LONG $0xcf04b60f             // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0xcf44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 8*rcx + 8]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0xcf44b60f; BYTE $0x10 // movzx    eax, byte [rdi + 8*rcx + 16]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0xcf44b60f; BYTE $0x18 // movzx    eax, byte [rdi + 8*rcx + 24]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB6_6
	JMP  LBB6_16

LBB6_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x02e8c149             // shr    r8, 2
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB6_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI6_0] */

LBB6_12:
	LONG $0x0c6f0ff3; BYTE $0xd7               // movdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546f0ff3; WORD $0x10d7             // movdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	LONG $0x153a0f66; WORD $0x160c; BYTE $0x00 // pextrw    word [rsi + rdx], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00021654153a0f66                   // pextrw    word [rsi + rdx + 2], xmm2, 0
	LONG $0x4c6f0ff3; WORD $0x20d7             // movdqu    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x546f0ff3; WORD $0x30d7             // movdqu    xmm2, oword [rdi + 8*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	QUAD $0x0004164c153a0f66                   // pextrw    word [rsi + rdx + 4], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00061654153a0f66                   // pextrw    word [rsi + rdx + 6], xmm2, 0
	LONG $0x08c28348                           // add    rdx, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB6_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB6_15

LBB6_14:
	LONG $0x046f0ff3; BYTE $0xd7               // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7             // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI6_0] */
	LONG $0x00380f66; BYTE $0xc2               // pshufb    xmm0, xmm2
	LONG $0x153a0f66; WORD $0x1604; BYTE $0x00 // pextrw    word [rsi + rdx], xmm0, 0
	LONG $0x00380f66; BYTE $0xca               // pshufb    xmm1, xmm2
	QUAD $0x0002164c153a0f66                   // pextrw    word [rsi + rdx + 2], xmm1, 0

LBB6_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB6_3

LBB6_16:
	RET

LBB6_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB6_14
	JMP  LBB6_15

DATA LCDATA6<>+0x000(SB)/8, $0x0000000000000800
DATA LCDATA6<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA6<>(SB), 8, $16

TEXT ·_cast_numeric_int64_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA6<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB7_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB7_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB7_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB7_9

LBB7_2:
	WORD $0xc931 // xor    ecx, ecx

LBB7_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB7_5

LBB7_4:
	LONG $0xcf04b60f         // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB7_4

LBB7_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB7_16

LBB7_6:
	LONG $0xcf04b60f             // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0xcf44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 8*rcx + 8]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0xcf44b60f; BYTE $0x10 // movzx    eax, byte [rdi + 8*rcx + 16]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0xcf44b60f; BYTE $0x18 // movzx    eax, byte [rdi + 8*rcx + 24]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB7_6
	JMP  LBB7_16

LBB7_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x02e8c149             // shr    r8, 2
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB7_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI7_0] */

LBB7_12:
	LONG $0x0c6f0ff3; BYTE $0xd7               // movdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546f0ff3; WORD $0x10d7             // movdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	LONG $0x153a0f66; WORD $0x160c; BYTE $0x00 // pextrw    word [rsi + rdx], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00021654153a0f66                   // pextrw    word [rsi + rdx + 2], xmm2, 0
	LONG $0x4c6f0ff3; WORD $0x20d7             // movdqu    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x546f0ff3; WORD $0x30d7             // movdqu    xmm2, oword [rdi + 8*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	QUAD $0x0004164c153a0f66                   // pextrw    word [rsi + rdx + 4], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00061654153a0f66                   // pextrw    word [rsi + rdx + 6], xmm2, 0
	LONG $0x08c28348                           // add    rdx, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB7_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB7_15

LBB7_14:
	LONG $0x046f0ff3; BYTE $0xd7               // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7             // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI7_0] */
	LONG $0x00380f66; BYTE $0xc2               // pshufb    xmm0, xmm2
	LONG $0x153a0f66; WORD $0x1604; BYTE $0x00 // pextrw    word [rsi + rdx], xmm0, 0
	LONG $0x00380f66; BYTE $0xca               // pshufb    xmm1, xmm2
	QUAD $0x0002164c153a0f66                   // pextrw    word [rsi + rdx + 2], xmm1, 0

LBB7_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB7_3

LBB7_16:
	RET

LBB7_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB7_14
	JMP  LBB7_15

TEXT ·_cast_numeric_float32_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB8_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB8_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB8_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB8_9

LBB8_2:
	WORD $0xc931 // xor    ecx, ecx

LBB8_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB8_5

LBB8_4:
	LONG $0x042c0ff3; BYTE $0x8f // cvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB8_4

LBB8_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB8_16

LBB8_6:
	LONG $0x042c0ff3; BYTE $0x8f   // cvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e       // mov    byte [rsi + rcx], al
	LONG $0x442c0ff3; WORD $0x048f // cvttss2si    eax, dword [rdi + 4*rcx + 4]
	LONG $0x010e4488               // mov    byte [rsi + rcx + 1], al
	LONG $0x442c0ff3; WORD $0x088f // cvttss2si    eax, dword [rdi + 4*rcx + 8]
	LONG $0x020e4488               // mov    byte [rsi + rcx + 2], al
	LONG $0x442c0ff3; WORD $0x0c8f // cvttss2si    eax, dword [rdi + 4*rcx + 12]
	LONG $0x030e4488               // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB8_6
	JMP  LBB8_16

LBB8_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB8_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB8_12:
	LONG $0x9704100f               // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10   // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0x2b380f66; BYTE $0xc0   // packusdw    xmm0, xmm0
	LONG $0xc0670f66               // packuswb    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0x2b380f66; BYTE $0xc9   // packusdw    xmm1, xmm1
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0x047e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm1
	LONG $0x9744100f; BYTE $0x20   // movups    xmm0, oword [rdi + 4*rdx + 32]
	LONG $0x974c100f; BYTE $0x30   // movups    xmm1, oword [rdi + 4*rdx + 48]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0x2b380f66; BYTE $0xc0   // packusdw    xmm0, xmm0
	LONG $0xc0670f66               // packuswb    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0x2b380f66; BYTE $0xc9   // packusdw    xmm1, xmm1
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0x447e0f66; WORD $0x0816 // movd    dword [rsi + rdx + 8], xmm0
	LONG $0x4c7e0f66; WORD $0x0c16 // movd    dword [rsi + rdx + 12], xmm1
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB8_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB8_15

LBB8_14:
	LONG $0x9704100f               // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10   // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0x2b380f66; BYTE $0xc0   // packusdw    xmm0, xmm0
	LONG $0xc0670f66               // packuswb    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0x2b380f66; BYTE $0xc9   // packusdw    xmm1, xmm1
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0x047e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm1

LBB8_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB8_3

LBB8_16:
	RET

LBB8_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB8_14
	JMP  LBB8_15

DATA LCDATA7<>+0x000(SB)/8, $0x0000000000000400
DATA LCDATA7<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA7<>(SB), 8, $16

TEXT ·_cast_numeric_float64_uint8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA7<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB9_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB9_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB9_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB9_9

LBB9_2:
	WORD $0xc931 // xor    ecx, ecx

LBB9_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB9_5

LBB9_4:
	LONG $0x042c0ff2; BYTE $0xcf // cvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB9_4

LBB9_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB9_16

LBB9_6:
	LONG $0x042c0ff2; BYTE $0xcf   // cvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e       // mov    byte [rsi + rcx], al
	LONG $0x442c0ff2; WORD $0x08cf // cvttsd2si    eax, qword [rdi + 8*rcx + 8]
	LONG $0x010e4488               // mov    byte [rsi + rcx + 1], al
	LONG $0x442c0ff2; WORD $0x10cf // cvttsd2si    eax, qword [rdi + 8*rcx + 16]
	LONG $0x020e4488               // mov    byte [rsi + rcx + 2], al
	LONG $0x442c0ff2; WORD $0x18cf // cvttsd2si    eax, qword [rdi + 8*rcx + 24]
	LONG $0x030e4488               // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB9_6
	JMP  LBB9_16

LBB9_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x02e8c149             // shr    r8, 2
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB9_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI9_0] */

LBB9_12:
	LONG $0x0c100f66; BYTE $0xd7               // movupd    xmm1, oword [rdi + 8*rdx]
	LONG $0x54100f66; WORD $0x10d7             // movupd    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0xc9e60f66                           // cvttpd2dq    xmm1, xmm1
	LONG $0xd2e60f66                           // cvttpd2dq    xmm2, xmm2
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	LONG $0x153a0f66; WORD $0x160c; BYTE $0x00 // pextrw    word [rsi + rdx], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00021654153a0f66                   // pextrw    word [rsi + rdx + 2], xmm2, 0
	LONG $0x4c100f66; WORD $0x20d7             // movupd    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x54100f66; WORD $0x30d7             // movupd    xmm2, oword [rdi + 8*rdx + 48]
	LONG $0xc9e60f66                           // cvttpd2dq    xmm1, xmm1
	LONG $0xd2e60f66                           // cvttpd2dq    xmm2, xmm2
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	QUAD $0x0004164c153a0f66                   // pextrw    word [rsi + rdx + 4], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00061654153a0f66                   // pextrw    word [rsi + rdx + 6], xmm2, 0
	LONG $0x08c28348                           // add    rdx, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB9_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB9_15

LBB9_14:
	LONG $0x04100f66; BYTE $0xd7               // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0xc0e60f66                           // cvttpd2dq    xmm0, xmm0
	LONG $0x4c100f66; WORD $0x10d7             // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI9_0] */
	LONG $0xc9e60f66                           // cvttpd2dq    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc2               // pshufb    xmm0, xmm2
	LONG $0x153a0f66; WORD $0x1604; BYTE $0x00 // pextrw    word [rsi + rdx], xmm0, 0
	LONG $0x00380f66; BYTE $0xca               // pshufb    xmm1, xmm2
	QUAD $0x0002164c153a0f66                   // pextrw    word [rsi + rdx + 2], xmm1, 0

LBB9_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB9_3

LBB9_16:
	RET

LBB9_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB9_14
	JMP  LBB9_15

TEXT ·_cast_numeric_uint8_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB10_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB10_2
	LONG $0x07048d4a         // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB10_9
	LONG $0x06048d4a         // lea    rax, [rsi + r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB10_9

LBB10_2:
	WORD $0xc931 // xor    ecx, ecx

LBB10_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB10_5

LBB10_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB10_4

LBB10_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB10_17

LBB10_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB10_6
	JMP  LBB10_17

LBB10_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x05eac148         // shr    rdx, 5
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB10_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB10_13

LBB10_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB10_12:
	LONG $0x0704100f             // movups    xmm0, oword [rdi + rax]
	LONG $0x074c100f; BYTE $0x10 // movups    xmm1, oword [rdi + rax + 16]
	LONG $0x0604110f             // movups    oword [rsi + rax], xmm0
	LONG $0x064c110f; BYTE $0x10 // movups    oword [rsi + rax + 16], xmm1
	LONG $0x0744100f; BYTE $0x20 // movups    xmm0, oword [rdi + rax + 32]
	LONG $0x074c100f; BYTE $0x30 // movups    xmm1, oword [rdi + rax + 48]
	LONG $0x0644110f; BYTE $0x20 // movups    oword [rsi + rax + 32], xmm0
	LONG $0x064c110f; BYTE $0x30 // movups    oword [rsi + rax + 48], xmm1
	LONG $0x0744100f; BYTE $0x40 // movups    xmm0, oword [rdi + rax + 64]
	LONG $0x074c100f; BYTE $0x50 // movups    xmm1, oword [rdi + rax + 80]
	LONG $0x0644110f; BYTE $0x40 // movups    oword [rsi + rax + 64], xmm0
	LONG $0x064c110f; BYTE $0x50 // movups    oword [rsi + rax + 80], xmm1
	LONG $0x0744100f; BYTE $0x60 // movups    xmm0, oword [rdi + rax + 96]
	LONG $0x074c100f; BYTE $0x70 // movups    xmm1, oword [rdi + rax + 112]
	LONG $0x0644110f; BYTE $0x60 // movups    oword [rsi + rax + 96], xmm0
	LONG $0x064c110f; BYTE $0x70 // movups    oword [rsi + rax + 112], xmm1
	LONG $0x80e88348             // sub    rax, -128
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB10_12

LBB10_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB10_16
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB10_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB10_15

LBB10_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB10_3

LBB10_17:
	RET

TEXT ·_cast_numeric_int8_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB11_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB11_2
	LONG $0x07048d4a         // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB11_9
	LONG $0x06048d4a         // lea    rax, [rsi + r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB11_9

LBB11_2:
	WORD $0xc931 // xor    ecx, ecx

LBB11_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB11_5

LBB11_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB11_4

LBB11_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB11_17

LBB11_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB11_6
	JMP  LBB11_17

LBB11_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x05eac148         // shr    rdx, 5
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x60f88348         // cmp    rax, 96
	JAE  LBB11_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB11_13

LBB11_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB11_12:
	LONG $0x0704100f             // movups    xmm0, oword [rdi + rax]
	LONG $0x074c100f; BYTE $0x10 // movups    xmm1, oword [rdi + rax + 16]
	LONG $0x0604110f             // movups    oword [rsi + rax], xmm0
	LONG $0x064c110f; BYTE $0x10 // movups    oword [rsi + rax + 16], xmm1
	LONG $0x0744100f; BYTE $0x20 // movups    xmm0, oword [rdi + rax + 32]
	LONG $0x074c100f; BYTE $0x30 // movups    xmm1, oword [rdi + rax + 48]
	LONG $0x0644110f; BYTE $0x20 // movups    oword [rsi + rax + 32], xmm0
	LONG $0x064c110f; BYTE $0x30 // movups    oword [rsi + rax + 48], xmm1
	LONG $0x0744100f; BYTE $0x40 // movups    xmm0, oword [rdi + rax + 64]
	LONG $0x074c100f; BYTE $0x50 // movups    xmm1, oword [rdi + rax + 80]
	LONG $0x0644110f; BYTE $0x40 // movups    oword [rsi + rax + 64], xmm0
	LONG $0x064c110f; BYTE $0x50 // movups    oword [rsi + rax + 80], xmm1
	LONG $0x0744100f; BYTE $0x60 // movups    xmm0, oword [rdi + rax + 96]
	LONG $0x074c100f; BYTE $0x70 // movups    xmm1, oword [rdi + rax + 112]
	LONG $0x0644110f; BYTE $0x60 // movups    oword [rsi + rax + 96], xmm0
	LONG $0x064c110f; BYTE $0x70 // movups    oword [rsi + rax + 112], xmm1
	LONG $0x80e88348             // sub    rax, -128
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB11_12

LBB11_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB11_16
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB11_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB11_15

LBB11_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB11_3

LBB11_17:
	RET

DATA LCDATA8<>+0x000(SB)/8, $0x0e0c0a0806040200
DATA LCDATA8<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA8<>(SB), 8, $16

TEXT ·_cast_numeric_uint16_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA8<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB12_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB12_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB12_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB12_9

LBB12_2:
	WORD $0xc931 // xor    ecx, ecx

LBB12_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB12_5

LBB12_4:
	LONG $0x4f04b60f         // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB12_4

LBB12_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB12_16

LBB12_6:
	LONG $0x4f04b60f             // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x4f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + 2*rcx + 2]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x4f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 2*rcx + 4]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x4f44b60f; BYTE $0x06 // movzx    eax, byte [rdi + 2*rcx + 6]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB12_6
	JMP  LBB12_16

LBB12_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0418d48             // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x04e8c149             // shr    r8, 4
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB12_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI12_0] */

LBB12_12:
	LONG $0x0c6f0ff3; BYTE $0x57   // movdqu    xmm1, oword [rdi + 2*rdx]
	LONG $0x546f0ff3; WORD $0x1057 // movdqu    xmm2, oword [rdi + 2*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x16   // movdqu    oword [rsi + rdx], xmm1
	LONG $0x4c6f0ff3; WORD $0x2057 // movdqu    xmm1, oword [rdi + 2*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3057 // movdqu    xmm2, oword [rdi + 2*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0x1016 // movdqu    oword [rsi + rdx + 16], xmm1
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB12_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB12_15

LBB12_14:
	LONG $0x046f0ff3; BYTE $0x57   // movdqu    xmm0, oword [rdi + 2*rdx]
	LONG $0x4c6f0ff3; WORD $0x1057 // movdqu    xmm1, oword [rdi + 2*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI12_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x16   // movdqu    oword [rsi + rdx], xmm0

LBB12_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB12_3

LBB12_16:
	RET

LBB12_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB12_14
	JMP  LBB12_15

DATA LCDATA9<>+0x000(SB)/8, $0x0e0c0a0806040200
DATA LCDATA9<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA9<>(SB), 8, $16

TEXT ·_cast_numeric_int16_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA9<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB13_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB13_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB13_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB13_9

LBB13_2:
	WORD $0xc931 // xor    ecx, ecx

LBB13_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB13_5

LBB13_4:
	LONG $0x4f04b60f         // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB13_4

LBB13_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB13_16

LBB13_6:
	LONG $0x4f04b60f             // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x4f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + 2*rcx + 2]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x4f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 2*rcx + 4]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x4f44b60f; BYTE $0x06 // movzx    eax, byte [rdi + 2*rcx + 6]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB13_6
	JMP  LBB13_16

LBB13_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0418d48             // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x04e8c149             // shr    r8, 4
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB13_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI13_0] */

LBB13_12:
	LONG $0x0c6f0ff3; BYTE $0x57   // movdqu    xmm1, oword [rdi + 2*rdx]
	LONG $0x546f0ff3; WORD $0x1057 // movdqu    xmm2, oword [rdi + 2*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x16   // movdqu    oword [rsi + rdx], xmm1
	LONG $0x4c6f0ff3; WORD $0x2057 // movdqu    xmm1, oword [rdi + 2*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3057 // movdqu    xmm2, oword [rdi + 2*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0x1016 // movdqu    oword [rsi + rdx + 16], xmm1
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB13_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB13_15

LBB13_14:
	LONG $0x046f0ff3; BYTE $0x57   // movdqu    xmm0, oword [rdi + 2*rdx]
	LONG $0x4c6f0ff3; WORD $0x1057 // movdqu    xmm1, oword [rdi + 2*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI13_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x16   // movdqu    oword [rsi + rdx], xmm0

LBB13_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB13_3

LBB13_16:
	RET

LBB13_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB13_14
	JMP  LBB13_15

DATA LCDATA10<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA10<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA10<>(SB), 8, $16

TEXT ·_cast_numeric_uint32_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA10<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB14_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB14_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB14_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB14_9

LBB14_2:
	WORD $0xc931 // xor    ecx, ecx

LBB14_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB14_5

LBB14_4:
	LONG $0x8f04b60f         // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB14_4

LBB14_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB14_16

LBB14_6:
	LONG $0x8f04b60f             // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x8f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 4*rcx + 4]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x8f44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 4*rcx + 8]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x8f44b60f; BYTE $0x0c // movzx    eax, byte [rdi + 4*rcx + 12]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB14_6
	JMP  LBB14_16

LBB14_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB14_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI14_0] */

LBB14_12:
	LONG $0x0c6f0ff3; BYTE $0x97   // movdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546f0ff3; WORD $0x1097 // movdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0x0c7e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm1
	LONG $0x547e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm2
	LONG $0x4c6f0ff3; WORD $0x2097 // movdqu    xmm1, oword [rdi + 4*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3097 // movdqu    xmm2, oword [rdi + 4*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0x4c7e0f66; WORD $0x0816 // movd    dword [rsi + rdx + 8], xmm1
	LONG $0x547e0f66; WORD $0x0c16 // movd    dword [rsi + rdx + 12], xmm2
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB14_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB14_15

LBB14_14:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI14_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0x047e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm1

LBB14_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB14_3

LBB14_16:
	RET

LBB14_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB14_14
	JMP  LBB14_15

DATA LCDATA11<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA11<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA11<>(SB), 8, $16

TEXT ·_cast_numeric_int32_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA11<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB15_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB15_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB15_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB15_9

LBB15_2:
	WORD $0xc931 // xor    ecx, ecx

LBB15_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB15_5

LBB15_4:
	LONG $0x8f04b60f         // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB15_4

LBB15_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB15_16

LBB15_6:
	LONG $0x8f04b60f             // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x8f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 4*rcx + 4]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x8f44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 4*rcx + 8]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x8f44b60f; BYTE $0x0c // movzx    eax, byte [rdi + 4*rcx + 12]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB15_6
	JMP  LBB15_16

LBB15_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB15_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI15_0] */

LBB15_12:
	LONG $0x0c6f0ff3; BYTE $0x97   // movdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546f0ff3; WORD $0x1097 // movdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0x0c7e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm1
	LONG $0x547e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm2
	LONG $0x4c6f0ff3; WORD $0x2097 // movdqu    xmm1, oword [rdi + 4*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3097 // movdqu    xmm2, oword [rdi + 4*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0x4c7e0f66; WORD $0x0816 // movd    dword [rsi + rdx + 8], xmm1
	LONG $0x547e0f66; WORD $0x0c16 // movd    dword [rsi + rdx + 12], xmm2
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB15_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB15_15

LBB15_14:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI15_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0x047e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm1

LBB15_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB15_3

LBB15_16:
	RET

LBB15_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB15_14
	JMP  LBB15_15

DATA LCDATA12<>+0x000(SB)/8, $0x0000000000000800
DATA LCDATA12<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA12<>(SB), 8, $16

TEXT ·_cast_numeric_uint64_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA12<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB16_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB16_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB16_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB16_9

LBB16_2:
	WORD $0xc931 // xor    ecx, ecx

LBB16_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB16_5

LBB16_4:
	LONG $0xcf04b60f         // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB16_4

LBB16_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB16_16

LBB16_6:
	LONG $0xcf04b60f             // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0xcf44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 8*rcx + 8]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0xcf44b60f; BYTE $0x10 // movzx    eax, byte [rdi + 8*rcx + 16]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0xcf44b60f; BYTE $0x18 // movzx    eax, byte [rdi + 8*rcx + 24]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB16_6
	JMP  LBB16_16

LBB16_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x02e8c149             // shr    r8, 2
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB16_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI16_0] */

LBB16_12:
	LONG $0x0c6f0ff3; BYTE $0xd7               // movdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546f0ff3; WORD $0x10d7             // movdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	LONG $0x153a0f66; WORD $0x160c; BYTE $0x00 // pextrw    word [rsi + rdx], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00021654153a0f66                   // pextrw    word [rsi + rdx + 2], xmm2, 0
	LONG $0x4c6f0ff3; WORD $0x20d7             // movdqu    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x546f0ff3; WORD $0x30d7             // movdqu    xmm2, oword [rdi + 8*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	QUAD $0x0004164c153a0f66                   // pextrw    word [rsi + rdx + 4], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00061654153a0f66                   // pextrw    word [rsi + rdx + 6], xmm2, 0
	LONG $0x08c28348                           // add    rdx, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB16_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB16_15

LBB16_14:
	LONG $0x046f0ff3; BYTE $0xd7               // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7             // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI16_0] */
	LONG $0x00380f66; BYTE $0xc2               // pshufb    xmm0, xmm2
	LONG $0x153a0f66; WORD $0x1604; BYTE $0x00 // pextrw    word [rsi + rdx], xmm0, 0
	LONG $0x00380f66; BYTE $0xca               // pshufb    xmm1, xmm2
	QUAD $0x0002164c153a0f66                   // pextrw    word [rsi + rdx + 2], xmm1, 0

LBB16_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB16_3

LBB16_16:
	RET

LBB16_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB16_14
	JMP  LBB16_15

DATA LCDATA13<>+0x000(SB)/8, $0x0000000000000800
DATA LCDATA13<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA13<>(SB), 8, $16

TEXT ·_cast_numeric_int64_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA13<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB17_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB17_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB17_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB17_9

LBB17_2:
	WORD $0xc931 // xor    ecx, ecx

LBB17_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB17_5

LBB17_4:
	LONG $0xcf04b60f         // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB17_4

LBB17_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB17_16

LBB17_6:
	LONG $0xcf04b60f             // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0xcf44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 8*rcx + 8]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0xcf44b60f; BYTE $0x10 // movzx    eax, byte [rdi + 8*rcx + 16]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0xcf44b60f; BYTE $0x18 // movzx    eax, byte [rdi + 8*rcx + 24]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB17_6
	JMP  LBB17_16

LBB17_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x02e8c149             // shr    r8, 2
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB17_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI17_0] */

LBB17_12:
	LONG $0x0c6f0ff3; BYTE $0xd7               // movdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546f0ff3; WORD $0x10d7             // movdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	LONG $0x153a0f66; WORD $0x160c; BYTE $0x00 // pextrw    word [rsi + rdx], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00021654153a0f66                   // pextrw    word [rsi + rdx + 2], xmm2, 0
	LONG $0x4c6f0ff3; WORD $0x20d7             // movdqu    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x546f0ff3; WORD $0x30d7             // movdqu    xmm2, oword [rdi + 8*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	QUAD $0x0004164c153a0f66                   // pextrw    word [rsi + rdx + 4], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00061654153a0f66                   // pextrw    word [rsi + rdx + 6], xmm2, 0
	LONG $0x08c28348                           // add    rdx, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB17_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB17_15

LBB17_14:
	LONG $0x046f0ff3; BYTE $0xd7               // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7             // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI17_0] */
	LONG $0x00380f66; BYTE $0xc2               // pshufb    xmm0, xmm2
	LONG $0x153a0f66; WORD $0x1604; BYTE $0x00 // pextrw    word [rsi + rdx], xmm0, 0
	LONG $0x00380f66; BYTE $0xca               // pshufb    xmm1, xmm2
	QUAD $0x0002164c153a0f66                   // pextrw    word [rsi + rdx + 2], xmm1, 0

LBB17_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB17_3

LBB17_16:
	RET

LBB17_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB17_14
	JMP  LBB17_15

TEXT ·_cast_numeric_float32_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB18_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB18_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB18_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB18_9

LBB18_2:
	WORD $0xc931 // xor    ecx, ecx

LBB18_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB18_5

LBB18_4:
	LONG $0x042c0ff3; BYTE $0x8f // cvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB18_4

LBB18_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB18_16

LBB18_6:
	LONG $0x042c0ff3; BYTE $0x8f   // cvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e       // mov    byte [rsi + rcx], al
	LONG $0x442c0ff3; WORD $0x048f // cvttss2si    eax, dword [rdi + 4*rcx + 4]
	LONG $0x010e4488               // mov    byte [rsi + rcx + 1], al
	LONG $0x442c0ff3; WORD $0x088f // cvttss2si    eax, dword [rdi + 4*rcx + 8]
	LONG $0x020e4488               // mov    byte [rsi + rcx + 2], al
	LONG $0x442c0ff3; WORD $0x0c8f // cvttss2si    eax, dword [rdi + 4*rcx + 12]
	LONG $0x030e4488               // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB18_6
	JMP  LBB18_16

LBB18_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB18_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB18_12:
	LONG $0x9704100f               // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10   // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0xc06b0f66               // packssdw    xmm0, xmm0
	LONG $0xc0630f66               // packsswb    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0xc96b0f66               // packssdw    xmm1, xmm1
	LONG $0xc9630f66               // packsswb    xmm1, xmm1
	LONG $0x047e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm1
	LONG $0x9744100f; BYTE $0x20   // movups    xmm0, oword [rdi + 4*rdx + 32]
	LONG $0x974c100f; BYTE $0x30   // movups    xmm1, oword [rdi + 4*rdx + 48]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0xc06b0f66               // packssdw    xmm0, xmm0
	LONG $0xc0630f66               // packsswb    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0xc96b0f66               // packssdw    xmm1, xmm1
	LONG $0xc9630f66               // packsswb    xmm1, xmm1
	LONG $0x447e0f66; WORD $0x0816 // movd    dword [rsi + rdx + 8], xmm0
	LONG $0x4c7e0f66; WORD $0x0c16 // movd    dword [rsi + rdx + 12], xmm1
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB18_12
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB18_15

LBB18_14:
	LONG $0x9704100f               // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10   // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0xc06b0f66               // packssdw    xmm0, xmm0
	LONG $0xc0630f66               // packsswb    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0xc96b0f66               // packssdw    xmm1, xmm1
	LONG $0xc9630f66               // packsswb    xmm1, xmm1
	LONG $0x047e0f66; BYTE $0x16   // movd    dword [rsi + rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0416 // movd    dword [rsi + rdx + 4], xmm1

LBB18_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB18_3

LBB18_16:
	RET

LBB18_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB18_14
	JMP  LBB18_15

DATA LCDATA14<>+0x000(SB)/8, $0x0000000000000400
DATA LCDATA14<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA14<>(SB), 8, $16

TEXT ·_cast_numeric_float64_int8_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA14<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB19_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB19_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB19_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB19_9

LBB19_2:
	WORD $0xc931 // xor    ecx, ecx

LBB19_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB19_5

LBB19_4:
	LONG $0x042c0ff2; BYTE $0xcf // cvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB19_4

LBB19_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB19_16

LBB19_6:
	LONG $0x042c0ff2; BYTE $0xcf   // cvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e       // mov    byte [rsi + rcx], al
	LONG $0x442c0ff2; WORD $0x08cf // cvttsd2si    eax, qword [rdi + 8*rcx + 8]
	LONG $0x010e4488               // mov    byte [rsi + rcx + 1], al
	LONG $0x442c0ff2; WORD $0x10cf // cvttsd2si    eax, qword [rdi + 8*rcx + 16]
	LONG $0x020e4488               // mov    byte [rsi + rcx + 2], al
	LONG $0x442c0ff2; WORD $0x18cf // cvttsd2si    eax, qword [rdi + 8*rcx + 24]
	LONG $0x030e4488               // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB19_6
	JMP  LBB19_16

LBB19_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x02e8c149             // shr    r8, 2
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB19_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI19_0] */

LBB19_12:
	LONG $0x0c100f66; BYTE $0xd7               // movupd    xmm1, oword [rdi + 8*rdx]
	LONG $0x54100f66; WORD $0x10d7             // movupd    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0xc9e60f66                           // cvttpd2dq    xmm1, xmm1
	LONG $0xd2e60f66                           // cvttpd2dq    xmm2, xmm2
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	LONG $0x153a0f66; WORD $0x160c; BYTE $0x00 // pextrw    word [rsi + rdx], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00021654153a0f66                   // pextrw    word [rsi + rdx + 2], xmm2, 0
	LONG $0x4c100f66; WORD $0x20d7             // movupd    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x54100f66; WORD $0x30d7             // movupd    xmm2, oword [rdi + 8*rdx + 48]
	LONG $0xc9e60f66                           // cvttpd2dq    xmm1, xmm1
	LONG $0xd2e60f66                           // cvttpd2dq    xmm2, xmm2
	LONG $0x00380f66; BYTE $0xc8               // pshufb    xmm1, xmm0
	QUAD $0x0004164c153a0f66                   // pextrw    word [rsi + rdx + 4], xmm1, 0
	LONG $0x00380f66; BYTE $0xd0               // pshufb    xmm2, xmm0
	QUAD $0x00061654153a0f66                   // pextrw    word [rsi + rdx + 6], xmm2, 0
	LONG $0x08c28348                           // add    rdx, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB19_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB19_15

LBB19_14:
	LONG $0x04100f66; BYTE $0xd7               // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0xc0e60f66                           // cvttpd2dq    xmm0, xmm0
	LONG $0x4c100f66; WORD $0x10d7             // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI19_0] */
	LONG $0xc9e60f66                           // cvttpd2dq    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc2               // pshufb    xmm0, xmm2
	LONG $0x153a0f66; WORD $0x1604; BYTE $0x00 // pextrw    word [rsi + rdx], xmm0, 0
	LONG $0x00380f66; BYTE $0xca               // pshufb    xmm1, xmm2
	QUAD $0x0002164c153a0f66                   // pextrw    word [rsi + rdx + 2], xmm1, 0

LBB19_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB19_3

LBB19_16:
	RET

LBB19_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB19_14
	JMP  LBB19_15

TEXT ·_cast_numeric_uint8_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB20_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB20_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB20_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB20_9

LBB20_2:
	WORD $0xc931 // xor    ecx, ecx

LBB20_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x03e08348         // and    rax, 3
	JE   LBB20_5

LBB20_4:
	LONG $0x0f14b60f // movzx    edx, byte [rdi + rcx]
	LONG $0x4e148966 // mov    word [rsi + 2*rcx], dx
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB20_4

LBB20_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB20_16

LBB20_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB20_6
	JMP  LBB20_16

LBB20_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB20_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB20_12:
	LONG $0x30380f66; WORD $0x1704             // pmovzxbw    xmm0, qword [rdi + rdx]
	LONG $0x30380f66; WORD $0x174c; BYTE $0x08 // pmovzxbw    xmm1, qword [rdi + rdx + 8]
	LONG $0x047f0ff3; BYTE $0x56               // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1056             // movdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x30380f66; WORD $0x1744; BYTE $0x10 // pmovzxbw    xmm0, qword [rdi + rdx + 16]
	LONG $0x30380f66; WORD $0x174c; BYTE $0x18 // pmovzxbw    xmm1, qword [rdi + rdx + 24]
	LONG $0x447f0ff3; WORD $0x2056             // movdqu    oword [rsi + 2*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3056             // movdqu    oword [rsi + 2*rdx + 48], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB20_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB20_15

LBB20_14:
	LONG $0x30380f66; WORD $0x1704             // pmovzxbw    xmm0, qword [rdi + rdx]
	LONG $0x30380f66; WORD $0x174c; BYTE $0x08 // pmovzxbw    xmm1, qword [rdi + rdx + 8]
	LONG $0x047f0ff3; BYTE $0x56               // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1056             // movdqu    oword [rsi + 2*rdx + 16], xmm1

LBB20_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB20_3

LBB20_16:
	RET

LBB20_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB20_14
	JMP  LBB20_15

TEXT ·_cast_numeric_int8_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB21_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB21_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB21_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB21_9

LBB21_2:
	WORD $0xc931 // xor    ecx, ecx

LBB21_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x03e08348         // and    rax, 3
	JE   LBB21_5

LBB21_4:
	LONG $0x0f14be0f // movsx    edx, byte [rdi + rcx]
	LONG $0x4e148966 // mov    word [rsi + 2*rcx], dx
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB21_4

LBB21_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB21_16

LBB21_6:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x0f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rcx + 1]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x0f44be0f; BYTE $0x02 // movsx    eax, byte [rdi + rcx + 2]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x0f44be0f; BYTE $0x03 // movsx    eax, byte [rdi + rcx + 3]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB21_6
	JMP  LBB21_16

LBB21_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB21_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB21_12:
	LONG $0x20380f66; WORD $0x1704             // pmovsxbw    xmm0, qword [rdi + rdx]
	LONG $0x20380f66; WORD $0x174c; BYTE $0x08 // pmovsxbw    xmm1, qword [rdi + rdx + 8]
	LONG $0x047f0ff3; BYTE $0x56               // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1056             // movdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x20380f66; WORD $0x1744; BYTE $0x10 // pmovsxbw    xmm0, qword [rdi + rdx + 16]
	LONG $0x20380f66; WORD $0x174c; BYTE $0x18 // pmovsxbw    xmm1, qword [rdi + rdx + 24]
	LONG $0x447f0ff3; WORD $0x2056             // movdqu    oword [rsi + 2*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3056             // movdqu    oword [rsi + 2*rdx + 48], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB21_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB21_15

LBB21_14:
	LONG $0x20380f66; WORD $0x1704             // pmovsxbw    xmm0, qword [rdi + rdx]
	LONG $0x20380f66; WORD $0x174c; BYTE $0x08 // pmovsxbw    xmm1, qword [rdi + rdx + 8]
	LONG $0x047f0ff3; BYTE $0x56               // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1056             // movdqu    oword [rsi + 2*rdx + 16], xmm1

LBB21_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB21_3

LBB21_16:
	RET

LBB21_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB21_14
	JMP  LBB21_15

TEXT ·_cast_numeric_uint16_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB22_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB22_2
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB22_9
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB22_9

LBB22_2:
	WORD $0xc931 // xor    ecx, ecx

LBB22_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB22_5

LBB22_4:
	LONG $0x4f04b70f // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB22_4

LBB22_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB22_17

LBB22_6:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x4f44b70f; BYTE $0x02 // movzx    eax, word [rdi + 2*rcx + 2]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x4f44b70f; BYTE $0x04 // movzx    eax, word [rdi + 2*rcx + 4]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x4f44b70f; BYTE $0x06 // movzx    eax, word [rdi + 2*rcx + 6]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB22_6
	JMP  LBB22_17

LBB22_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x04eac148         // shr    rdx, 4
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB22_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB22_13

LBB22_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB22_12:
	LONG $0x4704100f             // movups    xmm0, oword [rdi + 2*rax]
	LONG $0x474c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 2*rax + 16]
	LONG $0x4604110f             // movups    oword [rsi + 2*rax], xmm0
	LONG $0x464c110f; BYTE $0x10 // movups    oword [rsi + 2*rax + 16], xmm1
	LONG $0x4744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 2*rax + 32]
	LONG $0x474c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 2*rax + 48]
	LONG $0x4644110f; BYTE $0x20 // movups    oword [rsi + 2*rax + 32], xmm0
	LONG $0x464c110f; BYTE $0x30 // movups    oword [rsi + 2*rax + 48], xmm1
	LONG $0x4744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 2*rax + 64]
	LONG $0x474c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 2*rax + 80]
	LONG $0x4644110f; BYTE $0x40 // movups    oword [rsi + 2*rax + 64], xmm0
	LONG $0x464c110f; BYTE $0x50 // movups    oword [rsi + 2*rax + 80], xmm1
	LONG $0x4744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 2*rax + 96]
	LONG $0x474c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 2*rax + 112]
	LONG $0x4644110f; BYTE $0x60 // movups    oword [rsi + 2*rax + 96], xmm0
	LONG $0x464c110f; BYTE $0x70 // movups    oword [rsi + 2*rax + 112], xmm1
	LONG $0x40c08348             // add    rax, 64
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB22_12

LBB22_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB22_16
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB22_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB22_15

LBB22_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB22_3

LBB22_17:
	RET

TEXT ·_cast_numeric_int16_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB23_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB23_2
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB23_9
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB23_9

LBB23_2:
	WORD $0xc931 // xor    ecx, ecx

LBB23_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB23_5

LBB23_4:
	LONG $0x4f04b70f // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB23_4

LBB23_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB23_17

LBB23_6:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x4f44b70f; BYTE $0x02 // movzx    eax, word [rdi + 2*rcx + 2]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x4f44b70f; BYTE $0x04 // movzx    eax, word [rdi + 2*rcx + 4]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x4f44b70f; BYTE $0x06 // movzx    eax, word [rdi + 2*rcx + 6]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB23_6
	JMP  LBB23_17

LBB23_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x04eac148         // shr    rdx, 4
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB23_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB23_13

LBB23_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB23_12:
	LONG $0x4704100f             // movups    xmm0, oword [rdi + 2*rax]
	LONG $0x474c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 2*rax + 16]
	LONG $0x4604110f             // movups    oword [rsi + 2*rax], xmm0
	LONG $0x464c110f; BYTE $0x10 // movups    oword [rsi + 2*rax + 16], xmm1
	LONG $0x4744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 2*rax + 32]
	LONG $0x474c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 2*rax + 48]
	LONG $0x4644110f; BYTE $0x20 // movups    oword [rsi + 2*rax + 32], xmm0
	LONG $0x464c110f; BYTE $0x30 // movups    oword [rsi + 2*rax + 48], xmm1
	LONG $0x4744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 2*rax + 64]
	LONG $0x474c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 2*rax + 80]
	LONG $0x4644110f; BYTE $0x40 // movups    oword [rsi + 2*rax + 64], xmm0
	LONG $0x464c110f; BYTE $0x50 // movups    oword [rsi + 2*rax + 80], xmm1
	LONG $0x4744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 2*rax + 96]
	LONG $0x474c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 2*rax + 112]
	LONG $0x4644110f; BYTE $0x60 // movups    oword [rsi + 2*rax + 96], xmm0
	LONG $0x464c110f; BYTE $0x70 // movups    oword [rsi + 2*rax + 112], xmm1
	LONG $0x40c08348             // add    rax, 64
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB23_12

LBB23_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB23_16
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB23_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB23_15

LBB23_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB23_3

LBB23_17:
	RET

DATA LCDATA15<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA15<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
GLOBL LCDATA15<>(SB), 8, $16

TEXT ·_cast_numeric_uint32_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA15<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB24_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB24_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB24_10

LBB24_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB24_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI24_0] */

LBB24_6:
	LONG $0x0c6f0ff3; BYTE $0x97   // movdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546f0ff3; WORD $0x1097 // movdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm1
	LONG $0x4c6f0ff3; WORD $0x2097 // movdqu    xmm1, oword [rdi + 4*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3097 // movdqu    xmm2, oword [rdi + 4*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0x1056 // movdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB24_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB24_9

LBB24_8:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI24_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm0

LBB24_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB24_11

LBB24_10:
	LONG $0x8f04b70f         // movzx    eax, word [rdi + 4*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB24_10

LBB24_11:
	RET

LBB24_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB24_8
	JMP  LBB24_9

DATA LCDATA16<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA16<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
GLOBL LCDATA16<>(SB), 8, $16

TEXT ·_cast_numeric_int32_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA16<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB25_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB25_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB25_10

LBB25_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB25_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI25_0] */

LBB25_6:
	LONG $0x0c6f0ff3; BYTE $0x97   // movdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546f0ff3; WORD $0x1097 // movdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm1
	LONG $0x4c6f0ff3; WORD $0x2097 // movdqu    xmm1, oword [rdi + 4*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3097 // movdqu    xmm2, oword [rdi + 4*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0x1056 // movdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB25_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB25_9

LBB25_8:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI25_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm0

LBB25_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB25_11

LBB25_10:
	LONG $0x8f04b70f         // movzx    eax, word [rdi + 4*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB25_10

LBB25_11:
	RET

LBB25_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB25_8
	JMP  LBB25_9

TEXT ·_cast_numeric_uint64_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB26_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB26_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB26_10

LBB26_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB26_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB26_6:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1
	LONG $0x446f0ff3; WORD $0x20d7 // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c6f0ff3; WORD $0x30d7 // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x447e0f66; WORD $0x0856 // movd    dword [rsi + 2*rdx + 8], xmm0
	LONG $0x4c7e0f66; WORD $0x0c56 // movd    dword [rsi + 2*rdx + 12], xmm1
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB26_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB26_9

LBB26_8:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1

LBB26_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB26_11

LBB26_10:
	LONG $0xcf04b70f         // movzx    eax, word [rdi + 8*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB26_10

LBB26_11:
	RET

LBB26_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB26_8
	JMP  LBB26_9

TEXT ·_cast_numeric_int64_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB27_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB27_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB27_10

LBB27_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB27_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB27_6:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1
	LONG $0x446f0ff3; WORD $0x20d7 // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c6f0ff3; WORD $0x30d7 // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x447e0f66; WORD $0x0856 // movd    dword [rsi + 2*rdx + 8], xmm0
	LONG $0x4c7e0f66; WORD $0x0c56 // movd    dword [rsi + 2*rdx + 12], xmm1
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB27_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB27_9

LBB27_8:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1

LBB27_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB27_11

LBB27_10:
	LONG $0xcf04b70f         // movzx    eax, word [rdi + 8*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB27_10

LBB27_11:
	RET

LBB27_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB27_8
	JMP  LBB27_9

TEXT ·_cast_numeric_float32_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB28_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB28_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB28_10

LBB28_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB28_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB28_6:
	LONG $0x9704100f               // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10   // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0x2b380f66; BYTE $0xc1   // packusdw    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x9744100f; BYTE $0x20   // movups    xmm0, oword [rdi + 4*rdx + 32]
	LONG $0x974c100f; BYTE $0x30   // movups    xmm1, oword [rdi + 4*rdx + 48]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0x2b380f66; BYTE $0xc1   // packusdw    xmm0, xmm1
	LONG $0x447f0ff3; WORD $0x1056 // movdqu    oword [rsi + 2*rdx + 16], xmm0
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB28_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB28_9

LBB28_8:
	LONG $0x9704100f             // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3             // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3             // cvttps2dq    xmm1, xmm1
	LONG $0x2b380f66; BYTE $0xc1 // packusdw    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x56 // movdqu    oword [rsi + 2*rdx], xmm0

LBB28_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB28_11

LBB28_10:
	LONG $0x042c0ff3; BYTE $0x8f // cvttss2si    eax, dword [rdi + 4*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB28_10

LBB28_11:
	RET

LBB28_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB28_8
	JMP  LBB28_9

TEXT ·_cast_numeric_float64_uint16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB29_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB29_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB29_10

LBB29_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB29_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB29_6:
	LONG $0x04100f66; BYTE $0xd7   // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c100f66; WORD $0x10d7 // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1
	LONG $0x44100f66; WORD $0x20d7 // movupd    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c100f66; WORD $0x30d7 // movupd    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x447e0f66; WORD $0x0856 // movd    dword [rsi + 2*rdx + 8], xmm0
	LONG $0x4c7e0f66; WORD $0x0c56 // movd    dword [rsi + 2*rdx + 12], xmm1
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB29_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB29_9

LBB29_8:
	LONG $0x04100f66; BYTE $0xd7   // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c100f66; WORD $0x10d7 // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1

LBB29_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB29_11

LBB29_10:
	LONG $0x042c0ff2; BYTE $0xcf // cvttsd2si    eax, qword [rdi + 8*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB29_10

LBB29_11:
	RET

LBB29_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB29_8
	JMP  LBB29_9

TEXT ·_cast_numeric_uint8_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB30_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB30_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB30_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB30_9

LBB30_2:
	WORD $0xc931 // xor    ecx, ecx

LBB30_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x03e08348         // and    rax, 3
	JE   LBB30_5

LBB30_4:
	LONG $0x0f14b60f // movzx    edx, byte [rdi + rcx]
	LONG $0x4e148966 // mov    word [rsi + 2*rcx], dx
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB30_4

LBB30_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB30_16

LBB30_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB30_6
	JMP  LBB30_16

LBB30_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB30_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB30_12:
	LONG $0x30380f66; WORD $0x1704             // pmovzxbw    xmm0, qword [rdi + rdx]
	LONG $0x30380f66; WORD $0x174c; BYTE $0x08 // pmovzxbw    xmm1, qword [rdi + rdx + 8]
	LONG $0x047f0ff3; BYTE $0x56               // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1056             // movdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x30380f66; WORD $0x1744; BYTE $0x10 // pmovzxbw    xmm0, qword [rdi + rdx + 16]
	LONG $0x30380f66; WORD $0x174c; BYTE $0x18 // pmovzxbw    xmm1, qword [rdi + rdx + 24]
	LONG $0x447f0ff3; WORD $0x2056             // movdqu    oword [rsi + 2*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3056             // movdqu    oword [rsi + 2*rdx + 48], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB30_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB30_15

LBB30_14:
	LONG $0x30380f66; WORD $0x1704             // pmovzxbw    xmm0, qword [rdi + rdx]
	LONG $0x30380f66; WORD $0x174c; BYTE $0x08 // pmovzxbw    xmm1, qword [rdi + rdx + 8]
	LONG $0x047f0ff3; BYTE $0x56               // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1056             // movdqu    oword [rsi + 2*rdx + 16], xmm1

LBB30_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB30_3

LBB30_16:
	RET

LBB30_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB30_14
	JMP  LBB30_15

TEXT ·_cast_numeric_int8_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB31_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB31_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB31_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB31_9

LBB31_2:
	WORD $0xc931 // xor    ecx, ecx

LBB31_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x03e08348         // and    rax, 3
	JE   LBB31_5

LBB31_4:
	LONG $0x0f14be0f // movsx    edx, byte [rdi + rcx]
	LONG $0x4e148966 // mov    word [rsi + 2*rcx], dx
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc08348 // add    rax, -1
	JNE  LBB31_4

LBB31_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB31_16

LBB31_6:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x0f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rcx + 1]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x0f44be0f; BYTE $0x02 // movsx    eax, byte [rdi + rcx + 2]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x0f44be0f; BYTE $0x03 // movsx    eax, byte [rdi + rcx + 3]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB31_6
	JMP  LBB31_16

LBB31_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB31_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB31_12:
	LONG $0x20380f66; WORD $0x1704             // pmovsxbw    xmm0, qword [rdi + rdx]
	LONG $0x20380f66; WORD $0x174c; BYTE $0x08 // pmovsxbw    xmm1, qword [rdi + rdx + 8]
	LONG $0x047f0ff3; BYTE $0x56               // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1056             // movdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x20380f66; WORD $0x1744; BYTE $0x10 // pmovsxbw    xmm0, qword [rdi + rdx + 16]
	LONG $0x20380f66; WORD $0x174c; BYTE $0x18 // pmovsxbw    xmm1, qword [rdi + rdx + 24]
	LONG $0x447f0ff3; WORD $0x2056             // movdqu    oword [rsi + 2*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3056             // movdqu    oword [rsi + 2*rdx + 48], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB31_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB31_15

LBB31_14:
	LONG $0x20380f66; WORD $0x1704             // pmovsxbw    xmm0, qword [rdi + rdx]
	LONG $0x20380f66; WORD $0x174c; BYTE $0x08 // pmovsxbw    xmm1, qword [rdi + rdx + 8]
	LONG $0x047f0ff3; BYTE $0x56               // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1056             // movdqu    oword [rsi + 2*rdx + 16], xmm1

LBB31_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB31_3

LBB31_16:
	RET

LBB31_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB31_14
	JMP  LBB31_15

TEXT ·_cast_numeric_uint16_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB32_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB32_2
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB32_9
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB32_9

LBB32_2:
	WORD $0xc931 // xor    ecx, ecx

LBB32_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB32_5

LBB32_4:
	LONG $0x4f04b70f // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB32_4

LBB32_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB32_17

LBB32_6:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x4f44b70f; BYTE $0x02 // movzx    eax, word [rdi + 2*rcx + 2]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x4f44b70f; BYTE $0x04 // movzx    eax, word [rdi + 2*rcx + 4]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x4f44b70f; BYTE $0x06 // movzx    eax, word [rdi + 2*rcx + 6]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB32_6
	JMP  LBB32_17

LBB32_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x04eac148         // shr    rdx, 4
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB32_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB32_13

LBB32_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB32_12:
	LONG $0x4704100f             // movups    xmm0, oword [rdi + 2*rax]
	LONG $0x474c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 2*rax + 16]
	LONG $0x4604110f             // movups    oword [rsi + 2*rax], xmm0
	LONG $0x464c110f; BYTE $0x10 // movups    oword [rsi + 2*rax + 16], xmm1
	LONG $0x4744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 2*rax + 32]
	LONG $0x474c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 2*rax + 48]
	LONG $0x4644110f; BYTE $0x20 // movups    oword [rsi + 2*rax + 32], xmm0
	LONG $0x464c110f; BYTE $0x30 // movups    oword [rsi + 2*rax + 48], xmm1
	LONG $0x4744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 2*rax + 64]
	LONG $0x474c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 2*rax + 80]
	LONG $0x4644110f; BYTE $0x40 // movups    oword [rsi + 2*rax + 64], xmm0
	LONG $0x464c110f; BYTE $0x50 // movups    oword [rsi + 2*rax + 80], xmm1
	LONG $0x4744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 2*rax + 96]
	LONG $0x474c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 2*rax + 112]
	LONG $0x4644110f; BYTE $0x60 // movups    oword [rsi + 2*rax + 96], xmm0
	LONG $0x464c110f; BYTE $0x70 // movups    oword [rsi + 2*rax + 112], xmm1
	LONG $0x40c08348             // add    rax, 64
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB32_12

LBB32_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB32_16
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB32_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB32_15

LBB32_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB32_3

LBB32_17:
	RET

TEXT ·_cast_numeric_int16_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB33_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB33_2
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB33_9
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB33_9

LBB33_2:
	WORD $0xc931 // xor    ecx, ecx

LBB33_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB33_5

LBB33_4:
	LONG $0x4f04b70f // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB33_4

LBB33_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB33_17

LBB33_6:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x4f44b70f; BYTE $0x02 // movzx    eax, word [rdi + 2*rcx + 2]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x4f44b70f; BYTE $0x04 // movzx    eax, word [rdi + 2*rcx + 4]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x4f44b70f; BYTE $0x06 // movzx    eax, word [rdi + 2*rcx + 6]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB33_6
	JMP  LBB33_17

LBB33_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x04eac148         // shr    rdx, 4
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB33_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB33_13

LBB33_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB33_12:
	LONG $0x4704100f             // movups    xmm0, oword [rdi + 2*rax]
	LONG $0x474c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 2*rax + 16]
	LONG $0x4604110f             // movups    oword [rsi + 2*rax], xmm0
	LONG $0x464c110f; BYTE $0x10 // movups    oword [rsi + 2*rax + 16], xmm1
	LONG $0x4744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 2*rax + 32]
	LONG $0x474c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 2*rax + 48]
	LONG $0x4644110f; BYTE $0x20 // movups    oword [rsi + 2*rax + 32], xmm0
	LONG $0x464c110f; BYTE $0x30 // movups    oword [rsi + 2*rax + 48], xmm1
	LONG $0x4744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 2*rax + 64]
	LONG $0x474c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 2*rax + 80]
	LONG $0x4644110f; BYTE $0x40 // movups    oword [rsi + 2*rax + 64], xmm0
	LONG $0x464c110f; BYTE $0x50 // movups    oword [rsi + 2*rax + 80], xmm1
	LONG $0x4744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 2*rax + 96]
	LONG $0x474c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 2*rax + 112]
	LONG $0x4644110f; BYTE $0x60 // movups    oword [rsi + 2*rax + 96], xmm0
	LONG $0x464c110f; BYTE $0x70 // movups    oword [rsi + 2*rax + 112], xmm1
	LONG $0x40c08348             // add    rax, 64
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB33_12

LBB33_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB33_16
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB33_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB33_15

LBB33_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB33_3

LBB33_17:
	RET

DATA LCDATA17<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA17<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
GLOBL LCDATA17<>(SB), 8, $16

TEXT ·_cast_numeric_uint32_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA17<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB34_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB34_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB34_10

LBB34_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB34_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI34_0] */

LBB34_6:
	LONG $0x0c6f0ff3; BYTE $0x97   // movdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546f0ff3; WORD $0x1097 // movdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm1
	LONG $0x4c6f0ff3; WORD $0x2097 // movdqu    xmm1, oword [rdi + 4*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3097 // movdqu    xmm2, oword [rdi + 4*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0x1056 // movdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB34_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB34_9

LBB34_8:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI34_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm0

LBB34_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB34_11

LBB34_10:
	LONG $0x8f04b70f         // movzx    eax, word [rdi + 4*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB34_10

LBB34_11:
	RET

LBB34_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB34_8
	JMP  LBB34_9

DATA LCDATA18<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA18<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
GLOBL LCDATA18<>(SB), 8, $16

TEXT ·_cast_numeric_int32_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA18<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB35_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB35_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB35_10

LBB35_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB35_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI35_0] */

LBB35_6:
	LONG $0x0c6f0ff3; BYTE $0x97   // movdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546f0ff3; WORD $0x1097 // movdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm1
	LONG $0x4c6f0ff3; WORD $0x2097 // movdqu    xmm1, oword [rdi + 4*rdx + 32]
	LONG $0x546f0ff3; WORD $0x3097 // movdqu    xmm2, oword [rdi + 4*rdx + 48]
	LONG $0x00380f66; BYTE $0xc8   // pshufb    xmm1, xmm0
	LONG $0x00380f66; BYTE $0xd0   // pshufb    xmm2, xmm0
	LONG $0xca6c0f66               // punpcklqdq    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0x1056 // movdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB35_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB35_9

LBB35_8:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI35_0] */
	LONG $0x00380f66; BYTE $0xc2   // pshufb    xmm0, xmm2
	LONG $0x00380f66; BYTE $0xca   // pshufb    xmm1, xmm2
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm0

LBB35_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB35_11

LBB35_10:
	LONG $0x8f04b70f         // movzx    eax, word [rdi + 4*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB35_10

LBB35_11:
	RET

LBB35_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB35_8
	JMP  LBB35_9

TEXT ·_cast_numeric_uint64_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB36_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB36_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB36_10

LBB36_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB36_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB36_6:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1
	LONG $0x446f0ff3; WORD $0x20d7 // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c6f0ff3; WORD $0x30d7 // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x447e0f66; WORD $0x0856 // movd    dword [rsi + 2*rdx + 8], xmm0
	LONG $0x4c7e0f66; WORD $0x0c56 // movd    dword [rsi + 2*rdx + 12], xmm1
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB36_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB36_9

LBB36_8:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1

LBB36_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB36_11

LBB36_10:
	LONG $0xcf04b70f         // movzx    eax, word [rdi + 8*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB36_10

LBB36_11:
	RET

LBB36_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB36_8
	JMP  LBB36_9

TEXT ·_cast_numeric_int64_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB37_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB37_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB37_10

LBB37_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB37_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB37_6:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1
	LONG $0x446f0ff3; WORD $0x20d7 // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c6f0ff3; WORD $0x30d7 // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x447e0f66; WORD $0x0856 // movd    dword [rsi + 2*rdx + 8], xmm0
	LONG $0x4c7e0f66; WORD $0x0c56 // movd    dword [rsi + 2*rdx + 12], xmm1
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB37_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB37_9

LBB37_8:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1

LBB37_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB37_11

LBB37_10:
	LONG $0xcf04b70f         // movzx    eax, word [rdi + 8*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB37_10

LBB37_11:
	RET

LBB37_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB37_8
	JMP  LBB37_9

TEXT ·_cast_numeric_float32_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB38_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB38_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB38_10

LBB38_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB38_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB38_6:
	LONG $0x9704100f               // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10   // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0xc16b0f66               // packssdw    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x56   // movdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x9744100f; BYTE $0x20   // movups    xmm0, oword [rdi + 4*rdx + 32]
	LONG $0x974c100f; BYTE $0x30   // movups    xmm1, oword [rdi + 4*rdx + 48]
	LONG $0xc05b0ff3               // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3               // cvttps2dq    xmm1, xmm1
	LONG $0xc16b0f66               // packssdw    xmm0, xmm1
	LONG $0x447f0ff3; WORD $0x1056 // movdqu    oword [rsi + 2*rdx + 16], xmm0
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB38_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB38_9

LBB38_8:
	LONG $0x9704100f             // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3             // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3             // cvttps2dq    xmm1, xmm1
	LONG $0xc16b0f66             // packssdw    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x56 // movdqu    oword [rsi + 2*rdx], xmm0

LBB38_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB38_11

LBB38_10:
	LONG $0x042c0ff3; BYTE $0x8f // cvttss2si    eax, dword [rdi + 4*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB38_10

LBB38_11:
	RET

LBB38_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB38_8
	JMP  LBB38_9

TEXT ·_cast_numeric_float64_int16_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB39_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB39_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB39_10

LBB39_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB39_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB39_6:
	LONG $0x04100f66; BYTE $0xd7   // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c100f66; WORD $0x10d7 // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1
	LONG $0x44100f66; WORD $0x20d7 // movupd    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c100f66; WORD $0x30d7 // movupd    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x447e0f66; WORD $0x0856 // movd    dword [rsi + 2*rdx + 8], xmm0
	LONG $0x4c7e0f66; WORD $0x0c56 // movd    dword [rsi + 2*rdx + 12], xmm1
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB39_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB39_9

LBB39_8:
	LONG $0x04100f66; BYTE $0xd7   // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c100f66; WORD $0x10d7 // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc0700ff2; BYTE $0xe8   // pshuflw    xmm0, xmm0, 232
	LONG $0xc9700ff2; BYTE $0xe8   // pshuflw    xmm1, xmm1, 232
	LONG $0x047e0f66; BYTE $0x56   // movd    dword [rsi + 2*rdx], xmm0
	LONG $0x4c7e0f66; WORD $0x0456 // movd    dword [rsi + 2*rdx + 4], xmm1

LBB39_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB39_11

LBB39_10:
	LONG $0x042c0ff2; BYTE $0xcf // cvttsd2si    eax, qword [rdi + 8*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB39_10

LBB39_11:
	RET

LBB39_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB39_8
	JMP  LBB39_9

TEXT ·_cast_numeric_uint8_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB40_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB40_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB40_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB40_9

LBB40_2:
	WORD $0xc931 // xor    ecx, ecx

LBB40_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x03e08348         // and    rax, 3
	JE   LBB40_5

LBB40_4:
	LONG $0x0f14b60f         // movzx    edx, byte [rdi + rcx]
	WORD $0x1489; BYTE $0x8e // mov    dword [rsi + 4*rcx], edx
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB40_4

LBB40_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB40_16

LBB40_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x048e4489             // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x088e4489             // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x0c8e4489             // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB40_6
	JMP  LBB40_16

LBB40_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB40_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB40_12:
	LONG $0x31380f66; WORD $0x1704             // pmovzxbd    xmm0, dword [rdi + rdx]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x04 // pmovzxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x31380f66; WORD $0x1744; BYTE $0x08 // pmovzxbd    xmm0, dword [rdi + rdx + 8]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x0c // pmovzxbd    xmm1, dword [rdi + rdx + 12]
	LONG $0x447f0ff3; WORD $0x2096             // movdqu    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3096             // movdqu    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB40_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB40_15

LBB40_14:
	LONG $0x31380f66; WORD $0x1704             // pmovzxbd    xmm0, dword [rdi + rdx]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x04 // pmovzxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1

LBB40_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB40_3

LBB40_16:
	RET

LBB40_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB40_14
	JMP  LBB40_15

TEXT ·_cast_numeric_int8_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB41_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB41_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB41_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB41_9

LBB41_2:
	WORD $0xc931 // xor    ecx, ecx

LBB41_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x03e08348         // and    rax, 3
	JE   LBB41_5

LBB41_4:
	LONG $0x0f14be0f         // movsx    edx, byte [rdi + rcx]
	WORD $0x1489; BYTE $0x8e // mov    dword [rsi + 4*rcx], edx
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB41_4

LBB41_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB41_16

LBB41_6:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x0f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rcx + 1]
	LONG $0x048e4489             // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x0f44be0f; BYTE $0x02 // movsx    eax, byte [rdi + rcx + 2]
	LONG $0x088e4489             // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0f44be0f; BYTE $0x03 // movsx    eax, byte [rdi + rcx + 3]
	LONG $0x0c8e4489             // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB41_6
	JMP  LBB41_16

LBB41_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB41_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB41_12:
	LONG $0x21380f66; WORD $0x1704             // pmovsxbd    xmm0, dword [rdi + rdx]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x04 // pmovsxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x21380f66; WORD $0x1744; BYTE $0x08 // pmovsxbd    xmm0, dword [rdi + rdx + 8]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x0c // pmovsxbd    xmm1, dword [rdi + rdx + 12]
	LONG $0x447f0ff3; WORD $0x2096             // movdqu    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3096             // movdqu    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB41_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB41_15

LBB41_14:
	LONG $0x21380f66; WORD $0x1704             // pmovsxbd    xmm0, dword [rdi + rdx]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x04 // pmovsxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1

LBB41_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB41_3

LBB41_16:
	RET

LBB41_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB41_14
	JMP  LBB41_15

TEXT ·_cast_numeric_uint16_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB42_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB42_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB42_10

LBB42_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB42_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB42_6:
	LONG $0x33380f66; WORD $0x5704             // pmovzxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x08 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x33380f66; WORD $0x5744; BYTE $0x10 // pmovzxwd    xmm0, qword [rdi + 2*rdx + 16]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x18 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 24]
	LONG $0x447f0ff3; WORD $0x2096             // movdqu    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3096             // movdqu    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB42_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB42_9

LBB42_8:
	LONG $0x33380f66; WORD $0x5704             // pmovzxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x08 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1

LBB42_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB42_11

LBB42_10:
	LONG $0x4f04b70f         // movzx    eax, word [rdi + 2*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB42_10

LBB42_11:
	RET

LBB42_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB42_8
	JMP  LBB42_9

TEXT ·_cast_numeric_int16_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB43_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB43_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB43_10

LBB43_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB43_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB43_6:
	LONG $0x23380f66; WORD $0x5704             // pmovsxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x23380f66; WORD $0x5744; BYTE $0x10 // pmovsxwd    xmm0, qword [rdi + 2*rdx + 16]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 24]
	LONG $0x447f0ff3; WORD $0x2096             // movdqu    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3096             // movdqu    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB43_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB43_9

LBB43_8:
	LONG $0x23380f66; WORD $0x5704             // pmovsxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1

LBB43_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB43_11

LBB43_10:
	LONG $0x4f04bf0f         // movsx    eax, word [rdi + 2*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB43_10

LBB43_11:
	RET

LBB43_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB43_8
	JMP  LBB43_9

TEXT ·_cast_numeric_uint32_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB44_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB44_2
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB44_9
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB44_9

LBB44_2:
	WORD $0xc931 // xor    ecx, ecx

LBB44_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB44_5

LBB44_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB44_4

LBB44_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB44_17

LBB44_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB44_6
	JMP  LBB44_17

LBB44_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x03eac148         // shr    rdx, 3
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB44_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB44_13

LBB44_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB44_12:
	LONG $0x8704100f             // movups    xmm0, oword [rdi + 4*rax]
	LONG $0x874c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rax + 16]
	LONG $0x8604110f             // movups    oword [rsi + 4*rax], xmm0
	LONG $0x864c110f; BYTE $0x10 // movups    oword [rsi + 4*rax + 16], xmm1
	LONG $0x8744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 4*rax + 32]
	LONG $0x874c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x8644110f; BYTE $0x20 // movups    oword [rsi + 4*rax + 32], xmm0
	LONG $0x864c110f; BYTE $0x30 // movups    oword [rsi + 4*rax + 48], xmm1
	LONG $0x8744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 4*rax + 64]
	LONG $0x874c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 4*rax + 80]
	LONG $0x8644110f; BYTE $0x40 // movups    oword [rsi + 4*rax + 64], xmm0
	LONG $0x864c110f; BYTE $0x50 // movups    oword [rsi + 4*rax + 80], xmm1
	LONG $0x8744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 4*rax + 96]
	LONG $0x874c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 4*rax + 112]
	LONG $0x8644110f; BYTE $0x60 // movups    oword [rsi + 4*rax + 96], xmm0
	LONG $0x864c110f; BYTE $0x70 // movups    oword [rsi + 4*rax + 112], xmm1
	LONG $0x20c08348             // add    rax, 32
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB44_12

LBB44_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB44_16
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB44_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB44_15

LBB44_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB44_3

LBB44_17:
	RET

TEXT ·_cast_numeric_int32_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB45_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB45_2
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB45_9
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB45_9

LBB45_2:
	WORD $0xc931 // xor    ecx, ecx

LBB45_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB45_5

LBB45_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB45_4

LBB45_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB45_17

LBB45_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB45_6
	JMP  LBB45_17

LBB45_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x03eac148         // shr    rdx, 3
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB45_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB45_13

LBB45_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB45_12:
	LONG $0x8704100f             // movups    xmm0, oword [rdi + 4*rax]
	LONG $0x874c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rax + 16]
	LONG $0x8604110f             // movups    oword [rsi + 4*rax], xmm0
	LONG $0x864c110f; BYTE $0x10 // movups    oword [rsi + 4*rax + 16], xmm1
	LONG $0x8744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 4*rax + 32]
	LONG $0x874c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x8644110f; BYTE $0x20 // movups    oword [rsi + 4*rax + 32], xmm0
	LONG $0x864c110f; BYTE $0x30 // movups    oword [rsi + 4*rax + 48], xmm1
	LONG $0x8744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 4*rax + 64]
	LONG $0x874c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 4*rax + 80]
	LONG $0x8644110f; BYTE $0x40 // movups    oword [rsi + 4*rax + 64], xmm0
	LONG $0x864c110f; BYTE $0x50 // movups    oword [rsi + 4*rax + 80], xmm1
	LONG $0x8744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 4*rax + 96]
	LONG $0x874c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 4*rax + 112]
	LONG $0x8644110f; BYTE $0x60 // movups    oword [rsi + 4*rax + 96], xmm0
	LONG $0x864c110f; BYTE $0x70 // movups    oword [rsi + 4*rax + 112], xmm1
	LONG $0x20c08348             // add    rax, 32
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB45_12

LBB45_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB45_16
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB45_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB45_15

LBB45_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB45_3

LBB45_17:
	RET

TEXT ·_cast_numeric_uint64_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB46_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB46_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB46_10

LBB46_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB46_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB46_6:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x96   // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x446f0ff3; WORD $0x20d7 // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c6f0ff3; WORD $0x30d7 // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x447f0ff3; WORD $0x1096 // movdqu    oword [rsi + 4*rdx + 16], xmm0
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB46_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB46_9

LBB46_8:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x96   // movdqu    oword [rsi + 4*rdx], xmm0

LBB46_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB46_11

LBB46_10:
	WORD $0x048b; BYTE $0xcf // mov    eax, dword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB46_10

LBB46_11:
	RET

LBB46_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB46_8
	JMP  LBB46_9

TEXT ·_cast_numeric_int64_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB47_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB47_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB47_10

LBB47_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB47_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB47_6:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x96   // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x446f0ff3; WORD $0x20d7 // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c6f0ff3; WORD $0x30d7 // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x447f0ff3; WORD $0x1096 // movdqu    oword [rsi + 4*rdx + 16], xmm0
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB47_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB47_9

LBB47_8:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x96   // movdqu    oword [rsi + 4*rdx], xmm0

LBB47_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB47_11

LBB47_10:
	WORD $0x048b; BYTE $0xcf // mov    eax, dword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB47_10

LBB47_11:
	RET

LBB47_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB47_8
	JMP  LBB47_9

DATA LCDATA19<>+0x000(SB)/8, $0x4f0000004f000000
DATA LCDATA19<>+0x008(SB)/8, $0x4f0000004f000000
DATA LCDATA19<>+0x010(SB)/8, $0x8000000080000000
DATA LCDATA19<>+0x018(SB)/8, $0x8000000080000000
GLOBL LCDATA19<>(SB), 8, $32

TEXT ·_cast_numeric_float32_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA19<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB48_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB48_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB48_10

LBB48_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB48_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx
	LONG $0x004d280f         // movaps    xmm1, oword 0[rbp] /* [rip + .LCPI48_0] */
	LONG $0x1055280f         // movaps    xmm2, oword 16[rbp] /* [rip + .LCPI48_1] */

LBB48_6:
	LONG $0x971c100f             // movups    xmm3, oword [rdi + 4*rdx]
	LONG $0x9764100f; BYTE $0x10 // movups    xmm4, oword [rdi + 4*rdx + 16]
	WORD $0x280f; BYTE $0xc3     // movaps    xmm0, xmm3
	LONG $0x01c1c20f             // cmpltps    xmm0, xmm1
	LONG $0xeb5b0ff3             // cvttps2dq    xmm5, xmm3
	WORD $0x5c0f; BYTE $0xd9     // subps    xmm3, xmm1
	LONG $0xdb5b0ff3             // cvttps2dq    xmm3, xmm3
	WORD $0x570f; BYTE $0xda     // xorps    xmm3, xmm2
	LONG $0x14380f66; BYTE $0xdd // blendvps    xmm3, xmm5, xmm0
	WORD $0x280f; BYTE $0xc4     // movaps    xmm0, xmm4
	LONG $0x01c1c20f             // cmpltps    xmm0, xmm1
	LONG $0xec5b0ff3             // cvttps2dq    xmm5, xmm4
	WORD $0x5c0f; BYTE $0xe1     // subps    xmm4, xmm1
	LONG $0xe45b0ff3             // cvttps2dq    xmm4, xmm4
	WORD $0x570f; BYTE $0xe2     // xorps    xmm4, xmm2
	LONG $0x14380f66; BYTE $0xe5 // blendvps    xmm4, xmm5, xmm0
	LONG $0x961c110f             // movups    oword [rsi + 4*rdx], xmm3
	LONG $0x9664110f; BYTE $0x10 // movups    oword [rsi + 4*rdx + 16], xmm4
	LONG $0x975c100f; BYTE $0x20 // movups    xmm3, oword [rdi + 4*rdx + 32]
	WORD $0x280f; BYTE $0xc3     // movaps    xmm0, xmm3
	LONG $0x01c1c20f             // cmpltps    xmm0, xmm1
	LONG $0xe35b0ff3             // cvttps2dq    xmm4, xmm3
	WORD $0x5c0f; BYTE $0xd9     // subps    xmm3, xmm1
	LONG $0xdb5b0ff3             // cvttps2dq    xmm3, xmm3
	WORD $0x570f; BYTE $0xda     // xorps    xmm3, xmm2
	LONG $0x14380f66; BYTE $0xdc // blendvps    xmm3, xmm4, xmm0
	LONG $0x9764100f; BYTE $0x30 // movups    xmm4, oword [rdi + 4*rdx + 48]
	WORD $0x280f; BYTE $0xc4     // movaps    xmm0, xmm4
	LONG $0x01c1c20f             // cmpltps    xmm0, xmm1
	LONG $0xec5b0ff3             // cvttps2dq    xmm5, xmm4
	WORD $0x5c0f; BYTE $0xe1     // subps    xmm4, xmm1
	LONG $0xe45b0ff3             // cvttps2dq    xmm4, xmm4
	WORD $0x570f; BYTE $0xe2     // xorps    xmm4, xmm2
	LONG $0x14380f66; BYTE $0xe5 // blendvps    xmm4, xmm5, xmm0
	LONG $0x965c110f; BYTE $0x20 // movups    oword [rsi + 4*rdx + 32], xmm3
	LONG $0x9664110f; BYTE $0x30 // movups    oword [rsi + 4*rdx + 48], xmm4
	LONG $0x10c28348             // add    rdx, 16
	LONG $0x02c08348             // add    rax, 2
	JNE  LBB48_6
	LONG $0x01c0f641             // test    r8b, 1
	JE   LBB48_9

LBB48_8:
	LONG $0x970c100f             // movups    xmm1, oword [rdi + 4*rdx]
	LONG $0x9754100f; BYTE $0x10 // movups    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x005d280f             // movaps    xmm3, oword 0[rbp] /* [rip + .LCPI48_0] */
	WORD $0x280f; BYTE $0xc1     // movaps    xmm0, xmm1
	LONG $0x01c3c20f             // cmpltps    xmm0, xmm3
	LONG $0xe15b0ff3             // cvttps2dq    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xcb     // subps    xmm1, xmm3
	LONG $0xc95b0ff3             // cvttps2dq    xmm1, xmm1
	LONG $0x106d280f             // movaps    xmm5, oword 16[rbp] /* [rip + .LCPI48_1] */
	WORD $0x570f; BYTE $0xcd     // xorps    xmm1, xmm5
	LONG $0x14380f66; BYTE $0xcc // blendvps    xmm1, xmm4, xmm0
	WORD $0x280f; BYTE $0xc2     // movaps    xmm0, xmm2
	LONG $0x01c3c20f             // cmpltps    xmm0, xmm3
	LONG $0xe25b0ff3             // cvttps2dq    xmm4, xmm2
	WORD $0x5c0f; BYTE $0xd3     // subps    xmm2, xmm3
	LONG $0xd25b0ff3             // cvttps2dq    xmm2, xmm2
	WORD $0x570f; BYTE $0xd5     // xorps    xmm2, xmm5
	LONG $0x14380f66; BYTE $0xd4 // blendvps    xmm2, xmm4, xmm0
	LONG $0x960c110f             // movups    oword [rsi + 4*rdx], xmm1
	LONG $0x9654110f; BYTE $0x10 // movups    oword [rsi + 4*rdx + 16], xmm2

LBB48_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB48_11

LBB48_10:
	LONG $0x2c0f48f3; WORD $0x8f04 // cvttss2si    rax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e       // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348               // add    rcx, 1
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB48_10

LBB48_11:
	RET

LBB48_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB48_8
	JMP  LBB48_9

TEXT ·_cast_numeric_float64_uint32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB49_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB49_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB49_3

LBB49_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB49_8:
	LONG $0x2c0f48f2; WORD $0xd704             // cvttsd2si    rax, qword [rdi + 8*rdx]
	WORD $0x0489; BYTE $0x96                   // mov    dword [rsi + 4*rdx], eax
	LONG $0x2c0f48f2; WORD $0xd744; BYTE $0x08 // cvttsd2si    rax, qword [rdi + 8*rdx + 8]
	LONG $0x04964489                           // mov    dword [rsi + 4*rdx + 4], eax
	LONG $0x2c0f48f2; WORD $0xd744; BYTE $0x10 // cvttsd2si    rax, qword [rdi + 8*rdx + 16]
	LONG $0x08964489                           // mov    dword [rsi + 4*rdx + 8], eax
	LONG $0x2c0f48f2; WORD $0xd744; BYTE $0x18 // cvttsd2si    rax, qword [rdi + 8*rdx + 24]
	LONG $0x0c964489                           // mov    dword [rsi + 4*rdx + 12], eax
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JNE  LBB49_8

LBB49_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB49_6
	LONG $0x960c8d48         // lea    rcx, [rsi + 4*rdx]
	LONG $0xd7148d48         // lea    rdx, [rdi + 8*rdx]
	WORD $0xf631             // xor    esi, esi

LBB49_5:
	LONG $0x2c0f48f2; WORD $0xf23c // cvttsd2si    rdi, qword [rdx + 8*rsi]
	WORD $0x3c89; BYTE $0xb1       // mov    dword [rcx + 4*rsi], edi
	LONG $0x01c68348               // add    rsi, 1
	WORD $0x3949; BYTE $0xf0       // cmp    r8, rsi
	JNE  LBB49_5

LBB49_6:
	RET

TEXT ·_cast_numeric_uint8_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB50_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB50_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB50_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB50_9

LBB50_2:
	WORD $0xc931 // xor    ecx, ecx

LBB50_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x03e08348         // and    rax, 3
	JE   LBB50_5

LBB50_4:
	LONG $0x0f14b60f         // movzx    edx, byte [rdi + rcx]
	WORD $0x1489; BYTE $0x8e // mov    dword [rsi + 4*rcx], edx
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB50_4

LBB50_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB50_16

LBB50_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x048e4489             // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x088e4489             // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x0c8e4489             // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB50_6
	JMP  LBB50_16

LBB50_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB50_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB50_12:
	LONG $0x31380f66; WORD $0x1704             // pmovzxbd    xmm0, dword [rdi + rdx]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x04 // pmovzxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x31380f66; WORD $0x1744; BYTE $0x08 // pmovzxbd    xmm0, dword [rdi + rdx + 8]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x0c // pmovzxbd    xmm1, dword [rdi + rdx + 12]
	LONG $0x447f0ff3; WORD $0x2096             // movdqu    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3096             // movdqu    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB50_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB50_15

LBB50_14:
	LONG $0x31380f66; WORD $0x1704             // pmovzxbd    xmm0, dword [rdi + rdx]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x04 // pmovzxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1

LBB50_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB50_3

LBB50_16:
	RET

LBB50_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB50_14
	JMP  LBB50_15

TEXT ·_cast_numeric_int8_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB51_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB51_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB51_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB51_9

LBB51_2:
	WORD $0xc931 // xor    ecx, ecx

LBB51_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0x03e08348         // and    rax, 3
	JE   LBB51_5

LBB51_4:
	LONG $0x0f14be0f         // movsx    edx, byte [rdi + rcx]
	WORD $0x1489; BYTE $0x8e // mov    dword [rsi + 4*rcx], edx
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB51_4

LBB51_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB51_16

LBB51_6:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x0f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rcx + 1]
	LONG $0x048e4489             // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x0f44be0f; BYTE $0x02 // movsx    eax, byte [rdi + rcx + 2]
	LONG $0x088e4489             // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0f44be0f; BYTE $0x03 // movsx    eax, byte [rdi + rcx + 3]
	LONG $0x0c8e4489             // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB51_6
	JMP  LBB51_16

LBB51_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB51_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB51_12:
	LONG $0x21380f66; WORD $0x1704             // pmovsxbd    xmm0, dword [rdi + rdx]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x04 // pmovsxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x21380f66; WORD $0x1744; BYTE $0x08 // pmovsxbd    xmm0, dword [rdi + rdx + 8]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x0c // pmovsxbd    xmm1, dword [rdi + rdx + 12]
	LONG $0x447f0ff3; WORD $0x2096             // movdqu    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3096             // movdqu    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB51_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB51_15

LBB51_14:
	LONG $0x21380f66; WORD $0x1704             // pmovsxbd    xmm0, dword [rdi + rdx]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x04 // pmovsxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1

LBB51_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB51_3

LBB51_16:
	RET

LBB51_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB51_14
	JMP  LBB51_15

TEXT ·_cast_numeric_uint16_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB52_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB52_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB52_10

LBB52_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB52_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB52_6:
	LONG $0x33380f66; WORD $0x5704             // pmovzxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x08 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x33380f66; WORD $0x5744; BYTE $0x10 // pmovzxwd    xmm0, qword [rdi + 2*rdx + 16]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x18 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 24]
	LONG $0x447f0ff3; WORD $0x2096             // movdqu    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3096             // movdqu    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB52_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB52_9

LBB52_8:
	LONG $0x33380f66; WORD $0x5704             // pmovzxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x08 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1

LBB52_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB52_11

LBB52_10:
	LONG $0x4f04b70f         // movzx    eax, word [rdi + 2*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB52_10

LBB52_11:
	RET

LBB52_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB52_8
	JMP  LBB52_9

TEXT ·_cast_numeric_int16_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB53_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB53_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB53_10

LBB53_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB53_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB53_6:
	LONG $0x23380f66; WORD $0x5704             // pmovsxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x23380f66; WORD $0x5744; BYTE $0x10 // pmovsxwd    xmm0, qword [rdi + 2*rdx + 16]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 24]
	LONG $0x447f0ff3; WORD $0x2096             // movdqu    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x3096             // movdqu    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB53_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB53_9

LBB53_8:
	LONG $0x23380f66; WORD $0x5704             // pmovsxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x047f0ff3; BYTE $0x96               // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x4c7f0ff3; WORD $0x1096             // movdqu    oword [rsi + 4*rdx + 16], xmm1

LBB53_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB53_11

LBB53_10:
	LONG $0x4f04bf0f         // movsx    eax, word [rdi + 2*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB53_10

LBB53_11:
	RET

LBB53_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB53_8
	JMP  LBB53_9

TEXT ·_cast_numeric_uint32_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB54_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB54_2
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB54_9
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB54_9

LBB54_2:
	WORD $0xc931 // xor    ecx, ecx

LBB54_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB54_5

LBB54_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB54_4

LBB54_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB54_17

LBB54_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB54_6
	JMP  LBB54_17

LBB54_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x03eac148         // shr    rdx, 3
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB54_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB54_13

LBB54_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB54_12:
	LONG $0x8704100f             // movups    xmm0, oword [rdi + 4*rax]
	LONG $0x874c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rax + 16]
	LONG $0x8604110f             // movups    oword [rsi + 4*rax], xmm0
	LONG $0x864c110f; BYTE $0x10 // movups    oword [rsi + 4*rax + 16], xmm1
	LONG $0x8744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 4*rax + 32]
	LONG $0x874c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x8644110f; BYTE $0x20 // movups    oword [rsi + 4*rax + 32], xmm0
	LONG $0x864c110f; BYTE $0x30 // movups    oword [rsi + 4*rax + 48], xmm1
	LONG $0x8744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 4*rax + 64]
	LONG $0x874c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 4*rax + 80]
	LONG $0x8644110f; BYTE $0x40 // movups    oword [rsi + 4*rax + 64], xmm0
	LONG $0x864c110f; BYTE $0x50 // movups    oword [rsi + 4*rax + 80], xmm1
	LONG $0x8744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 4*rax + 96]
	LONG $0x874c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 4*rax + 112]
	LONG $0x8644110f; BYTE $0x60 // movups    oword [rsi + 4*rax + 96], xmm0
	LONG $0x864c110f; BYTE $0x70 // movups    oword [rsi + 4*rax + 112], xmm1
	LONG $0x20c08348             // add    rax, 32
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB54_12

LBB54_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB54_16
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB54_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB54_15

LBB54_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB54_3

LBB54_17:
	RET

TEXT ·_cast_numeric_int32_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB55_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB55_2
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB55_9
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB55_9

LBB55_2:
	WORD $0xc931 // xor    ecx, ecx

LBB55_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB55_5

LBB55_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB55_4

LBB55_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB55_17

LBB55_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB55_6
	JMP  LBB55_17

LBB55_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x03eac148         // shr    rdx, 3
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB55_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB55_13

LBB55_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB55_12:
	LONG $0x8704100f             // movups    xmm0, oword [rdi + 4*rax]
	LONG $0x874c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rax + 16]
	LONG $0x8604110f             // movups    oword [rsi + 4*rax], xmm0
	LONG $0x864c110f; BYTE $0x10 // movups    oword [rsi + 4*rax + 16], xmm1
	LONG $0x8744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 4*rax + 32]
	LONG $0x874c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x8644110f; BYTE $0x20 // movups    oword [rsi + 4*rax + 32], xmm0
	LONG $0x864c110f; BYTE $0x30 // movups    oword [rsi + 4*rax + 48], xmm1
	LONG $0x8744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 4*rax + 64]
	LONG $0x874c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 4*rax + 80]
	LONG $0x8644110f; BYTE $0x40 // movups    oword [rsi + 4*rax + 64], xmm0
	LONG $0x864c110f; BYTE $0x50 // movups    oword [rsi + 4*rax + 80], xmm1
	LONG $0x8744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 4*rax + 96]
	LONG $0x874c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 4*rax + 112]
	LONG $0x8644110f; BYTE $0x60 // movups    oword [rsi + 4*rax + 96], xmm0
	LONG $0x864c110f; BYTE $0x70 // movups    oword [rsi + 4*rax + 112], xmm1
	LONG $0x20c08348             // add    rax, 32
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB55_12

LBB55_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB55_16
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB55_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB55_15

LBB55_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB55_3

LBB55_17:
	RET

TEXT ·_cast_numeric_uint64_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB56_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB56_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB56_10

LBB56_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB56_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB56_6:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x96   // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x446f0ff3; WORD $0x20d7 // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c6f0ff3; WORD $0x30d7 // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x447f0ff3; WORD $0x1096 // movdqu    oword [rsi + 4*rdx + 16], xmm0
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB56_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB56_9

LBB56_8:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x96   // movdqu    oword [rsi + 4*rdx], xmm0

LBB56_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB56_11

LBB56_10:
	WORD $0x048b; BYTE $0xcf // mov    eax, dword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB56_10

LBB56_11:
	RET

LBB56_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB56_8
	JMP  LBB56_9

TEXT ·_cast_numeric_int64_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB57_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB57_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB57_10

LBB57_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB57_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB57_6:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x96   // movdqu    oword [rsi + 4*rdx], xmm0
	LONG $0x446f0ff3; WORD $0x20d7 // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c6f0ff3; WORD $0x30d7 // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x447f0ff3; WORD $0x1096 // movdqu    oword [rsi + 4*rdx + 16], xmm0
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB57_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB57_9

LBB57_8:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0700f66; BYTE $0xe8   // pshufd    xmm0, xmm0, 232
	LONG $0xc9700f66; BYTE $0xe8   // pshufd    xmm1, xmm1, 232
	LONG $0xc16c0f66               // punpcklqdq    xmm0, xmm1
	LONG $0x047f0ff3; BYTE $0x96   // movdqu    oword [rsi + 4*rdx], xmm0

LBB57_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB57_11

LBB57_10:
	WORD $0x048b; BYTE $0xcf // mov    eax, dword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB57_10

LBB57_11:
	RET

LBB57_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB57_8
	JMP  LBB57_9

TEXT ·_cast_numeric_float32_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB58_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB58_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB58_10

LBB58_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB58_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB58_6:
	LONG $0x9704100f             // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3             // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3             // cvttps2dq    xmm1, xmm1
	LONG $0x9604110f             // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10 // movups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x9744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 4*rdx + 32]
	LONG $0x974c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 4*rdx + 48]
	LONG $0xc05b0ff3             // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3             // cvttps2dq    xmm1, xmm1
	LONG $0x9644110f; BYTE $0x20 // movups    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x964c110f; BYTE $0x30 // movups    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348             // add    rdx, 16
	LONG $0x02c08348             // add    rax, 2
	JNE  LBB58_6
	LONG $0x01c0f641             // test    r8b, 1
	JE   LBB58_9

LBB58_8:
	LONG $0x9704100f             // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0xc05b0ff3             // cvttps2dq    xmm0, xmm0
	LONG $0xc95b0ff3             // cvttps2dq    xmm1, xmm1
	LONG $0x9604110f             // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10 // movups    oword [rsi + 4*rdx + 16], xmm1

LBB58_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB58_11

LBB58_10:
	LONG $0x042c0ff3; BYTE $0x8f // cvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB58_10

LBB58_11:
	RET

LBB58_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB58_8
	JMP  LBB58_9

TEXT ·_cast_numeric_float64_int32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB59_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB59_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB59_10

LBB59_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB59_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB59_6:
	LONG $0x04100f66; BYTE $0xd7   // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c100f66; WORD $0x10d7 // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc1140f66               // unpcklpd    xmm0, xmm1
	LONG $0x04110f66; BYTE $0x96   // movupd    oword [rsi + 4*rdx], xmm0
	LONG $0x44100f66; WORD $0x20d7 // movupd    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c100f66; WORD $0x30d7 // movupd    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc1140f66               // unpcklpd    xmm0, xmm1
	LONG $0x44110f66; WORD $0x1096 // movupd    oword [rsi + 4*rdx + 16], xmm0
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB59_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB59_9

LBB59_8:
	LONG $0x04100f66; BYTE $0xd7   // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c100f66; WORD $0x10d7 // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc0e60f66               // cvttpd2dq    xmm0, xmm0
	LONG $0xc9e60f66               // cvttpd2dq    xmm1, xmm1
	LONG $0xc1140f66               // unpcklpd    xmm0, xmm1
	LONG $0x04110f66; BYTE $0x96   // movupd    oword [rsi + 4*rdx], xmm0

LBB59_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB59_11

LBB59_10:
	LONG $0x042c0ff2; BYTE $0xcf // cvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB59_10

LBB59_11:
	RET

LBB59_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB59_8
	JMP  LBB59_9

TEXT ·_cast_numeric_uint8_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB60_17
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB60_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB60_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB60_9

LBB60_2:
	WORD $0xc931 // xor    ecx, ecx

LBB60_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB60_5

LBB60_4:
	LONG $0x0f04b60f // movzx    eax, byte [rdi + rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB60_4

LBB60_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB60_17

LBB60_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB60_6
	JMP  LBB60_17

LBB60_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB60_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB60_13

LBB60_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB60_12:
	LONG $0x32380f66; WORD $0x0704             // pmovzxbq    xmm0, word [rdi + rax]
	LONG $0x32380f66; WORD $0x074c; BYTE $0x02 // pmovzxbq    xmm1, word [rdi + rax + 2]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x32380f66; WORD $0x0744; BYTE $0x04 // pmovzxbq    xmm0, word [rdi + rax + 4]
	LONG $0x32380f66; WORD $0x074c; BYTE $0x06 // pmovzxbq    xmm1, word [rdi + rax + 6]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x32380f66; WORD $0x0744; BYTE $0x08 // pmovzxbq    xmm0, word [rdi + rax + 8]
	LONG $0x32380f66; WORD $0x074c; BYTE $0x0a // pmovzxbq    xmm1, word [rdi + rax + 10]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x32380f66; WORD $0x0744; BYTE $0x0c // pmovzxbq    xmm0, word [rdi + rax + 12]
	LONG $0x32380f66; WORD $0x074c; BYTE $0x0e // pmovzxbq    xmm1, word [rdi + rax + 14]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB60_12

LBB60_13:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB60_16
	LONG $0xc6148d48         // lea    rdx, [rsi + 8*rax]
	LONG $0x10c28348         // add    rdx, 16
	LONG $0x07148d4c         // lea    r10, [rdi + rax]
	LONG $0x02c28349         // add    r10, 2
	WORD $0xc031             // xor    eax, eax

LBB60_15:
	QUAD $0xfe824432380f4166                   // pmovzxbq    xmm0, word [r10 + 4*rax - 2]
	LONG $0x380f4166; WORD $0x0c32; BYTE $0x82 // pmovzxbq    xmm1, word [r10 + 4*rax]
	LONG $0x427f0ff3; BYTE $0xf0               // movdqu    oword [rdx - 16], xmm0
	LONG $0x0a7f0ff3                           // movdqu    oword [rdx], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x01c08348                           // add    rax, 1
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JNE  LBB60_15

LBB60_16:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB60_3

LBB60_17:
	RET

TEXT ·_cast_numeric_int8_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB61_17
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB61_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB61_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB61_9

LBB61_2:
	WORD $0xc931 // xor    ecx, ecx

LBB61_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB61_5

LBB61_4:
	LONG $0x04be0f48; BYTE $0x0f // movsx    rax, byte [rdi + rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB61_4

LBB61_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB61_17

LBB61_6:
	LONG $0x04be0f48; BYTE $0x0f   // movsx    rax, byte [rdi + rcx]
	LONG $0xce048948               // mov    qword [rsi + 8*rcx], rax
	LONG $0x44be0f48; WORD $0x010f // movsx    rax, byte [rdi + rcx + 1]
	LONG $0xce448948; BYTE $0x08   // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0x44be0f48; WORD $0x020f // movsx    rax, byte [rdi + rcx + 2]
	LONG $0xce448948; BYTE $0x10   // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0x44be0f48; WORD $0x030f // movsx    rax, byte [rdi + rcx + 3]
	LONG $0xce448948; BYTE $0x18   // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB61_6
	JMP  LBB61_17

LBB61_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB61_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB61_13

LBB61_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB61_12:
	LONG $0x22380f66; WORD $0x0704             // pmovsxbq    xmm0, word [rdi + rax]
	LONG $0x22380f66; WORD $0x074c; BYTE $0x02 // pmovsxbq    xmm1, word [rdi + rax + 2]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x22380f66; WORD $0x0744; BYTE $0x04 // pmovsxbq    xmm0, word [rdi + rax + 4]
	LONG $0x22380f66; WORD $0x074c; BYTE $0x06 // pmovsxbq    xmm1, word [rdi + rax + 6]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x22380f66; WORD $0x0744; BYTE $0x08 // pmovsxbq    xmm0, word [rdi + rax + 8]
	LONG $0x22380f66; WORD $0x074c; BYTE $0x0a // pmovsxbq    xmm1, word [rdi + rax + 10]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x22380f66; WORD $0x0744; BYTE $0x0c // pmovsxbq    xmm0, word [rdi + rax + 12]
	LONG $0x22380f66; WORD $0x074c; BYTE $0x0e // pmovsxbq    xmm1, word [rdi + rax + 14]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB61_12

LBB61_13:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB61_16
	LONG $0xc6148d48         // lea    rdx, [rsi + 8*rax]
	LONG $0x10c28348         // add    rdx, 16
	LONG $0x07148d4c         // lea    r10, [rdi + rax]
	LONG $0x02c28349         // add    r10, 2
	WORD $0xc031             // xor    eax, eax

LBB61_15:
	QUAD $0xfe824422380f4166                   // pmovsxbq    xmm0, word [r10 + 4*rax - 2]
	LONG $0x380f4166; WORD $0x0c22; BYTE $0x82 // pmovsxbq    xmm1, word [r10 + 4*rax]
	LONG $0x427f0ff3; BYTE $0xf0               // movdqu    oword [rdx - 16], xmm0
	LONG $0x0a7f0ff3                           // movdqu    oword [rdx], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x01c08348                           // add    rax, 1
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JNE  LBB61_15

LBB61_16:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB61_3

LBB61_17:
	RET

TEXT ·_cast_numeric_uint16_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB62_12
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB62_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB62_11

LBB62_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB62_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB62_7

LBB62_5:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB62_6:
	LONG $0x34380f66; WORD $0x4704             // pmovzxwq    xmm0, dword [rdi + 2*rax]
	LONG $0x34380f66; WORD $0x474c; BYTE $0x04 // pmovzxwq    xmm1, dword [rdi + 2*rax + 4]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x34380f66; WORD $0x4744; BYTE $0x08 // pmovzxwq    xmm0, dword [rdi + 2*rax + 8]
	LONG $0x34380f66; WORD $0x474c; BYTE $0x0c // pmovzxwq    xmm1, dword [rdi + 2*rax + 12]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x34380f66; WORD $0x4744; BYTE $0x10 // pmovzxwq    xmm0, dword [rdi + 2*rax + 16]
	LONG $0x34380f66; WORD $0x474c; BYTE $0x14 // pmovzxwq    xmm1, dword [rdi + 2*rax + 20]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x34380f66; WORD $0x4744; BYTE $0x18 // pmovzxwq    xmm0, dword [rdi + 2*rax + 24]
	LONG $0x34380f66; WORD $0x474c; BYTE $0x1c // pmovzxwq    xmm1, dword [rdi + 2*rax + 28]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB62_6

LBB62_7:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB62_10
	LONG $0xc6148d48         // lea    rdx, [rsi + 8*rax]
	LONG $0x10c28348         // add    rdx, 16
	LONG $0x47148d4c         // lea    r10, [rdi + 2*rax]
	LONG $0x04c28349         // add    r10, 4
	WORD $0xc031             // xor    eax, eax

LBB62_9:
	QUAD $0xfcc24434380f4166                   // pmovzxwq    xmm0, dword [r10 + 8*rax - 4]
	LONG $0x380f4166; WORD $0x0c34; BYTE $0xc2 // pmovzxwq    xmm1, dword [r10 + 8*rax]
	LONG $0x427f0ff3; BYTE $0xf0               // movdqu    oword [rdx - 16], xmm0
	LONG $0x0a7f0ff3                           // movdqu    oword [rdx], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x01c08348                           // add    rax, 1
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JNE  LBB62_9

LBB62_10:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB62_12

LBB62_11:
	LONG $0x4f04b70f         // movzx    eax, word [rdi + 2*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB62_11

LBB62_12:
	RET

TEXT ·_cast_numeric_int16_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB63_12
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB63_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB63_11

LBB63_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB63_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB63_7

LBB63_5:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB63_6:
	LONG $0x24380f66; WORD $0x4704             // pmovsxwq    xmm0, dword [rdi + 2*rax]
	LONG $0x24380f66; WORD $0x474c; BYTE $0x04 // pmovsxwq    xmm1, dword [rdi + 2*rax + 4]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x24380f66; WORD $0x4744; BYTE $0x08 // pmovsxwq    xmm0, dword [rdi + 2*rax + 8]
	LONG $0x24380f66; WORD $0x474c; BYTE $0x0c // pmovsxwq    xmm1, dword [rdi + 2*rax + 12]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x24380f66; WORD $0x4744; BYTE $0x10 // pmovsxwq    xmm0, dword [rdi + 2*rax + 16]
	LONG $0x24380f66; WORD $0x474c; BYTE $0x14 // pmovsxwq    xmm1, dword [rdi + 2*rax + 20]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x24380f66; WORD $0x4744; BYTE $0x18 // pmovsxwq    xmm0, dword [rdi + 2*rax + 24]
	LONG $0x24380f66; WORD $0x474c; BYTE $0x1c // pmovsxwq    xmm1, dword [rdi + 2*rax + 28]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB63_6

LBB63_7:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB63_10
	LONG $0xc6148d48         // lea    rdx, [rsi + 8*rax]
	LONG $0x10c28348         // add    rdx, 16
	LONG $0x47148d4c         // lea    r10, [rdi + 2*rax]
	LONG $0x04c28349         // add    r10, 4
	WORD $0xc031             // xor    eax, eax

LBB63_9:
	QUAD $0xfcc24424380f4166                   // pmovsxwq    xmm0, dword [r10 + 8*rax - 4]
	LONG $0x380f4166; WORD $0x0c24; BYTE $0xc2 // pmovsxwq    xmm1, dword [r10 + 8*rax]
	LONG $0x427f0ff3; BYTE $0xf0               // movdqu    oword [rdx - 16], xmm0
	LONG $0x0a7f0ff3                           // movdqu    oword [rdx], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x01c08348                           // add    rax, 1
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JNE  LBB63_9

LBB63_10:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB63_12

LBB63_11:
	LONG $0x04bf0f48; BYTE $0x4f // movsx    rax, word [rdi + 2*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB63_11

LBB63_12:
	RET

TEXT ·_cast_numeric_uint32_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB64_12
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB64_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB64_11

LBB64_3:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB64_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB64_7

LBB64_5:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB64_6:
	LONG $0x35380f66; WORD $0x8704             // pmovzxdq    xmm0, qword [rdi + 4*rax]
	LONG $0x35380f66; WORD $0x874c; BYTE $0x08 // pmovzxdq    xmm1, qword [rdi + 4*rax + 8]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x35380f66; WORD $0x8744; BYTE $0x10 // pmovzxdq    xmm0, qword [rdi + 4*rax + 16]
	LONG $0x35380f66; WORD $0x874c; BYTE $0x18 // pmovzxdq    xmm1, qword [rdi + 4*rax + 24]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x35380f66; WORD $0x8744; BYTE $0x20 // pmovzxdq    xmm0, qword [rdi + 4*rax + 32]
	LONG $0x35380f66; WORD $0x874c; BYTE $0x28 // pmovzxdq    xmm1, qword [rdi + 4*rax + 40]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x35380f66; WORD $0x8744; BYTE $0x30 // pmovzxdq    xmm0, qword [rdi + 4*rax + 48]
	LONG $0x35380f66; WORD $0x874c; BYTE $0x38 // pmovzxdq    xmm1, qword [rdi + 4*rax + 56]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB64_6

LBB64_7:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB64_10
	QUAD $0x0000000885048d48 // lea    rax, [4*rax + 8]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB64_9:
	LONG $0x35380f66; WORD $0x0744; BYTE $0xf8 // pmovzxdq    xmm0, qword [rdi + rax - 8]
	LONG $0x35380f66; WORD $0x070c             // pmovzxdq    xmm1, qword [rdi + rax]
	LONG $0x447f0ff3; WORD $0xf046             // movdqu    oword [rsi + 2*rax - 16], xmm0
	LONG $0x0c7f0ff3; BYTE $0x46               // movdqu    oword [rsi + 2*rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0xff49; BYTE $0xc1                   // inc    r9
	JNE  LBB64_9

LBB64_10:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JE   LBB64_12

LBB64_11:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB64_11

LBB64_12:
	RET

TEXT ·_cast_numeric_int32_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB65_12
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB65_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB65_11

LBB65_3:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB65_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB65_7

LBB65_5:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB65_6:
	LONG $0x25380f66; WORD $0x8704             // pmovsxdq    xmm0, qword [rdi + 4*rax]
	LONG $0x25380f66; WORD $0x874c; BYTE $0x08 // pmovsxdq    xmm1, qword [rdi + 4*rax + 8]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x25380f66; WORD $0x8744; BYTE $0x10 // pmovsxdq    xmm0, qword [rdi + 4*rax + 16]
	LONG $0x25380f66; WORD $0x874c; BYTE $0x18 // pmovsxdq    xmm1, qword [rdi + 4*rax + 24]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x25380f66; WORD $0x8744; BYTE $0x20 // pmovsxdq    xmm0, qword [rdi + 4*rax + 32]
	LONG $0x25380f66; WORD $0x874c; BYTE $0x28 // pmovsxdq    xmm1, qword [rdi + 4*rax + 40]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x25380f66; WORD $0x8744; BYTE $0x30 // pmovsxdq    xmm0, qword [rdi + 4*rax + 48]
	LONG $0x25380f66; WORD $0x874c; BYTE $0x38 // pmovsxdq    xmm1, qword [rdi + 4*rax + 56]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB65_6

LBB65_7:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB65_10
	QUAD $0x0000000885048d48 // lea    rax, [4*rax + 8]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB65_9:
	LONG $0x25380f66; WORD $0x0744; BYTE $0xf8 // pmovsxdq    xmm0, qword [rdi + rax - 8]
	LONG $0x25380f66; WORD $0x070c             // pmovsxdq    xmm1, qword [rdi + rax]
	LONG $0x447f0ff3; WORD $0xf046             // movdqu    oword [rsi + 2*rax - 16], xmm0
	LONG $0x0c7f0ff3; BYTE $0x46               // movdqu    oword [rsi + 2*rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0xff49; BYTE $0xc1                   // inc    r9
	JNE  LBB65_9

LBB65_10:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JE   LBB65_12

LBB65_11:
	LONG $0x8f046348         // movsxd    rax, dword [rdi + 4*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB65_11

LBB65_12:
	RET

TEXT ·_cast_numeric_uint64_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB66_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB66_2
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB66_9
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB66_9

LBB66_2:
	WORD $0xc931 // xor    ecx, ecx

LBB66_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB66_5

LBB66_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB66_4

LBB66_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB66_17

LBB66_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB66_6
	JMP  LBB66_17

LBB66_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB66_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB66_13

LBB66_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB66_12:
	LONG $0xc704100f             // movups    xmm0, oword [rdi + 8*rax]
	LONG $0xc74c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 8*rax + 16]
	LONG $0xc604110f             // movups    oword [rsi + 8*rax], xmm0
	LONG $0xc64c110f; BYTE $0x10 // movups    oword [rsi + 8*rax + 16], xmm1
	LONG $0xc744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 8*rax + 32]
	LONG $0xc74c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 8*rax + 48]
	LONG $0xc644110f; BYTE $0x20 // movups    oword [rsi + 8*rax + 32], xmm0
	LONG $0xc64c110f; BYTE $0x30 // movups    oword [rsi + 8*rax + 48], xmm1
	LONG $0xc744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 8*rax + 64]
	LONG $0xc74c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 8*rax + 80]
	LONG $0xc644110f; BYTE $0x40 // movups    oword [rsi + 8*rax + 64], xmm0
	LONG $0xc64c110f; BYTE $0x50 // movups    oword [rsi + 8*rax + 80], xmm1
	LONG $0xc744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 8*rax + 96]
	LONG $0xc74c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 8*rax + 112]
	LONG $0xc644110f; BYTE $0x60 // movups    oword [rsi + 8*rax + 96], xmm0
	LONG $0xc64c110f; BYTE $0x70 // movups    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348             // add    rax, 16
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB66_12

LBB66_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB66_16
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB66_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB66_15

LBB66_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB66_3

LBB66_17:
	RET

TEXT ·_cast_numeric_int64_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB67_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB67_2
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB67_9
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB67_9

LBB67_2:
	WORD $0xc931 // xor    ecx, ecx

LBB67_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB67_5

LBB67_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB67_4

LBB67_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB67_17

LBB67_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB67_6
	JMP  LBB67_17

LBB67_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB67_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB67_13

LBB67_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB67_12:
	LONG $0xc704100f             // movups    xmm0, oword [rdi + 8*rax]
	LONG $0xc74c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 8*rax + 16]
	LONG $0xc604110f             // movups    oword [rsi + 8*rax], xmm0
	LONG $0xc64c110f; BYTE $0x10 // movups    oword [rsi + 8*rax + 16], xmm1
	LONG $0xc744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 8*rax + 32]
	LONG $0xc74c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 8*rax + 48]
	LONG $0xc644110f; BYTE $0x20 // movups    oword [rsi + 8*rax + 32], xmm0
	LONG $0xc64c110f; BYTE $0x30 // movups    oword [rsi + 8*rax + 48], xmm1
	LONG $0xc744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 8*rax + 64]
	LONG $0xc74c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 8*rax + 80]
	LONG $0xc644110f; BYTE $0x40 // movups    oword [rsi + 8*rax + 64], xmm0
	LONG $0xc64c110f; BYTE $0x50 // movups    oword [rsi + 8*rax + 80], xmm1
	LONG $0xc744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 8*rax + 96]
	LONG $0xc74c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 8*rax + 112]
	LONG $0xc644110f; BYTE $0x60 // movups    oword [rsi + 8*rax + 96], xmm0
	LONG $0xc64c110f; BYTE $0x70 // movups    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348             // add    rax, 16
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB67_12

LBB67_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB67_16
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB67_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB67_15

LBB67_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB67_3

LBB67_17:
	RET

DATA LCDATA20<>+0x000(SB)/8, $0x000000005f000000
GLOBL LCDATA20<>(SB), 8, $8

TEXT ·_cast_numeric_float32_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA20<>(SB), BP

	WORD $0xd285                           // test    edx, edx
	JLE  LBB68_6
	WORD $0x8941; BYTE $0xd2               // mov    r10d, edx
	LONG $0xff428d49                       // lea    rax, [r10 - 1]
	WORD $0x8945; BYTE $0xd0               // mov    r8d, r10d
	LONG $0x03e08341                       // and    r8d, 3
	QUAD $0x000000000000b949; WORD $0x8000 // mov    r9, -9223372036854775808
	LONG $0x03f88348                       // cmp    rax, 3
	JAE  LBB68_7
	WORD $0xc031                           // xor    eax, eax
	JMP  LBB68_3

LBB68_7:
	LONG $0xfce28341             // and    r10d, -4
	WORD $0xc031                 // xor    eax, eax
	LONG $0x45100ff3; BYTE $0x00 // movss    xmm0, dword 0[rbp] /* [rip + .LCPI68_0] */

LBB68_8:
	LONG $0x0c100ff3; BYTE $0x87   // movss    xmm1, dword [rdi + 4*rax]
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	LONG $0xd05c0ff3               // subss    xmm2, xmm0
	LONG $0x2c0f48f3; BYTE $0xca   // cvttss2si    rcx, xmm2
	WORD $0x314c; BYTE $0xc9       // xor    rcx, r9
	LONG $0x2c0f48f3; BYTE $0xd1   // cvttss2si    rdx, xmm1
	WORD $0x2e0f; BYTE $0xc1       // ucomiss    xmm0, xmm1
	LONG $0xd1460f48               // cmovbe    rdx, rcx
	LONG $0xc6148948               // mov    qword [rsi + 8*rax], rdx
	LONG $0x4c100ff3; WORD $0x0487 // movss    xmm1, dword [rdi + 4*rax + 4]
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	LONG $0xd05c0ff3               // subss    xmm2, xmm0
	LONG $0x2c0f48f3; BYTE $0xca   // cvttss2si    rcx, xmm2
	WORD $0x314c; BYTE $0xc9       // xor    rcx, r9
	LONG $0x2c0f48f3; BYTE $0xd1   // cvttss2si    rdx, xmm1
	WORD $0x2e0f; BYTE $0xc1       // ucomiss    xmm0, xmm1
	LONG $0xd1460f48               // cmovbe    rdx, rcx
	LONG $0xc6548948; BYTE $0x08   // mov    qword [rsi + 8*rax + 8], rdx
	LONG $0x4c100ff3; WORD $0x0887 // movss    xmm1, dword [rdi + 4*rax + 8]
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	LONG $0xd05c0ff3               // subss    xmm2, xmm0
	LONG $0x2c0f48f3; BYTE $0xca   // cvttss2si    rcx, xmm2
	WORD $0x314c; BYTE $0xc9       // xor    rcx, r9
	LONG $0x2c0f48f3; BYTE $0xd1   // cvttss2si    rdx, xmm1
	WORD $0x2e0f; BYTE $0xc1       // ucomiss    xmm0, xmm1
	LONG $0xd1460f48               // cmovbe    rdx, rcx
	LONG $0xc6548948; BYTE $0x10   // mov    qword [rsi + 8*rax + 16], rdx
	LONG $0x4c100ff3; WORD $0x0c87 // movss    xmm1, dword [rdi + 4*rax + 12]
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	LONG $0xd05c0ff3               // subss    xmm2, xmm0
	LONG $0x2c0f48f3; BYTE $0xca   // cvttss2si    rcx, xmm2
	WORD $0x314c; BYTE $0xc9       // xor    rcx, r9
	LONG $0x2c0f48f3; BYTE $0xd1   // cvttss2si    rdx, xmm1
	WORD $0x2e0f; BYTE $0xc1       // ucomiss    xmm0, xmm1
	LONG $0xd1460f48               // cmovbe    rdx, rcx
	LONG $0xc6548948; BYTE $0x18   // mov    qword [rsi + 8*rax + 24], rdx
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB68_8

LBB68_3:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE   LBB68_6
	LONG $0xc6148d48             // lea    rdx, [rsi + 8*rax]
	LONG $0x87048d48             // lea    rax, [rdi + 4*rax]
	WORD $0xf631                 // xor    esi, esi
	LONG $0x45100ff3; BYTE $0x00 // movss    xmm0, dword 0[rbp] /* [rip + .LCPI68_0] */

LBB68_5:
	LONG $0x0c100ff3; BYTE $0xb0 // movss    xmm1, dword [rax + 4*rsi]
	WORD $0x280f; BYTE $0xd1     // movaps    xmm2, xmm1
	LONG $0xd05c0ff3             // subss    xmm2, xmm0
	LONG $0x2c0f48f3; BYTE $0xfa // cvttss2si    rdi, xmm2
	WORD $0x314c; BYTE $0xcf     // xor    rdi, r9
	LONG $0x2c0f48f3; BYTE $0xc9 // cvttss2si    rcx, xmm1
	WORD $0x2e0f; BYTE $0xc1     // ucomiss    xmm0, xmm1
	LONG $0xcf460f48             // cmovbe    rcx, rdi
	LONG $0xf20c8948             // mov    qword [rdx + 8*rsi], rcx
	LONG $0x01c68348             // add    rsi, 1
	WORD $0x3949; BYTE $0xf0     // cmp    r8, rsi
	JNE  LBB68_5

LBB68_6:
	RET

DATA LCDATA21<>+0x000(SB)/8, $0x43e0000000000000
GLOBL LCDATA21<>(SB), 8, $8

TEXT ·_cast_numeric_float64_uint64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA21<>(SB), BP

	WORD $0xd285                           // test    edx, edx
	JLE  LBB69_6
	WORD $0x8941; BYTE $0xd2               // mov    r10d, edx
	LONG $0xff428d49                       // lea    rax, [r10 - 1]
	WORD $0x8945; BYTE $0xd0               // mov    r8d, r10d
	LONG $0x03e08341                       // and    r8d, 3
	QUAD $0x000000000000b949; WORD $0x8000 // mov    r9, -9223372036854775808
	LONG $0x03f88348                       // cmp    rax, 3
	JAE  LBB69_7
	WORD $0xc031                           // xor    eax, eax
	JMP  LBB69_3

LBB69_7:
	LONG $0xfce28341             // and    r10d, -4
	WORD $0xc031                 // xor    eax, eax
	LONG $0x45100ff2; BYTE $0x00 // movsd    xmm0, qword 0[rbp] /* [rip + .LCPI69_0] */

LBB69_8:
	LONG $0x0c100ff2; BYTE $0xc7   // movsd    xmm1, qword [rdi + 8*rax]
	LONG $0xd1280f66               // movapd    xmm2, xmm1
	LONG $0xd05c0ff2               // subsd    xmm2, xmm0
	LONG $0x2c0f48f2; BYTE $0xca   // cvttsd2si    rcx, xmm2
	WORD $0x314c; BYTE $0xc9       // xor    rcx, r9
	LONG $0x2c0f48f2; BYTE $0xd1   // cvttsd2si    rdx, xmm1
	LONG $0xc12e0f66               // ucomisd    xmm0, xmm1
	LONG $0xd1460f48               // cmovbe    rdx, rcx
	LONG $0xc6148948               // mov    qword [rsi + 8*rax], rdx
	LONG $0x4c100ff2; WORD $0x08c7 // movsd    xmm1, qword [rdi + 8*rax + 8]
	LONG $0xd1280f66               // movapd    xmm2, xmm1
	LONG $0xd05c0ff2               // subsd    xmm2, xmm0
	LONG $0x2c0f48f2; BYTE $0xca   // cvttsd2si    rcx, xmm2
	WORD $0x314c; BYTE $0xc9       // xor    rcx, r9
	LONG $0x2c0f48f2; BYTE $0xd1   // cvttsd2si    rdx, xmm1
	LONG $0xc12e0f66               // ucomisd    xmm0, xmm1
	LONG $0xd1460f48               // cmovbe    rdx, rcx
	LONG $0xc6548948; BYTE $0x08   // mov    qword [rsi + 8*rax + 8], rdx
	LONG $0x4c100ff2; WORD $0x10c7 // movsd    xmm1, qword [rdi + 8*rax + 16]
	LONG $0xd1280f66               // movapd    xmm2, xmm1
	LONG $0xd05c0ff2               // subsd    xmm2, xmm0
	LONG $0x2c0f48f2; BYTE $0xca   // cvttsd2si    rcx, xmm2
	WORD $0x314c; BYTE $0xc9       // xor    rcx, r9
	LONG $0x2c0f48f2; BYTE $0xd1   // cvttsd2si    rdx, xmm1
	LONG $0xc12e0f66               // ucomisd    xmm0, xmm1
	LONG $0xd1460f48               // cmovbe    rdx, rcx
	LONG $0xc6548948; BYTE $0x10   // mov    qword [rsi + 8*rax + 16], rdx
	LONG $0x4c100ff2; WORD $0x18c7 // movsd    xmm1, qword [rdi + 8*rax + 24]
	LONG $0xd1280f66               // movapd    xmm2, xmm1
	LONG $0xd05c0ff2               // subsd    xmm2, xmm0
	LONG $0x2c0f48f2; BYTE $0xca   // cvttsd2si    rcx, xmm2
	WORD $0x314c; BYTE $0xc9       // xor    rcx, r9
	LONG $0x2c0f48f2; BYTE $0xd1   // cvttsd2si    rdx, xmm1
	LONG $0xc12e0f66               // ucomisd    xmm0, xmm1
	LONG $0xd1460f48               // cmovbe    rdx, rcx
	LONG $0xc6548948; BYTE $0x18   // mov    qword [rsi + 8*rax + 24], rdx
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB69_8

LBB69_3:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE   LBB69_6
	LONG $0xc6148d48             // lea    rdx, [rsi + 8*rax]
	LONG $0xc7048d48             // lea    rax, [rdi + 8*rax]
	WORD $0xf631                 // xor    esi, esi
	LONG $0x45100ff2; BYTE $0x00 // movsd    xmm0, qword 0[rbp] /* [rip + .LCPI69_0] */

LBB69_5:
	LONG $0x0c100ff2; BYTE $0xf0 // movsd    xmm1, qword [rax + 8*rsi]
	LONG $0xd1280f66             // movapd    xmm2, xmm1
	LONG $0xd05c0ff2             // subsd    xmm2, xmm0
	LONG $0x2c0f48f2; BYTE $0xfa // cvttsd2si    rdi, xmm2
	WORD $0x314c; BYTE $0xcf     // xor    rdi, r9
	LONG $0x2c0f48f2; BYTE $0xc9 // cvttsd2si    rcx, xmm1
	LONG $0xc12e0f66             // ucomisd    xmm0, xmm1
	LONG $0xcf460f48             // cmovbe    rcx, rdi
	LONG $0xf20c8948             // mov    qword [rdx + 8*rsi], rcx
	LONG $0x01c68348             // add    rsi, 1
	WORD $0x3949; BYTE $0xf0     // cmp    r8, rsi
	JNE  LBB69_5

LBB69_6:
	RET

TEXT ·_cast_numeric_uint8_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB70_17
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB70_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB70_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB70_9

LBB70_2:
	WORD $0xc931 // xor    ecx, ecx

LBB70_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB70_5

LBB70_4:
	LONG $0x0f04b60f // movzx    eax, byte [rdi + rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB70_4

LBB70_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB70_17

LBB70_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB70_6
	JMP  LBB70_17

LBB70_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB70_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB70_13

LBB70_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB70_12:
	LONG $0x32380f66; WORD $0x0704             // pmovzxbq    xmm0, word [rdi + rax]
	LONG $0x32380f66; WORD $0x074c; BYTE $0x02 // pmovzxbq    xmm1, word [rdi + rax + 2]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x32380f66; WORD $0x0744; BYTE $0x04 // pmovzxbq    xmm0, word [rdi + rax + 4]
	LONG $0x32380f66; WORD $0x074c; BYTE $0x06 // pmovzxbq    xmm1, word [rdi + rax + 6]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x32380f66; WORD $0x0744; BYTE $0x08 // pmovzxbq    xmm0, word [rdi + rax + 8]
	LONG $0x32380f66; WORD $0x074c; BYTE $0x0a // pmovzxbq    xmm1, word [rdi + rax + 10]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x32380f66; WORD $0x0744; BYTE $0x0c // pmovzxbq    xmm0, word [rdi + rax + 12]
	LONG $0x32380f66; WORD $0x074c; BYTE $0x0e // pmovzxbq    xmm1, word [rdi + rax + 14]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB70_12

LBB70_13:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB70_16
	LONG $0xc6148d48         // lea    rdx, [rsi + 8*rax]
	LONG $0x10c28348         // add    rdx, 16
	LONG $0x07148d4c         // lea    r10, [rdi + rax]
	LONG $0x02c28349         // add    r10, 2
	WORD $0xc031             // xor    eax, eax

LBB70_15:
	QUAD $0xfe824432380f4166                   // pmovzxbq    xmm0, word [r10 + 4*rax - 2]
	LONG $0x380f4166; WORD $0x0c32; BYTE $0x82 // pmovzxbq    xmm1, word [r10 + 4*rax]
	LONG $0x427f0ff3; BYTE $0xf0               // movdqu    oword [rdx - 16], xmm0
	LONG $0x0a7f0ff3                           // movdqu    oword [rdx], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x01c08348                           // add    rax, 1
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JNE  LBB70_15

LBB70_16:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB70_3

LBB70_17:
	RET

TEXT ·_cast_numeric_int8_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB71_17
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB71_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB71_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB71_9

LBB71_2:
	WORD $0xc931 // xor    ecx, ecx

LBB71_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB71_5

LBB71_4:
	LONG $0x04be0f48; BYTE $0x0f // movsx    rax, byte [rdi + rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB71_4

LBB71_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB71_17

LBB71_6:
	LONG $0x04be0f48; BYTE $0x0f   // movsx    rax, byte [rdi + rcx]
	LONG $0xce048948               // mov    qword [rsi + 8*rcx], rax
	LONG $0x44be0f48; WORD $0x010f // movsx    rax, byte [rdi + rcx + 1]
	LONG $0xce448948; BYTE $0x08   // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0x44be0f48; WORD $0x020f // movsx    rax, byte [rdi + rcx + 2]
	LONG $0xce448948; BYTE $0x10   // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0x44be0f48; WORD $0x030f // movsx    rax, byte [rdi + rcx + 3]
	LONG $0xce448948; BYTE $0x18   // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB71_6
	JMP  LBB71_17

LBB71_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB71_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB71_13

LBB71_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB71_12:
	LONG $0x22380f66; WORD $0x0704             // pmovsxbq    xmm0, word [rdi + rax]
	LONG $0x22380f66; WORD $0x074c; BYTE $0x02 // pmovsxbq    xmm1, word [rdi + rax + 2]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x22380f66; WORD $0x0744; BYTE $0x04 // pmovsxbq    xmm0, word [rdi + rax + 4]
	LONG $0x22380f66; WORD $0x074c; BYTE $0x06 // pmovsxbq    xmm1, word [rdi + rax + 6]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x22380f66; WORD $0x0744; BYTE $0x08 // pmovsxbq    xmm0, word [rdi + rax + 8]
	LONG $0x22380f66; WORD $0x074c; BYTE $0x0a // pmovsxbq    xmm1, word [rdi + rax + 10]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x22380f66; WORD $0x0744; BYTE $0x0c // pmovsxbq    xmm0, word [rdi + rax + 12]
	LONG $0x22380f66; WORD $0x074c; BYTE $0x0e // pmovsxbq    xmm1, word [rdi + rax + 14]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB71_12

LBB71_13:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB71_16
	LONG $0xc6148d48         // lea    rdx, [rsi + 8*rax]
	LONG $0x10c28348         // add    rdx, 16
	LONG $0x07148d4c         // lea    r10, [rdi + rax]
	LONG $0x02c28349         // add    r10, 2
	WORD $0xc031             // xor    eax, eax

LBB71_15:
	QUAD $0xfe824422380f4166                   // pmovsxbq    xmm0, word [r10 + 4*rax - 2]
	LONG $0x380f4166; WORD $0x0c22; BYTE $0x82 // pmovsxbq    xmm1, word [r10 + 4*rax]
	LONG $0x427f0ff3; BYTE $0xf0               // movdqu    oword [rdx - 16], xmm0
	LONG $0x0a7f0ff3                           // movdqu    oword [rdx], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x01c08348                           // add    rax, 1
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JNE  LBB71_15

LBB71_16:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB71_3

LBB71_17:
	RET

TEXT ·_cast_numeric_uint16_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB72_12
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB72_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB72_11

LBB72_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB72_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB72_7

LBB72_5:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB72_6:
	LONG $0x34380f66; WORD $0x4704             // pmovzxwq    xmm0, dword [rdi + 2*rax]
	LONG $0x34380f66; WORD $0x474c; BYTE $0x04 // pmovzxwq    xmm1, dword [rdi + 2*rax + 4]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x34380f66; WORD $0x4744; BYTE $0x08 // pmovzxwq    xmm0, dword [rdi + 2*rax + 8]
	LONG $0x34380f66; WORD $0x474c; BYTE $0x0c // pmovzxwq    xmm1, dword [rdi + 2*rax + 12]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x34380f66; WORD $0x4744; BYTE $0x10 // pmovzxwq    xmm0, dword [rdi + 2*rax + 16]
	LONG $0x34380f66; WORD $0x474c; BYTE $0x14 // pmovzxwq    xmm1, dword [rdi + 2*rax + 20]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x34380f66; WORD $0x4744; BYTE $0x18 // pmovzxwq    xmm0, dword [rdi + 2*rax + 24]
	LONG $0x34380f66; WORD $0x474c; BYTE $0x1c // pmovzxwq    xmm1, dword [rdi + 2*rax + 28]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB72_6

LBB72_7:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB72_10
	LONG $0xc6148d48         // lea    rdx, [rsi + 8*rax]
	LONG $0x10c28348         // add    rdx, 16
	LONG $0x47148d4c         // lea    r10, [rdi + 2*rax]
	LONG $0x04c28349         // add    r10, 4
	WORD $0xc031             // xor    eax, eax

LBB72_9:
	QUAD $0xfcc24434380f4166                   // pmovzxwq    xmm0, dword [r10 + 8*rax - 4]
	LONG $0x380f4166; WORD $0x0c34; BYTE $0xc2 // pmovzxwq    xmm1, dword [r10 + 8*rax]
	LONG $0x427f0ff3; BYTE $0xf0               // movdqu    oword [rdx - 16], xmm0
	LONG $0x0a7f0ff3                           // movdqu    oword [rdx], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x01c08348                           // add    rax, 1
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JNE  LBB72_9

LBB72_10:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB72_12

LBB72_11:
	LONG $0x4f04b70f         // movzx    eax, word [rdi + 2*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB72_11

LBB72_12:
	RET

TEXT ·_cast_numeric_int16_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB73_12
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB73_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB73_11

LBB73_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB73_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB73_7

LBB73_5:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB73_6:
	LONG $0x24380f66; WORD $0x4704             // pmovsxwq    xmm0, dword [rdi + 2*rax]
	LONG $0x24380f66; WORD $0x474c; BYTE $0x04 // pmovsxwq    xmm1, dword [rdi + 2*rax + 4]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x24380f66; WORD $0x4744; BYTE $0x08 // pmovsxwq    xmm0, dword [rdi + 2*rax + 8]
	LONG $0x24380f66; WORD $0x474c; BYTE $0x0c // pmovsxwq    xmm1, dword [rdi + 2*rax + 12]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x24380f66; WORD $0x4744; BYTE $0x10 // pmovsxwq    xmm0, dword [rdi + 2*rax + 16]
	LONG $0x24380f66; WORD $0x474c; BYTE $0x14 // pmovsxwq    xmm1, dword [rdi + 2*rax + 20]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x24380f66; WORD $0x4744; BYTE $0x18 // pmovsxwq    xmm0, dword [rdi + 2*rax + 24]
	LONG $0x24380f66; WORD $0x474c; BYTE $0x1c // pmovsxwq    xmm1, dword [rdi + 2*rax + 28]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB73_6

LBB73_7:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB73_10
	LONG $0xc6148d48         // lea    rdx, [rsi + 8*rax]
	LONG $0x10c28348         // add    rdx, 16
	LONG $0x47148d4c         // lea    r10, [rdi + 2*rax]
	LONG $0x04c28349         // add    r10, 4
	WORD $0xc031             // xor    eax, eax

LBB73_9:
	QUAD $0xfcc24424380f4166                   // pmovsxwq    xmm0, dword [r10 + 8*rax - 4]
	LONG $0x380f4166; WORD $0x0c24; BYTE $0xc2 // pmovsxwq    xmm1, dword [r10 + 8*rax]
	LONG $0x427f0ff3; BYTE $0xf0               // movdqu    oword [rdx - 16], xmm0
	LONG $0x0a7f0ff3                           // movdqu    oword [rdx], xmm1
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x01c08348                           // add    rax, 1
	WORD $0x3949; BYTE $0xc0                   // cmp    r8, rax
	JNE  LBB73_9

LBB73_10:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB73_12

LBB73_11:
	LONG $0x04bf0f48; BYTE $0x4f // movsx    rax, word [rdi + 2*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB73_11

LBB73_12:
	RET

TEXT ·_cast_numeric_uint32_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB74_12
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB74_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB74_11

LBB74_3:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB74_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB74_7

LBB74_5:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB74_6:
	LONG $0x35380f66; WORD $0x8704             // pmovzxdq    xmm0, qword [rdi + 4*rax]
	LONG $0x35380f66; WORD $0x874c; BYTE $0x08 // pmovzxdq    xmm1, qword [rdi + 4*rax + 8]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x35380f66; WORD $0x8744; BYTE $0x10 // pmovzxdq    xmm0, qword [rdi + 4*rax + 16]
	LONG $0x35380f66; WORD $0x874c; BYTE $0x18 // pmovzxdq    xmm1, qword [rdi + 4*rax + 24]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x35380f66; WORD $0x8744; BYTE $0x20 // pmovzxdq    xmm0, qword [rdi + 4*rax + 32]
	LONG $0x35380f66; WORD $0x874c; BYTE $0x28 // pmovzxdq    xmm1, qword [rdi + 4*rax + 40]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x35380f66; WORD $0x8744; BYTE $0x30 // pmovzxdq    xmm0, qword [rdi + 4*rax + 48]
	LONG $0x35380f66; WORD $0x874c; BYTE $0x38 // pmovzxdq    xmm1, qword [rdi + 4*rax + 56]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB74_6

LBB74_7:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB74_10
	QUAD $0x0000000885048d48 // lea    rax, [4*rax + 8]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB74_9:
	LONG $0x35380f66; WORD $0x0744; BYTE $0xf8 // pmovzxdq    xmm0, qword [rdi + rax - 8]
	LONG $0x35380f66; WORD $0x070c             // pmovzxdq    xmm1, qword [rdi + rax]
	LONG $0x447f0ff3; WORD $0xf046             // movdqu    oword [rsi + 2*rax - 16], xmm0
	LONG $0x0c7f0ff3; BYTE $0x46               // movdqu    oword [rsi + 2*rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0xff49; BYTE $0xc1                   // inc    r9
	JNE  LBB74_9

LBB74_10:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JE   LBB74_12

LBB74_11:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB74_11

LBB74_12:
	RET

TEXT ·_cast_numeric_int32_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB75_12
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB75_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB75_11

LBB75_3:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB75_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB75_7

LBB75_5:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB75_6:
	LONG $0x25380f66; WORD $0x8704             // pmovsxdq    xmm0, qword [rdi + 4*rax]
	LONG $0x25380f66; WORD $0x874c; BYTE $0x08 // pmovsxdq    xmm1, qword [rdi + 4*rax + 8]
	LONG $0x047f0ff3; BYTE $0xc6               // movdqu    oword [rsi + 8*rax], xmm0
	LONG $0x4c7f0ff3; WORD $0x10c6             // movdqu    oword [rsi + 8*rax + 16], xmm1
	LONG $0x25380f66; WORD $0x8744; BYTE $0x10 // pmovsxdq    xmm0, qword [rdi + 4*rax + 16]
	LONG $0x25380f66; WORD $0x874c; BYTE $0x18 // pmovsxdq    xmm1, qword [rdi + 4*rax + 24]
	LONG $0x447f0ff3; WORD $0x20c6             // movdqu    oword [rsi + 8*rax + 32], xmm0
	LONG $0x4c7f0ff3; WORD $0x30c6             // movdqu    oword [rsi + 8*rax + 48], xmm1
	LONG $0x25380f66; WORD $0x8744; BYTE $0x20 // pmovsxdq    xmm0, qword [rdi + 4*rax + 32]
	LONG $0x25380f66; WORD $0x874c; BYTE $0x28 // pmovsxdq    xmm1, qword [rdi + 4*rax + 40]
	LONG $0x447f0ff3; WORD $0x40c6             // movdqu    oword [rsi + 8*rax + 64], xmm0
	LONG $0x4c7f0ff3; WORD $0x50c6             // movdqu    oword [rsi + 8*rax + 80], xmm1
	LONG $0x25380f66; WORD $0x8744; BYTE $0x30 // pmovsxdq    xmm0, qword [rdi + 4*rax + 48]
	LONG $0x25380f66; WORD $0x874c; BYTE $0x38 // pmovsxdq    xmm1, qword [rdi + 4*rax + 56]
	LONG $0x447f0ff3; WORD $0x60c6             // movdqu    oword [rsi + 8*rax + 96], xmm0
	LONG $0x4c7f0ff3; WORD $0x70c6             // movdqu    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c28348                           // add    rdx, 4
	JNE  LBB75_6

LBB75_7:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB75_10
	QUAD $0x0000000885048d48 // lea    rax, [4*rax + 8]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB75_9:
	LONG $0x25380f66; WORD $0x0744; BYTE $0xf8 // pmovsxdq    xmm0, qword [rdi + rax - 8]
	LONG $0x25380f66; WORD $0x070c             // pmovsxdq    xmm1, qword [rdi + rax]
	LONG $0x447f0ff3; WORD $0xf046             // movdqu    oword [rsi + 2*rax - 16], xmm0
	LONG $0x0c7f0ff3; BYTE $0x46               // movdqu    oword [rsi + 2*rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0xff49; BYTE $0xc1                   // inc    r9
	JNE  LBB75_9

LBB75_10:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JE   LBB75_12

LBB75_11:
	LONG $0x8f046348         // movsxd    rax, dword [rdi + 4*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB75_11

LBB75_12:
	RET

TEXT ·_cast_numeric_uint64_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB76_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB76_2
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB76_9
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB76_9

LBB76_2:
	WORD $0xc931 // xor    ecx, ecx

LBB76_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB76_5

LBB76_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB76_4

LBB76_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB76_17

LBB76_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB76_6
	JMP  LBB76_17

LBB76_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB76_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB76_13

LBB76_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB76_12:
	LONG $0xc704100f             // movups    xmm0, oword [rdi + 8*rax]
	LONG $0xc74c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 8*rax + 16]
	LONG $0xc604110f             // movups    oword [rsi + 8*rax], xmm0
	LONG $0xc64c110f; BYTE $0x10 // movups    oword [rsi + 8*rax + 16], xmm1
	LONG $0xc744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 8*rax + 32]
	LONG $0xc74c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 8*rax + 48]
	LONG $0xc644110f; BYTE $0x20 // movups    oword [rsi + 8*rax + 32], xmm0
	LONG $0xc64c110f; BYTE $0x30 // movups    oword [rsi + 8*rax + 48], xmm1
	LONG $0xc744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 8*rax + 64]
	LONG $0xc74c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 8*rax + 80]
	LONG $0xc644110f; BYTE $0x40 // movups    oword [rsi + 8*rax + 64], xmm0
	LONG $0xc64c110f; BYTE $0x50 // movups    oword [rsi + 8*rax + 80], xmm1
	LONG $0xc744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 8*rax + 96]
	LONG $0xc74c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 8*rax + 112]
	LONG $0xc644110f; BYTE $0x60 // movups    oword [rsi + 8*rax + 96], xmm0
	LONG $0xc64c110f; BYTE $0x70 // movups    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348             // add    rax, 16
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB76_12

LBB76_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB76_16
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB76_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB76_15

LBB76_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB76_3

LBB76_17:
	RET

TEXT ·_cast_numeric_int64_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB77_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB77_2
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB77_9
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB77_9

LBB77_2:
	WORD $0xc931 // xor    ecx, ecx

LBB77_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB77_5

LBB77_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB77_4

LBB77_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB77_17

LBB77_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB77_6
	JMP  LBB77_17

LBB77_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB77_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB77_13

LBB77_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB77_12:
	LONG $0xc704100f             // movups    xmm0, oword [rdi + 8*rax]
	LONG $0xc74c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 8*rax + 16]
	LONG $0xc604110f             // movups    oword [rsi + 8*rax], xmm0
	LONG $0xc64c110f; BYTE $0x10 // movups    oword [rsi + 8*rax + 16], xmm1
	LONG $0xc744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 8*rax + 32]
	LONG $0xc74c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 8*rax + 48]
	LONG $0xc644110f; BYTE $0x20 // movups    oword [rsi + 8*rax + 32], xmm0
	LONG $0xc64c110f; BYTE $0x30 // movups    oword [rsi + 8*rax + 48], xmm1
	LONG $0xc744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 8*rax + 64]
	LONG $0xc74c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 8*rax + 80]
	LONG $0xc644110f; BYTE $0x40 // movups    oword [rsi + 8*rax + 64], xmm0
	LONG $0xc64c110f; BYTE $0x50 // movups    oword [rsi + 8*rax + 80], xmm1
	LONG $0xc744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 8*rax + 96]
	LONG $0xc74c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 8*rax + 112]
	LONG $0xc644110f; BYTE $0x60 // movups    oword [rsi + 8*rax + 96], xmm0
	LONG $0xc64c110f; BYTE $0x70 // movups    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348             // add    rax, 16
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB77_12

LBB77_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB77_16
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB77_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB77_15

LBB77_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB77_3

LBB77_17:
	RET

TEXT ·_cast_numeric_float32_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB78_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB78_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB78_3

LBB78_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB78_8:
	LONG $0x2c0f48f3; WORD $0x9704             // cvttss2si    rax, dword [rdi + 4*rdx]
	LONG $0xd6048948                           // mov    qword [rsi + 8*rdx], rax
	LONG $0x2c0f48f3; WORD $0x9744; BYTE $0x04 // cvttss2si    rax, dword [rdi + 4*rdx + 4]
	LONG $0xd6448948; BYTE $0x08               // mov    qword [rsi + 8*rdx + 8], rax
	LONG $0x2c0f48f3; WORD $0x9744; BYTE $0x08 // cvttss2si    rax, dword [rdi + 4*rdx + 8]
	LONG $0xd6448948; BYTE $0x10               // mov    qword [rsi + 8*rdx + 16], rax
	LONG $0x2c0f48f3; WORD $0x9744; BYTE $0x0c // cvttss2si    rax, dword [rdi + 4*rdx + 12]
	LONG $0xd6448948; BYTE $0x18               // mov    qword [rsi + 8*rdx + 24], rax
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JNE  LBB78_8

LBB78_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB78_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	LONG $0x97148d48         // lea    rdx, [rdi + 4*rdx]
	WORD $0xf631             // xor    esi, esi

LBB78_5:
	LONG $0x2c0f48f3; WORD $0xb23c // cvttss2si    rdi, dword [rdx + 4*rsi]
	LONG $0xf13c8948               // mov    qword [rcx + 8*rsi], rdi
	LONG $0x01c68348               // add    rsi, 1
	WORD $0x3949; BYTE $0xf0       // cmp    r8, rsi
	JNE  LBB78_5

LBB78_6:
	RET

TEXT ·_cast_numeric_float64_int64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB79_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB79_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB79_3

LBB79_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB79_8:
	LONG $0x2c0f48f2; WORD $0xd704             // cvttsd2si    rax, qword [rdi + 8*rdx]
	LONG $0xd6048948                           // mov    qword [rsi + 8*rdx], rax
	LONG $0x2c0f48f2; WORD $0xd744; BYTE $0x08 // cvttsd2si    rax, qword [rdi + 8*rdx + 8]
	LONG $0xd6448948; BYTE $0x08               // mov    qword [rsi + 8*rdx + 8], rax
	LONG $0x2c0f48f2; WORD $0xd744; BYTE $0x10 // cvttsd2si    rax, qword [rdi + 8*rdx + 16]
	LONG $0xd6448948; BYTE $0x10               // mov    qword [rsi + 8*rdx + 16], rax
	LONG $0x2c0f48f2; WORD $0xd744; BYTE $0x18 // cvttsd2si    rax, qword [rdi + 8*rdx + 24]
	LONG $0xd6448948; BYTE $0x18               // mov    qword [rsi + 8*rdx + 24], rax
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JNE  LBB79_8

LBB79_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB79_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	LONG $0xd7148d48         // lea    rdx, [rdi + 8*rdx]
	WORD $0xf631             // xor    esi, esi

LBB79_5:
	LONG $0x2c0f48f2; WORD $0xf23c // cvttsd2si    rdi, qword [rdx + 8*rsi]
	LONG $0xf13c8948               // mov    qword [rcx + 8*rsi], rdi
	LONG $0x01c68348               // add    rsi, 1
	WORD $0x3949; BYTE $0xf0       // cmp    r8, rsi
	JNE  LBB79_5

LBB79_6:
	RET

TEXT ·_cast_numeric_uint8_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB80_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB80_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB80_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB80_9

LBB80_2:
	WORD $0xc931 // xor    ecx, ecx

LBB80_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB80_5

LBB80_4:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0xc02a0ff3             // cvtsi2ss    xmm0, eax
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB80_4

LBB80_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB80_16

LBB80_6:
	LONG $0x0f04b60f               // movzx    eax, byte [rdi + rcx]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff3               // cvtsi2ss    xmm0, eax
	LONG $0x04110ff3; BYTE $0x8e   // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x0f44b60f; BYTE $0x01   // movzx    eax, byte [rdi + rcx + 1]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff3               // cvtsi2ss    xmm0, eax
	LONG $0x44110ff3; WORD $0x048e // movss    dword [rsi + 4*rcx + 4], xmm0
	LONG $0x0f44b60f; BYTE $0x02   // movzx    eax, byte [rdi + rcx + 2]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff3               // cvtsi2ss    xmm0, eax
	LONG $0x44110ff3; WORD $0x088e // movss    dword [rsi + 4*rcx + 8], xmm0
	LONG $0x0f44b60f; BYTE $0x03   // movzx    eax, byte [rdi + rcx + 3]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff3               // cvtsi2ss    xmm0, eax
	LONG $0x44110ff3; WORD $0x0c8e // movss    dword [rsi + 4*rcx + 12], xmm0
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB80_6
	JMP  LBB80_16

LBB80_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB80_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB80_12:
	LONG $0x31380f66; WORD $0x1704             // pmovzxbd    xmm0, dword [rdi + rdx]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x04 // pmovzxbd    xmm1, dword [rdi + rdx + 4]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f                           // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x31380f66; WORD $0x1744; BYTE $0x08 // pmovzxbd    xmm0, dword [rdi + rdx + 8]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x0c // pmovzxbd    xmm1, dword [rdi + rdx + 12]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9644110f; BYTE $0x20               // movups    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x964c110f; BYTE $0x30               // movups    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB80_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB80_15

LBB80_14:
	LONG $0x31380f66; WORD $0x1704             // pmovzxbd    xmm0, dword [rdi + rdx]
	LONG $0x31380f66; WORD $0x174c; BYTE $0x04 // pmovzxbd    xmm1, dword [rdi + rdx + 4]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f                           // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm1

LBB80_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB80_3

LBB80_16:
	RET

LBB80_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB80_14
	JMP  LBB80_15

TEXT ·_cast_numeric_int8_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB81_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB81_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB81_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB81_9

LBB81_2:
	WORD $0xc931 // xor    ecx, ecx

LBB81_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB81_5

LBB81_4:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0xc02a0ff3             // cvtsi2ss    xmm0, eax
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB81_4

LBB81_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB81_16

LBB81_6:
	LONG $0x0f04be0f               // movsx    eax, byte [rdi + rcx]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff3               // cvtsi2ss    xmm0, eax
	LONG $0x04110ff3; BYTE $0x8e   // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x0f44be0f; BYTE $0x01   // movsx    eax, byte [rdi + rcx + 1]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff3               // cvtsi2ss    xmm0, eax
	LONG $0x44110ff3; WORD $0x048e // movss    dword [rsi + 4*rcx + 4], xmm0
	LONG $0x0f44be0f; BYTE $0x02   // movsx    eax, byte [rdi + rcx + 2]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff3               // cvtsi2ss    xmm0, eax
	LONG $0x44110ff3; WORD $0x088e // movss    dword [rsi + 4*rcx + 8], xmm0
	LONG $0x0f44be0f; BYTE $0x03   // movsx    eax, byte [rdi + rcx + 3]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff3               // cvtsi2ss    xmm0, eax
	LONG $0x44110ff3; WORD $0x0c8e // movss    dword [rsi + 4*rcx + 12], xmm0
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB81_6
	JMP  LBB81_16

LBB81_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB81_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB81_12:
	LONG $0x21380f66; WORD $0x1704             // pmovsxbd    xmm0, dword [rdi + rdx]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x04 // pmovsxbd    xmm1, dword [rdi + rdx + 4]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f                           // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x21380f66; WORD $0x1744; BYTE $0x08 // pmovsxbd    xmm0, dword [rdi + rdx + 8]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x0c // pmovsxbd    xmm1, dword [rdi + rdx + 12]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9644110f; BYTE $0x20               // movups    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x964c110f; BYTE $0x30               // movups    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB81_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB81_15

LBB81_14:
	LONG $0x21380f66; WORD $0x1704             // pmovsxbd    xmm0, dword [rdi + rdx]
	LONG $0x21380f66; WORD $0x174c; BYTE $0x04 // pmovsxbd    xmm1, dword [rdi + rdx + 4]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f                           // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm1

LBB81_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB81_3

LBB81_16:
	RET

LBB81_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB81_14
	JMP  LBB81_15

TEXT ·_cast_numeric_uint16_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB82_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB82_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB82_10

LBB82_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB82_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB82_6:
	LONG $0x33380f66; WORD $0x5704             // pmovzxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x08 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 8]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f                           // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x33380f66; WORD $0x5744; BYTE $0x10 // pmovzxwd    xmm0, qword [rdi + 2*rdx + 16]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x18 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 24]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9644110f; BYTE $0x20               // movups    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x964c110f; BYTE $0x30               // movups    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB82_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB82_9

LBB82_8:
	LONG $0x33380f66; WORD $0x5704             // pmovzxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x33380f66; WORD $0x574c; BYTE $0x08 // pmovzxwd    xmm1, qword [rdi + 2*rdx + 8]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f                           // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm1

LBB82_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB82_11

LBB82_10:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0xc02a0ff3             // cvtsi2ss    xmm0, eax
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB82_10

LBB82_11:
	RET

LBB82_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB82_8
	JMP  LBB82_9

TEXT ·_cast_numeric_int16_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB83_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB83_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB83_10

LBB83_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB83_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB83_6:
	LONG $0x23380f66; WORD $0x5704             // pmovsxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 8]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f                           // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x23380f66; WORD $0x5744; BYTE $0x10 // pmovsxwd    xmm0, qword [rdi + 2*rdx + 16]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 24]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9644110f; BYTE $0x20               // movups    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x964c110f; BYTE $0x30               // movups    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB83_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB83_9

LBB83_8:
	LONG $0x23380f66; WORD $0x5704             // pmovsxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x23380f66; WORD $0x574c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdi + 2*rdx + 8]
	WORD $0x5b0f; BYTE $0xc0                   // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9                   // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f                           // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm1

LBB83_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB83_11

LBB83_10:
	LONG $0x4f04bf0f             // movsx    eax, word [rdi + 2*rcx]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0xc02a0ff3             // cvtsi2ss    xmm0, eax
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB83_10

LBB83_11:
	RET

LBB83_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB83_8
	JMP  LBB83_9

DATA LCDATA22<>+0x000(SB)/8, $0x4b0000004b000000
DATA LCDATA22<>+0x008(SB)/8, $0x4b0000004b000000
DATA LCDATA22<>+0x010(SB)/8, $0x5300000053000000
DATA LCDATA22<>+0x018(SB)/8, $0x5300000053000000
DATA LCDATA22<>+0x020(SB)/8, $0x5300008053000080
DATA LCDATA22<>+0x028(SB)/8, $0x5300008053000080
GLOBL LCDATA22<>(SB), 8, $48

TEXT ·_cast_numeric_uint32_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA22<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB84_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB84_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB84_10

LBB84_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8418d48             // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x03e8c149             // shr    r8, 3
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB84_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI84_0] */
	LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, oword 16[rbp] /* [rip + .LCPI84_1] */
	LONG $0x2055280f             // movaps    xmm2, oword 32[rbp] /* [rip + .LCPI84_2] */

LBB84_6:
	LONG $0x1c6f0ff3; BYTE $0x97   // movdqu    xmm3, oword [rdi + 4*rdx]
	LONG $0x646f0ff3; WORD $0x1097 // movdqu    xmm4, oword [rdi + 4*rdx + 16]
	LONG $0xeb6f0f66               // movdqa    xmm5, xmm3
	LONG $0x0e3a0f66; WORD $0xaae8 // pblendw    xmm5, xmm0, 170
	LONG $0xd3720f66; BYTE $0x10   // psrld    xmm3, 16
	LONG $0x0e3a0f66; WORD $0xaad9 // pblendw    xmm3, xmm1, 170
	WORD $0x5c0f; BYTE $0xda       // subps    xmm3, xmm2
	WORD $0x580f; BYTE $0xdd       // addps    xmm3, xmm5
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0x0e3a0f66; WORD $0xaae8 // pblendw    xmm5, xmm0, 170
	LONG $0xd4720f66; BYTE $0x10   // psrld    xmm4, 16
	LONG $0x0e3a0f66; WORD $0xaae1 // pblendw    xmm4, xmm1, 170
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x580f; BYTE $0xe5       // addps    xmm4, xmm5
	LONG $0x961c110f               // movups    oword [rsi + 4*rdx], xmm3
	LONG $0x9664110f; BYTE $0x10   // movups    oword [rsi + 4*rdx + 16], xmm4
	LONG $0x5c6f0ff3; WORD $0x2097 // movdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646f0ff3; WORD $0x3097 // movdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0xeb6f0f66               // movdqa    xmm5, xmm3
	LONG $0x0e3a0f66; WORD $0xaae8 // pblendw    xmm5, xmm0, 170
	LONG $0xd3720f66; BYTE $0x10   // psrld    xmm3, 16
	LONG $0x0e3a0f66; WORD $0xaad9 // pblendw    xmm3, xmm1, 170
	WORD $0x5c0f; BYTE $0xda       // subps    xmm3, xmm2
	WORD $0x580f; BYTE $0xdd       // addps    xmm3, xmm5
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0x0e3a0f66; WORD $0xaae8 // pblendw    xmm5, xmm0, 170
	LONG $0xd4720f66; BYTE $0x10   // psrld    xmm4, 16
	LONG $0x0e3a0f66; WORD $0xaae1 // pblendw    xmm4, xmm1, 170
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x580f; BYTE $0xe5       // addps    xmm4, xmm5
	LONG $0x965c110f; BYTE $0x20   // movups    oword [rsi + 4*rdx + 32], xmm3
	LONG $0x9664110f; BYTE $0x30   // movups    oword [rsi + 4*rdx + 48], xmm4
	LONG $0x10c28348               // add    rdx, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB84_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB84_9

LBB84_8:
	LONG $0x046f0ff3; BYTE $0x97   // movdqu    xmm0, oword [rdi + 4*rdx]
	LONG $0x4c6f0ff3; WORD $0x1097 // movdqu    xmm1, oword [rdi + 4*rdx + 16]
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI84_0] */
	LONG $0xd86f0f66               // movdqa    xmm3, xmm0
	LONG $0x0e3a0f66; WORD $0xaada // pblendw    xmm3, xmm2, 170
	LONG $0xd0720f66; BYTE $0x10   // psrld    xmm0, 16
	LONG $0x656f0f66; BYTE $0x10   // movdqa    xmm4, oword 16[rbp] /* [rip + .LCPI84_1] */
	LONG $0x0e3a0f66; WORD $0xaac4 // pblendw    xmm0, xmm4, 170
	LONG $0x206d280f               // movaps    xmm5, oword 32[rbp] /* [rip + .LCPI84_2] */
	WORD $0x5c0f; BYTE $0xc5       // subps    xmm0, xmm5
	WORD $0x580f; BYTE $0xc3       // addps    xmm0, xmm3
	LONG $0x0e3a0f66; WORD $0x55d1 // pblendw    xmm2, xmm1, 85
	LONG $0xd1720f66; BYTE $0x10   // psrld    xmm1, 16
	LONG $0x0e3a0f66; WORD $0xaacc // pblendw    xmm1, xmm4, 170
	WORD $0x5c0f; BYTE $0xcd       // subps    xmm1, xmm5
	WORD $0x580f; BYTE $0xca       // addps    xmm1, xmm2
	LONG $0x9604110f               // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10   // movups    oword [rsi + 4*rdx + 16], xmm1

LBB84_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB84_11

LBB84_10:
	WORD $0x048b; BYTE $0x8f     // mov    eax, dword [rdi + 4*rcx]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB84_10

LBB84_11:
	RET

LBB84_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB84_8
	JMP  LBB84_9

TEXT ·_cast_numeric_int32_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB85_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JA   LBB85_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB85_10

LBB85_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x03e8c149         // shr    r8, 3
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB85_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB85_6:
	LONG $0x9704100f             // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rdx + 16]
	WORD $0x5b0f; BYTE $0xc0     // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9     // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f             // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10 // movups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x9744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 4*rdx + 32]
	LONG $0x974c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 4*rdx + 48]
	WORD $0x5b0f; BYTE $0xc0     // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9     // cvtdq2ps    xmm1, xmm1
	LONG $0x9644110f; BYTE $0x20 // movups    oword [rsi + 4*rdx + 32], xmm0
	LONG $0x964c110f; BYTE $0x30 // movups    oword [rsi + 4*rdx + 48], xmm1
	LONG $0x10c28348             // add    rdx, 16
	LONG $0x02c08348             // add    rax, 2
	JNE  LBB85_6
	LONG $0x01c0f641             // test    r8b, 1
	JE   LBB85_9

LBB85_8:
	LONG $0x9704100f             // movups    xmm0, oword [rdi + 4*rdx]
	LONG $0x974c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rdx + 16]
	WORD $0x5b0f; BYTE $0xc0     // cvtdq2ps    xmm0, xmm0
	WORD $0x5b0f; BYTE $0xc9     // cvtdq2ps    xmm1, xmm1
	LONG $0x9604110f             // movups    oword [rsi + 4*rdx], xmm0
	LONG $0x964c110f; BYTE $0x10 // movups    oword [rsi + 4*rdx + 16], xmm1

LBB85_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB85_11

LBB85_10:
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x042a0ff3; BYTE $0x8f // cvtsi2ss    xmm0, dword [rdi + 4*rcx]
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB85_10

LBB85_11:
	RET

LBB85_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB85_8
	JMP  LBB85_9

DATA LCDATA23<>+0x000(SB)/8, $0x0000000000000001
DATA LCDATA23<>+0x008(SB)/8, $0x0000000000000001
GLOBL LCDATA23<>(SB), 8, $16

TEXT ·_cast_numeric_uint64_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA23<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB86_14
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB86_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB86_10

LBB86_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x02e8c149             // shr    r8, 2
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB86_4
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8
	LONG $0xfee28349             // and    r10, -2
	WORD $0xf749; BYTE $0xda     // neg    r10
	WORD $0xd231                 // xor    edx, edx
	LONG $0x556f0f66; BYTE $0x00 // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI86_0] */

LBB86_6:
	LONG $0x046f0ff3; BYTE $0xd7               // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd3730f66; BYTE $0x01               // psrlq    xmm3, 1
	LONG $0xd9eb0f66                           // por    xmm3, xmm1
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0x37380f66; BYTE $0xe0               // pcmpgtq    xmm4, xmm0
	LONG $0x15380f66; BYTE $0xc3               // blendvpd    xmm0, xmm3, xmm0
	LONG $0x3a0f4866; WORD $0xc016; BYTE $0x01 // pextrq    rax, xmm0, 1
	WORD $0x570f; BYTE $0xed                   // xorps    xmm5, xmm5
	LONG $0x2a0f48f3; BYTE $0xe8               // cvtsi2ss    xmm5, rax
	LONG $0x7e0f4866; BYTE $0xc0               // movq    rax, xmm0
	WORD $0x570f; BYTE $0xdb                   // xorps    xmm3, xmm3
	LONG $0x2a0f48f3; BYTE $0xd8               // cvtsi2ss    xmm3, rax
	LONG $0x4c6f0ff3; WORD $0x10d7             // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x213a0f66; WORD $0x1cdd             // insertps    xmm3, xmm5, 28
	WORD $0x280f; BYTE $0xeb                   // movaps    xmm5, xmm3
	WORD $0x580f; BYTE $0xeb                   // addps    xmm5, xmm3
	LONG $0xc4700f66; BYTE $0xed               // pshufd    xmm0, xmm4, 237
	LONG $0x14380f66; BYTE $0xdd               // blendvps    xmm3, xmm5, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xd4730f66; BYTE $0x01               // psrlq    xmm4, 1
	LONG $0xe0eb0f66                           // por    xmm4, xmm0
	WORD $0x570f; BYTE $0xed                   // xorps    xmm5, xmm5
	LONG $0x37380f66; BYTE $0xe9               // pcmpgtq    xmm5, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0x3a0f4866; WORD $0xc816; BYTE $0x01 // pextrq    rax, xmm1, 1
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0               // cvtsi2ss    xmm0, rax
	LONG $0x7e0f4866; BYTE $0xc8               // movq    rax, xmm1
	WORD $0x570f; BYTE $0xc9                   // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xc8               // cvtsi2ss    xmm1, rax
	LONG $0x213a0f66; WORD $0x1cc8             // insertps    xmm1, xmm0, 28
	WORD $0x280f; BYTE $0xe1                   // movaps    xmm4, xmm1
	WORD $0x580f; BYTE $0xe1                   // addps    xmm4, xmm1
	LONG $0xc5700f66; BYTE $0xed               // pshufd    xmm0, xmm5, 237
	LONG $0x14380f66; BYTE $0xcc               // blendvps    xmm1, xmm4, xmm0
	WORD $0x160f; BYTE $0xd9                   // movlhps    xmm3, xmm1
	LONG $0x961c110f                           // movups    oword [rsi + 4*rdx], xmm3
	LONG $0x446f0ff3; WORD $0x20d7             // movdqu    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd3730f66; BYTE $0x01               // psrlq    xmm3, 1
	LONG $0xd9eb0f66                           // por    xmm3, xmm1
	WORD $0x570f; BYTE $0xe4                   // xorps    xmm4, xmm4
	LONG $0x37380f66; BYTE $0xe0               // pcmpgtq    xmm4, xmm0
	LONG $0x15380f66; BYTE $0xc3               // blendvpd    xmm0, xmm3, xmm0
	LONG $0x3a0f4866; WORD $0xc016; BYTE $0x01 // pextrq    rax, xmm0, 1
	WORD $0x570f; BYTE $0xed                   // xorps    xmm5, xmm5
	LONG $0x2a0f48f3; BYTE $0xe8               // cvtsi2ss    xmm5, rax
	LONG $0x7e0f4866; BYTE $0xc0               // movq    rax, xmm0
	WORD $0x570f; BYTE $0xdb                   // xorps    xmm3, xmm3
	LONG $0x2a0f48f3; BYTE $0xd8               // cvtsi2ss    xmm3, rax
	LONG $0x4c6f0ff3; WORD $0x30d7             // movdqu    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0x213a0f66; WORD $0x1cdd             // insertps    xmm3, xmm5, 28
	WORD $0x280f; BYTE $0xeb                   // movaps    xmm5, xmm3
	WORD $0x580f; BYTE $0xeb                   // addps    xmm5, xmm3
	LONG $0xc4700f66; BYTE $0xed               // pshufd    xmm0, xmm4, 237
	LONG $0x14380f66; BYTE $0xdd               // blendvps    xmm3, xmm5, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xd4730f66; BYTE $0x01               // psrlq    xmm4, 1
	LONG $0xe0eb0f66                           // por    xmm4, xmm0
	WORD $0x570f; BYTE $0xed                   // xorps    xmm5, xmm5
	LONG $0x37380f66; BYTE $0xe9               // pcmpgtq    xmm5, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0x3a0f4866; WORD $0xc816; BYTE $0x01 // pextrq    rax, xmm1, 1
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0               // cvtsi2ss    xmm0, rax
	LONG $0x7e0f4866; BYTE $0xc8               // movq    rax, xmm1
	WORD $0x570f; BYTE $0xc9                   // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xc8               // cvtsi2ss    xmm1, rax
	LONG $0x213a0f66; WORD $0x1cc8             // insertps    xmm1, xmm0, 28
	WORD $0x280f; BYTE $0xe1                   // movaps    xmm4, xmm1
	WORD $0x580f; BYTE $0xe1                   // addps    xmm4, xmm1
	LONG $0xc5700f66; BYTE $0xed               // pshufd    xmm0, xmm5, 237
	LONG $0x14380f66; BYTE $0xcc               // blendvps    xmm1, xmm4, xmm0
	WORD $0x160f; BYTE $0xd9                   // movlhps    xmm3, xmm1
	LONG $0x965c110f; BYTE $0x10               // movups    oword [rsi + 4*rdx + 16], xmm3
	LONG $0x08c28348                           // add    rdx, 8
	LONG $0x02c28349                           // add    r10, 2
	JNE  LBB86_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB86_9

LBB86_8:
	LONG $0x046f0ff3; BYTE $0xd7               // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x5d6f0f66; BYTE $0x00               // movdqa    xmm3, oword 0[rbp] /* [rip + .LCPI86_0] */
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd1730f66; BYTE $0x01               // psrlq    xmm1, 1
	LONG $0xcceb0f66                           // por    xmm1, xmm4
	LONG $0x15380f66; BYTE $0xd1               // blendvpd    xmm2, xmm1, xmm0
	LONG $0x3a0f4866; WORD $0xd016; BYTE $0x01 // pextrq    rax, xmm2, 1
	WORD $0x570f; BYTE $0xe4                   // xorps    xmm4, xmm4
	LONG $0x2a0f48f3; BYTE $0xe0               // cvtsi2ss    xmm4, rax
	LONG $0x7e0f4866; BYTE $0xd0               // movq    rax, xmm2
	WORD $0x570f; BYTE $0xd2                   // xorps    xmm2, xmm2
	LONG $0x2a0f48f3; BYTE $0xd0               // cvtsi2ss    xmm2, rax
	LONG $0xedef0f66                           // pxor    xmm5, xmm5
	LONG $0x37380f66; BYTE $0xe8               // pcmpgtq    xmm5, xmm0
	LONG $0x4c6f0ff3; WORD $0x10d7             // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x213a0f66; WORD $0x1cd4             // insertps    xmm2, xmm4, 28
	WORD $0x280f; BYTE $0xe2                   // movaps    xmm4, xmm2
	WORD $0x580f; BYTE $0xe2                   // addps    xmm4, xmm2
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0xc5700f66; BYTE $0xed               // pshufd    xmm0, xmm5, 237
	LONG $0x14380f66; BYTE $0xd4               // blendvps    xmm2, xmm4, xmm0
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xd4730f66; BYTE $0x01               // psrlq    xmm4, 1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x37380f66; BYTE $0xf1               // pcmpgtq    xmm6, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0x3a0f4866; WORD $0xc816; BYTE $0x01 // pextrq    rax, xmm1, 1
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0               // cvtsi2ss    xmm0, rax
	LONG $0x7e0f4866; BYTE $0xc8               // movq    rax, xmm1
	WORD $0x570f; BYTE $0xc9                   // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xc8               // cvtsi2ss    xmm1, rax
	LONG $0x213a0f66; WORD $0x1cc8             // insertps    xmm1, xmm0, 28
	WORD $0x280f; BYTE $0xd9                   // movaps    xmm3, xmm1
	WORD $0x580f; BYTE $0xd9                   // addps    xmm3, xmm1
	LONG $0xc6700f66; BYTE $0xed               // pshufd    xmm0, xmm6, 237
	LONG $0x14380f66; BYTE $0xcb               // blendvps    xmm1, xmm3, xmm0
	WORD $0x160f; BYTE $0xd1                   // movlhps    xmm2, xmm1
	LONG $0x9614110f                           // movups    oword [rsi + 4*rdx], xmm2

LBB86_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB86_10
	JMP  LBB86_14

LBB86_12:
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JE   LBB86_14

LBB86_10:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JNS  LBB86_12
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	WORD $0xd148; BYTE $0xea     // shr    rdx, 1
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0xc0580ff3             // addss    xmm0, xmm0
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB86_10

LBB86_14:
	RET

LBB86_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB86_8
	JMP  LBB86_9

TEXT ·_cast_numeric_int64_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB87_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0xc889             // mov    eax, ecx
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB87_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB87_3

LBB87_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB87_8:
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; WORD $0xd704             // cvtsi2ss    xmm0, qword [rdi + 8*rdx]
	LONG $0x04110ff3; BYTE $0x96               // movss    dword [rsi + 4*rdx], xmm0
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; WORD $0xd744; BYTE $0x08 // cvtsi2ss    xmm0, qword [rdi + 8*rdx + 8]
	LONG $0x44110ff3; WORD $0x0496             // movss    dword [rsi + 4*rdx + 4], xmm0
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; WORD $0xd744; BYTE $0x10 // cvtsi2ss    xmm0, qword [rdi + 8*rdx + 16]
	LONG $0x44110ff3; WORD $0x0896             // movss    dword [rsi + 4*rdx + 8], xmm0
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; WORD $0xd744; BYTE $0x18 // cvtsi2ss    xmm0, qword [rdi + 8*rdx + 24]
	LONG $0x44110ff3; WORD $0x0c96             // movss    dword [rsi + 4*rdx + 12], xmm0
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JNE  LBB87_8

LBB87_3:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB87_6
	LONG $0x960c8d48         // lea    rcx, [rsi + 4*rdx]
	LONG $0xd7148d48         // lea    rdx, [rdi + 8*rdx]
	WORD $0xf631             // xor    esi, esi

LBB87_5:
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; WORD $0xf204 // cvtsi2ss    xmm0, qword [rdx + 8*rsi]
	LONG $0x04110ff3; BYTE $0xb1   // movss    dword [rcx + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JNE  LBB87_5

LBB87_6:
	RET

TEXT ·_cast_numeric_float32_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB88_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x07 // cmp    edx, 7
	JBE  LBB88_2
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB88_9
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB88_9

LBB88_2:
	WORD $0xc931 // xor    ecx, ecx

LBB88_3:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	WORD $0x894c; BYTE $0xc2 // mov    rdx, r8
	LONG $0x07e28348         // and    rdx, 7
	JE   LBB88_5

LBB88_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB88_4

LBB88_5:
	LONG $0x07f98349 // cmp    r9, 7
	JB   LBB88_17

LBB88_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x108f448b         // mov    eax, dword [rdi + 4*rcx + 16]
	LONG $0x108e4489         // mov    dword [rsi + 4*rcx + 16], eax
	LONG $0x148f448b         // mov    eax, dword [rdi + 4*rcx + 20]
	LONG $0x148e4489         // mov    dword [rsi + 4*rcx + 20], eax
	LONG $0x188f448b         // mov    eax, dword [rdi + 4*rcx + 24]
	LONG $0x188e4489         // mov    dword [rsi + 4*rcx + 24], eax
	LONG $0x1c8f448b         // mov    eax, dword [rdi + 4*rcx + 28]
	LONG $0x1c8e4489         // mov    dword [rsi + 4*rcx + 28], eax
	LONG $0x08c18348         // add    rcx, 8
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB88_6
	JMP  LBB88_17

LBB88_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x03eac148         // shr    rdx, 3
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB88_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB88_13

LBB88_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB88_12:
	LONG $0x8704100f             // movups    xmm0, oword [rdi + 4*rax]
	LONG $0x874c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 4*rax + 16]
	LONG $0x8604110f             // movups    oword [rsi + 4*rax], xmm0
	LONG $0x864c110f; BYTE $0x10 // movups    oword [rsi + 4*rax + 16], xmm1
	LONG $0x8744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 4*rax + 32]
	LONG $0x874c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x8644110f; BYTE $0x20 // movups    oword [rsi + 4*rax + 32], xmm0
	LONG $0x864c110f; BYTE $0x30 // movups    oword [rsi + 4*rax + 48], xmm1
	LONG $0x8744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 4*rax + 64]
	LONG $0x874c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 4*rax + 80]
	LONG $0x8644110f; BYTE $0x40 // movups    oword [rsi + 4*rax + 64], xmm0
	LONG $0x864c110f; BYTE $0x50 // movups    oword [rsi + 4*rax + 80], xmm1
	LONG $0x8744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 4*rax + 96]
	LONG $0x874c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 4*rax + 112]
	LONG $0x8644110f; BYTE $0x60 // movups    oword [rsi + 4*rax + 96], xmm0
	LONG $0x864c110f; BYTE $0x70 // movups    oword [rsi + 4*rax + 112], xmm1
	LONG $0x20c08348             // add    rax, 32
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB88_12

LBB88_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB88_16
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB88_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB88_15

LBB88_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB88_3

LBB88_17:
	RET

TEXT ·_cast_numeric_float64_float32_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB89_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB89_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB89_10

LBB89_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB89_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB89_6:
	LONG $0x04100f66; BYTE $0xd7   // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c100f66; WORD $0x10d7 // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc05a0f66               // cvtpd2ps    xmm0, xmm0
	LONG $0xc95a0f66               // cvtpd2ps    xmm1, xmm1
	LONG $0xc1140f66               // unpcklpd    xmm0, xmm1
	LONG $0x04110f66; BYTE $0x96   // movupd    oword [rsi + 4*rdx], xmm0
	LONG $0x44100f66; WORD $0x20d7 // movupd    xmm0, oword [rdi + 8*rdx + 32]
	LONG $0x4c100f66; WORD $0x30d7 // movupd    xmm1, oword [rdi + 8*rdx + 48]
	LONG $0xc05a0f66               // cvtpd2ps    xmm0, xmm0
	LONG $0xc95a0f66               // cvtpd2ps    xmm1, xmm1
	LONG $0xc1140f66               // unpcklpd    xmm0, xmm1
	LONG $0x44110f66; WORD $0x1096 // movupd    oword [rsi + 4*rdx + 16], xmm0
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB89_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB89_9

LBB89_8:
	LONG $0x04100f66; BYTE $0xd7   // movupd    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c100f66; WORD $0x10d7 // movupd    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xc05a0f66               // cvtpd2ps    xmm0, xmm0
	LONG $0xc95a0f66               // cvtpd2ps    xmm1, xmm1
	LONG $0xc1140f66               // unpcklpd    xmm0, xmm1
	LONG $0x04110f66; BYTE $0x96   // movupd    oword [rsi + 4*rdx], xmm0

LBB89_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB89_11

LBB89_10:
	LONG $0x04100ff2; BYTE $0xcf // movsd    xmm0, qword [rdi + 8*rcx]
	LONG $0xc05a0ff2             // cvtsd2ss    xmm0, xmm0
	LONG $0x04110ff3; BYTE $0x8e // movss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB89_10

LBB89_11:
	RET

LBB89_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB89_8
	JMP  LBB89_9

TEXT ·_cast_numeric_uint8_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB90_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB90_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB90_3

LBB90_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB90_8:
	LONG $0x1704b60f               // movzx    eax, byte [rdi + rdx]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x04110ff2; BYTE $0xd6   // movsd    qword [rsi + 8*rdx], xmm0
	LONG $0x1744b60f; BYTE $0x01   // movzx    eax, byte [rdi + rdx + 1]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x08d6 // movsd    qword [rsi + 8*rdx + 8], xmm0
	LONG $0x1744b60f; BYTE $0x02   // movzx    eax, byte [rdi + rdx + 2]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x10d6 // movsd    qword [rsi + 8*rdx + 16], xmm0
	LONG $0x1744b60f; BYTE $0x03   // movzx    eax, byte [rdi + rdx + 3]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x18d6 // movsd    qword [rsi + 8*rdx + 24], xmm0
	LONG $0x04c28348               // add    rdx, 4
	WORD $0x3948; BYTE $0xd1       // cmp    rcx, rdx
	JNE  LBB90_8

LBB90_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB90_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	WORD $0x0148; BYTE $0xd7 // add    rdi, rdx
	WORD $0xd231             // xor    edx, edx

LBB90_5:
	LONG $0x1734b60f             // movzx    esi, byte [rdi + rdx]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0xc62a0ff2             // cvtsi2sd    xmm0, esi
	LONG $0x04110ff2; BYTE $0xd1 // movsd    qword [rcx + 8*rdx], xmm0
	LONG $0x01c28348             // add    rdx, 1
	WORD $0x3949; BYTE $0xd0     // cmp    r8, rdx
	JNE  LBB90_5

LBB90_6:
	RET

TEXT ·_cast_numeric_int8_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB91_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB91_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB91_3

LBB91_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB91_8:
	LONG $0x1704be0f               // movsx    eax, byte [rdi + rdx]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x04110ff2; BYTE $0xd6   // movsd    qword [rsi + 8*rdx], xmm0
	LONG $0x1744be0f; BYTE $0x01   // movsx    eax, byte [rdi + rdx + 1]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x08d6 // movsd    qword [rsi + 8*rdx + 8], xmm0
	LONG $0x1744be0f; BYTE $0x02   // movsx    eax, byte [rdi + rdx + 2]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x10d6 // movsd    qword [rsi + 8*rdx + 16], xmm0
	LONG $0x1744be0f; BYTE $0x03   // movsx    eax, byte [rdi + rdx + 3]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x18d6 // movsd    qword [rsi + 8*rdx + 24], xmm0
	LONG $0x04c28348               // add    rdx, 4
	WORD $0x3948; BYTE $0xd1       // cmp    rcx, rdx
	JNE  LBB91_8

LBB91_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB91_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	WORD $0x0148; BYTE $0xd7 // add    rdi, rdx
	WORD $0xd231             // xor    edx, edx

LBB91_5:
	LONG $0x1734be0f             // movsx    esi, byte [rdi + rdx]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0xc62a0ff2             // cvtsi2sd    xmm0, esi
	LONG $0x04110ff2; BYTE $0xd1 // movsd    qword [rcx + 8*rdx], xmm0
	LONG $0x01c28348             // add    rdx, 1
	WORD $0x3949; BYTE $0xd0     // cmp    r8, rdx
	JNE  LBB91_5

LBB91_6:
	RET

TEXT ·_cast_numeric_uint16_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB92_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB92_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB92_3

LBB92_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB92_8:
	LONG $0x5704b70f               // movzx    eax, word [rdi + 2*rdx]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x04110ff2; BYTE $0xd6   // movsd    qword [rsi + 8*rdx], xmm0
	LONG $0x5744b70f; BYTE $0x02   // movzx    eax, word [rdi + 2*rdx + 2]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x08d6 // movsd    qword [rsi + 8*rdx + 8], xmm0
	LONG $0x5744b70f; BYTE $0x04   // movzx    eax, word [rdi + 2*rdx + 4]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x10d6 // movsd    qword [rsi + 8*rdx + 16], xmm0
	LONG $0x5744b70f; BYTE $0x06   // movzx    eax, word [rdi + 2*rdx + 6]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x18d6 // movsd    qword [rsi + 8*rdx + 24], xmm0
	LONG $0x04c28348               // add    rdx, 4
	WORD $0x3948; BYTE $0xd1       // cmp    rcx, rdx
	JNE  LBB92_8

LBB92_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB92_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	LONG $0x57148d48         // lea    rdx, [rdi + 2*rdx]
	WORD $0xf631             // xor    esi, esi

LBB92_5:
	LONG $0x723cb70f             // movzx    edi, word [rdx + 2*rsi]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0xc72a0ff2             // cvtsi2sd    xmm0, edi
	LONG $0x04110ff2; BYTE $0xf1 // movsd    qword [rcx + 8*rsi], xmm0
	LONG $0x01c68348             // add    rsi, 1
	WORD $0x3949; BYTE $0xf0     // cmp    r8, rsi
	JNE  LBB92_5

LBB92_6:
	RET

TEXT ·_cast_numeric_int16_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB93_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB93_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB93_3

LBB93_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB93_8:
	LONG $0x5704bf0f               // movsx    eax, word [rdi + 2*rdx]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x04110ff2; BYTE $0xd6   // movsd    qword [rsi + 8*rdx], xmm0
	LONG $0x5744bf0f; BYTE $0x02   // movsx    eax, word [rdi + 2*rdx + 2]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x08d6 // movsd    qword [rsi + 8*rdx + 8], xmm0
	LONG $0x5744bf0f; BYTE $0x04   // movsx    eax, word [rdi + 2*rdx + 4]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x10d6 // movsd    qword [rsi + 8*rdx + 16], xmm0
	LONG $0x5744bf0f; BYTE $0x06   // movsx    eax, word [rdi + 2*rdx + 6]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc02a0ff2               // cvtsi2sd    xmm0, eax
	LONG $0x44110ff2; WORD $0x18d6 // movsd    qword [rsi + 8*rdx + 24], xmm0
	LONG $0x04c28348               // add    rdx, 4
	WORD $0x3948; BYTE $0xd1       // cmp    rcx, rdx
	JNE  LBB93_8

LBB93_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB93_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	LONG $0x57148d48         // lea    rdx, [rdi + 2*rdx]
	WORD $0xf631             // xor    esi, esi

LBB93_5:
	LONG $0x723cbf0f             // movsx    edi, word [rdx + 2*rsi]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0xc72a0ff2             // cvtsi2sd    xmm0, edi
	LONG $0x04110ff2; BYTE $0xf1 // movsd    qword [rcx + 8*rsi], xmm0
	LONG $0x01c68348             // add    rsi, 1
	WORD $0x3949; BYTE $0xf0     // cmp    r8, rsi
	JNE  LBB93_5

LBB93_6:
	RET

TEXT ·_cast_numeric_uint32_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB94_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB94_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB94_3

LBB94_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB94_8:
	WORD $0x048b; BYTE $0x97       // mov    eax, dword [rdi + 4*rdx]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; BYTE $0xc0   // cvtsi2sd    xmm0, rax
	LONG $0x04110ff2; BYTE $0xd6   // movsd    qword [rsi + 8*rdx], xmm0
	LONG $0x0497448b               // mov    eax, dword [rdi + 4*rdx + 4]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; BYTE $0xc0   // cvtsi2sd    xmm0, rax
	LONG $0x44110ff2; WORD $0x08d6 // movsd    qword [rsi + 8*rdx + 8], xmm0
	LONG $0x0897448b               // mov    eax, dword [rdi + 4*rdx + 8]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; BYTE $0xc0   // cvtsi2sd    xmm0, rax
	LONG $0x44110ff2; WORD $0x10d6 // movsd    qword [rsi + 8*rdx + 16], xmm0
	LONG $0x0c97448b               // mov    eax, dword [rdi + 4*rdx + 12]
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; BYTE $0xc0   // cvtsi2sd    xmm0, rax
	LONG $0x44110ff2; WORD $0x18d6 // movsd    qword [rsi + 8*rdx + 24], xmm0
	LONG $0x04c28348               // add    rdx, 4
	WORD $0x3948; BYTE $0xd1       // cmp    rcx, rdx
	JNE  LBB94_8

LBB94_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB94_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	LONG $0x97148d48         // lea    rdx, [rdi + 4*rdx]
	WORD $0xf631             // xor    esi, esi

LBB94_5:
	WORD $0x3c8b; BYTE $0xb2     // mov    edi, dword [rdx + 4*rsi]
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; BYTE $0xc7 // cvtsi2sd    xmm0, rdi
	LONG $0x04110ff2; BYTE $0xf1 // movsd    qword [rcx + 8*rsi], xmm0
	LONG $0x01c68348             // add    rsi, 1
	WORD $0x3949; BYTE $0xf0     // cmp    r8, rsi
	JNE  LBB94_5

LBB94_6:
	RET

TEXT ·_cast_numeric_int32_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB95_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0xc889             // mov    eax, ecx
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB95_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB95_3

LBB95_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB95_8:
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x042a0ff2; BYTE $0x97   // cvtsi2sd    xmm0, dword [rdi + 4*rdx]
	LONG $0x04110ff2; BYTE $0xd6   // movsd    qword [rsi + 8*rdx], xmm0
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x442a0ff2; WORD $0x0497 // cvtsi2sd    xmm0, dword [rdi + 4*rdx + 4]
	LONG $0x44110ff2; WORD $0x08d6 // movsd    qword [rsi + 8*rdx + 8], xmm0
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x442a0ff2; WORD $0x0897 // cvtsi2sd    xmm0, dword [rdi + 4*rdx + 8]
	LONG $0x44110ff2; WORD $0x10d6 // movsd    qword [rsi + 8*rdx + 16], xmm0
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x442a0ff2; WORD $0x0c97 // cvtsi2sd    xmm0, dword [rdi + 4*rdx + 12]
	LONG $0x44110ff2; WORD $0x18d6 // movsd    qword [rsi + 8*rdx + 24], xmm0
	LONG $0x04c28348               // add    rdx, 4
	WORD $0x3948; BYTE $0xd1       // cmp    rcx, rdx
	JNE  LBB95_8

LBB95_3:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB95_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	LONG $0x97148d48         // lea    rdx, [rdi + 4*rdx]
	WORD $0xf631             // xor    esi, esi

LBB95_5:
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x042a0ff2; BYTE $0xb2 // cvtsi2sd    xmm0, dword [rdx + 4*rsi]
	LONG $0x04110ff2; BYTE $0xf1 // movsd    qword [rcx + 8*rsi], xmm0
	LONG $0x01c68348             // add    rsi, 1
	WORD $0x3948; BYTE $0xf0     // cmp    rax, rsi
	JNE  LBB95_5

LBB95_6:
	RET

DATA LCDATA24<>+0x000(SB)/8, $0x4330000000000000
DATA LCDATA24<>+0x008(SB)/8, $0x4330000000000000
DATA LCDATA24<>+0x010(SB)/8, $0x4530000000000000
DATA LCDATA24<>+0x018(SB)/8, $0x4530000000000000
DATA LCDATA24<>+0x020(SB)/8, $0x4530000000100000
DATA LCDATA24<>+0x028(SB)/8, $0x4530000000100000
DATA LCDATA24<>+0x030(SB)/8, $0x4530000043300000
DATA LCDATA24<>+0x038(SB)/8, $0x0000000000000000
DATA LCDATA24<>+0x040(SB)/8, $0x4330000000000000
DATA LCDATA24<>+0x048(SB)/8, $0x4530000000000000
GLOBL LCDATA24<>(SB), 8, $80

TEXT ·_cast_numeric_uint64_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA24<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB96_12
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB96_5
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB96_3

LBB96_5:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x02e8c149             // shr    r8, 2
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB96_6
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0xc0ef0f66             // pxor    xmm0, xmm0
	LONG $0x4d6f0f66; BYTE $0x00 // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI96_0] */
	LONG $0x556f0f66; BYTE $0x10 // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI96_1] */
	LONG $0x5d280f66; BYTE $0x20 // movapd    xmm3, oword 32[rbp] /* [rip + .LCPI96_2] */

LBB96_8:
	LONG $0x246f0ff3; BYTE $0xd7   // movdqu    xmm4, oword [rdi + 8*rdx]
	LONG $0x6c6f0ff3; WORD $0x10d7 // movdqu    xmm5, oword [rdi + 8*rdx + 16]
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0x0e3a0f66; WORD $0xccf0 // pblendw    xmm6, xmm0, 204
	LONG $0xf1eb0f66               // por    xmm6, xmm1
	LONG $0xd4730f66; BYTE $0x20   // psrlq    xmm4, 32
	LONG $0xe2eb0f66               // por    xmm4, xmm2
	LONG $0xe35c0f66               // subpd    xmm4, xmm3
	LONG $0xe6580f66               // addpd    xmm4, xmm6
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0x0e3a0f66; WORD $0xccf0 // pblendw    xmm6, xmm0, 204
	LONG $0xf1eb0f66               // por    xmm6, xmm1
	LONG $0xd5730f66; BYTE $0x20   // psrlq    xmm5, 32
	LONG $0xeaeb0f66               // por    xmm5, xmm2
	LONG $0xeb5c0f66               // subpd    xmm5, xmm3
	LONG $0xee580f66               // addpd    xmm5, xmm6
	LONG $0x24110f66; BYTE $0xd6   // movupd    oword [rsi + 8*rdx], xmm4
	LONG $0x6c110f66; WORD $0x10d6 // movupd    oword [rsi + 8*rdx + 16], xmm5
	LONG $0x646f0ff3; WORD $0x20d7 // movdqu    xmm4, oword [rdi + 8*rdx + 32]
	LONG $0x6c6f0ff3; WORD $0x30d7 // movdqu    xmm5, oword [rdi + 8*rdx + 48]
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0x0e3a0f66; WORD $0xccf0 // pblendw    xmm6, xmm0, 204
	LONG $0xf1eb0f66               // por    xmm6, xmm1
	LONG $0xd4730f66; BYTE $0x20   // psrlq    xmm4, 32
	LONG $0xe2eb0f66               // por    xmm4, xmm2
	LONG $0xe35c0f66               // subpd    xmm4, xmm3
	LONG $0xe6580f66               // addpd    xmm4, xmm6
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0x0e3a0f66; WORD $0xccf0 // pblendw    xmm6, xmm0, 204
	LONG $0xf1eb0f66               // por    xmm6, xmm1
	LONG $0xd5730f66; BYTE $0x20   // psrlq    xmm5, 32
	LONG $0xeaeb0f66               // por    xmm5, xmm2
	LONG $0xeb5c0f66               // subpd    xmm5, xmm3
	LONG $0xee580f66               // addpd    xmm5, xmm6
	LONG $0x64110f66; WORD $0x20d6 // movupd    oword [rsi + 8*rdx + 32], xmm4
	LONG $0x6c110f66; WORD $0x30d6 // movupd    oword [rsi + 8*rdx + 48], xmm5
	LONG $0x08c28348               // add    rdx, 8
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB96_8
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB96_11

LBB96_10:
	LONG $0x046f0ff3; BYTE $0xd7   // movdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6f0ff3; WORD $0x10d7 // movdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0xd2ef0f66               // pxor    xmm2, xmm2
	LONG $0xd86f0f66               // movdqa    xmm3, xmm0
	LONG $0x0e3a0f66; WORD $0xccda // pblendw    xmm3, xmm2, 204
	LONG $0x656f0f66; BYTE $0x00   // movdqa    xmm4, oword 0[rbp] /* [rip + .LCPI96_0] */
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0xd0730f66; BYTE $0x20   // psrlq    xmm0, 32
	LONG $0x6d6f0f66; BYTE $0x10   // movdqa    xmm5, oword 16[rbp] /* [rip + .LCPI96_1] */
	LONG $0xc5eb0f66               // por    xmm0, xmm5
	LONG $0x75280f66; BYTE $0x20   // movapd    xmm6, oword 32[rbp] /* [rip + .LCPI96_2] */
	LONG $0xc65c0f66               // subpd    xmm0, xmm6
	LONG $0xc3580f66               // addpd    xmm0, xmm3
	LONG $0x0e3a0f66; WORD $0x33d1 // pblendw    xmm2, xmm1, 51
	LONG $0xd4eb0f66               // por    xmm2, xmm4
	LONG $0xd1730f66; BYTE $0x20   // psrlq    xmm1, 32
	LONG $0xcdeb0f66               // por    xmm1, xmm5
	LONG $0xce5c0f66               // subpd    xmm1, xmm6
	LONG $0xca580f66               // addpd    xmm1, xmm2
	LONG $0x04110f66; BYTE $0xd6   // movupd    oword [rsi + 8*rdx], xmm0
	LONG $0x4c110f66; WORD $0x10d6 // movupd    oword [rsi + 8*rdx + 16], xmm1

LBB96_11:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB96_12

LBB96_3:
	LONG $0x45280f66; BYTE $0x30 // movapd    xmm0, oword 48[rbp] /* [rip + .LCPI96_3] */
	LONG $0x4d280f66; BYTE $0x40 // movapd    xmm1, oword 64[rbp] /* [rip + .LCPI96_4] */

LBB96_4:
	LONG $0x14100ff2; BYTE $0xcf // movsd    xmm2, qword [rdi + 8*rcx]
	WORD $0x140f; BYTE $0xd0     // unpcklps    xmm2, xmm0
	LONG $0xd15c0f66             // subpd    xmm2, xmm1
	LONG $0xda280f66             // movapd    xmm3, xmm2
	LONG $0xda150f66             // unpckhpd    xmm3, xmm2
	LONG $0xda580ff2             // addsd    xmm3, xmm2
	LONG $0x1c110ff2; BYTE $0xce // movsd    qword [rsi + 8*rcx], xmm3
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB96_4

LBB96_12:
	RET

LBB96_6:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB96_10
	JMP  LBB96_11

TEXT ·_cast_numeric_int64_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB97_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0xc889             // mov    eax, ecx
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB97_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB97_3

LBB97_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB97_8:
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; WORD $0xd704             // cvtsi2sd    xmm0, qword [rdi + 8*rdx]
	LONG $0x04110ff2; BYTE $0xd6               // movsd    qword [rsi + 8*rdx], xmm0
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; WORD $0xd744; BYTE $0x08 // cvtsi2sd    xmm0, qword [rdi + 8*rdx + 8]
	LONG $0x44110ff2; WORD $0x08d6             // movsd    qword [rsi + 8*rdx + 8], xmm0
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; WORD $0xd744; BYTE $0x10 // cvtsi2sd    xmm0, qword [rdi + 8*rdx + 16]
	LONG $0x44110ff2; WORD $0x10d6             // movsd    qword [rsi + 8*rdx + 16], xmm0
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; WORD $0xd744; BYTE $0x18 // cvtsi2sd    xmm0, qword [rdi + 8*rdx + 24]
	LONG $0x44110ff2; WORD $0x18d6             // movsd    qword [rsi + 8*rdx + 24], xmm0
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JNE  LBB97_8

LBB97_3:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB97_6
	LONG $0xd60c8d48         // lea    rcx, [rsi + 8*rdx]
	LONG $0xd7148d48         // lea    rdx, [rdi + 8*rdx]
	WORD $0xf631             // xor    esi, esi

LBB97_5:
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x2a0f48f2; WORD $0xf204 // cvtsi2sd    xmm0, qword [rdx + 8*rsi]
	LONG $0x04110ff2; BYTE $0xf1   // movsd    qword [rcx + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JNE  LBB97_5

LBB97_6:
	RET

TEXT ·_cast_numeric_float32_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB98_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB98_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB98_10

LBB98_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x02e8c149         // shr    r8, 2
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB98_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB98_6:
	LONG $0x97045a0f             // cvtps2pd    xmm0, qword [rdi + 4*rdx]
	LONG $0x974c5a0f; BYTE $0x08 // cvtps2pd    xmm1, qword [rdi + 4*rdx + 8]
	LONG $0xd604110f             // movups    oword [rsi + 8*rdx], xmm0
	LONG $0xd64c110f; BYTE $0x10 // movups    oword [rsi + 8*rdx + 16], xmm1
	LONG $0x97445a0f; BYTE $0x10 // cvtps2pd    xmm0, qword [rdi + 4*rdx + 16]
	LONG $0x974c5a0f; BYTE $0x18 // cvtps2pd    xmm1, qword [rdi + 4*rdx + 24]
	LONG $0xd644110f; BYTE $0x20 // movups    oword [rsi + 8*rdx + 32], xmm0
	LONG $0xd64c110f; BYTE $0x30 // movups    oword [rsi + 8*rdx + 48], xmm1
	LONG $0x08c28348             // add    rdx, 8
	LONG $0x02c08348             // add    rax, 2
	JNE  LBB98_6
	LONG $0x01c0f641             // test    r8b, 1
	JE   LBB98_9

LBB98_8:
	LONG $0x97045a0f             // cvtps2pd    xmm0, qword [rdi + 4*rdx]
	LONG $0x974c5a0f; BYTE $0x08 // cvtps2pd    xmm1, qword [rdi + 4*rdx + 8]
	LONG $0xd604110f             // movups    oword [rsi + 8*rdx], xmm0
	LONG $0xd64c110f; BYTE $0x10 // movups    oword [rsi + 8*rdx + 16], xmm1

LBB98_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB98_11

LBB98_10:
	LONG $0x04100ff3; BYTE $0x8f // movss    xmm0, dword [rdi + 4*rcx]
	LONG $0xc05a0ff3             // cvtss2sd    xmm0, xmm0
	LONG $0x04110ff2; BYTE $0xce // movsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB98_10

LBB98_11:
	RET

LBB98_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB98_8
	JMP  LBB98_9

TEXT ·_cast_numeric_float64_float64_sse4(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB99_17
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JBE  LBB99_2
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB99_9
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB99_9

LBB99_2:
	WORD $0xc931 // xor    ecx, ecx

LBB99_3:
	WORD $0x8944; BYTE $0xc2 // mov    edx, r8d
	WORD $0xca29             // sub    edx, ecx
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x07e28348         // and    rdx, 7
	JE   LBB99_5

LBB99_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB99_4

LBB99_5:
	LONG $0x07f98349 // cmp    r9, 7
	JB   LBB99_17

LBB99_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0xcf448b48; BYTE $0x20 // mov    rax, qword [rdi + 8*rcx + 32]
	LONG $0xce448948; BYTE $0x20 // mov    qword [rsi + 8*rcx + 32], rax
	LONG $0xcf448b48; BYTE $0x28 // mov    rax, qword [rdi + 8*rcx + 40]
	LONG $0xce448948; BYTE $0x28 // mov    qword [rsi + 8*rcx + 40], rax
	LONG $0xcf448b48; BYTE $0x30 // mov    rax, qword [rdi + 8*rcx + 48]
	LONG $0xce448948; BYTE $0x30 // mov    qword [rsi + 8*rcx + 48], rax
	LONG $0xcf448b48; BYTE $0x38 // mov    rax, qword [rdi + 8*rcx + 56]
	LONG $0xce448948; BYTE $0x38 // mov    qword [rsi + 8*rcx + 56], rax
	LONG $0x08c18348             // add    rcx, 8
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB99_6
	JMP  LBB99_17

LBB99_9:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	LONG $0x02eac148         // shr    rdx, 2
	LONG $0x01c28348         // add    rdx, 1
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB99_11
	WORD $0xc031             // xor    eax, eax
	JMP  LBB99_13

LBB99_11:
	LONG $0xfce28348         // and    rdx, -4
	WORD $0xf748; BYTE $0xda // neg    rdx
	WORD $0xc031             // xor    eax, eax

LBB99_12:
	LONG $0xc704100f             // movups    xmm0, oword [rdi + 8*rax]
	LONG $0xc74c100f; BYTE $0x10 // movups    xmm1, oword [rdi + 8*rax + 16]
	LONG $0xc604110f             // movups    oword [rsi + 8*rax], xmm0
	LONG $0xc64c110f; BYTE $0x10 // movups    oword [rsi + 8*rax + 16], xmm1
	LONG $0xc744100f; BYTE $0x20 // movups    xmm0, oword [rdi + 8*rax + 32]
	LONG $0xc74c100f; BYTE $0x30 // movups    xmm1, oword [rdi + 8*rax + 48]
	LONG $0xc644110f; BYTE $0x20 // movups    oword [rsi + 8*rax + 32], xmm0
	LONG $0xc64c110f; BYTE $0x30 // movups    oword [rsi + 8*rax + 48], xmm1
	LONG $0xc744100f; BYTE $0x40 // movups    xmm0, oword [rdi + 8*rax + 64]
	LONG $0xc74c100f; BYTE $0x50 // movups    xmm1, oword [rdi + 8*rax + 80]
	LONG $0xc644110f; BYTE $0x40 // movups    oword [rsi + 8*rax + 64], xmm0
	LONG $0xc64c110f; BYTE $0x50 // movups    oword [rsi + 8*rax + 80], xmm1
	LONG $0xc744100f; BYTE $0x60 // movups    xmm0, oword [rdi + 8*rax + 96]
	LONG $0xc74c100f; BYTE $0x70 // movups    xmm1, oword [rdi + 8*rax + 112]
	LONG $0xc644110f; BYTE $0x60 // movups    oword [rsi + 8*rax + 96], xmm0
	LONG $0xc64c110f; BYTE $0x70 // movups    oword [rsi + 8*rax + 112], xmm1
	LONG $0x10c08348             // add    rax, 16
	LONG $0x04c28348             // add    rdx, 4
	JNE  LBB99_12

LBB99_13:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB99_16
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf749; BYTE $0xd9 // neg    r9

LBB99_15:
	LONG $0x0744100f; BYTE $0xf0 // movups    xmm0, oword [rdi + rax - 16]
	LONG $0x070c100f             // movups    xmm1, oword [rdi + rax]
	LONG $0x0644110f; BYTE $0xf0 // movups    oword [rsi + rax - 16], xmm0
	LONG $0x060c110f             // movups    oword [rsi + rax], xmm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE  LBB99_15

LBB99_16:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB99_3

LBB99_17:
	RET
