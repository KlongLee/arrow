//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_cast_numeric_uint8_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB0_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x7f // cmp    edx, 127
	JBE  LBB0_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB0_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB0_9

LBB0_2:
	WORD $0xc931 // xor    ecx, ecx

LBB0_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB0_5

LBB0_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB0_4

LBB0_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB0_16

LBB0_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB0_6
	JMP  LBB0_16

LBB0_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80418d48         // lea    rax, [rcx - 128]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x07e8c149         // shr    r8, 7
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB0_12:
	LONG $0x0410fcc5; BYTE $0x17               // vmovups    ymm0, yword [rdi + rdx]
	LONG $0x4c10fcc5; WORD $0x2017             // vmovups    ymm1, yword [rdi + rdx + 32]
	LONG $0x5410fcc5; WORD $0x4017             // vmovups    ymm2, yword [rdi + rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6017             // vmovups    ymm3, yword [rdi + rdx + 96]
	LONG $0x0411fcc5; BYTE $0x16               // vmovups    yword [rsi + rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2016             // vmovups    yword [rsi + rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4016             // vmovups    yword [rsi + rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6016             // vmovups    yword [rsi + rdx + 96], ymm3
	QUAD $0x000080178410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdi + rdx + 128]
	QUAD $0x0000a0178c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdi + rdx + 160]
	QUAD $0x0000c0179410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdi + rdx + 192]
	QUAD $0x0000e0179c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdi + rdx + 224]
	QUAD $0x000080168411fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 128], ymm0
	QUAD $0x0000a0168c11fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 160], ymm1
	QUAD $0x0000c0169411fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 192], ymm2
	QUAD $0x0000e0169c11fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 224], ymm3
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // add    rdx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB0_15

LBB0_14:
	LONG $0x0410fcc5; BYTE $0x17   // vmovups    ymm0, yword [rdi + rdx]
	LONG $0x4c10fcc5; WORD $0x2017 // vmovups    ymm1, yword [rdi + rdx + 32]
	LONG $0x5410fcc5; WORD $0x4017 // vmovups    ymm2, yword [rdi + rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6017 // vmovups    ymm3, yword [rdi + rdx + 96]
	LONG $0x0411fcc5; BYTE $0x16   // vmovups    yword [rsi + rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2016 // vmovups    yword [rsi + rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4016 // vmovups    yword [rsi + rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6016 // vmovups    yword [rsi + rdx + 96], ymm3

LBB0_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB0_3

LBB0_16:
	VZEROUPPER
	RET

LBB0_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB0_14
	JMP  LBB0_15

TEXT ·_cast_numeric_int8_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB1_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x7f // cmp    edx, 127
	JBE  LBB1_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB1_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB1_9

LBB1_2:
	WORD $0xc931 // xor    ecx, ecx

LBB1_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB1_5

LBB1_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB1_4

LBB1_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB1_16

LBB1_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB1_6
	JMP  LBB1_16

LBB1_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80418d48         // lea    rax, [rcx - 128]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x07e8c149         // shr    r8, 7
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB1_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB1_12:
	LONG $0x0410fcc5; BYTE $0x17               // vmovups    ymm0, yword [rdi + rdx]
	LONG $0x4c10fcc5; WORD $0x2017             // vmovups    ymm1, yword [rdi + rdx + 32]
	LONG $0x5410fcc5; WORD $0x4017             // vmovups    ymm2, yword [rdi + rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6017             // vmovups    ymm3, yword [rdi + rdx + 96]
	LONG $0x0411fcc5; BYTE $0x16               // vmovups    yword [rsi + rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2016             // vmovups    yword [rsi + rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4016             // vmovups    yword [rsi + rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6016             // vmovups    yword [rsi + rdx + 96], ymm3
	QUAD $0x000080178410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdi + rdx + 128]
	QUAD $0x0000a0178c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdi + rdx + 160]
	QUAD $0x0000c0179410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdi + rdx + 192]
	QUAD $0x0000e0179c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdi + rdx + 224]
	QUAD $0x000080168411fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 128], ymm0
	QUAD $0x0000a0168c11fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 160], ymm1
	QUAD $0x0000c0169411fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 192], ymm2
	QUAD $0x0000e0169c11fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 224], ymm3
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // add    rdx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB1_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB1_15

LBB1_14:
	LONG $0x0410fcc5; BYTE $0x17   // vmovups    ymm0, yword [rdi + rdx]
	LONG $0x4c10fcc5; WORD $0x2017 // vmovups    ymm1, yword [rdi + rdx + 32]
	LONG $0x5410fcc5; WORD $0x4017 // vmovups    ymm2, yword [rdi + rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6017 // vmovups    ymm3, yword [rdi + rdx + 96]
	LONG $0x0411fcc5; BYTE $0x16   // vmovups    yword [rsi + rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2016 // vmovups    yword [rsi + rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4016 // vmovups    yword [rsi + rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6016 // vmovups    yword [rsi + rdx + 96], ymm3

LBB1_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB1_3

LBB1_16:
	VZEROUPPER
	RET

LBB1_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB1_14
	JMP  LBB1_15

DATA LCDATA1<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x010(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x018(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA1<>(SB), 8, $32

TEXT ·_cast_numeric_uint16_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA1<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB2_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB2_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB2_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB2_9

LBB2_2:
	WORD $0xc931 // xor    ecx, ecx

LBB2_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB2_5

LBB2_4:
	LONG $0x4f04b60f         // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB2_4

LBB2_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB2_16

LBB2_6:
	LONG $0x4f04b60f             // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x4f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + 2*rcx + 2]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x4f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 2*rcx + 4]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x4f44b60f; BYTE $0x06 // movzx    eax, byte [rdi + 2*rcx + 6]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB2_6
	JMP  LBB2_16

LBB2_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0     // and    ecx, -64
	LONG $0xc0418d48             // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x06e8c149             // shr    r8, 6
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_12:
	LONG $0x0cdbfdc5; BYTE $0x57         // vpand    ymm1, ymm0, yword [rdi + 2*rdx]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5                     // vpackuswb    xmm1, xmm1, xmm2
	LONG $0x54dbfdc5; WORD $0x2057       // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 32]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5                     // vpackuswb    xmm2, xmm2, xmm3
	LONG $0x5cdbfdc5; WORD $0x4057       // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 64]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5                     // vpackuswb    xmm3, xmm3, xmm4
	LONG $0x64dbfdc5; WORD $0x6057       // vpand    ymm4, ymm0, yword [rdi + 2*rdx + 96]
	LONG $0x397de3c4; WORD $0x01e5       // vextracti128    xmm5, ymm4, 1
	LONG $0xe567d9c5                     // vpackuswb    xmm4, xmm4, xmm5
	LONG $0x0c7ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm1
	LONG $0x547ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2016       // vmovdqu    oword [rsi + rdx + 32], xmm3
	LONG $0x647ffac5; WORD $0x3016       // vmovdqu    oword [rsi + rdx + 48], xmm4
	QUAD $0x000080578cdbfdc5; BYTE $0x00 // vpand    ymm1, ymm0, yword [rdi + 2*rdx + 128]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5                     // vpackuswb    xmm1, xmm1, xmm2
	QUAD $0x0000a05794dbfdc5; BYTE $0x00 // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 160]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5                     // vpackuswb    xmm2, xmm2, xmm3
	QUAD $0x0000c0579cdbfdc5; BYTE $0x00 // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 192]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5                     // vpackuswb    xmm3, xmm3, xmm4
	QUAD $0x0000e057a4dbfdc5; BYTE $0x00 // vpand    ymm4, ymm0, yword [rdi + 2*rdx + 224]
	LONG $0x397de3c4; WORD $0x01e5       // vextracti128    xmm5, ymm4, 1
	LONG $0xe567d9c5                     // vpackuswb    xmm4, xmm4, xmm5
	LONG $0x4c7ffac5; WORD $0x4016       // vmovdqu    oword [rsi + rdx + 64], xmm1
	LONG $0x547ffac5; WORD $0x5016       // vmovdqu    oword [rsi + rdx + 80], xmm2
	LONG $0x5c7ffac5; WORD $0x6016       // vmovdqu    oword [rsi + rdx + 96], xmm3
	LONG $0x647ffac5; WORD $0x7016       // vmovdqu    oword [rsi + rdx + 112], xmm4
	LONG $0x80ea8348                     // sub    rdx, -128
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB2_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB2_15

LBB2_14:
	LONG $0x456ffdc5; BYTE $0x00   // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0x0cdbfdc5; BYTE $0x57   // vpand    ymm1, ymm0, yword [rdi + 2*rdx]
	LONG $0x397de3c4; WORD $0x01ca // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5               // vpackuswb    xmm1, xmm1, xmm2
	LONG $0x54dbfdc5; WORD $0x2057 // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 32]
	LONG $0x397de3c4; WORD $0x01d3 // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5               // vpackuswb    xmm2, xmm2, xmm3
	LONG $0x5cdbfdc5; WORD $0x4057 // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 64]
	LONG $0x397de3c4; WORD $0x01dc // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5               // vpackuswb    xmm3, xmm3, xmm4
	LONG $0x44dbfdc5; WORD $0x6057 // vpand    ymm0, ymm0, yword [rdi + 2*rdx + 96]
	LONG $0x397de3c4; WORD $0x01c4 // vextracti128    xmm4, ymm0, 1
	LONG $0xc467f9c5               // vpackuswb    xmm0, xmm0, xmm4
	LONG $0x0c7ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm1
	LONG $0x547ffac5; WORD $0x1016 // vmovdqu    oword [rsi + rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2016 // vmovdqu    oword [rsi + rdx + 32], xmm3
	LONG $0x447ffac5; WORD $0x3016 // vmovdqu    oword [rsi + rdx + 48], xmm0

LBB2_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB2_3

LBB2_16:
	VZEROUPPER
	RET

LBB2_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB2_14
	JMP  LBB2_15

DATA LCDATA2<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x010(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x018(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA2<>(SB), 8, $32

TEXT ·_cast_numeric_int16_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA2<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB3_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB3_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB3_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB3_9

LBB3_2:
	WORD $0xc931 // xor    ecx, ecx

LBB3_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB3_5

LBB3_4:
	LONG $0x4f04b60f         // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB3_4

LBB3_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB3_16

LBB3_6:
	LONG $0x4f04b60f             // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x4f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + 2*rcx + 2]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x4f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 2*rcx + 4]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x4f44b60f; BYTE $0x06 // movzx    eax, byte [rdi + 2*rcx + 6]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB3_6
	JMP  LBB3_16

LBB3_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0     // and    ecx, -64
	LONG $0xc0418d48             // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x06e8c149             // shr    r8, 6
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB3_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI3_0] */

LBB3_12:
	LONG $0x0cdbfdc5; BYTE $0x57         // vpand    ymm1, ymm0, yword [rdi + 2*rdx]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5                     // vpackuswb    xmm1, xmm1, xmm2
	LONG $0x54dbfdc5; WORD $0x2057       // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 32]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5                     // vpackuswb    xmm2, xmm2, xmm3
	LONG $0x5cdbfdc5; WORD $0x4057       // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 64]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5                     // vpackuswb    xmm3, xmm3, xmm4
	LONG $0x64dbfdc5; WORD $0x6057       // vpand    ymm4, ymm0, yword [rdi + 2*rdx + 96]
	LONG $0x397de3c4; WORD $0x01e5       // vextracti128    xmm5, ymm4, 1
	LONG $0xe567d9c5                     // vpackuswb    xmm4, xmm4, xmm5
	LONG $0x0c7ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm1
	LONG $0x547ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2016       // vmovdqu    oword [rsi + rdx + 32], xmm3
	LONG $0x647ffac5; WORD $0x3016       // vmovdqu    oword [rsi + rdx + 48], xmm4
	QUAD $0x000080578cdbfdc5; BYTE $0x00 // vpand    ymm1, ymm0, yword [rdi + 2*rdx + 128]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5                     // vpackuswb    xmm1, xmm1, xmm2
	QUAD $0x0000a05794dbfdc5; BYTE $0x00 // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 160]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5                     // vpackuswb    xmm2, xmm2, xmm3
	QUAD $0x0000c0579cdbfdc5; BYTE $0x00 // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 192]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5                     // vpackuswb    xmm3, xmm3, xmm4
	QUAD $0x0000e057a4dbfdc5; BYTE $0x00 // vpand    ymm4, ymm0, yword [rdi + 2*rdx + 224]
	LONG $0x397de3c4; WORD $0x01e5       // vextracti128    xmm5, ymm4, 1
	LONG $0xe567d9c5                     // vpackuswb    xmm4, xmm4, xmm5
	LONG $0x4c7ffac5; WORD $0x4016       // vmovdqu    oword [rsi + rdx + 64], xmm1
	LONG $0x547ffac5; WORD $0x5016       // vmovdqu    oword [rsi + rdx + 80], xmm2
	LONG $0x5c7ffac5; WORD $0x6016       // vmovdqu    oword [rsi + rdx + 96], xmm3
	LONG $0x647ffac5; WORD $0x7016       // vmovdqu    oword [rsi + rdx + 112], xmm4
	LONG $0x80ea8348                     // sub    rdx, -128
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB3_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB3_15

LBB3_14:
	LONG $0x456ffdc5; BYTE $0x00   // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI3_0] */
	LONG $0x0cdbfdc5; BYTE $0x57   // vpand    ymm1, ymm0, yword [rdi + 2*rdx]
	LONG $0x397de3c4; WORD $0x01ca // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5               // vpackuswb    xmm1, xmm1, xmm2
	LONG $0x54dbfdc5; WORD $0x2057 // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 32]
	LONG $0x397de3c4; WORD $0x01d3 // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5               // vpackuswb    xmm2, xmm2, xmm3
	LONG $0x5cdbfdc5; WORD $0x4057 // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 64]
	LONG $0x397de3c4; WORD $0x01dc // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5               // vpackuswb    xmm3, xmm3, xmm4
	LONG $0x44dbfdc5; WORD $0x6057 // vpand    ymm0, ymm0, yword [rdi + 2*rdx + 96]
	LONG $0x397de3c4; WORD $0x01c4 // vextracti128    xmm4, ymm0, 1
	LONG $0xc467f9c5               // vpackuswb    xmm0, xmm0, xmm4
	LONG $0x0c7ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm1
	LONG $0x547ffac5; WORD $0x1016 // vmovdqu    oword [rsi + rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2016 // vmovdqu    oword [rsi + rdx + 32], xmm3
	LONG $0x447ffac5; WORD $0x3016 // vmovdqu    oword [rsi + rdx + 48], xmm0

LBB3_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB3_3

LBB3_16:
	VZEROUPPER
	RET

LBB3_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB3_14
	JMP  LBB3_15

DATA LCDATA3<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA3<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA3<>(SB), 8, $16

TEXT ·_cast_numeric_uint32_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA3<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB4_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB4_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB4_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB4_9

LBB4_2:
	WORD $0xc931 // xor    ecx, ecx

LBB4_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB4_5

LBB4_4:
	LONG $0x8f04b60f         // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB4_4

LBB4_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB4_16

LBB4_6:
	LONG $0x8f04b60f             // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x8f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 4*rcx + 4]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x8f44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 4*rcx + 8]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x8f44b60f; BYTE $0x0c // movzx    eax, byte [rdi + 4*rcx + 12]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB4_6
	JMP  LBB4_16

LBB4_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xe0418d48             // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x05e8c149             // shr    r8, 5
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB4_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI4_0] */

LBB4_12:
	LONG $0x0c6ffac5; BYTE $0x97         // vmovdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546ffac5; WORD $0x1097       // vmovdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x2097       // vmovdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646ffac5; WORD $0x3097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5                     // vpunpckldq    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x5097       // vmovdqu    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x4097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 64]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5                     // vpunpckldq    xmm3, xmm4, xmm3
	LONG $0x646ffac5; WORD $0x7097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 112]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0x6c6ffac5; WORD $0x6097       // vmovdqu    xmm5, oword [rdi + 4*rdx + 96]
	LONG $0x0051e2c4; BYTE $0xe8         // vpshufb    xmm5, xmm5, xmm0
	LONG $0xe462d1c5                     // vpunpckldq    xmm4, xmm5, xmm4
	LONG $0x3865e3c4; WORD $0x01dc       // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca       // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                     // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x0c7ffec5; BYTE $0x16         // vmovdqu    yword [rsi + rdx], ymm1
	QUAD $0x000080978c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 4*rdx + 128]
	QUAD $0x00009097946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 4*rdx + 144]
	QUAD $0x0000a0979c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 4*rdx + 160]
	QUAD $0x0000b097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 176]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5                     // vpunpckldq    xmm2, xmm3, xmm2
	QUAD $0x0000d0979c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 4*rdx + 208]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	QUAD $0x0000c097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 192]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5                     // vpunpckldq    xmm3, xmm4, xmm3
	QUAD $0x0000f097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 240]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	QUAD $0x0000e097ac6ffac5; BYTE $0x00 // vmovdqu    xmm5, oword [rdi + 4*rdx + 224]
	LONG $0x0051e2c4; BYTE $0xe8         // vpshufb    xmm5, xmm5, xmm0
	LONG $0xe462d1c5                     // vpunpckldq    xmm4, xmm5, xmm4
	LONG $0x3865e3c4; WORD $0x01dc       // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca       // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                     // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x4c7ffec5; WORD $0x2016       // vmovdqu    yword [rsi + rdx + 32], ymm1
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB4_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB4_15

LBB4_14:
	LONG $0x456ff9c5; BYTE $0x00   // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI4_0] */
	LONG $0x0c6ffac5; BYTE $0x97   // vmovdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546ffac5; WORD $0x1097 // vmovdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x2097 // vmovdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646ffac5; WORD $0x3097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5               // vpunpckldq    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x5097 // vmovdqu    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x4097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 64]
	LONG $0x0059e2c4; BYTE $0xe0   // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5               // vpunpckldq    xmm3, xmm4, xmm3
	LONG $0x646ffac5; WORD $0x7097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 112]
	LONG $0x0059e2c4; BYTE $0xe0   // vpshufb    xmm4, xmm4, xmm0
	LONG $0x6c6ffac5; WORD $0x6097 // vmovdqu    xmm5, oword [rdi + 4*rdx + 96]
	LONG $0x0051e2c4; BYTE $0xc0   // vpshufb    xmm0, xmm5, xmm0
	LONG $0xc462f9c5               // vpunpckldq    xmm0, xmm0, xmm4
	LONG $0x3865e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm3, xmm0, 1
	LONG $0x3875e3c4; WORD $0x01ca // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc06cf5c5               // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0 // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x16   // vmovdqu    yword [rsi + rdx], ymm0

LBB4_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB4_3

LBB4_16:
	VZEROUPPER
	RET

LBB4_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB4_14
	JMP  LBB4_15

DATA LCDATA4<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA4<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA4<>(SB), 8, $16

TEXT ·_cast_numeric_int32_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA4<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB5_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB5_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB5_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB5_9

LBB5_2:
	WORD $0xc931 // xor    ecx, ecx

LBB5_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB5_5

LBB5_4:
	LONG $0x8f04b60f         // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB5_4

LBB5_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB5_16

LBB5_6:
	LONG $0x8f04b60f             // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x8f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 4*rcx + 4]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x8f44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 4*rcx + 8]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x8f44b60f; BYTE $0x0c // movzx    eax, byte [rdi + 4*rcx + 12]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB5_6
	JMP  LBB5_16

LBB5_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xe0418d48             // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x05e8c149             // shr    r8, 5
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB5_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI5_0] */

LBB5_12:
	LONG $0x0c6ffac5; BYTE $0x97         // vmovdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546ffac5; WORD $0x1097       // vmovdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x2097       // vmovdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646ffac5; WORD $0x3097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5                     // vpunpckldq    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x5097       // vmovdqu    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x4097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 64]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5                     // vpunpckldq    xmm3, xmm4, xmm3
	LONG $0x646ffac5; WORD $0x7097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 112]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0x6c6ffac5; WORD $0x6097       // vmovdqu    xmm5, oword [rdi + 4*rdx + 96]
	LONG $0x0051e2c4; BYTE $0xe8         // vpshufb    xmm5, xmm5, xmm0
	LONG $0xe462d1c5                     // vpunpckldq    xmm4, xmm5, xmm4
	LONG $0x3865e3c4; WORD $0x01dc       // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca       // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                     // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x0c7ffec5; BYTE $0x16         // vmovdqu    yword [rsi + rdx], ymm1
	QUAD $0x000080978c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 4*rdx + 128]
	QUAD $0x00009097946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 4*rdx + 144]
	QUAD $0x0000a0979c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 4*rdx + 160]
	QUAD $0x0000b097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 176]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5                     // vpunpckldq    xmm2, xmm3, xmm2
	QUAD $0x0000d0979c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 4*rdx + 208]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	QUAD $0x0000c097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 192]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5                     // vpunpckldq    xmm3, xmm4, xmm3
	QUAD $0x0000f097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 240]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	QUAD $0x0000e097ac6ffac5; BYTE $0x00 // vmovdqu    xmm5, oword [rdi + 4*rdx + 224]
	LONG $0x0051e2c4; BYTE $0xe8         // vpshufb    xmm5, xmm5, xmm0
	LONG $0xe462d1c5                     // vpunpckldq    xmm4, xmm5, xmm4
	LONG $0x3865e3c4; WORD $0x01dc       // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca       // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                     // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x4c7ffec5; WORD $0x2016       // vmovdqu    yword [rsi + rdx + 32], ymm1
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB5_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB5_15

LBB5_14:
	LONG $0x456ff9c5; BYTE $0x00   // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI5_0] */
	LONG $0x0c6ffac5; BYTE $0x97   // vmovdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546ffac5; WORD $0x1097 // vmovdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x2097 // vmovdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646ffac5; WORD $0x3097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5               // vpunpckldq    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x5097 // vmovdqu    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x4097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 64]
	LONG $0x0059e2c4; BYTE $0xe0   // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5               // vpunpckldq    xmm3, xmm4, xmm3
	LONG $0x646ffac5; WORD $0x7097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 112]
	LONG $0x0059e2c4; BYTE $0xe0   // vpshufb    xmm4, xmm4, xmm0
	LONG $0x6c6ffac5; WORD $0x6097 // vmovdqu    xmm5, oword [rdi + 4*rdx + 96]
	LONG $0x0051e2c4; BYTE $0xc0   // vpshufb    xmm0, xmm5, xmm0
	LONG $0xc462f9c5               // vpunpckldq    xmm0, xmm0, xmm4
	LONG $0x3865e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm3, xmm0, 1
	LONG $0x3875e3c4; WORD $0x01ca // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc06cf5c5               // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0 // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x16   // vmovdqu    yword [rsi + rdx], ymm0

LBB5_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB5_3

LBB5_16:
	VZEROUPPER
	RET

LBB5_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB5_14
	JMP  LBB5_15

DATA LCDATA5<>+0x000(SB)/8, $0x0000000000000800
DATA LCDATA5<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA5<>(SB), 8, $16

TEXT ·_cast_numeric_uint64_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA5<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB6_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB6_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB6_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB6_9

LBB6_2:
	WORD $0xc931 // xor    ecx, ecx

LBB6_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB6_5

LBB6_4:
	LONG $0xcf04b60f         // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB6_4

LBB6_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB6_16

LBB6_6:
	LONG $0xcf04b60f             // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0xcf44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 8*rcx + 8]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0xcf44b60f; BYTE $0x10 // movzx    eax, byte [rdi + 8*rcx + 16]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0xcf44b60f; BYTE $0x18 // movzx    eax, byte [rdi + 8*rcx + 24]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB6_6
	JMP  LBB6_16

LBB6_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0418d48             // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x04e8c149             // shr    r8, 4
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB6_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI6_0] */

LBB6_12:
	LONG $0x0c6ffac5; BYTE $0xd7         // vmovdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546ffac5; WORD $0x10d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x646ffac5; WORD $0x30d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5                     // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x546ffac5; WORD $0x50d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 80]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x5c6ffac5; WORD $0x40d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x70d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 112]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x60d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb61d9c5                     // vpunpcklwd    xmm3, xmm4, xmm3
	LONG $0xd362e9c5                     // vpunpckldq    xmm2, xmm2, xmm3
	LONG $0xca6cf1c5                     // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x0c7ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm1
	QUAD $0x000080d78c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 8*rdx + 128]
	QUAD $0x000090d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 144]
	QUAD $0x0000a0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 160]
	QUAD $0x0000b0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 176]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5                     // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	QUAD $0x0000d0d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 208]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	QUAD $0x0000c0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 192]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	QUAD $0x0000f0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 240]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	QUAD $0x0000e0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 224]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb61d9c5                     // vpunpcklwd    xmm3, xmm4, xmm3
	LONG $0xd362e9c5                     // vpunpckldq    xmm2, xmm2, xmm3
	LONG $0xca6cf1c5                     // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x4c7ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm1
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB6_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB6_15

LBB6_14:
	LONG $0x456ff9c5; BYTE $0x00   // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI6_0] */
	LONG $0x0c6ffac5; BYTE $0xd7   // vmovdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546ffac5; WORD $0x10d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x646ffac5; WORD $0x30d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5               // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5               // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x546ffac5; WORD $0x50d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 80]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x5c6ffac5; WORD $0x40d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5               // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x70d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 112]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x60d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x0059e2c4; BYTE $0xc0   // vpshufb    xmm0, xmm4, xmm0
	LONG $0xc361f9c5               // vpunpcklwd    xmm0, xmm0, xmm3
	LONG $0xc062e9c5               // vpunpckldq    xmm0, xmm2, xmm0
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x047ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm0

LBB6_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB6_3

LBB6_16:
	RET

LBB6_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB6_14
	JMP  LBB6_15

DATA LCDATA6<>+0x000(SB)/8, $0x0000000000000800
DATA LCDATA6<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA6<>(SB), 8, $16

TEXT ·_cast_numeric_int64_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA6<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB7_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB7_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB7_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB7_9

LBB7_2:
	WORD $0xc931 // xor    ecx, ecx

LBB7_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB7_5

LBB7_4:
	LONG $0xcf04b60f         // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB7_4

LBB7_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB7_16

LBB7_6:
	LONG $0xcf04b60f             // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0xcf44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 8*rcx + 8]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0xcf44b60f; BYTE $0x10 // movzx    eax, byte [rdi + 8*rcx + 16]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0xcf44b60f; BYTE $0x18 // movzx    eax, byte [rdi + 8*rcx + 24]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB7_6
	JMP  LBB7_16

LBB7_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0418d48             // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x04e8c149             // shr    r8, 4
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB7_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI7_0] */

LBB7_12:
	LONG $0x0c6ffac5; BYTE $0xd7         // vmovdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546ffac5; WORD $0x10d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x646ffac5; WORD $0x30d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5                     // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x546ffac5; WORD $0x50d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 80]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x5c6ffac5; WORD $0x40d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x70d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 112]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x60d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb61d9c5                     // vpunpcklwd    xmm3, xmm4, xmm3
	LONG $0xd362e9c5                     // vpunpckldq    xmm2, xmm2, xmm3
	LONG $0xca6cf1c5                     // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x0c7ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm1
	QUAD $0x000080d78c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 8*rdx + 128]
	QUAD $0x000090d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 144]
	QUAD $0x0000a0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 160]
	QUAD $0x0000b0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 176]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5                     // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	QUAD $0x0000d0d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 208]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	QUAD $0x0000c0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 192]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	QUAD $0x0000f0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 240]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	QUAD $0x0000e0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 224]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb61d9c5                     // vpunpcklwd    xmm3, xmm4, xmm3
	LONG $0xd362e9c5                     // vpunpckldq    xmm2, xmm2, xmm3
	LONG $0xca6cf1c5                     // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x4c7ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm1
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB7_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB7_15

LBB7_14:
	LONG $0x456ff9c5; BYTE $0x00   // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI7_0] */
	LONG $0x0c6ffac5; BYTE $0xd7   // vmovdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546ffac5; WORD $0x10d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x646ffac5; WORD $0x30d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5               // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5               // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x546ffac5; WORD $0x50d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 80]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x5c6ffac5; WORD $0x40d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5               // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x70d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 112]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x60d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x0059e2c4; BYTE $0xc0   // vpshufb    xmm0, xmm4, xmm0
	LONG $0xc361f9c5               // vpunpcklwd    xmm0, xmm0, xmm3
	LONG $0xc062e9c5               // vpunpckldq    xmm0, xmm2, xmm0
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x047ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm0

LBB7_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB7_3

LBB7_16:
	RET

LBB7_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB7_14
	JMP  LBB7_15

TEXT ·_cast_numeric_float32_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB8_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB8_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB8_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB8_9

LBB8_2:
	WORD $0xc931 // xor    ecx, ecx

LBB8_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB8_5

LBB8_4:
	LONG $0x042cfac5; BYTE $0x8f // vcvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB8_4

LBB8_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB8_16

LBB8_6:
	LONG $0x042cfac5; BYTE $0x8f   // vcvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e       // mov    byte [rsi + rcx], al
	LONG $0x442cfac5; WORD $0x048f // vcvttss2si    eax, dword [rdi + 4*rcx + 4]
	LONG $0x010e4488               // mov    byte [rsi + rcx + 1], al
	LONG $0x442cfac5; WORD $0x088f // vcvttss2si    eax, dword [rdi + 4*rcx + 8]
	LONG $0x020e4488               // mov    byte [rsi + rcx + 2], al
	LONG $0x442cfac5; WORD $0x0c8f // vcvttss2si    eax, dword [rdi + 4*rcx + 12]
	LONG $0x030e4488               // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB8_6
	JMP  LBB8_16

LBB8_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB8_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB8_12:
	LONG $0x045bfec5; BYTE $0x97         // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128    xmm1, ymm0, 1
	LONG $0x545bfec5; WORD $0x2097       // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 32]
	LONG $0xc16bf9c5                     // vpackssdw    xmm0, xmm0, xmm1
	LONG $0x397de3c4; WORD $0x01d1       // vextracti128    xmm1, ymm2, 1
	LONG $0x5c5bfec5; WORD $0x4097       // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 64]
	LONG $0xc96be9c5                     // vpackssdw    xmm1, xmm2, xmm1
	LONG $0x397de3c4; WORD $0x01da       // vextracti128    xmm2, ymm3, 1
	LONG $0x645bfec5; WORD $0x6097       // vcvttps2dq    ymm4, yword [rdi + 4*rdx + 96]
	LONG $0xd26be1c5                     // vpackssdw    xmm2, xmm3, xmm2
	LONG $0x397de3c4; WORD $0x01e3       // vextracti128    xmm3, ymm4, 1
	LONG $0xdb6bd9c5                     // vpackssdw    xmm3, xmm4, xmm3
	LONG $0x386de3c4; WORD $0x01d3       // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd067edc5                     // vpackuswb    ymm2, ymm2, ymm0
	LONG $0x387de3c4; WORD $0x01c1       // vinserti128    ymm0, ymm0, xmm1, 1
	LONG $0xc067fdc5                     // vpackuswb    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5                     // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0       // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x16         // vmovdqu    yword [rsi + rdx], ymm0
	QUAD $0x00008097845bfec5; BYTE $0x00 // vcvttps2dq    ymm0, yword [rdi + 4*rdx + 128]
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128    xmm1, ymm0, 1
	QUAD $0x0000a097945bfec5; BYTE $0x00 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 160]
	LONG $0xc16bf9c5                     // vpackssdw    xmm0, xmm0, xmm1
	LONG $0x397de3c4; WORD $0x01d1       // vextracti128    xmm1, ymm2, 1
	QUAD $0x0000c0979c5bfec5; BYTE $0x00 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 192]
	LONG $0xc96be9c5                     // vpackssdw    xmm1, xmm2, xmm1
	LONG $0x397de3c4; WORD $0x01da       // vextracti128    xmm2, ymm3, 1
	QUAD $0x0000e097a45bfec5; BYTE $0x00 // vcvttps2dq    ymm4, yword [rdi + 4*rdx + 224]
	LONG $0xd26be1c5                     // vpackssdw    xmm2, xmm3, xmm2
	LONG $0x397de3c4; WORD $0x01e3       // vextracti128    xmm3, ymm4, 1
	LONG $0xdb6bd9c5                     // vpackssdw    xmm3, xmm4, xmm3
	LONG $0x386de3c4; WORD $0x01d3       // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd067edc5                     // vpackuswb    ymm2, ymm2, ymm0
	LONG $0x387de3c4; WORD $0x01c1       // vinserti128    ymm0, ymm0, xmm1, 1
	LONG $0xc067fdc5                     // vpackuswb    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5                     // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0       // vpermq    ymm0, ymm0, 216
	LONG $0x447ffec5; WORD $0x2016       // vmovdqu    yword [rsi + rdx + 32], ymm0
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB8_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB8_15

LBB8_14:
	LONG $0x045bfec5; BYTE $0x97   // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc16bf9c5               // vpackssdw    xmm0, xmm0, xmm1
	LONG $0x4c5bfec5; WORD $0x2097 // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x397de3c4; WORD $0x01ca // vextracti128    xmm2, ymm1, 1
	LONG $0xca6bf1c5               // vpackssdw    xmm1, xmm1, xmm2
	LONG $0x545bfec5; WORD $0x4097 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x397de3c4; WORD $0x01d3 // vextracti128    xmm3, ymm2, 1
	LONG $0xd36be9c5               // vpackssdw    xmm2, xmm2, xmm3
	LONG $0x5c5bfec5; WORD $0x6097 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x397de3c4; WORD $0x01dc // vextracti128    xmm4, ymm3, 1
	LONG $0xdc6be1c5               // vpackssdw    xmm3, xmm3, xmm4
	LONG $0x386de3c4; WORD $0x01d3 // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd067edc5               // vpackuswb    ymm2, ymm2, ymm0
	LONG $0x387de3c4; WORD $0x01c1 // vinserti128    ymm0, ymm0, xmm1, 1
	LONG $0xc067fdc5               // vpackuswb    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5               // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0 // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x16   // vmovdqu    yword [rsi + rdx], ymm0

LBB8_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB8_3

LBB8_16:
	VZEROUPPER
	RET

LBB8_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB8_14
	JMP  LBB8_15

TEXT ·_cast_numeric_float64_uint8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB9_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB9_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB9_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB9_9

LBB9_2:
	WORD $0xc931 // xor    ecx, ecx

LBB9_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB9_5

LBB9_4:
	LONG $0x042cfbc5; BYTE $0xcf // vcvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB9_4

LBB9_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB9_16

LBB9_6:
	LONG $0x042cfbc5; BYTE $0xcf   // vcvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e       // mov    byte [rsi + rcx], al
	LONG $0x442cfbc5; WORD $0x08cf // vcvttsd2si    eax, qword [rdi + 8*rcx + 8]
	LONG $0x010e4488               // mov    byte [rsi + rcx + 1], al
	LONG $0x442cfbc5; WORD $0x10cf // vcvttsd2si    eax, qword [rdi + 8*rcx + 16]
	LONG $0x020e4488               // mov    byte [rsi + rcx + 2], al
	LONG $0x442cfbc5; WORD $0x18cf // vcvttsd2si    eax, qword [rdi + 8*rcx + 24]
	LONG $0x030e4488               // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB9_6
	JMP  LBB9_16

LBB9_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB9_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB9_12:
	LONG $0x04e6fdc5; BYTE $0xd7         // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0x2b79e2c4; BYTE $0xc0         // vpackusdw    xmm0, xmm0, xmm0
	LONG $0x4ce6fdc5; WORD $0x20d7       // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0xc067f9c5                     // vpackuswb    xmm0, xmm0, xmm0
	LONG $0x2b71e2c4; BYTE $0xc9         // vpackusdw    xmm1, xmm1, xmm1
	LONG $0xc967f1c5                     // vpackuswb    xmm1, xmm1, xmm1
	LONG $0xc162f9c5                     // vpunpckldq    xmm0, xmm0, xmm1
	LONG $0x4ce6fdc5; WORD $0x40d7       // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 64]
	LONG $0x2b71e2c4; BYTE $0xc9         // vpackusdw    xmm1, xmm1, xmm1
	LONG $0xc967f1c5                     // vpackuswb    xmm1, xmm1, xmm1
	LONG $0x54e6fdc5; WORD $0x60d7       // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 96]
	LONG $0x2b69e2c4; BYTE $0xd2         // vpackusdw    xmm2, xmm2, xmm2
	LONG $0xd267e9c5                     // vpackuswb    xmm2, xmm2, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xc16cf9c5                     // vpunpcklqdq    xmm0, xmm0, xmm1
	LONG $0x047ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm0
	QUAD $0x000080d784e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 160]
	LONG $0x2b79e2c4; BYTE $0xc0         // vpackusdw    xmm0, xmm0, xmm0
	LONG $0xc067f9c5                     // vpackuswb    xmm0, xmm0, xmm0
	LONG $0x2b71e2c4; BYTE $0xc9         // vpackusdw    xmm1, xmm1, xmm1
	LONG $0xc967f1c5                     // vpackuswb    xmm1, xmm1, xmm1
	LONG $0xc162f9c5                     // vpunpckldq    xmm0, xmm0, xmm1
	QUAD $0x0000c0d78ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 192]
	LONG $0x2b71e2c4; BYTE $0xc9         // vpackusdw    xmm1, xmm1, xmm1
	QUAD $0x0000e0d794e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 224]
	LONG $0xc967f1c5                     // vpackuswb    xmm1, xmm1, xmm1
	LONG $0x2b69e2c4; BYTE $0xd2         // vpackusdw    xmm2, xmm2, xmm2
	LONG $0xd267e9c5                     // vpackuswb    xmm2, xmm2, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xc16cf9c5                     // vpunpcklqdq    xmm0, xmm0, xmm1
	LONG $0x447ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm0
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB9_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB9_15

LBB9_14:
	LONG $0x04e6fdc5; BYTE $0xd7   // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0x2b79e2c4; BYTE $0xc0   // vpackusdw    xmm0, xmm0, xmm0
	LONG $0xc067f9c5               // vpackuswb    xmm0, xmm0, xmm0
	LONG $0x4ce6fdc5; WORD $0x20d7 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x2b71e2c4; BYTE $0xc9   // vpackusdw    xmm1, xmm1, xmm1
	LONG $0x54e6fdc5; WORD $0x40d7 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0xc967f1c5               // vpackuswb    xmm1, xmm1, xmm1
	LONG $0xc162f9c5               // vpunpckldq    xmm0, xmm0, xmm1
	LONG $0x2b69e2c4; BYTE $0xca   // vpackusdw    xmm1, xmm2, xmm2
	LONG $0xc967f1c5               // vpackuswb    xmm1, xmm1, xmm1
	LONG $0x54e6fdc5; WORD $0x60d7 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 96]
	LONG $0x2b69e2c4; BYTE $0xd2   // vpackusdw    xmm2, xmm2, xmm2
	LONG $0xd267e9c5               // vpackuswb    xmm2, xmm2, xmm2
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xc16cf9c5               // vpunpcklqdq    xmm0, xmm0, xmm1
	LONG $0x047ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm0

LBB9_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB9_3

LBB9_16:
	RET

LBB9_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB9_14
	JMP  LBB9_15

TEXT ·_cast_numeric_uint8_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB10_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x7f // cmp    edx, 127
	JBE  LBB10_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB10_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB10_9

LBB10_2:
	WORD $0xc931 // xor    ecx, ecx

LBB10_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB10_5

LBB10_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB10_4

LBB10_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB10_16

LBB10_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB10_6
	JMP  LBB10_16

LBB10_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80418d48         // lea    rax, [rcx - 128]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x07e8c149         // shr    r8, 7
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB10_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB10_12:
	LONG $0x0410fcc5; BYTE $0x17               // vmovups    ymm0, yword [rdi + rdx]
	LONG $0x4c10fcc5; WORD $0x2017             // vmovups    ymm1, yword [rdi + rdx + 32]
	LONG $0x5410fcc5; WORD $0x4017             // vmovups    ymm2, yword [rdi + rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6017             // vmovups    ymm3, yword [rdi + rdx + 96]
	LONG $0x0411fcc5; BYTE $0x16               // vmovups    yword [rsi + rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2016             // vmovups    yword [rsi + rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4016             // vmovups    yword [rsi + rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6016             // vmovups    yword [rsi + rdx + 96], ymm3
	QUAD $0x000080178410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdi + rdx + 128]
	QUAD $0x0000a0178c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdi + rdx + 160]
	QUAD $0x0000c0179410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdi + rdx + 192]
	QUAD $0x0000e0179c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdi + rdx + 224]
	QUAD $0x000080168411fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 128], ymm0
	QUAD $0x0000a0168c11fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 160], ymm1
	QUAD $0x0000c0169411fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 192], ymm2
	QUAD $0x0000e0169c11fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 224], ymm3
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // add    rdx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB10_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB10_15

LBB10_14:
	LONG $0x0410fcc5; BYTE $0x17   // vmovups    ymm0, yword [rdi + rdx]
	LONG $0x4c10fcc5; WORD $0x2017 // vmovups    ymm1, yword [rdi + rdx + 32]
	LONG $0x5410fcc5; WORD $0x4017 // vmovups    ymm2, yword [rdi + rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6017 // vmovups    ymm3, yword [rdi + rdx + 96]
	LONG $0x0411fcc5; BYTE $0x16   // vmovups    yword [rsi + rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2016 // vmovups    yword [rsi + rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4016 // vmovups    yword [rsi + rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6016 // vmovups    yword [rsi + rdx + 96], ymm3

LBB10_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB10_3

LBB10_16:
	VZEROUPPER
	RET

LBB10_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB10_14
	JMP  LBB10_15

TEXT ·_cast_numeric_int8_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB11_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x7f // cmp    edx, 127
	JBE  LBB11_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB11_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB11_9

LBB11_2:
	WORD $0xc931 // xor    ecx, ecx

LBB11_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB11_5

LBB11_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB11_4

LBB11_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB11_16

LBB11_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB11_6
	JMP  LBB11_16

LBB11_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0x80 // and    ecx, -128
	LONG $0x80418d48         // lea    rax, [rcx - 128]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x07e8c149         // shr    r8, 7
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB11_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB11_12:
	LONG $0x0410fcc5; BYTE $0x17               // vmovups    ymm0, yword [rdi + rdx]
	LONG $0x4c10fcc5; WORD $0x2017             // vmovups    ymm1, yword [rdi + rdx + 32]
	LONG $0x5410fcc5; WORD $0x4017             // vmovups    ymm2, yword [rdi + rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6017             // vmovups    ymm3, yword [rdi + rdx + 96]
	LONG $0x0411fcc5; BYTE $0x16               // vmovups    yword [rsi + rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2016             // vmovups    yword [rsi + rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4016             // vmovups    yword [rsi + rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6016             // vmovups    yword [rsi + rdx + 96], ymm3
	QUAD $0x000080178410fcc5; BYTE $0x00       // vmovups    ymm0, yword [rdi + rdx + 128]
	QUAD $0x0000a0178c10fcc5; BYTE $0x00       // vmovups    ymm1, yword [rdi + rdx + 160]
	QUAD $0x0000c0179410fcc5; BYTE $0x00       // vmovups    ymm2, yword [rdi + rdx + 192]
	QUAD $0x0000e0179c10fcc5; BYTE $0x00       // vmovups    ymm3, yword [rdi + rdx + 224]
	QUAD $0x000080168411fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 128], ymm0
	QUAD $0x0000a0168c11fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 160], ymm1
	QUAD $0x0000c0169411fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 192], ymm2
	QUAD $0x0000e0169c11fcc5; BYTE $0x00       // vmovups    yword [rsi + rdx + 224], ymm3
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // add    rdx, 256
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB11_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB11_15

LBB11_14:
	LONG $0x0410fcc5; BYTE $0x17   // vmovups    ymm0, yword [rdi + rdx]
	LONG $0x4c10fcc5; WORD $0x2017 // vmovups    ymm1, yword [rdi + rdx + 32]
	LONG $0x5410fcc5; WORD $0x4017 // vmovups    ymm2, yword [rdi + rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6017 // vmovups    ymm3, yword [rdi + rdx + 96]
	LONG $0x0411fcc5; BYTE $0x16   // vmovups    yword [rsi + rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2016 // vmovups    yword [rsi + rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4016 // vmovups    yword [rsi + rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6016 // vmovups    yword [rsi + rdx + 96], ymm3

LBB11_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB11_3

LBB11_16:
	VZEROUPPER
	RET

LBB11_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB11_14
	JMP  LBB11_15

DATA LCDATA7<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA7<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA7<>+0x010(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA7<>+0x018(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA7<>(SB), 8, $32

TEXT ·_cast_numeric_uint16_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA7<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB12_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB12_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB12_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB12_9

LBB12_2:
	WORD $0xc931 // xor    ecx, ecx

LBB12_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB12_5

LBB12_4:
	LONG $0x4f04b60f         // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB12_4

LBB12_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB12_16

LBB12_6:
	LONG $0x4f04b60f             // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x4f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + 2*rcx + 2]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x4f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 2*rcx + 4]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x4f44b60f; BYTE $0x06 // movzx    eax, byte [rdi + 2*rcx + 6]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB12_6
	JMP  LBB12_16

LBB12_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0     // and    ecx, -64
	LONG $0xc0418d48             // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x06e8c149             // shr    r8, 6
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB12_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI12_0] */

LBB12_12:
	LONG $0x0cdbfdc5; BYTE $0x57         // vpand    ymm1, ymm0, yword [rdi + 2*rdx]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5                     // vpackuswb    xmm1, xmm1, xmm2
	LONG $0x54dbfdc5; WORD $0x2057       // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 32]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5                     // vpackuswb    xmm2, xmm2, xmm3
	LONG $0x5cdbfdc5; WORD $0x4057       // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 64]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5                     // vpackuswb    xmm3, xmm3, xmm4
	LONG $0x64dbfdc5; WORD $0x6057       // vpand    ymm4, ymm0, yword [rdi + 2*rdx + 96]
	LONG $0x397de3c4; WORD $0x01e5       // vextracti128    xmm5, ymm4, 1
	LONG $0xe567d9c5                     // vpackuswb    xmm4, xmm4, xmm5
	LONG $0x0c7ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm1
	LONG $0x547ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2016       // vmovdqu    oword [rsi + rdx + 32], xmm3
	LONG $0x647ffac5; WORD $0x3016       // vmovdqu    oword [rsi + rdx + 48], xmm4
	QUAD $0x000080578cdbfdc5; BYTE $0x00 // vpand    ymm1, ymm0, yword [rdi + 2*rdx + 128]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5                     // vpackuswb    xmm1, xmm1, xmm2
	QUAD $0x0000a05794dbfdc5; BYTE $0x00 // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 160]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5                     // vpackuswb    xmm2, xmm2, xmm3
	QUAD $0x0000c0579cdbfdc5; BYTE $0x00 // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 192]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5                     // vpackuswb    xmm3, xmm3, xmm4
	QUAD $0x0000e057a4dbfdc5; BYTE $0x00 // vpand    ymm4, ymm0, yword [rdi + 2*rdx + 224]
	LONG $0x397de3c4; WORD $0x01e5       // vextracti128    xmm5, ymm4, 1
	LONG $0xe567d9c5                     // vpackuswb    xmm4, xmm4, xmm5
	LONG $0x4c7ffac5; WORD $0x4016       // vmovdqu    oword [rsi + rdx + 64], xmm1
	LONG $0x547ffac5; WORD $0x5016       // vmovdqu    oword [rsi + rdx + 80], xmm2
	LONG $0x5c7ffac5; WORD $0x6016       // vmovdqu    oword [rsi + rdx + 96], xmm3
	LONG $0x647ffac5; WORD $0x7016       // vmovdqu    oword [rsi + rdx + 112], xmm4
	LONG $0x80ea8348                     // sub    rdx, -128
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB12_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB12_15

LBB12_14:
	LONG $0x456ffdc5; BYTE $0x00   // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI12_0] */
	LONG $0x0cdbfdc5; BYTE $0x57   // vpand    ymm1, ymm0, yword [rdi + 2*rdx]
	LONG $0x397de3c4; WORD $0x01ca // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5               // vpackuswb    xmm1, xmm1, xmm2
	LONG $0x54dbfdc5; WORD $0x2057 // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 32]
	LONG $0x397de3c4; WORD $0x01d3 // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5               // vpackuswb    xmm2, xmm2, xmm3
	LONG $0x5cdbfdc5; WORD $0x4057 // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 64]
	LONG $0x397de3c4; WORD $0x01dc // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5               // vpackuswb    xmm3, xmm3, xmm4
	LONG $0x44dbfdc5; WORD $0x6057 // vpand    ymm0, ymm0, yword [rdi + 2*rdx + 96]
	LONG $0x397de3c4; WORD $0x01c4 // vextracti128    xmm4, ymm0, 1
	LONG $0xc467f9c5               // vpackuswb    xmm0, xmm0, xmm4
	LONG $0x0c7ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm1
	LONG $0x547ffac5; WORD $0x1016 // vmovdqu    oword [rsi + rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2016 // vmovdqu    oword [rsi + rdx + 32], xmm3
	LONG $0x447ffac5; WORD $0x3016 // vmovdqu    oword [rsi + rdx + 48], xmm0

LBB12_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB12_3

LBB12_16:
	VZEROUPPER
	RET

LBB12_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB12_14
	JMP  LBB12_15

DATA LCDATA8<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA8<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA8<>+0x010(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA8<>+0x018(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA8<>(SB), 8, $32

TEXT ·_cast_numeric_int16_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA8<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB13_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB13_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB13_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB13_9

LBB13_2:
	WORD $0xc931 // xor    ecx, ecx

LBB13_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB13_5

LBB13_4:
	LONG $0x4f04b60f         // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB13_4

LBB13_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB13_16

LBB13_6:
	LONG $0x4f04b60f             // movzx    eax, byte [rdi + 2*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x4f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + 2*rcx + 2]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x4f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 2*rcx + 4]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x4f44b60f; BYTE $0x06 // movzx    eax, byte [rdi + 2*rcx + 6]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB13_6
	JMP  LBB13_16

LBB13_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0     // and    ecx, -64
	LONG $0xc0418d48             // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x06e8c149             // shr    r8, 6
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB13_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI13_0] */

LBB13_12:
	LONG $0x0cdbfdc5; BYTE $0x57         // vpand    ymm1, ymm0, yword [rdi + 2*rdx]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5                     // vpackuswb    xmm1, xmm1, xmm2
	LONG $0x54dbfdc5; WORD $0x2057       // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 32]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5                     // vpackuswb    xmm2, xmm2, xmm3
	LONG $0x5cdbfdc5; WORD $0x4057       // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 64]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5                     // vpackuswb    xmm3, xmm3, xmm4
	LONG $0x64dbfdc5; WORD $0x6057       // vpand    ymm4, ymm0, yword [rdi + 2*rdx + 96]
	LONG $0x397de3c4; WORD $0x01e5       // vextracti128    xmm5, ymm4, 1
	LONG $0xe567d9c5                     // vpackuswb    xmm4, xmm4, xmm5
	LONG $0x0c7ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm1
	LONG $0x547ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2016       // vmovdqu    oword [rsi + rdx + 32], xmm3
	LONG $0x647ffac5; WORD $0x3016       // vmovdqu    oword [rsi + rdx + 48], xmm4
	QUAD $0x000080578cdbfdc5; BYTE $0x00 // vpand    ymm1, ymm0, yword [rdi + 2*rdx + 128]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5                     // vpackuswb    xmm1, xmm1, xmm2
	QUAD $0x0000a05794dbfdc5; BYTE $0x00 // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 160]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5                     // vpackuswb    xmm2, xmm2, xmm3
	QUAD $0x0000c0579cdbfdc5; BYTE $0x00 // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 192]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5                     // vpackuswb    xmm3, xmm3, xmm4
	QUAD $0x0000e057a4dbfdc5; BYTE $0x00 // vpand    ymm4, ymm0, yword [rdi + 2*rdx + 224]
	LONG $0x397de3c4; WORD $0x01e5       // vextracti128    xmm5, ymm4, 1
	LONG $0xe567d9c5                     // vpackuswb    xmm4, xmm4, xmm5
	LONG $0x4c7ffac5; WORD $0x4016       // vmovdqu    oword [rsi + rdx + 64], xmm1
	LONG $0x547ffac5; WORD $0x5016       // vmovdqu    oword [rsi + rdx + 80], xmm2
	LONG $0x5c7ffac5; WORD $0x6016       // vmovdqu    oword [rsi + rdx + 96], xmm3
	LONG $0x647ffac5; WORD $0x7016       // vmovdqu    oword [rsi + rdx + 112], xmm4
	LONG $0x80ea8348                     // sub    rdx, -128
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB13_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB13_15

LBB13_14:
	LONG $0x456ffdc5; BYTE $0x00   // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI13_0] */
	LONG $0x0cdbfdc5; BYTE $0x57   // vpand    ymm1, ymm0, yword [rdi + 2*rdx]
	LONG $0x397de3c4; WORD $0x01ca // vextracti128    xmm2, ymm1, 1
	LONG $0xca67f1c5               // vpackuswb    xmm1, xmm1, xmm2
	LONG $0x54dbfdc5; WORD $0x2057 // vpand    ymm2, ymm0, yword [rdi + 2*rdx + 32]
	LONG $0x397de3c4; WORD $0x01d3 // vextracti128    xmm3, ymm2, 1
	LONG $0xd367e9c5               // vpackuswb    xmm2, xmm2, xmm3
	LONG $0x5cdbfdc5; WORD $0x4057 // vpand    ymm3, ymm0, yword [rdi + 2*rdx + 64]
	LONG $0x397de3c4; WORD $0x01dc // vextracti128    xmm4, ymm3, 1
	LONG $0xdc67e1c5               // vpackuswb    xmm3, xmm3, xmm4
	LONG $0x44dbfdc5; WORD $0x6057 // vpand    ymm0, ymm0, yword [rdi + 2*rdx + 96]
	LONG $0x397de3c4; WORD $0x01c4 // vextracti128    xmm4, ymm0, 1
	LONG $0xc467f9c5               // vpackuswb    xmm0, xmm0, xmm4
	LONG $0x0c7ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm1
	LONG $0x547ffac5; WORD $0x1016 // vmovdqu    oword [rsi + rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2016 // vmovdqu    oword [rsi + rdx + 32], xmm3
	LONG $0x447ffac5; WORD $0x3016 // vmovdqu    oword [rsi + rdx + 48], xmm0

LBB13_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB13_3

LBB13_16:
	VZEROUPPER
	RET

LBB13_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB13_14
	JMP  LBB13_15

DATA LCDATA9<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA9<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA9<>(SB), 8, $16

TEXT ·_cast_numeric_uint32_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA9<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB14_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB14_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB14_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB14_9

LBB14_2:
	WORD $0xc931 // xor    ecx, ecx

LBB14_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB14_5

LBB14_4:
	LONG $0x8f04b60f         // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB14_4

LBB14_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB14_16

LBB14_6:
	LONG $0x8f04b60f             // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x8f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 4*rcx + 4]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x8f44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 4*rcx + 8]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x8f44b60f; BYTE $0x0c // movzx    eax, byte [rdi + 4*rcx + 12]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB14_6
	JMP  LBB14_16

LBB14_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xe0418d48             // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x05e8c149             // shr    r8, 5
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB14_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI14_0] */

LBB14_12:
	LONG $0x0c6ffac5; BYTE $0x97         // vmovdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546ffac5; WORD $0x1097       // vmovdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x2097       // vmovdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646ffac5; WORD $0x3097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5                     // vpunpckldq    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x5097       // vmovdqu    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x4097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 64]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5                     // vpunpckldq    xmm3, xmm4, xmm3
	LONG $0x646ffac5; WORD $0x7097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 112]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0x6c6ffac5; WORD $0x6097       // vmovdqu    xmm5, oword [rdi + 4*rdx + 96]
	LONG $0x0051e2c4; BYTE $0xe8         // vpshufb    xmm5, xmm5, xmm0
	LONG $0xe462d1c5                     // vpunpckldq    xmm4, xmm5, xmm4
	LONG $0x3865e3c4; WORD $0x01dc       // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca       // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                     // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x0c7ffec5; BYTE $0x16         // vmovdqu    yword [rsi + rdx], ymm1
	QUAD $0x000080978c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 4*rdx + 128]
	QUAD $0x00009097946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 4*rdx + 144]
	QUAD $0x0000a0979c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 4*rdx + 160]
	QUAD $0x0000b097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 176]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5                     // vpunpckldq    xmm2, xmm3, xmm2
	QUAD $0x0000d0979c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 4*rdx + 208]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	QUAD $0x0000c097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 192]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5                     // vpunpckldq    xmm3, xmm4, xmm3
	QUAD $0x0000f097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 240]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	QUAD $0x0000e097ac6ffac5; BYTE $0x00 // vmovdqu    xmm5, oword [rdi + 4*rdx + 224]
	LONG $0x0051e2c4; BYTE $0xe8         // vpshufb    xmm5, xmm5, xmm0
	LONG $0xe462d1c5                     // vpunpckldq    xmm4, xmm5, xmm4
	LONG $0x3865e3c4; WORD $0x01dc       // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca       // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                     // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x4c7ffec5; WORD $0x2016       // vmovdqu    yword [rsi + rdx + 32], ymm1
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB14_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB14_15

LBB14_14:
	LONG $0x456ff9c5; BYTE $0x00   // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI14_0] */
	LONG $0x0c6ffac5; BYTE $0x97   // vmovdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546ffac5; WORD $0x1097 // vmovdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x2097 // vmovdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646ffac5; WORD $0x3097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5               // vpunpckldq    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x5097 // vmovdqu    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x4097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 64]
	LONG $0x0059e2c4; BYTE $0xe0   // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5               // vpunpckldq    xmm3, xmm4, xmm3
	LONG $0x646ffac5; WORD $0x7097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 112]
	LONG $0x0059e2c4; BYTE $0xe0   // vpshufb    xmm4, xmm4, xmm0
	LONG $0x6c6ffac5; WORD $0x6097 // vmovdqu    xmm5, oword [rdi + 4*rdx + 96]
	LONG $0x0051e2c4; BYTE $0xc0   // vpshufb    xmm0, xmm5, xmm0
	LONG $0xc462f9c5               // vpunpckldq    xmm0, xmm0, xmm4
	LONG $0x3865e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm3, xmm0, 1
	LONG $0x3875e3c4; WORD $0x01ca // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc06cf5c5               // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0 // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x16   // vmovdqu    yword [rsi + rdx], ymm0

LBB14_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB14_3

LBB14_16:
	VZEROUPPER
	RET

LBB14_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB14_14
	JMP  LBB14_15

DATA LCDATA10<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA10<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA10<>(SB), 8, $16

TEXT ·_cast_numeric_int32_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA10<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB15_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB15_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB15_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB15_9

LBB15_2:
	WORD $0xc931 // xor    ecx, ecx

LBB15_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB15_5

LBB15_4:
	LONG $0x8f04b60f         // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB15_4

LBB15_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB15_16

LBB15_6:
	LONG $0x8f04b60f             // movzx    eax, byte [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x8f44b60f; BYTE $0x04 // movzx    eax, byte [rdi + 4*rcx + 4]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0x8f44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 4*rcx + 8]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0x8f44b60f; BYTE $0x0c // movzx    eax, byte [rdi + 4*rcx + 12]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB15_6
	JMP  LBB15_16

LBB15_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xe0418d48             // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x05e8c149             // shr    r8, 5
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB15_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI15_0] */

LBB15_12:
	LONG $0x0c6ffac5; BYTE $0x97         // vmovdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546ffac5; WORD $0x1097       // vmovdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x2097       // vmovdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646ffac5; WORD $0x3097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5                     // vpunpckldq    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x5097       // vmovdqu    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x4097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 64]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5                     // vpunpckldq    xmm3, xmm4, xmm3
	LONG $0x646ffac5; WORD $0x7097       // vmovdqu    xmm4, oword [rdi + 4*rdx + 112]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0x6c6ffac5; WORD $0x6097       // vmovdqu    xmm5, oword [rdi + 4*rdx + 96]
	LONG $0x0051e2c4; BYTE $0xe8         // vpshufb    xmm5, xmm5, xmm0
	LONG $0xe462d1c5                     // vpunpckldq    xmm4, xmm5, xmm4
	LONG $0x3865e3c4; WORD $0x01dc       // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca       // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                     // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x0c7ffec5; BYTE $0x16         // vmovdqu    yword [rsi + rdx], ymm1
	QUAD $0x000080978c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 4*rdx + 128]
	QUAD $0x00009097946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 4*rdx + 144]
	QUAD $0x0000a0979c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 4*rdx + 160]
	QUAD $0x0000b097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 176]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5                     // vpunpckldq    xmm2, xmm3, xmm2
	QUAD $0x0000d0979c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 4*rdx + 208]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	QUAD $0x0000c097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 192]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5                     // vpunpckldq    xmm3, xmm4, xmm3
	QUAD $0x0000f097a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 4*rdx + 240]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	QUAD $0x0000e097ac6ffac5; BYTE $0x00 // vmovdqu    xmm5, oword [rdi + 4*rdx + 224]
	LONG $0x0051e2c4; BYTE $0xe8         // vpshufb    xmm5, xmm5, xmm0
	LONG $0xe462d1c5                     // vpunpckldq    xmm4, xmm5, xmm4
	LONG $0x3865e3c4; WORD $0x01dc       // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca       // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                     // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x4c7ffec5; WORD $0x2016       // vmovdqu    yword [rsi + rdx + 32], ymm1
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB15_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB15_15

LBB15_14:
	LONG $0x456ff9c5; BYTE $0x00   // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI15_0] */
	LONG $0x0c6ffac5; BYTE $0x97   // vmovdqu    xmm1, oword [rdi + 4*rdx]
	LONG $0x546ffac5; WORD $0x1097 // vmovdqu    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x2097 // vmovdqu    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0x646ffac5; WORD $0x3097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd262e1c5               // vpunpckldq    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x5097 // vmovdqu    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x4097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 64]
	LONG $0x0059e2c4; BYTE $0xe0   // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb62d9c5               // vpunpckldq    xmm3, xmm4, xmm3
	LONG $0x646ffac5; WORD $0x7097 // vmovdqu    xmm4, oword [rdi + 4*rdx + 112]
	LONG $0x0059e2c4; BYTE $0xe0   // vpshufb    xmm4, xmm4, xmm0
	LONG $0x6c6ffac5; WORD $0x6097 // vmovdqu    xmm5, oword [rdi + 4*rdx + 96]
	LONG $0x0051e2c4; BYTE $0xc0   // vpshufb    xmm0, xmm5, xmm0
	LONG $0xc462f9c5               // vpunpckldq    xmm0, xmm0, xmm4
	LONG $0x3865e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm3, xmm0, 1
	LONG $0x3875e3c4; WORD $0x01ca // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc06cf5c5               // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0 // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x16   // vmovdqu    yword [rsi + rdx], ymm0

LBB15_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB15_3

LBB15_16:
	VZEROUPPER
	RET

LBB15_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB15_14
	JMP  LBB15_15

DATA LCDATA11<>+0x000(SB)/8, $0x0000000000000800
DATA LCDATA11<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA11<>(SB), 8, $16

TEXT ·_cast_numeric_uint64_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA11<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB16_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB16_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB16_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB16_9

LBB16_2:
	WORD $0xc931 // xor    ecx, ecx

LBB16_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB16_5

LBB16_4:
	LONG $0xcf04b60f         // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB16_4

LBB16_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB16_16

LBB16_6:
	LONG $0xcf04b60f             // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0xcf44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 8*rcx + 8]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0xcf44b60f; BYTE $0x10 // movzx    eax, byte [rdi + 8*rcx + 16]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0xcf44b60f; BYTE $0x18 // movzx    eax, byte [rdi + 8*rcx + 24]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB16_6
	JMP  LBB16_16

LBB16_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0418d48             // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x04e8c149             // shr    r8, 4
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB16_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI16_0] */

LBB16_12:
	LONG $0x0c6ffac5; BYTE $0xd7         // vmovdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546ffac5; WORD $0x10d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x646ffac5; WORD $0x30d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5                     // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x546ffac5; WORD $0x50d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 80]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x5c6ffac5; WORD $0x40d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x70d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 112]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x60d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb61d9c5                     // vpunpcklwd    xmm3, xmm4, xmm3
	LONG $0xd362e9c5                     // vpunpckldq    xmm2, xmm2, xmm3
	LONG $0xca6cf1c5                     // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x0c7ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm1
	QUAD $0x000080d78c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 8*rdx + 128]
	QUAD $0x000090d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 144]
	QUAD $0x0000a0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 160]
	QUAD $0x0000b0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 176]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5                     // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	QUAD $0x0000d0d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 208]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	QUAD $0x0000c0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 192]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	QUAD $0x0000f0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 240]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	QUAD $0x0000e0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 224]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb61d9c5                     // vpunpcklwd    xmm3, xmm4, xmm3
	LONG $0xd362e9c5                     // vpunpckldq    xmm2, xmm2, xmm3
	LONG $0xca6cf1c5                     // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x4c7ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm1
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB16_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB16_15

LBB16_14:
	LONG $0x456ff9c5; BYTE $0x00   // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI16_0] */
	LONG $0x0c6ffac5; BYTE $0xd7   // vmovdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546ffac5; WORD $0x10d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x646ffac5; WORD $0x30d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5               // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5               // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x546ffac5; WORD $0x50d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 80]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x5c6ffac5; WORD $0x40d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5               // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x70d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 112]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x60d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x0059e2c4; BYTE $0xc0   // vpshufb    xmm0, xmm4, xmm0
	LONG $0xc361f9c5               // vpunpcklwd    xmm0, xmm0, xmm3
	LONG $0xc062e9c5               // vpunpckldq    xmm0, xmm2, xmm0
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x047ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm0

LBB16_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB16_3

LBB16_16:
	RET

LBB16_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB16_14
	JMP  LBB16_15

DATA LCDATA12<>+0x000(SB)/8, $0x0000000000000800
DATA LCDATA12<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA12<>(SB), 8, $16

TEXT ·_cast_numeric_int64_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA12<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB17_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB17_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB17_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB17_9

LBB17_2:
	WORD $0xc931 // xor    ecx, ecx

LBB17_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB17_5

LBB17_4:
	LONG $0xcf04b60f         // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e // mov    byte [rsi + rcx], al
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB17_4

LBB17_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB17_16

LBB17_6:
	LONG $0xcf04b60f             // movzx    eax, byte [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0xcf44b60f; BYTE $0x08 // movzx    eax, byte [rdi + 8*rcx + 8]
	LONG $0x010e4488             // mov    byte [rsi + rcx + 1], al
	LONG $0xcf44b60f; BYTE $0x10 // movzx    eax, byte [rdi + 8*rcx + 16]
	LONG $0x020e4488             // mov    byte [rsi + rcx + 2], al
	LONG $0xcf44b60f; BYTE $0x18 // movzx    eax, byte [rdi + 8*rcx + 24]
	LONG $0x030e4488             // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB17_6
	JMP  LBB17_16

LBB17_9:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0     // and    ecx, -16
	LONG $0xf0418d48             // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x04e8c149             // shr    r8, 4
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB17_10
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI17_0] */

LBB17_12:
	LONG $0x0c6ffac5; BYTE $0xd7         // vmovdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546ffac5; WORD $0x10d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x646ffac5; WORD $0x30d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5                     // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x546ffac5; WORD $0x50d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 80]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x5c6ffac5; WORD $0x40d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x70d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 112]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x60d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb61d9c5                     // vpunpcklwd    xmm3, xmm4, xmm3
	LONG $0xd362e9c5                     // vpunpckldq    xmm2, xmm2, xmm3
	LONG $0xca6cf1c5                     // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x0c7ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm1
	QUAD $0x000080d78c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 8*rdx + 128]
	QUAD $0x000090d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 144]
	QUAD $0x0000a0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 160]
	QUAD $0x0000b0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 176]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8         // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5                     // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	QUAD $0x0000d0d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 208]
	LONG $0x0069e2c4; BYTE $0xd0         // vpshufb    xmm2, xmm2, xmm0
	QUAD $0x0000c0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 192]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5                     // vpunpcklwd    xmm2, xmm3, xmm2
	QUAD $0x0000f0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 240]
	LONG $0x0061e2c4; BYTE $0xd8         // vpshufb    xmm3, xmm3, xmm0
	QUAD $0x0000e0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 224]
	LONG $0x0059e2c4; BYTE $0xe0         // vpshufb    xmm4, xmm4, xmm0
	LONG $0xdb61d9c5                     // vpunpcklwd    xmm3, xmm4, xmm3
	LONG $0xd362e9c5                     // vpunpckldq    xmm2, xmm2, xmm3
	LONG $0xca6cf1c5                     // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x4c7ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm1
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB17_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB17_15

LBB17_14:
	LONG $0x456ff9c5; BYTE $0x00   // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI17_0] */
	LONG $0x0c6ffac5; BYTE $0xd7   // vmovdqu    xmm1, oword [rdi + 8*rdx]
	LONG $0x546ffac5; WORD $0x10d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x646ffac5; WORD $0x30d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 48]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca61f1c5               // vpunpcklwd    xmm1, xmm1, xmm2
	LONG $0x0059e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm4, xmm0
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5               // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0x546ffac5; WORD $0x50d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 80]
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0x5c6ffac5; WORD $0x40d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0xd261e1c5               // vpunpcklwd    xmm2, xmm3, xmm2
	LONG $0x5c6ffac5; WORD $0x70d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 112]
	LONG $0x0061e2c4; BYTE $0xd8   // vpshufb    xmm3, xmm3, xmm0
	LONG $0x646ffac5; WORD $0x60d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x0059e2c4; BYTE $0xc0   // vpshufb    xmm0, xmm4, xmm0
	LONG $0xc361f9c5               // vpunpcklwd    xmm0, xmm0, xmm3
	LONG $0xc062e9c5               // vpunpckldq    xmm0, xmm2, xmm0
	LONG $0xc06cf1c5               // vpunpcklqdq    xmm0, xmm1, xmm0
	LONG $0x047ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm0

LBB17_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB17_3

LBB17_16:
	RET

LBB17_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB17_14
	JMP  LBB17_15

TEXT ·_cast_numeric_float32_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB18_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB18_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB18_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB18_9

LBB18_2:
	WORD $0xc931 // xor    ecx, ecx

LBB18_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB18_5

LBB18_4:
	LONG $0x042cfac5; BYTE $0x8f // vcvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB18_4

LBB18_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB18_16

LBB18_6:
	LONG $0x042cfac5; BYTE $0x8f   // vcvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0488; BYTE $0x0e       // mov    byte [rsi + rcx], al
	LONG $0x442cfac5; WORD $0x048f // vcvttss2si    eax, dword [rdi + 4*rcx + 4]
	LONG $0x010e4488               // mov    byte [rsi + rcx + 1], al
	LONG $0x442cfac5; WORD $0x088f // vcvttss2si    eax, dword [rdi + 4*rcx + 8]
	LONG $0x020e4488               // mov    byte [rsi + rcx + 2], al
	LONG $0x442cfac5; WORD $0x0c8f // vcvttss2si    eax, dword [rdi + 4*rcx + 12]
	LONG $0x030e4488               // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB18_6
	JMP  LBB18_16

LBB18_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB18_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB18_12:
	LONG $0x045bfec5; BYTE $0x97         // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128    xmm1, ymm0, 1
	LONG $0x545bfec5; WORD $0x2097       // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 32]
	LONG $0xc16bf9c5                     // vpackssdw    xmm0, xmm0, xmm1
	LONG $0x397de3c4; WORD $0x01d1       // vextracti128    xmm1, ymm2, 1
	LONG $0x5c5bfec5; WORD $0x4097       // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 64]
	LONG $0xc96be9c5                     // vpackssdw    xmm1, xmm2, xmm1
	LONG $0x397de3c4; WORD $0x01da       // vextracti128    xmm2, ymm3, 1
	LONG $0x645bfec5; WORD $0x6097       // vcvttps2dq    ymm4, yword [rdi + 4*rdx + 96]
	LONG $0xd26be1c5                     // vpackssdw    xmm2, xmm3, xmm2
	LONG $0x397de3c4; WORD $0x01e3       // vextracti128    xmm3, ymm4, 1
	LONG $0xdb6bd9c5                     // vpackssdw    xmm3, xmm4, xmm3
	LONG $0x386de3c4; WORD $0x01d3       // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd063edc5                     // vpacksswb    ymm2, ymm2, ymm0
	LONG $0x387de3c4; WORD $0x01c1       // vinserti128    ymm0, ymm0, xmm1, 1
	LONG $0xc063fdc5                     // vpacksswb    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5                     // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0       // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x16         // vmovdqu    yword [rsi + rdx], ymm0
	QUAD $0x00008097845bfec5; BYTE $0x00 // vcvttps2dq    ymm0, yword [rdi + 4*rdx + 128]
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128    xmm1, ymm0, 1
	QUAD $0x0000a097945bfec5; BYTE $0x00 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 160]
	LONG $0xc16bf9c5                     // vpackssdw    xmm0, xmm0, xmm1
	LONG $0x397de3c4; WORD $0x01d1       // vextracti128    xmm1, ymm2, 1
	QUAD $0x0000c0979c5bfec5; BYTE $0x00 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 192]
	LONG $0xc96be9c5                     // vpackssdw    xmm1, xmm2, xmm1
	LONG $0x397de3c4; WORD $0x01da       // vextracti128    xmm2, ymm3, 1
	QUAD $0x0000e097a45bfec5; BYTE $0x00 // vcvttps2dq    ymm4, yword [rdi + 4*rdx + 224]
	LONG $0xd26be1c5                     // vpackssdw    xmm2, xmm3, xmm2
	LONG $0x397de3c4; WORD $0x01e3       // vextracti128    xmm3, ymm4, 1
	LONG $0xdb6bd9c5                     // vpackssdw    xmm3, xmm4, xmm3
	LONG $0x386de3c4; WORD $0x01d3       // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd063edc5                     // vpacksswb    ymm2, ymm2, ymm0
	LONG $0x387de3c4; WORD $0x01c1       // vinserti128    ymm0, ymm0, xmm1, 1
	LONG $0xc063fdc5                     // vpacksswb    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5                     // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0       // vpermq    ymm0, ymm0, 216
	LONG $0x447ffec5; WORD $0x2016       // vmovdqu    yword [rsi + rdx + 32], ymm0
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB18_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB18_15

LBB18_14:
	LONG $0x045bfec5; BYTE $0x97   // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc16bf9c5               // vpackssdw    xmm0, xmm0, xmm1
	LONG $0x4c5bfec5; WORD $0x2097 // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x397de3c4; WORD $0x01ca // vextracti128    xmm2, ymm1, 1
	LONG $0xca6bf1c5               // vpackssdw    xmm1, xmm1, xmm2
	LONG $0x545bfec5; WORD $0x4097 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x397de3c4; WORD $0x01d3 // vextracti128    xmm3, ymm2, 1
	LONG $0xd36be9c5               // vpackssdw    xmm2, xmm2, xmm3
	LONG $0x5c5bfec5; WORD $0x6097 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x397de3c4; WORD $0x01dc // vextracti128    xmm4, ymm3, 1
	LONG $0xdc6be1c5               // vpackssdw    xmm3, xmm3, xmm4
	LONG $0x386de3c4; WORD $0x01d3 // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd063edc5               // vpacksswb    ymm2, ymm2, ymm0
	LONG $0x387de3c4; WORD $0x01c1 // vinserti128    ymm0, ymm0, xmm1, 1
	LONG $0xc063fdc5               // vpacksswb    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5               // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0 // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x16   // vmovdqu    yword [rsi + rdx], ymm0

LBB18_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB18_3

LBB18_16:
	VZEROUPPER
	RET

LBB18_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB18_14
	JMP  LBB18_15

TEXT ·_cast_numeric_float64_int8_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB19_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB19_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB19_9
	LONG $0x0e048d4a         // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB19_9

LBB19_2:
	WORD $0xc931 // xor    ecx, ecx

LBB19_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB19_5

LBB19_4:
	LONG $0x042cfbc5; BYTE $0xcf // vcvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e     // mov    byte [rsi + rcx], al
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB19_4

LBB19_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB19_16

LBB19_6:
	LONG $0x042cfbc5; BYTE $0xcf   // vcvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0488; BYTE $0x0e       // mov    byte [rsi + rcx], al
	LONG $0x442cfbc5; WORD $0x08cf // vcvttsd2si    eax, qword [rdi + 8*rcx + 8]
	LONG $0x010e4488               // mov    byte [rsi + rcx + 1], al
	LONG $0x442cfbc5; WORD $0x10cf // vcvttsd2si    eax, qword [rdi + 8*rcx + 16]
	LONG $0x020e4488               // mov    byte [rsi + rcx + 2], al
	LONG $0x442cfbc5; WORD $0x18cf // vcvttsd2si    eax, qword [rdi + 8*rcx + 24]
	LONG $0x030e4488               // mov    byte [rsi + rcx + 3], al
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB19_6
	JMP  LBB19_16

LBB19_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB19_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB19_12:
	LONG $0x04e6fdc5; BYTE $0xd7         // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0xc06bf9c5                     // vpackssdw    xmm0, xmm0, xmm0
	LONG $0x4ce6fdc5; WORD $0x20d7       // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0xc063f9c5                     // vpacksswb    xmm0, xmm0, xmm0
	LONG $0xc96bf1c5                     // vpackssdw    xmm1, xmm1, xmm1
	LONG $0xc963f1c5                     // vpacksswb    xmm1, xmm1, xmm1
	LONG $0xc162f9c5                     // vpunpckldq    xmm0, xmm0, xmm1
	LONG $0x4ce6fdc5; WORD $0x40d7       // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 64]
	LONG $0xc96bf1c5                     // vpackssdw    xmm1, xmm1, xmm1
	LONG $0xc963f1c5                     // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x54e6fdc5; WORD $0x60d7       // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 96]
	LONG $0xd26be9c5                     // vpackssdw    xmm2, xmm2, xmm2
	LONG $0xd263e9c5                     // vpacksswb    xmm2, xmm2, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xc16cf9c5                     // vpunpcklqdq    xmm0, xmm0, xmm1
	LONG $0x047ffac5; BYTE $0x16         // vmovdqu    oword [rsi + rdx], xmm0
	QUAD $0x000080d784e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 160]
	LONG $0xc06bf9c5                     // vpackssdw    xmm0, xmm0, xmm0
	LONG $0xc063f9c5                     // vpacksswb    xmm0, xmm0, xmm0
	LONG $0xc96bf1c5                     // vpackssdw    xmm1, xmm1, xmm1
	LONG $0xc963f1c5                     // vpacksswb    xmm1, xmm1, xmm1
	LONG $0xc162f9c5                     // vpunpckldq    xmm0, xmm0, xmm1
	QUAD $0x0000c0d78ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 192]
	LONG $0xc96bf1c5                     // vpackssdw    xmm1, xmm1, xmm1
	QUAD $0x0000e0d794e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 224]
	LONG $0xc963f1c5                     // vpacksswb    xmm1, xmm1, xmm1
	LONG $0xd26be9c5                     // vpackssdw    xmm2, xmm2, xmm2
	LONG $0xd263e9c5                     // vpacksswb    xmm2, xmm2, xmm2
	LONG $0xca62f1c5                     // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xc16cf9c5                     // vpunpcklqdq    xmm0, xmm0, xmm1
	LONG $0x447ffac5; WORD $0x1016       // vmovdqu    oword [rsi + rdx + 16], xmm0
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB19_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB19_15

LBB19_14:
	LONG $0x04e6fdc5; BYTE $0xd7   // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0xc06bf9c5               // vpackssdw    xmm0, xmm0, xmm0
	LONG $0xc063f9c5               // vpacksswb    xmm0, xmm0, xmm0
	LONG $0x4ce6fdc5; WORD $0x20d7 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0xc96bf1c5               // vpackssdw    xmm1, xmm1, xmm1
	LONG $0x54e6fdc5; WORD $0x40d7 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0xc963f1c5               // vpacksswb    xmm1, xmm1, xmm1
	LONG $0xc162f9c5               // vpunpckldq    xmm0, xmm0, xmm1
	LONG $0xca6be9c5               // vpackssdw    xmm1, xmm2, xmm2
	LONG $0xc963f1c5               // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x54e6fdc5; WORD $0x60d7 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 96]
	LONG $0xd26be9c5               // vpackssdw    xmm2, xmm2, xmm2
	LONG $0xd263e9c5               // vpacksswb    xmm2, xmm2, xmm2
	LONG $0xca62f1c5               // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xc16cf9c5               // vpunpcklqdq    xmm0, xmm0, xmm1
	LONG $0x047ffac5; BYTE $0x16   // vmovdqu    oword [rsi + rdx], xmm0

LBB19_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB19_3

LBB19_16:
	RET

LBB19_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB19_14
	JMP  LBB19_15

TEXT ·_cast_numeric_uint8_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB20_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB20_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB20_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB20_9

LBB20_2:
	WORD $0xc931 // xor    ecx, ecx

LBB20_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB20_5

LBB20_4:
	LONG $0x0f04b60f // movzx    eax, byte [rdi + rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB20_4

LBB20_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB20_16

LBB20_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB20_6
	JMP  LBB20_16

LBB20_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	LONG $0xc0418d48         // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x06e8c149         // shr    r8, 6
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB20_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB20_12:
	LONG $0x307de2c4; WORD $0x1704             // vpmovzxbw    ymm0, oword [rdi + rdx]
	LONG $0x307de2c4; WORD $0x174c; BYTE $0x10 // vpmovzxbw    ymm1, oword [rdi + rdx + 16]
	LONG $0x307de2c4; WORD $0x1754; BYTE $0x20 // vpmovzxbw    ymm2, oword [rdi + rdx + 32]
	LONG $0x307de2c4; WORD $0x175c; BYTE $0x30 // vpmovzxbw    ymm3, oword [rdi + rdx + 48]
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2056             // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4056             // vmovdqu    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6056             // vmovdqu    yword [rsi + 2*rdx + 96], ymm3
	LONG $0x307de2c4; WORD $0x1744; BYTE $0x40 // vpmovzxbw    ymm0, oword [rdi + rdx + 64]
	LONG $0x307de2c4; WORD $0x174c; BYTE $0x50 // vpmovzxbw    ymm1, oword [rdi + rdx + 80]
	LONG $0x307de2c4; WORD $0x1754; BYTE $0x60 // vpmovzxbw    ymm2, oword [rdi + rdx + 96]
	LONG $0x307de2c4; WORD $0x175c; BYTE $0x70 // vpmovzxbw    ymm3, oword [rdi + rdx + 112]
	QUAD $0x00008056847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 128], ymm0
	QUAD $0x0000a0568c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 160], ymm1
	QUAD $0x0000c056947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 192], ymm2
	QUAD $0x0000e0569c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 224], ymm3
	LONG $0x80ea8348                           // sub    rdx, -128
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB20_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB20_15

LBB20_14:
	LONG $0x307de2c4; WORD $0x1704             // vpmovzxbw    ymm0, oword [rdi + rdx]
	LONG $0x307de2c4; WORD $0x174c; BYTE $0x10 // vpmovzxbw    ymm1, oword [rdi + rdx + 16]
	LONG $0x307de2c4; WORD $0x1754; BYTE $0x20 // vpmovzxbw    ymm2, oword [rdi + rdx + 32]
	LONG $0x307de2c4; WORD $0x175c; BYTE $0x30 // vpmovzxbw    ymm3, oword [rdi + rdx + 48]
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2056             // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4056             // vmovdqu    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6056             // vmovdqu    yword [rsi + 2*rdx + 96], ymm3

LBB20_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB20_3

LBB20_16:
	VZEROUPPER
	RET

LBB20_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB20_14
	JMP  LBB20_15

TEXT ·_cast_numeric_int8_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB21_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB21_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB21_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB21_9

LBB21_2:
	WORD $0xc931 // xor    ecx, ecx

LBB21_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB21_5

LBB21_4:
	LONG $0x0f04be0f // movsx    eax, byte [rdi + rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB21_4

LBB21_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB21_16

LBB21_6:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x0f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rcx + 1]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x0f44be0f; BYTE $0x02 // movsx    eax, byte [rdi + rcx + 2]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x0f44be0f; BYTE $0x03 // movsx    eax, byte [rdi + rcx + 3]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB21_6
	JMP  LBB21_16

LBB21_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	LONG $0xc0418d48         // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x06e8c149         // shr    r8, 6
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB21_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB21_12:
	LONG $0x207de2c4; WORD $0x1704             // vpmovsxbw    ymm0, oword [rdi + rdx]
	LONG $0x207de2c4; WORD $0x174c; BYTE $0x10 // vpmovsxbw    ymm1, oword [rdi + rdx + 16]
	LONG $0x207de2c4; WORD $0x1754; BYTE $0x20 // vpmovsxbw    ymm2, oword [rdi + rdx + 32]
	LONG $0x207de2c4; WORD $0x175c; BYTE $0x30 // vpmovsxbw    ymm3, oword [rdi + rdx + 48]
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2056             // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4056             // vmovdqu    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6056             // vmovdqu    yword [rsi + 2*rdx + 96], ymm3
	LONG $0x207de2c4; WORD $0x1744; BYTE $0x40 // vpmovsxbw    ymm0, oword [rdi + rdx + 64]
	LONG $0x207de2c4; WORD $0x174c; BYTE $0x50 // vpmovsxbw    ymm1, oword [rdi + rdx + 80]
	LONG $0x207de2c4; WORD $0x1754; BYTE $0x60 // vpmovsxbw    ymm2, oword [rdi + rdx + 96]
	LONG $0x207de2c4; WORD $0x175c; BYTE $0x70 // vpmovsxbw    ymm3, oword [rdi + rdx + 112]
	QUAD $0x00008056847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 128], ymm0
	QUAD $0x0000a0568c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 160], ymm1
	QUAD $0x0000c056947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 192], ymm2
	QUAD $0x0000e0569c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 224], ymm3
	LONG $0x80ea8348                           // sub    rdx, -128
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB21_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB21_15

LBB21_14:
	LONG $0x207de2c4; WORD $0x1704             // vpmovsxbw    ymm0, oword [rdi + rdx]
	LONG $0x207de2c4; WORD $0x174c; BYTE $0x10 // vpmovsxbw    ymm1, oword [rdi + rdx + 16]
	LONG $0x207de2c4; WORD $0x1754; BYTE $0x20 // vpmovsxbw    ymm2, oword [rdi + rdx + 32]
	LONG $0x207de2c4; WORD $0x175c; BYTE $0x30 // vpmovsxbw    ymm3, oword [rdi + rdx + 48]
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2056             // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4056             // vmovdqu    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6056             // vmovdqu    yword [rsi + 2*rdx + 96], ymm3

LBB21_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB21_3

LBB21_16:
	VZEROUPPER
	RET

LBB21_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB21_14
	JMP  LBB21_15

TEXT ·_cast_numeric_uint16_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB22_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB22_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB22_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB22_9

LBB22_2:
	WORD $0xc931 // xor    ecx, ecx

LBB22_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB22_5

LBB22_4:
	LONG $0x4f04b70f // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB22_4

LBB22_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB22_16

LBB22_6:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x4f44b70f; BYTE $0x02 // movzx    eax, word [rdi + 2*rcx + 2]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x4f44b70f; BYTE $0x04 // movzx    eax, word [rdi + 2*rcx + 4]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x4f44b70f; BYTE $0x06 // movzx    eax, word [rdi + 2*rcx + 6]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB22_6
	JMP  LBB22_16

LBB22_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	LONG $0xc0418d48         // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x06e8c149         // shr    r8, 6
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB22_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB22_12:
	LONG $0x0410fcc5; BYTE $0x57         // vmovups    ymm0, yword [rdi + 2*rdx]
	LONG $0x4c10fcc5; WORD $0x2057       // vmovups    ymm1, yword [rdi + 2*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4057       // vmovups    ymm2, yword [rdi + 2*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6057       // vmovups    ymm3, yword [rdi + 2*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x56         // vmovups    yword [rsi + 2*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2056       // vmovups    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4056       // vmovups    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6056       // vmovups    yword [rsi + 2*rdx + 96], ymm3
	QUAD $0x000080578410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 2*rdx + 128]
	QUAD $0x0000a0578c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 2*rdx + 160]
	QUAD $0x0000c0579410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 2*rdx + 192]
	QUAD $0x0000e0579c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 2*rdx + 224]
	QUAD $0x000080568411fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 128], ymm0
	QUAD $0x0000a0568c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 160], ymm1
	QUAD $0x0000c0569411fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 192], ymm2
	QUAD $0x0000e0569c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 224], ymm3
	LONG $0x80ea8348                     // sub    rdx, -128
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB22_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB22_15

LBB22_14:
	LONG $0x0410fcc5; BYTE $0x57   // vmovups    ymm0, yword [rdi + 2*rdx]
	LONG $0x4c10fcc5; WORD $0x2057 // vmovups    ymm1, yword [rdi + 2*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4057 // vmovups    ymm2, yword [rdi + 2*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6057 // vmovups    ymm3, yword [rdi + 2*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x56   // vmovups    yword [rsi + 2*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2056 // vmovups    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4056 // vmovups    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6056 // vmovups    yword [rsi + 2*rdx + 96], ymm3

LBB22_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB22_3

LBB22_16:
	VZEROUPPER
	RET

LBB22_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB22_14
	JMP  LBB22_15

TEXT ·_cast_numeric_int16_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB23_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB23_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB23_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB23_9

LBB23_2:
	WORD $0xc931 // xor    ecx, ecx

LBB23_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB23_5

LBB23_4:
	LONG $0x4f04b70f // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB23_4

LBB23_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB23_16

LBB23_6:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x4f44b70f; BYTE $0x02 // movzx    eax, word [rdi + 2*rcx + 2]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x4f44b70f; BYTE $0x04 // movzx    eax, word [rdi + 2*rcx + 4]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x4f44b70f; BYTE $0x06 // movzx    eax, word [rdi + 2*rcx + 6]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB23_6
	JMP  LBB23_16

LBB23_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	LONG $0xc0418d48         // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x06e8c149         // shr    r8, 6
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB23_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB23_12:
	LONG $0x0410fcc5; BYTE $0x57         // vmovups    ymm0, yword [rdi + 2*rdx]
	LONG $0x4c10fcc5; WORD $0x2057       // vmovups    ymm1, yword [rdi + 2*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4057       // vmovups    ymm2, yword [rdi + 2*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6057       // vmovups    ymm3, yword [rdi + 2*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x56         // vmovups    yword [rsi + 2*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2056       // vmovups    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4056       // vmovups    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6056       // vmovups    yword [rsi + 2*rdx + 96], ymm3
	QUAD $0x000080578410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 2*rdx + 128]
	QUAD $0x0000a0578c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 2*rdx + 160]
	QUAD $0x0000c0579410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 2*rdx + 192]
	QUAD $0x0000e0579c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 2*rdx + 224]
	QUAD $0x000080568411fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 128], ymm0
	QUAD $0x0000a0568c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 160], ymm1
	QUAD $0x0000c0569411fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 192], ymm2
	QUAD $0x0000e0569c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 224], ymm3
	LONG $0x80ea8348                     // sub    rdx, -128
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB23_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB23_15

LBB23_14:
	LONG $0x0410fcc5; BYTE $0x57   // vmovups    ymm0, yword [rdi + 2*rdx]
	LONG $0x4c10fcc5; WORD $0x2057 // vmovups    ymm1, yword [rdi + 2*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4057 // vmovups    ymm2, yword [rdi + 2*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6057 // vmovups    ymm3, yword [rdi + 2*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x56   // vmovups    yword [rsi + 2*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2056 // vmovups    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4056 // vmovups    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6056 // vmovups    yword [rsi + 2*rdx + 96], ymm3

LBB23_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB23_3

LBB23_16:
	VZEROUPPER
	RET

LBB23_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB23_14
	JMP  LBB23_15

DATA LCDATA13<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA13<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA13<>+0x010(SB)/8, $0x1d1c191815141110
DATA LCDATA13<>+0x018(SB)/8, $0x1f1e1d1c1d1c1918
GLOBL LCDATA13<>(SB), 8, $32

TEXT ·_cast_numeric_uint32_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA13<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB24_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB24_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB24_10

LBB24_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xe0418d48             // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x05e8c149             // shr    r8, 5
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB24_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI24_0] */

LBB24_6:
	LONG $0x0c6ffec5; BYTE $0x97         // vmovdqu    ymm1, yword [rdi + 4*rdx]
	LONG $0x546ffec5; WORD $0x2097       // vmovdqu    ymm2, yword [rdi + 4*rdx + 32]
	LONG $0x5c6ffec5; WORD $0x4097       // vmovdqu    ymm3, yword [rdi + 4*rdx + 64]
	LONG $0x646ffec5; WORD $0x6097       // vmovdqu    ymm4, yword [rdi + 4*rdx + 96]
	LONG $0x0075e2c4; BYTE $0xc8         // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9       // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0         // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2       // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm3, ymm0
	LONG $0x00fde3c4; WORD $0xe8db       // vpermq    ymm3, ymm3, 232
	LONG $0x005de2c4; BYTE $0xe0         // vpshufb    ymm4, ymm4, ymm0
	LONG $0x00fde3c4; WORD $0xe8e4       // vpermq    ymm4, ymm4, 232
	LONG $0x0c7ffac5; BYTE $0x56         // vmovdqu    oword [rsi + 2*rdx], xmm1
	LONG $0x547ffac5; WORD $0x1056       // vmovdqu    oword [rsi + 2*rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2056       // vmovdqu    oword [rsi + 2*rdx + 32], xmm3
	LONG $0x647ffac5; WORD $0x3056       // vmovdqu    oword [rsi + 2*rdx + 48], xmm4
	QUAD $0x000080978c6ffec5; BYTE $0x00 // vmovdqu    ymm1, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a097946ffec5; BYTE $0x00 // vmovdqu    ymm2, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979c6ffec5; BYTE $0x00 // vmovdqu    ymm3, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e097a46ffec5; BYTE $0x00 // vmovdqu    ymm4, yword [rdi + 4*rdx + 224]
	LONG $0x0075e2c4; BYTE $0xc8         // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9       // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0         // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2       // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm3, ymm0
	LONG $0x00fde3c4; WORD $0xe8db       // vpermq    ymm3, ymm3, 232
	LONG $0x005de2c4; BYTE $0xe0         // vpshufb    ymm4, ymm4, ymm0
	LONG $0x00fde3c4; WORD $0xe8e4       // vpermq    ymm4, ymm4, 232
	LONG $0x4c7ffac5; WORD $0x4056       // vmovdqu    oword [rsi + 2*rdx + 64], xmm1
	LONG $0x547ffac5; WORD $0x5056       // vmovdqu    oword [rsi + 2*rdx + 80], xmm2
	LONG $0x5c7ffac5; WORD $0x6056       // vmovdqu    oword [rsi + 2*rdx + 96], xmm3
	LONG $0x647ffac5; WORD $0x7056       // vmovdqu    oword [rsi + 2*rdx + 112], xmm4
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB24_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB24_9

LBB24_8:
	LONG $0x046ffec5; BYTE $0x97   // vmovdqu    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c6ffec5; WORD $0x2097 // vmovdqu    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x546ffec5; WORD $0x4097 // vmovdqu    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c6ffec5; WORD $0x6097 // vmovdqu    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x656ffdc5; BYTE $0x00   // vmovdqa    ymm4, yword 0[rbp] /* [rip + .LCPI24_0] */
	LONG $0x007de2c4; BYTE $0xc4   // vpshufb    ymm0, ymm0, ymm4
	LONG $0x00fde3c4; WORD $0xe8c0 // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xcc   // vpshufb    ymm1, ymm1, ymm4
	LONG $0x00fde3c4; WORD $0xe8c9 // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd4   // vpshufb    ymm2, ymm2, ymm4
	LONG $0x00fde3c4; WORD $0xe8d2 // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xdc   // vpshufb    ymm3, ymm3, ymm4
	LONG $0x00fde3c4; WORD $0xe8db // vpermq    ymm3, ymm3, 232
	LONG $0x047ffac5; BYTE $0x56   // vmovdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7ffac5; WORD $0x1056 // vmovdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x547ffac5; WORD $0x2056 // vmovdqu    oword [rsi + 2*rdx + 32], xmm2
	LONG $0x5c7ffac5; WORD $0x3056 // vmovdqu    oword [rsi + 2*rdx + 48], xmm3

LBB24_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB24_11

LBB24_10:
	LONG $0x8f04b70f         // movzx    eax, word [rdi + 4*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB24_10

LBB24_11:
	VZEROUPPER
	RET

LBB24_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB24_8
	JMP  LBB24_9

DATA LCDATA14<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA14<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA14<>+0x010(SB)/8, $0x1d1c191815141110
DATA LCDATA14<>+0x018(SB)/8, $0x1f1e1d1c1d1c1918
GLOBL LCDATA14<>(SB), 8, $32

TEXT ·_cast_numeric_int32_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA14<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB25_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB25_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB25_10

LBB25_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xe0418d48             // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x05e8c149             // shr    r8, 5
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB25_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI25_0] */

LBB25_6:
	LONG $0x0c6ffec5; BYTE $0x97         // vmovdqu    ymm1, yword [rdi + 4*rdx]
	LONG $0x546ffec5; WORD $0x2097       // vmovdqu    ymm2, yword [rdi + 4*rdx + 32]
	LONG $0x5c6ffec5; WORD $0x4097       // vmovdqu    ymm3, yword [rdi + 4*rdx + 64]
	LONG $0x646ffec5; WORD $0x6097       // vmovdqu    ymm4, yword [rdi + 4*rdx + 96]
	LONG $0x0075e2c4; BYTE $0xc8         // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9       // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0         // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2       // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm3, ymm0
	LONG $0x00fde3c4; WORD $0xe8db       // vpermq    ymm3, ymm3, 232
	LONG $0x005de2c4; BYTE $0xe0         // vpshufb    ymm4, ymm4, ymm0
	LONG $0x00fde3c4; WORD $0xe8e4       // vpermq    ymm4, ymm4, 232
	LONG $0x0c7ffac5; BYTE $0x56         // vmovdqu    oword [rsi + 2*rdx], xmm1
	LONG $0x547ffac5; WORD $0x1056       // vmovdqu    oword [rsi + 2*rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2056       // vmovdqu    oword [rsi + 2*rdx + 32], xmm3
	LONG $0x647ffac5; WORD $0x3056       // vmovdqu    oword [rsi + 2*rdx + 48], xmm4
	QUAD $0x000080978c6ffec5; BYTE $0x00 // vmovdqu    ymm1, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a097946ffec5; BYTE $0x00 // vmovdqu    ymm2, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979c6ffec5; BYTE $0x00 // vmovdqu    ymm3, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e097a46ffec5; BYTE $0x00 // vmovdqu    ymm4, yword [rdi + 4*rdx + 224]
	LONG $0x0075e2c4; BYTE $0xc8         // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9       // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0         // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2       // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm3, ymm0
	LONG $0x00fde3c4; WORD $0xe8db       // vpermq    ymm3, ymm3, 232
	LONG $0x005de2c4; BYTE $0xe0         // vpshufb    ymm4, ymm4, ymm0
	LONG $0x00fde3c4; WORD $0xe8e4       // vpermq    ymm4, ymm4, 232
	LONG $0x4c7ffac5; WORD $0x4056       // vmovdqu    oword [rsi + 2*rdx + 64], xmm1
	LONG $0x547ffac5; WORD $0x5056       // vmovdqu    oword [rsi + 2*rdx + 80], xmm2
	LONG $0x5c7ffac5; WORD $0x6056       // vmovdqu    oword [rsi + 2*rdx + 96], xmm3
	LONG $0x647ffac5; WORD $0x7056       // vmovdqu    oword [rsi + 2*rdx + 112], xmm4
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB25_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB25_9

LBB25_8:
	LONG $0x046ffec5; BYTE $0x97   // vmovdqu    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c6ffec5; WORD $0x2097 // vmovdqu    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x546ffec5; WORD $0x4097 // vmovdqu    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c6ffec5; WORD $0x6097 // vmovdqu    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x656ffdc5; BYTE $0x00   // vmovdqa    ymm4, yword 0[rbp] /* [rip + .LCPI25_0] */
	LONG $0x007de2c4; BYTE $0xc4   // vpshufb    ymm0, ymm0, ymm4
	LONG $0x00fde3c4; WORD $0xe8c0 // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xcc   // vpshufb    ymm1, ymm1, ymm4
	LONG $0x00fde3c4; WORD $0xe8c9 // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd4   // vpshufb    ymm2, ymm2, ymm4
	LONG $0x00fde3c4; WORD $0xe8d2 // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xdc   // vpshufb    ymm3, ymm3, ymm4
	LONG $0x00fde3c4; WORD $0xe8db // vpermq    ymm3, ymm3, 232
	LONG $0x047ffac5; BYTE $0x56   // vmovdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7ffac5; WORD $0x1056 // vmovdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x547ffac5; WORD $0x2056 // vmovdqu    oword [rsi + 2*rdx + 32], xmm2
	LONG $0x5c7ffac5; WORD $0x3056 // vmovdqu    oword [rsi + 2*rdx + 48], xmm3

LBB25_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB25_11

LBB25_10:
	LONG $0x8f04b70f         // movzx    eax, word [rdi + 4*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB25_10

LBB25_11:
	VZEROUPPER
	RET

LBB25_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB25_8
	JMP  LBB25_9

TEXT ·_cast_numeric_uint64_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB26_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB26_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB26_10

LBB26_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB26_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB26_6:
	LONG $0x0e7963c4; WORD $0xd704; BYTE $0x11         // vpblendw    xmm8, xmm0, oword [rdi + 8*rdx], 17
	QUAD $0x1110d7540e79e3c4                           // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 16], 17
	QUAD $0x1120d75c0e79e3c4                           // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 32], 17
	QUAD $0x1130d7640e79e3c4                           // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 48], 17
	QUAD $0x1140d76c0e79e3c4                           // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 64], 17
	QUAD $0x1150d7740e79e3c4                           // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 80], 17
	QUAD $0x1160d77c0e79e3c4                           // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 96], 17
	QUAD $0x1170d74c0e79e3c4                           // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx + 112], 17
	LONG $0x384de3c4; WORD $0x01c9                     // vinserti128    ymm1, ymm6, xmm1, 1
	LONG $0x3855e3c4; WORD $0x01ef                     // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc9                       // vpackusdw    ymm1, ymm5, ymm1
	LONG $0x2b75e2c4; BYTE $0xc8                       // vpackusdw    ymm1, ymm1, ymm0
	LONG $0x386de3c4; WORD $0x01d4                     // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x383de3c4; WORD $0x01db                     // vinserti128    ymm3, ymm8, xmm3, 1
	LONG $0x2b65e2c4; BYTE $0xd2                       // vpackusdw    ymm2, ymm3, ymm2
	LONG $0x2b6de2c4; BYTE $0xd0                       // vpackusdw    ymm2, ymm2, ymm0
	LONG $0xc96cedc5                                   // vpunpcklqdq    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8c9                     // vpermq    ymm1, ymm1, 216
	LONG $0x0c7ffec5; BYTE $0x56                       // vmovdqu    yword [rsi + 2*rdx], ymm1
	QUAD $0x0080d7840e7963c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm8, xmm0, oword [rdi + 8*rdx + 128], 17
	QUAD $0x0090d7940e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 144], 17
	QUAD $0x00a0d79c0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 160], 17
	QUAD $0x00b0d7a40e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 176], 17
	QUAD $0x00c0d7ac0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 192], 17
	QUAD $0x00d0d7b40e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 208], 17
	QUAD $0x00e0d7bc0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 224], 17
	QUAD $0x00f0d78c0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx + 240], 17
	LONG $0x384de3c4; WORD $0x01c9                     // vinserti128    ymm1, ymm6, xmm1, 1
	LONG $0x3855e3c4; WORD $0x01ef                     // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc9                       // vpackusdw    ymm1, ymm5, ymm1
	LONG $0x2b75e2c4; BYTE $0xc8                       // vpackusdw    ymm1, ymm1, ymm0
	LONG $0x386de3c4; WORD $0x01d4                     // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x383de3c4; WORD $0x01db                     // vinserti128    ymm3, ymm8, xmm3, 1
	LONG $0x2b65e2c4; BYTE $0xd2                       // vpackusdw    ymm2, ymm3, ymm2
	LONG $0x2b6de2c4; BYTE $0xd0                       // vpackusdw    ymm2, ymm2, ymm0
	LONG $0xc96cedc5                                   // vpunpcklqdq    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8c9                     // vpermq    ymm1, ymm1, 216
	LONG $0x4c7ffec5; WORD $0x2056                     // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x20c28348                                   // add    rdx, 32
	LONG $0x02c08348                                   // add    rax, 2
	JNE  LBB26_6
	LONG $0x01c0f641                                   // test    r8b, 1
	JE   LBB26_9

LBB26_8:
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0e79e3c4; WORD $0xd70c; BYTE $0x11 // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx], 17
	QUAD $0x1110d7540e79e3c4                   // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 16], 17
	QUAD $0x1120d75c0e79e3c4                   // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 32], 17
	QUAD $0x1130d7640e79e3c4                   // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 48], 17
	QUAD $0x1140d76c0e79e3c4                   // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 64], 17
	QUAD $0x1150d7740e79e3c4                   // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 80], 17
	QUAD $0x1160d77c0e79e3c4                   // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 96], 17
	QUAD $0x1170d7440e79e3c4                   // vpblendw    xmm0, xmm0, oword [rdi + 8*rdx + 112], 17
	LONG $0x384de3c4; WORD $0x01c0             // vinserti128    ymm0, ymm6, xmm0, 1
	LONG $0x3855e3c4; WORD $0x01ef             // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc0               // vpackusdw    ymm0, ymm5, ymm0
	LONG $0x2b7de2c4; BYTE $0xc0               // vpackusdw    ymm0, ymm0, ymm0
	LONG $0x386de3c4; WORD $0x01d4             // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01cb             // vinserti128    ymm1, ymm1, xmm3, 1
	LONG $0x2b75e2c4; BYTE $0xca               // vpackusdw    ymm1, ymm1, ymm2
	LONG $0x2b75e2c4; BYTE $0xc8               // vpackusdw    ymm1, ymm1, ymm0
	LONG $0xc06cf5c5                           // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0             // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0

LBB26_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB26_11

LBB26_10:
	LONG $0xcf04b70f         // movzx    eax, word [rdi + 8*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB26_10

LBB26_11:
	VZEROUPPER
	RET

LBB26_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB26_8
	JMP  LBB26_9

TEXT ·_cast_numeric_int64_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB27_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB27_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB27_10

LBB27_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB27_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB27_6:
	LONG $0x0e7963c4; WORD $0xd704; BYTE $0x11         // vpblendw    xmm8, xmm0, oword [rdi + 8*rdx], 17
	QUAD $0x1110d7540e79e3c4                           // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 16], 17
	QUAD $0x1120d75c0e79e3c4                           // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 32], 17
	QUAD $0x1130d7640e79e3c4                           // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 48], 17
	QUAD $0x1140d76c0e79e3c4                           // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 64], 17
	QUAD $0x1150d7740e79e3c4                           // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 80], 17
	QUAD $0x1160d77c0e79e3c4                           // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 96], 17
	QUAD $0x1170d74c0e79e3c4                           // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx + 112], 17
	LONG $0x384de3c4; WORD $0x01c9                     // vinserti128    ymm1, ymm6, xmm1, 1
	LONG $0x3855e3c4; WORD $0x01ef                     // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc9                       // vpackusdw    ymm1, ymm5, ymm1
	LONG $0x2b75e2c4; BYTE $0xc8                       // vpackusdw    ymm1, ymm1, ymm0
	LONG $0x386de3c4; WORD $0x01d4                     // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x383de3c4; WORD $0x01db                     // vinserti128    ymm3, ymm8, xmm3, 1
	LONG $0x2b65e2c4; BYTE $0xd2                       // vpackusdw    ymm2, ymm3, ymm2
	LONG $0x2b6de2c4; BYTE $0xd0                       // vpackusdw    ymm2, ymm2, ymm0
	LONG $0xc96cedc5                                   // vpunpcklqdq    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8c9                     // vpermq    ymm1, ymm1, 216
	LONG $0x0c7ffec5; BYTE $0x56                       // vmovdqu    yword [rsi + 2*rdx], ymm1
	QUAD $0x0080d7840e7963c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm8, xmm0, oword [rdi + 8*rdx + 128], 17
	QUAD $0x0090d7940e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 144], 17
	QUAD $0x00a0d79c0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 160], 17
	QUAD $0x00b0d7a40e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 176], 17
	QUAD $0x00c0d7ac0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 192], 17
	QUAD $0x00d0d7b40e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 208], 17
	QUAD $0x00e0d7bc0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 224], 17
	QUAD $0x00f0d78c0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx + 240], 17
	LONG $0x384de3c4; WORD $0x01c9                     // vinserti128    ymm1, ymm6, xmm1, 1
	LONG $0x3855e3c4; WORD $0x01ef                     // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc9                       // vpackusdw    ymm1, ymm5, ymm1
	LONG $0x2b75e2c4; BYTE $0xc8                       // vpackusdw    ymm1, ymm1, ymm0
	LONG $0x386de3c4; WORD $0x01d4                     // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x383de3c4; WORD $0x01db                     // vinserti128    ymm3, ymm8, xmm3, 1
	LONG $0x2b65e2c4; BYTE $0xd2                       // vpackusdw    ymm2, ymm3, ymm2
	LONG $0x2b6de2c4; BYTE $0xd0                       // vpackusdw    ymm2, ymm2, ymm0
	LONG $0xc96cedc5                                   // vpunpcklqdq    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8c9                     // vpermq    ymm1, ymm1, 216
	LONG $0x4c7ffec5; WORD $0x2056                     // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x20c28348                                   // add    rdx, 32
	LONG $0x02c08348                                   // add    rax, 2
	JNE  LBB27_6
	LONG $0x01c0f641                                   // test    r8b, 1
	JE   LBB27_9

LBB27_8:
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0e79e3c4; WORD $0xd70c; BYTE $0x11 // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx], 17
	QUAD $0x1110d7540e79e3c4                   // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 16], 17
	QUAD $0x1120d75c0e79e3c4                   // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 32], 17
	QUAD $0x1130d7640e79e3c4                   // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 48], 17
	QUAD $0x1140d76c0e79e3c4                   // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 64], 17
	QUAD $0x1150d7740e79e3c4                   // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 80], 17
	QUAD $0x1160d77c0e79e3c4                   // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 96], 17
	QUAD $0x1170d7440e79e3c4                   // vpblendw    xmm0, xmm0, oword [rdi + 8*rdx + 112], 17
	LONG $0x384de3c4; WORD $0x01c0             // vinserti128    ymm0, ymm6, xmm0, 1
	LONG $0x3855e3c4; WORD $0x01ef             // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc0               // vpackusdw    ymm0, ymm5, ymm0
	LONG $0x2b7de2c4; BYTE $0xc0               // vpackusdw    ymm0, ymm0, ymm0
	LONG $0x386de3c4; WORD $0x01d4             // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01cb             // vinserti128    ymm1, ymm1, xmm3, 1
	LONG $0x2b75e2c4; BYTE $0xca               // vpackusdw    ymm1, ymm1, ymm2
	LONG $0x2b75e2c4; BYTE $0xc8               // vpackusdw    ymm1, ymm1, ymm0
	LONG $0xc06cf5c5                           // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0             // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0

LBB27_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB27_11

LBB27_10:
	LONG $0xcf04b70f         // movzx    eax, word [rdi + 8*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB27_10

LBB27_11:
	VZEROUPPER
	RET

LBB27_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB27_8
	JMP  LBB27_9

TEXT ·_cast_numeric_float32_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB28_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB28_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB28_10

LBB28_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB28_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB28_6:
	LONG $0x045bfec5; BYTE $0x97         // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128    xmm1, ymm0, 1
	LONG $0x2b79e2c4; BYTE $0xc1         // vpackusdw    xmm0, xmm0, xmm1
	LONG $0x4c5bfec5; WORD $0x2097       // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0x2b71e2c4; BYTE $0xca         // vpackusdw    xmm1, xmm1, xmm2
	LONG $0x545bfec5; WORD $0x4097       // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0x2b69e2c4; BYTE $0xd3         // vpackusdw    xmm2, xmm2, xmm3
	LONG $0x5c5bfec5; WORD $0x6097       // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0x2b61e2c4; BYTE $0xdc         // vpackusdw    xmm3, xmm3, xmm4
	LONG $0x047ffac5; BYTE $0x56         // vmovdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7ffac5; WORD $0x1056       // vmovdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x547ffac5; WORD $0x2056       // vmovdqu    oword [rsi + 2*rdx + 32], xmm2
	LONG $0x5c7ffac5; WORD $0x3056       // vmovdqu    oword [rsi + 2*rdx + 48], xmm3
	QUAD $0x00008097845bfec5; BYTE $0x00 // vcvttps2dq    ymm0, yword [rdi + 4*rdx + 128]
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128    xmm1, ymm0, 1
	LONG $0x2b79e2c4; BYTE $0xc1         // vpackusdw    xmm0, xmm0, xmm1
	QUAD $0x0000a0978c5bfec5; BYTE $0x00 // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 160]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0x2b71e2c4; BYTE $0xca         // vpackusdw    xmm1, xmm1, xmm2
	QUAD $0x0000c097945bfec5; BYTE $0x00 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 192]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0x2b69e2c4; BYTE $0xd3         // vpackusdw    xmm2, xmm2, xmm3
	QUAD $0x0000e0979c5bfec5; BYTE $0x00 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 224]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0x2b61e2c4; BYTE $0xdc         // vpackusdw    xmm3, xmm3, xmm4
	LONG $0x447ffac5; WORD $0x4056       // vmovdqu    oword [rsi + 2*rdx + 64], xmm0
	LONG $0x4c7ffac5; WORD $0x5056       // vmovdqu    oword [rsi + 2*rdx + 80], xmm1
	LONG $0x547ffac5; WORD $0x6056       // vmovdqu    oword [rsi + 2*rdx + 96], xmm2
	LONG $0x5c7ffac5; WORD $0x7056       // vmovdqu    oword [rsi + 2*rdx + 112], xmm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB28_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB28_9

LBB28_8:
	LONG $0x045bfec5; BYTE $0x97   // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0x2b79e2c4; BYTE $0xc1   // vpackusdw    xmm0, xmm0, xmm1
	LONG $0x4c5bfec5; WORD $0x2097 // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x397de3c4; WORD $0x01ca // vextracti128    xmm2, ymm1, 1
	LONG $0x2b71e2c4; BYTE $0xca   // vpackusdw    xmm1, xmm1, xmm2
	LONG $0x545bfec5; WORD $0x4097 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x397de3c4; WORD $0x01d3 // vextracti128    xmm3, ymm2, 1
	LONG $0x2b69e2c4; BYTE $0xd3   // vpackusdw    xmm2, xmm2, xmm3
	LONG $0x5c5bfec5; WORD $0x6097 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x397de3c4; WORD $0x01dc // vextracti128    xmm4, ymm3, 1
	LONG $0x2b61e2c4; BYTE $0xdc   // vpackusdw    xmm3, xmm3, xmm4
	LONG $0x047ffac5; BYTE $0x56   // vmovdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7ffac5; WORD $0x1056 // vmovdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x547ffac5; WORD $0x2056 // vmovdqu    oword [rsi + 2*rdx + 32], xmm2
	LONG $0x5c7ffac5; WORD $0x3056 // vmovdqu    oword [rsi + 2*rdx + 48], xmm3

LBB28_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB28_11

LBB28_10:
	LONG $0x042cfac5; BYTE $0x8f // vcvttss2si    eax, dword [rdi + 4*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB28_10

LBB28_11:
	VZEROUPPER
	RET

LBB28_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB28_8
	JMP  LBB28_9

TEXT ·_cast_numeric_float64_uint16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB29_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB29_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB29_10

LBB29_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB29_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB29_6:
	LONG $0x04e6fdc5; BYTE $0xd7         // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0x4ce6fdc5; WORD $0x20d7       // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x54e6fdc5; WORD $0x40d7       // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0x5ce6fdc5; WORD $0x60d7       // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 96]
	LONG $0x186de3c4; WORD $0x01d3       // vinsertf128    ymm2, ymm2, xmm3, 1
	LONG $0x2b6de2c4; BYTE $0xd0         // vpackusdw    ymm2, ymm2, ymm0
	LONG $0x187de3c4; WORD $0x01c1       // vinsertf128    ymm0, ymm0, xmm1, 1
	LONG $0x2b7de2c4; BYTE $0xc0         // vpackusdw    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5                     // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0       // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x56         // vmovdqu    yword [rsi + 2*rdx], ymm0
	QUAD $0x000080d784e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d794e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 224]
	LONG $0x186de3c4; WORD $0x01d3       // vinsertf128    ymm2, ymm2, xmm3, 1
	LONG $0x2b6de2c4; BYTE $0xd0         // vpackusdw    ymm2, ymm2, ymm0
	LONG $0x187de3c4; WORD $0x01c1       // vinsertf128    ymm0, ymm0, xmm1, 1
	LONG $0x2b7de2c4; BYTE $0xc0         // vpackusdw    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5                     // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0       // vpermq    ymm0, ymm0, 216
	LONG $0x447ffec5; WORD $0x2056       // vmovdqu    yword [rsi + 2*rdx + 32], ymm0
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB29_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB29_9

LBB29_8:
	LONG $0x04e6fdc5; BYTE $0xd7   // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0x4ce6fdc5; WORD $0x20d7 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x54e6fdc5; WORD $0x40d7 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0x5ce6fdc5; WORD $0x60d7 // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 96]
	LONG $0x186de3c4; WORD $0x01d3 // vinsertf128    ymm2, ymm2, xmm3, 1
	LONG $0x2b6de2c4; BYTE $0xd0   // vpackusdw    ymm2, ymm2, ymm0
	LONG $0x187de3c4; WORD $0x01c1 // vinsertf128    ymm0, ymm0, xmm1, 1
	LONG $0x2b7de2c4; BYTE $0xc0   // vpackusdw    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5               // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0 // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x56   // vmovdqu    yword [rsi + 2*rdx], ymm0

LBB29_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB29_11

LBB29_10:
	LONG $0x042cfbc5; BYTE $0xcf // vcvttsd2si    eax, qword [rdi + 8*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB29_10

LBB29_11:
	VZEROUPPER
	RET

LBB29_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB29_8
	JMP  LBB29_9

TEXT ·_cast_numeric_uint8_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB30_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB30_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB30_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB30_9

LBB30_2:
	WORD $0xc931 // xor    ecx, ecx

LBB30_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB30_5

LBB30_4:
	LONG $0x0f04b60f // movzx    eax, byte [rdi + rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB30_4

LBB30_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB30_16

LBB30_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB30_6
	JMP  LBB30_16

LBB30_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	LONG $0xc0418d48         // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x06e8c149         // shr    r8, 6
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB30_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB30_12:
	LONG $0x307de2c4; WORD $0x1704             // vpmovzxbw    ymm0, oword [rdi + rdx]
	LONG $0x307de2c4; WORD $0x174c; BYTE $0x10 // vpmovzxbw    ymm1, oword [rdi + rdx + 16]
	LONG $0x307de2c4; WORD $0x1754; BYTE $0x20 // vpmovzxbw    ymm2, oword [rdi + rdx + 32]
	LONG $0x307de2c4; WORD $0x175c; BYTE $0x30 // vpmovzxbw    ymm3, oword [rdi + rdx + 48]
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2056             // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4056             // vmovdqu    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6056             // vmovdqu    yword [rsi + 2*rdx + 96], ymm3
	LONG $0x307de2c4; WORD $0x1744; BYTE $0x40 // vpmovzxbw    ymm0, oword [rdi + rdx + 64]
	LONG $0x307de2c4; WORD $0x174c; BYTE $0x50 // vpmovzxbw    ymm1, oword [rdi + rdx + 80]
	LONG $0x307de2c4; WORD $0x1754; BYTE $0x60 // vpmovzxbw    ymm2, oword [rdi + rdx + 96]
	LONG $0x307de2c4; WORD $0x175c; BYTE $0x70 // vpmovzxbw    ymm3, oword [rdi + rdx + 112]
	QUAD $0x00008056847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 128], ymm0
	QUAD $0x0000a0568c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 160], ymm1
	QUAD $0x0000c056947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 192], ymm2
	QUAD $0x0000e0569c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 224], ymm3
	LONG $0x80ea8348                           // sub    rdx, -128
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB30_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB30_15

LBB30_14:
	LONG $0x307de2c4; WORD $0x1704             // vpmovzxbw    ymm0, oword [rdi + rdx]
	LONG $0x307de2c4; WORD $0x174c; BYTE $0x10 // vpmovzxbw    ymm1, oword [rdi + rdx + 16]
	LONG $0x307de2c4; WORD $0x1754; BYTE $0x20 // vpmovzxbw    ymm2, oword [rdi + rdx + 32]
	LONG $0x307de2c4; WORD $0x175c; BYTE $0x30 // vpmovzxbw    ymm3, oword [rdi + rdx + 48]
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2056             // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4056             // vmovdqu    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6056             // vmovdqu    yword [rsi + 2*rdx + 96], ymm3

LBB30_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB30_3

LBB30_16:
	VZEROUPPER
	RET

LBB30_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB30_14
	JMP  LBB30_15

TEXT ·_cast_numeric_int8_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB31_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB31_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB31_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB31_9

LBB31_2:
	WORD $0xc931 // xor    ecx, ecx

LBB31_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB31_5

LBB31_4:
	LONG $0x0f04be0f // movsx    eax, byte [rdi + rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB31_4

LBB31_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB31_16

LBB31_6:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x0f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rcx + 1]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x0f44be0f; BYTE $0x02 // movsx    eax, byte [rdi + rcx + 2]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x0f44be0f; BYTE $0x03 // movsx    eax, byte [rdi + rcx + 3]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB31_6
	JMP  LBB31_16

LBB31_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	LONG $0xc0418d48         // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x06e8c149         // shr    r8, 6
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB31_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB31_12:
	LONG $0x207de2c4; WORD $0x1704             // vpmovsxbw    ymm0, oword [rdi + rdx]
	LONG $0x207de2c4; WORD $0x174c; BYTE $0x10 // vpmovsxbw    ymm1, oword [rdi + rdx + 16]
	LONG $0x207de2c4; WORD $0x1754; BYTE $0x20 // vpmovsxbw    ymm2, oword [rdi + rdx + 32]
	LONG $0x207de2c4; WORD $0x175c; BYTE $0x30 // vpmovsxbw    ymm3, oword [rdi + rdx + 48]
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2056             // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4056             // vmovdqu    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6056             // vmovdqu    yword [rsi + 2*rdx + 96], ymm3
	LONG $0x207de2c4; WORD $0x1744; BYTE $0x40 // vpmovsxbw    ymm0, oword [rdi + rdx + 64]
	LONG $0x207de2c4; WORD $0x174c; BYTE $0x50 // vpmovsxbw    ymm1, oword [rdi + rdx + 80]
	LONG $0x207de2c4; WORD $0x1754; BYTE $0x60 // vpmovsxbw    ymm2, oword [rdi + rdx + 96]
	LONG $0x207de2c4; WORD $0x175c; BYTE $0x70 // vpmovsxbw    ymm3, oword [rdi + rdx + 112]
	QUAD $0x00008056847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 128], ymm0
	QUAD $0x0000a0568c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 160], ymm1
	QUAD $0x0000c056947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 192], ymm2
	QUAD $0x0000e0569c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 2*rdx + 224], ymm3
	LONG $0x80ea8348                           // sub    rdx, -128
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB31_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB31_15

LBB31_14:
	LONG $0x207de2c4; WORD $0x1704             // vpmovsxbw    ymm0, oword [rdi + rdx]
	LONG $0x207de2c4; WORD $0x174c; BYTE $0x10 // vpmovsxbw    ymm1, oword [rdi + rdx + 16]
	LONG $0x207de2c4; WORD $0x1754; BYTE $0x20 // vpmovsxbw    ymm2, oword [rdi + rdx + 32]
	LONG $0x207de2c4; WORD $0x175c; BYTE $0x30 // vpmovsxbw    ymm3, oword [rdi + rdx + 48]
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2056             // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4056             // vmovdqu    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6056             // vmovdqu    yword [rsi + 2*rdx + 96], ymm3

LBB31_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB31_3

LBB31_16:
	VZEROUPPER
	RET

LBB31_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB31_14
	JMP  LBB31_15

TEXT ·_cast_numeric_uint16_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB32_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB32_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB32_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB32_9

LBB32_2:
	WORD $0xc931 // xor    ecx, ecx

LBB32_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB32_5

LBB32_4:
	LONG $0x4f04b70f // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB32_4

LBB32_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB32_16

LBB32_6:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x4f44b70f; BYTE $0x02 // movzx    eax, word [rdi + 2*rcx + 2]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x4f44b70f; BYTE $0x04 // movzx    eax, word [rdi + 2*rcx + 4]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x4f44b70f; BYTE $0x06 // movzx    eax, word [rdi + 2*rcx + 6]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB32_6
	JMP  LBB32_16

LBB32_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	LONG $0xc0418d48         // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x06e8c149         // shr    r8, 6
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB32_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB32_12:
	LONG $0x0410fcc5; BYTE $0x57         // vmovups    ymm0, yword [rdi + 2*rdx]
	LONG $0x4c10fcc5; WORD $0x2057       // vmovups    ymm1, yword [rdi + 2*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4057       // vmovups    ymm2, yword [rdi + 2*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6057       // vmovups    ymm3, yword [rdi + 2*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x56         // vmovups    yword [rsi + 2*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2056       // vmovups    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4056       // vmovups    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6056       // vmovups    yword [rsi + 2*rdx + 96], ymm3
	QUAD $0x000080578410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 2*rdx + 128]
	QUAD $0x0000a0578c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 2*rdx + 160]
	QUAD $0x0000c0579410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 2*rdx + 192]
	QUAD $0x0000e0579c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 2*rdx + 224]
	QUAD $0x000080568411fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 128], ymm0
	QUAD $0x0000a0568c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 160], ymm1
	QUAD $0x0000c0569411fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 192], ymm2
	QUAD $0x0000e0569c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 224], ymm3
	LONG $0x80ea8348                     // sub    rdx, -128
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB32_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB32_15

LBB32_14:
	LONG $0x0410fcc5; BYTE $0x57   // vmovups    ymm0, yword [rdi + 2*rdx]
	LONG $0x4c10fcc5; WORD $0x2057 // vmovups    ymm1, yword [rdi + 2*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4057 // vmovups    ymm2, yword [rdi + 2*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6057 // vmovups    ymm3, yword [rdi + 2*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x56   // vmovups    yword [rsi + 2*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2056 // vmovups    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4056 // vmovups    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6056 // vmovups    yword [rsi + 2*rdx + 96], ymm3

LBB32_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB32_3

LBB32_16:
	VZEROUPPER
	RET

LBB32_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB32_14
	JMP  LBB32_15

TEXT ·_cast_numeric_int16_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB33_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x3f // cmp    edx, 63
	JBE  LBB33_2
	LONG $0x4f048d4a         // lea    rax, [rdi + 2*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB33_9
	LONG $0x4e048d4a         // lea    rax, [rsi + 2*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB33_9

LBB33_2:
	WORD $0xc931 // xor    ecx, ecx

LBB33_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB33_5

LBB33_4:
	LONG $0x4f04b70f // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966 // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB33_4

LBB33_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB33_16

LBB33_6:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x4f44b70f; BYTE $0x02 // movzx    eax, word [rdi + 2*rcx + 2]
	LONG $0x4e448966; BYTE $0x02 // mov    word [rsi + 2*rcx + 2], ax
	LONG $0x4f44b70f; BYTE $0x04 // movzx    eax, word [rdi + 2*rcx + 4]
	LONG $0x4e448966; BYTE $0x04 // mov    word [rsi + 2*rcx + 4], ax
	LONG $0x4f44b70f; BYTE $0x06 // movzx    eax, word [rdi + 2*rcx + 6]
	LONG $0x4e448966; BYTE $0x06 // mov    word [rsi + 2*rcx + 6], ax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB33_6
	JMP  LBB33_16

LBB33_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xc0 // and    ecx, -64
	LONG $0xc0418d48         // lea    rax, [rcx - 64]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x06e8c149         // shr    r8, 6
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB33_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB33_12:
	LONG $0x0410fcc5; BYTE $0x57         // vmovups    ymm0, yword [rdi + 2*rdx]
	LONG $0x4c10fcc5; WORD $0x2057       // vmovups    ymm1, yword [rdi + 2*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4057       // vmovups    ymm2, yword [rdi + 2*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6057       // vmovups    ymm3, yword [rdi + 2*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x56         // vmovups    yword [rsi + 2*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2056       // vmovups    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4056       // vmovups    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6056       // vmovups    yword [rsi + 2*rdx + 96], ymm3
	QUAD $0x000080578410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 2*rdx + 128]
	QUAD $0x0000a0578c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 2*rdx + 160]
	QUAD $0x0000c0579410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 2*rdx + 192]
	QUAD $0x0000e0579c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 2*rdx + 224]
	QUAD $0x000080568411fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 128], ymm0
	QUAD $0x0000a0568c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 160], ymm1
	QUAD $0x0000c0569411fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 192], ymm2
	QUAD $0x0000e0569c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 2*rdx + 224], ymm3
	LONG $0x80ea8348                     // sub    rdx, -128
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB33_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB33_15

LBB33_14:
	LONG $0x0410fcc5; BYTE $0x57   // vmovups    ymm0, yword [rdi + 2*rdx]
	LONG $0x4c10fcc5; WORD $0x2057 // vmovups    ymm1, yword [rdi + 2*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4057 // vmovups    ymm2, yword [rdi + 2*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6057 // vmovups    ymm3, yword [rdi + 2*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x56   // vmovups    yword [rsi + 2*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2056 // vmovups    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4056 // vmovups    yword [rsi + 2*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6056 // vmovups    yword [rsi + 2*rdx + 96], ymm3

LBB33_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB33_3

LBB33_16:
	VZEROUPPER
	RET

LBB33_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB33_14
	JMP  LBB33_15

DATA LCDATA15<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA15<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA15<>+0x010(SB)/8, $0x1d1c191815141110
DATA LCDATA15<>+0x018(SB)/8, $0x1f1e1d1c1d1c1918
GLOBL LCDATA15<>(SB), 8, $32

TEXT ·_cast_numeric_uint32_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA15<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB34_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB34_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB34_10

LBB34_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xe0418d48             // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x05e8c149             // shr    r8, 5
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB34_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI34_0] */

LBB34_6:
	LONG $0x0c6ffec5; BYTE $0x97         // vmovdqu    ymm1, yword [rdi + 4*rdx]
	LONG $0x546ffec5; WORD $0x2097       // vmovdqu    ymm2, yword [rdi + 4*rdx + 32]
	LONG $0x5c6ffec5; WORD $0x4097       // vmovdqu    ymm3, yword [rdi + 4*rdx + 64]
	LONG $0x646ffec5; WORD $0x6097       // vmovdqu    ymm4, yword [rdi + 4*rdx + 96]
	LONG $0x0075e2c4; BYTE $0xc8         // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9       // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0         // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2       // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm3, ymm0
	LONG $0x00fde3c4; WORD $0xe8db       // vpermq    ymm3, ymm3, 232
	LONG $0x005de2c4; BYTE $0xe0         // vpshufb    ymm4, ymm4, ymm0
	LONG $0x00fde3c4; WORD $0xe8e4       // vpermq    ymm4, ymm4, 232
	LONG $0x0c7ffac5; BYTE $0x56         // vmovdqu    oword [rsi + 2*rdx], xmm1
	LONG $0x547ffac5; WORD $0x1056       // vmovdqu    oword [rsi + 2*rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2056       // vmovdqu    oword [rsi + 2*rdx + 32], xmm3
	LONG $0x647ffac5; WORD $0x3056       // vmovdqu    oword [rsi + 2*rdx + 48], xmm4
	QUAD $0x000080978c6ffec5; BYTE $0x00 // vmovdqu    ymm1, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a097946ffec5; BYTE $0x00 // vmovdqu    ymm2, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979c6ffec5; BYTE $0x00 // vmovdqu    ymm3, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e097a46ffec5; BYTE $0x00 // vmovdqu    ymm4, yword [rdi + 4*rdx + 224]
	LONG $0x0075e2c4; BYTE $0xc8         // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9       // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0         // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2       // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm3, ymm0
	LONG $0x00fde3c4; WORD $0xe8db       // vpermq    ymm3, ymm3, 232
	LONG $0x005de2c4; BYTE $0xe0         // vpshufb    ymm4, ymm4, ymm0
	LONG $0x00fde3c4; WORD $0xe8e4       // vpermq    ymm4, ymm4, 232
	LONG $0x4c7ffac5; WORD $0x4056       // vmovdqu    oword [rsi + 2*rdx + 64], xmm1
	LONG $0x547ffac5; WORD $0x5056       // vmovdqu    oword [rsi + 2*rdx + 80], xmm2
	LONG $0x5c7ffac5; WORD $0x6056       // vmovdqu    oword [rsi + 2*rdx + 96], xmm3
	LONG $0x647ffac5; WORD $0x7056       // vmovdqu    oword [rsi + 2*rdx + 112], xmm4
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB34_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB34_9

LBB34_8:
	LONG $0x046ffec5; BYTE $0x97   // vmovdqu    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c6ffec5; WORD $0x2097 // vmovdqu    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x546ffec5; WORD $0x4097 // vmovdqu    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c6ffec5; WORD $0x6097 // vmovdqu    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x656ffdc5; BYTE $0x00   // vmovdqa    ymm4, yword 0[rbp] /* [rip + .LCPI34_0] */
	LONG $0x007de2c4; BYTE $0xc4   // vpshufb    ymm0, ymm0, ymm4
	LONG $0x00fde3c4; WORD $0xe8c0 // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xcc   // vpshufb    ymm1, ymm1, ymm4
	LONG $0x00fde3c4; WORD $0xe8c9 // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd4   // vpshufb    ymm2, ymm2, ymm4
	LONG $0x00fde3c4; WORD $0xe8d2 // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xdc   // vpshufb    ymm3, ymm3, ymm4
	LONG $0x00fde3c4; WORD $0xe8db // vpermq    ymm3, ymm3, 232
	LONG $0x047ffac5; BYTE $0x56   // vmovdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7ffac5; WORD $0x1056 // vmovdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x547ffac5; WORD $0x2056 // vmovdqu    oword [rsi + 2*rdx + 32], xmm2
	LONG $0x5c7ffac5; WORD $0x3056 // vmovdqu    oword [rsi + 2*rdx + 48], xmm3

LBB34_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB34_11

LBB34_10:
	LONG $0x8f04b70f         // movzx    eax, word [rdi + 4*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB34_10

LBB34_11:
	VZEROUPPER
	RET

LBB34_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB34_8
	JMP  LBB34_9

DATA LCDATA16<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA16<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA16<>+0x010(SB)/8, $0x1d1c191815141110
DATA LCDATA16<>+0x018(SB)/8, $0x1f1e1d1c1d1c1918
GLOBL LCDATA16<>(SB), 8, $32

TEXT ·_cast_numeric_int32_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA16<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB35_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB35_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB35_10

LBB35_3:
	WORD $0x8944; BYTE $0xc9     // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0     // and    ecx, -32
	LONG $0xe0418d48             // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x05e8c149             // shr    r8, 5
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB35_4
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0xfee08348             // and    rax, -2
	WORD $0xf748; BYTE $0xd8     // neg    rax
	WORD $0xd231                 // xor    edx, edx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI35_0] */

LBB35_6:
	LONG $0x0c6ffec5; BYTE $0x97         // vmovdqu    ymm1, yword [rdi + 4*rdx]
	LONG $0x546ffec5; WORD $0x2097       // vmovdqu    ymm2, yword [rdi + 4*rdx + 32]
	LONG $0x5c6ffec5; WORD $0x4097       // vmovdqu    ymm3, yword [rdi + 4*rdx + 64]
	LONG $0x646ffec5; WORD $0x6097       // vmovdqu    ymm4, yword [rdi + 4*rdx + 96]
	LONG $0x0075e2c4; BYTE $0xc8         // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9       // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0         // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2       // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm3, ymm0
	LONG $0x00fde3c4; WORD $0xe8db       // vpermq    ymm3, ymm3, 232
	LONG $0x005de2c4; BYTE $0xe0         // vpshufb    ymm4, ymm4, ymm0
	LONG $0x00fde3c4; WORD $0xe8e4       // vpermq    ymm4, ymm4, 232
	LONG $0x0c7ffac5; BYTE $0x56         // vmovdqu    oword [rsi + 2*rdx], xmm1
	LONG $0x547ffac5; WORD $0x1056       // vmovdqu    oword [rsi + 2*rdx + 16], xmm2
	LONG $0x5c7ffac5; WORD $0x2056       // vmovdqu    oword [rsi + 2*rdx + 32], xmm3
	LONG $0x647ffac5; WORD $0x3056       // vmovdqu    oword [rsi + 2*rdx + 48], xmm4
	QUAD $0x000080978c6ffec5; BYTE $0x00 // vmovdqu    ymm1, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a097946ffec5; BYTE $0x00 // vmovdqu    ymm2, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979c6ffec5; BYTE $0x00 // vmovdqu    ymm3, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e097a46ffec5; BYTE $0x00 // vmovdqu    ymm4, yword [rdi + 4*rdx + 224]
	LONG $0x0075e2c4; BYTE $0xc8         // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9       // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd0         // vpshufb    ymm2, ymm2, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2       // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xd8         // vpshufb    ymm3, ymm3, ymm0
	LONG $0x00fde3c4; WORD $0xe8db       // vpermq    ymm3, ymm3, 232
	LONG $0x005de2c4; BYTE $0xe0         // vpshufb    ymm4, ymm4, ymm0
	LONG $0x00fde3c4; WORD $0xe8e4       // vpermq    ymm4, ymm4, 232
	LONG $0x4c7ffac5; WORD $0x4056       // vmovdqu    oword [rsi + 2*rdx + 64], xmm1
	LONG $0x547ffac5; WORD $0x5056       // vmovdqu    oword [rsi + 2*rdx + 80], xmm2
	LONG $0x5c7ffac5; WORD $0x6056       // vmovdqu    oword [rsi + 2*rdx + 96], xmm3
	LONG $0x647ffac5; WORD $0x7056       // vmovdqu    oword [rsi + 2*rdx + 112], xmm4
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB35_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB35_9

LBB35_8:
	LONG $0x046ffec5; BYTE $0x97   // vmovdqu    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c6ffec5; WORD $0x2097 // vmovdqu    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x546ffec5; WORD $0x4097 // vmovdqu    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c6ffec5; WORD $0x6097 // vmovdqu    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x656ffdc5; BYTE $0x00   // vmovdqa    ymm4, yword 0[rbp] /* [rip + .LCPI35_0] */
	LONG $0x007de2c4; BYTE $0xc4   // vpshufb    ymm0, ymm0, ymm4
	LONG $0x00fde3c4; WORD $0xe8c0 // vpermq    ymm0, ymm0, 232
	LONG $0x0075e2c4; BYTE $0xcc   // vpshufb    ymm1, ymm1, ymm4
	LONG $0x00fde3c4; WORD $0xe8c9 // vpermq    ymm1, ymm1, 232
	LONG $0x006de2c4; BYTE $0xd4   // vpshufb    ymm2, ymm2, ymm4
	LONG $0x00fde3c4; WORD $0xe8d2 // vpermq    ymm2, ymm2, 232
	LONG $0x0065e2c4; BYTE $0xdc   // vpshufb    ymm3, ymm3, ymm4
	LONG $0x00fde3c4; WORD $0xe8db // vpermq    ymm3, ymm3, 232
	LONG $0x047ffac5; BYTE $0x56   // vmovdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7ffac5; WORD $0x1056 // vmovdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x547ffac5; WORD $0x2056 // vmovdqu    oword [rsi + 2*rdx + 32], xmm2
	LONG $0x5c7ffac5; WORD $0x3056 // vmovdqu    oword [rsi + 2*rdx + 48], xmm3

LBB35_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB35_11

LBB35_10:
	LONG $0x8f04b70f         // movzx    eax, word [rdi + 4*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB35_10

LBB35_11:
	VZEROUPPER
	RET

LBB35_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB35_8
	JMP  LBB35_9

TEXT ·_cast_numeric_uint64_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB36_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB36_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB36_10

LBB36_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB36_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB36_6:
	LONG $0x0e7963c4; WORD $0xd704; BYTE $0x11         // vpblendw    xmm8, xmm0, oword [rdi + 8*rdx], 17
	QUAD $0x1110d7540e79e3c4                           // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 16], 17
	QUAD $0x1120d75c0e79e3c4                           // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 32], 17
	QUAD $0x1130d7640e79e3c4                           // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 48], 17
	QUAD $0x1140d76c0e79e3c4                           // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 64], 17
	QUAD $0x1150d7740e79e3c4                           // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 80], 17
	QUAD $0x1160d77c0e79e3c4                           // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 96], 17
	QUAD $0x1170d74c0e79e3c4                           // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx + 112], 17
	LONG $0x384de3c4; WORD $0x01c9                     // vinserti128    ymm1, ymm6, xmm1, 1
	LONG $0x3855e3c4; WORD $0x01ef                     // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc9                       // vpackusdw    ymm1, ymm5, ymm1
	LONG $0x2b75e2c4; BYTE $0xc8                       // vpackusdw    ymm1, ymm1, ymm0
	LONG $0x386de3c4; WORD $0x01d4                     // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x383de3c4; WORD $0x01db                     // vinserti128    ymm3, ymm8, xmm3, 1
	LONG $0x2b65e2c4; BYTE $0xd2                       // vpackusdw    ymm2, ymm3, ymm2
	LONG $0x2b6de2c4; BYTE $0xd0                       // vpackusdw    ymm2, ymm2, ymm0
	LONG $0xc96cedc5                                   // vpunpcklqdq    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8c9                     // vpermq    ymm1, ymm1, 216
	LONG $0x0c7ffec5; BYTE $0x56                       // vmovdqu    yword [rsi + 2*rdx], ymm1
	QUAD $0x0080d7840e7963c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm8, xmm0, oword [rdi + 8*rdx + 128], 17
	QUAD $0x0090d7940e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 144], 17
	QUAD $0x00a0d79c0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 160], 17
	QUAD $0x00b0d7a40e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 176], 17
	QUAD $0x00c0d7ac0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 192], 17
	QUAD $0x00d0d7b40e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 208], 17
	QUAD $0x00e0d7bc0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 224], 17
	QUAD $0x00f0d78c0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx + 240], 17
	LONG $0x384de3c4; WORD $0x01c9                     // vinserti128    ymm1, ymm6, xmm1, 1
	LONG $0x3855e3c4; WORD $0x01ef                     // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc9                       // vpackusdw    ymm1, ymm5, ymm1
	LONG $0x2b75e2c4; BYTE $0xc8                       // vpackusdw    ymm1, ymm1, ymm0
	LONG $0x386de3c4; WORD $0x01d4                     // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x383de3c4; WORD $0x01db                     // vinserti128    ymm3, ymm8, xmm3, 1
	LONG $0x2b65e2c4; BYTE $0xd2                       // vpackusdw    ymm2, ymm3, ymm2
	LONG $0x2b6de2c4; BYTE $0xd0                       // vpackusdw    ymm2, ymm2, ymm0
	LONG $0xc96cedc5                                   // vpunpcklqdq    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8c9                     // vpermq    ymm1, ymm1, 216
	LONG $0x4c7ffec5; WORD $0x2056                     // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x20c28348                                   // add    rdx, 32
	LONG $0x02c08348                                   // add    rax, 2
	JNE  LBB36_6
	LONG $0x01c0f641                                   // test    r8b, 1
	JE   LBB36_9

LBB36_8:
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0e79e3c4; WORD $0xd70c; BYTE $0x11 // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx], 17
	QUAD $0x1110d7540e79e3c4                   // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 16], 17
	QUAD $0x1120d75c0e79e3c4                   // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 32], 17
	QUAD $0x1130d7640e79e3c4                   // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 48], 17
	QUAD $0x1140d76c0e79e3c4                   // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 64], 17
	QUAD $0x1150d7740e79e3c4                   // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 80], 17
	QUAD $0x1160d77c0e79e3c4                   // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 96], 17
	QUAD $0x1170d7440e79e3c4                   // vpblendw    xmm0, xmm0, oword [rdi + 8*rdx + 112], 17
	LONG $0x384de3c4; WORD $0x01c0             // vinserti128    ymm0, ymm6, xmm0, 1
	LONG $0x3855e3c4; WORD $0x01ef             // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc0               // vpackusdw    ymm0, ymm5, ymm0
	LONG $0x2b7de2c4; BYTE $0xc0               // vpackusdw    ymm0, ymm0, ymm0
	LONG $0x386de3c4; WORD $0x01d4             // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01cb             // vinserti128    ymm1, ymm1, xmm3, 1
	LONG $0x2b75e2c4; BYTE $0xca               // vpackusdw    ymm1, ymm1, ymm2
	LONG $0x2b75e2c4; BYTE $0xc8               // vpackusdw    ymm1, ymm1, ymm0
	LONG $0xc06cf5c5                           // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0             // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0

LBB36_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB36_11

LBB36_10:
	LONG $0xcf04b70f         // movzx    eax, word [rdi + 8*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB36_10

LBB36_11:
	VZEROUPPER
	RET

LBB36_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB36_8
	JMP  LBB36_9

TEXT ·_cast_numeric_int64_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB37_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB37_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB37_10

LBB37_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB37_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0

LBB37_6:
	LONG $0x0e7963c4; WORD $0xd704; BYTE $0x11         // vpblendw    xmm8, xmm0, oword [rdi + 8*rdx], 17
	QUAD $0x1110d7540e79e3c4                           // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 16], 17
	QUAD $0x1120d75c0e79e3c4                           // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 32], 17
	QUAD $0x1130d7640e79e3c4                           // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 48], 17
	QUAD $0x1140d76c0e79e3c4                           // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 64], 17
	QUAD $0x1150d7740e79e3c4                           // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 80], 17
	QUAD $0x1160d77c0e79e3c4                           // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 96], 17
	QUAD $0x1170d74c0e79e3c4                           // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx + 112], 17
	LONG $0x384de3c4; WORD $0x01c9                     // vinserti128    ymm1, ymm6, xmm1, 1
	LONG $0x3855e3c4; WORD $0x01ef                     // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc9                       // vpackusdw    ymm1, ymm5, ymm1
	LONG $0x2b75e2c4; BYTE $0xc8                       // vpackusdw    ymm1, ymm1, ymm0
	LONG $0x386de3c4; WORD $0x01d4                     // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x383de3c4; WORD $0x01db                     // vinserti128    ymm3, ymm8, xmm3, 1
	LONG $0x2b65e2c4; BYTE $0xd2                       // vpackusdw    ymm2, ymm3, ymm2
	LONG $0x2b6de2c4; BYTE $0xd0                       // vpackusdw    ymm2, ymm2, ymm0
	LONG $0xc96cedc5                                   // vpunpcklqdq    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8c9                     // vpermq    ymm1, ymm1, 216
	LONG $0x0c7ffec5; BYTE $0x56                       // vmovdqu    yword [rsi + 2*rdx], ymm1
	QUAD $0x0080d7840e7963c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm8, xmm0, oword [rdi + 8*rdx + 128], 17
	QUAD $0x0090d7940e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 144], 17
	QUAD $0x00a0d79c0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 160], 17
	QUAD $0x00b0d7a40e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 176], 17
	QUAD $0x00c0d7ac0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 192], 17
	QUAD $0x00d0d7b40e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 208], 17
	QUAD $0x00e0d7bc0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 224], 17
	QUAD $0x00f0d78c0e79e3c4; WORD $0x0000; BYTE $0x11 // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx + 240], 17
	LONG $0x384de3c4; WORD $0x01c9                     // vinserti128    ymm1, ymm6, xmm1, 1
	LONG $0x3855e3c4; WORD $0x01ef                     // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc9                       // vpackusdw    ymm1, ymm5, ymm1
	LONG $0x2b75e2c4; BYTE $0xc8                       // vpackusdw    ymm1, ymm1, ymm0
	LONG $0x386de3c4; WORD $0x01d4                     // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x383de3c4; WORD $0x01db                     // vinserti128    ymm3, ymm8, xmm3, 1
	LONG $0x2b65e2c4; BYTE $0xd2                       // vpackusdw    ymm2, ymm3, ymm2
	LONG $0x2b6de2c4; BYTE $0xd0                       // vpackusdw    ymm2, ymm2, ymm0
	LONG $0xc96cedc5                                   // vpunpcklqdq    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8c9                     // vpermq    ymm1, ymm1, 216
	LONG $0x4c7ffec5; WORD $0x2056                     // vmovdqu    yword [rsi + 2*rdx + 32], ymm1
	LONG $0x20c28348                                   // add    rdx, 32
	LONG $0x02c08348                                   // add    rax, 2
	JNE  LBB37_6
	LONG $0x01c0f641                                   // test    r8b, 1
	JE   LBB37_9

LBB37_8:
	LONG $0xc0eff9c5                           // vpxor    xmm0, xmm0, xmm0
	LONG $0x0e79e3c4; WORD $0xd70c; BYTE $0x11 // vpblendw    xmm1, xmm0, oword [rdi + 8*rdx], 17
	QUAD $0x1110d7540e79e3c4                   // vpblendw    xmm2, xmm0, oword [rdi + 8*rdx + 16], 17
	QUAD $0x1120d75c0e79e3c4                   // vpblendw    xmm3, xmm0, oword [rdi + 8*rdx + 32], 17
	QUAD $0x1130d7640e79e3c4                   // vpblendw    xmm4, xmm0, oword [rdi + 8*rdx + 48], 17
	QUAD $0x1140d76c0e79e3c4                   // vpblendw    xmm5, xmm0, oword [rdi + 8*rdx + 64], 17
	QUAD $0x1150d7740e79e3c4                   // vpblendw    xmm6, xmm0, oword [rdi + 8*rdx + 80], 17
	QUAD $0x1160d77c0e79e3c4                   // vpblendw    xmm7, xmm0, oword [rdi + 8*rdx + 96], 17
	QUAD $0x1170d7440e79e3c4                   // vpblendw    xmm0, xmm0, oword [rdi + 8*rdx + 112], 17
	LONG $0x384de3c4; WORD $0x01c0             // vinserti128    ymm0, ymm6, xmm0, 1
	LONG $0x3855e3c4; WORD $0x01ef             // vinserti128    ymm5, ymm5, xmm7, 1
	LONG $0x2b55e2c4; BYTE $0xc0               // vpackusdw    ymm0, ymm5, ymm0
	LONG $0x2b7de2c4; BYTE $0xc0               // vpackusdw    ymm0, ymm0, ymm0
	LONG $0x386de3c4; WORD $0x01d4             // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01cb             // vinserti128    ymm1, ymm1, xmm3, 1
	LONG $0x2b75e2c4; BYTE $0xca               // vpackusdw    ymm1, ymm1, ymm2
	LONG $0x2b75e2c4; BYTE $0xc8               // vpackusdw    ymm1, ymm1, ymm0
	LONG $0xc06cf5c5                           // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0             // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x56               // vmovdqu    yword [rsi + 2*rdx], ymm0

LBB37_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB37_11

LBB37_10:
	LONG $0xcf04b70f         // movzx    eax, word [rdi + 8*rcx]
	LONG $0x4e048966         // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB37_10

LBB37_11:
	VZEROUPPER
	RET

LBB37_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB37_8
	JMP  LBB37_9

TEXT ·_cast_numeric_float32_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB38_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB38_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB38_10

LBB38_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB38_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB38_6:
	LONG $0x045bfec5; BYTE $0x97         // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128    xmm1, ymm0, 1
	LONG $0xc16bf9c5                     // vpackssdw    xmm0, xmm0, xmm1
	LONG $0x4c5bfec5; WORD $0x2097       // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca6bf1c5                     // vpackssdw    xmm1, xmm1, xmm2
	LONG $0x545bfec5; WORD $0x4097       // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd36be9c5                     // vpackssdw    xmm2, xmm2, xmm3
	LONG $0x5c5bfec5; WORD $0x6097       // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc6be1c5                     // vpackssdw    xmm3, xmm3, xmm4
	LONG $0x047ffac5; BYTE $0x56         // vmovdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7ffac5; WORD $0x1056       // vmovdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x547ffac5; WORD $0x2056       // vmovdqu    oword [rsi + 2*rdx + 32], xmm2
	LONG $0x5c7ffac5; WORD $0x3056       // vmovdqu    oword [rsi + 2*rdx + 48], xmm3
	QUAD $0x00008097845bfec5; BYTE $0x00 // vcvttps2dq    ymm0, yword [rdi + 4*rdx + 128]
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128    xmm1, ymm0, 1
	LONG $0xc16bf9c5                     // vpackssdw    xmm0, xmm0, xmm1
	QUAD $0x0000a0978c5bfec5; BYTE $0x00 // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 160]
	LONG $0x397de3c4; WORD $0x01ca       // vextracti128    xmm2, ymm1, 1
	LONG $0xca6bf1c5                     // vpackssdw    xmm1, xmm1, xmm2
	QUAD $0x0000c097945bfec5; BYTE $0x00 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 192]
	LONG $0x397de3c4; WORD $0x01d3       // vextracti128    xmm3, ymm2, 1
	LONG $0xd36be9c5                     // vpackssdw    xmm2, xmm2, xmm3
	QUAD $0x0000e0979c5bfec5; BYTE $0x00 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 224]
	LONG $0x397de3c4; WORD $0x01dc       // vextracti128    xmm4, ymm3, 1
	LONG $0xdc6be1c5                     // vpackssdw    xmm3, xmm3, xmm4
	LONG $0x447ffac5; WORD $0x4056       // vmovdqu    oword [rsi + 2*rdx + 64], xmm0
	LONG $0x4c7ffac5; WORD $0x5056       // vmovdqu    oword [rsi + 2*rdx + 80], xmm1
	LONG $0x547ffac5; WORD $0x6056       // vmovdqu    oword [rsi + 2*rdx + 96], xmm2
	LONG $0x5c7ffac5; WORD $0x7056       // vmovdqu    oword [rsi + 2*rdx + 112], xmm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB38_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB38_9

LBB38_8:
	LONG $0x045bfec5; BYTE $0x97   // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc16bf9c5               // vpackssdw    xmm0, xmm0, xmm1
	LONG $0x4c5bfec5; WORD $0x2097 // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x397de3c4; WORD $0x01ca // vextracti128    xmm2, ymm1, 1
	LONG $0xca6bf1c5               // vpackssdw    xmm1, xmm1, xmm2
	LONG $0x545bfec5; WORD $0x4097 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x397de3c4; WORD $0x01d3 // vextracti128    xmm3, ymm2, 1
	LONG $0xd36be9c5               // vpackssdw    xmm2, xmm2, xmm3
	LONG $0x5c5bfec5; WORD $0x6097 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x397de3c4; WORD $0x01dc // vextracti128    xmm4, ymm3, 1
	LONG $0xdc6be1c5               // vpackssdw    xmm3, xmm3, xmm4
	LONG $0x047ffac5; BYTE $0x56   // vmovdqu    oword [rsi + 2*rdx], xmm0
	LONG $0x4c7ffac5; WORD $0x1056 // vmovdqu    oword [rsi + 2*rdx + 16], xmm1
	LONG $0x547ffac5; WORD $0x2056 // vmovdqu    oword [rsi + 2*rdx + 32], xmm2
	LONG $0x5c7ffac5; WORD $0x3056 // vmovdqu    oword [rsi + 2*rdx + 48], xmm3

LBB38_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB38_11

LBB38_10:
	LONG $0x042cfac5; BYTE $0x8f // vcvttss2si    eax, dword [rdi + 4*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB38_10

LBB38_11:
	VZEROUPPER
	RET

LBB38_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB38_8
	JMP  LBB38_9

TEXT ·_cast_numeric_float64_int16_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB39_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB39_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB39_10

LBB39_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB39_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB39_6:
	LONG $0x04e6fdc5; BYTE $0xd7         // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0x4ce6fdc5; WORD $0x20d7       // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x54e6fdc5; WORD $0x40d7       // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0x5ce6fdc5; WORD $0x60d7       // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 96]
	LONG $0x186de3c4; WORD $0x01d3       // vinsertf128    ymm2, ymm2, xmm3, 1
	LONG $0xd06bedc5                     // vpackssdw    ymm2, ymm2, ymm0
	LONG $0x187de3c4; WORD $0x01c1       // vinsertf128    ymm0, ymm0, xmm1, 1
	LONG $0xc06bfdc5                     // vpackssdw    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5                     // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0       // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x56         // vmovdqu    yword [rsi + 2*rdx], ymm0
	QUAD $0x000080d784e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d794e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 224]
	LONG $0x186de3c4; WORD $0x01d3       // vinsertf128    ymm2, ymm2, xmm3, 1
	LONG $0xd06bedc5                     // vpackssdw    ymm2, ymm2, ymm0
	LONG $0x187de3c4; WORD $0x01c1       // vinsertf128    ymm0, ymm0, xmm1, 1
	LONG $0xc06bfdc5                     // vpackssdw    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5                     // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0       // vpermq    ymm0, ymm0, 216
	LONG $0x447ffec5; WORD $0x2056       // vmovdqu    yword [rsi + 2*rdx + 32], ymm0
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB39_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB39_9

LBB39_8:
	LONG $0x04e6fdc5; BYTE $0xd7   // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0x4ce6fdc5; WORD $0x20d7 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x54e6fdc5; WORD $0x40d7 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0x5ce6fdc5; WORD $0x60d7 // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 96]
	LONG $0x186de3c4; WORD $0x01d3 // vinsertf128    ymm2, ymm2, xmm3, 1
	LONG $0xd06bedc5               // vpackssdw    ymm2, ymm2, ymm0
	LONG $0x187de3c4; WORD $0x01c1 // vinsertf128    ymm0, ymm0, xmm1, 1
	LONG $0xc06bfdc5               // vpackssdw    ymm0, ymm0, ymm0
	LONG $0xc26cfdc5               // vpunpcklqdq    ymm0, ymm0, ymm2
	LONG $0x00fde3c4; WORD $0xd8c0 // vpermq    ymm0, ymm0, 216
	LONG $0x047ffec5; BYTE $0x56   // vmovdqu    yword [rsi + 2*rdx], ymm0

LBB39_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB39_11

LBB39_10:
	LONG $0x042cfbc5; BYTE $0xcf // vcvttsd2si    eax, qword [rdi + 8*rcx]
	LONG $0x4e048966             // mov    word [rsi + 2*rcx], ax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB39_10

LBB39_11:
	VZEROUPPER
	RET

LBB39_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB39_8
	JMP  LBB39_9

TEXT ·_cast_numeric_uint8_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB40_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB40_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB40_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB40_9

LBB40_2:
	WORD $0xc931 // xor    ecx, ecx

LBB40_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB40_5

LBB40_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB40_4

LBB40_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB40_16

LBB40_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x048e4489             // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x088e4489             // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x0c8e4489             // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB40_6
	JMP  LBB40_16

LBB40_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB40_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB40_12:
	LONG $0x317de2c4; WORD $0x1704             // vpmovzxbd    ymm0, qword [rdi + rdx]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x08 // vpmovzxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x10 // vpmovzxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x18 // vpmovzxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x317de2c4; WORD $0x1744; BYTE $0x20 // vpmovzxbd    ymm0, qword [rdi + rdx + 32]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x28 // vpmovzxbd    ymm1, qword [rdi + rdx + 40]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x30 // vpmovzxbd    ymm2, qword [rdi + rdx + 48]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x38 // vpmovzxbd    ymm3, qword [rdi + rdx + 56]
	QUAD $0x00008096847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c096947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB40_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB40_15

LBB40_14:
	LONG $0x317de2c4; WORD $0x1704             // vpmovzxbd    ymm0, qword [rdi + rdx]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x08 // vpmovzxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x10 // vpmovzxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x18 // vpmovzxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3

LBB40_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB40_3

LBB40_16:
	VZEROUPPER
	RET

LBB40_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB40_14
	JMP  LBB40_15

TEXT ·_cast_numeric_int8_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB41_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB41_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB41_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB41_9

LBB41_2:
	WORD $0xc931 // xor    ecx, ecx

LBB41_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB41_5

LBB41_4:
	LONG $0x0f04be0f         // movsx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB41_4

LBB41_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB41_16

LBB41_6:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x0f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rcx + 1]
	LONG $0x048e4489             // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x0f44be0f; BYTE $0x02 // movsx    eax, byte [rdi + rcx + 2]
	LONG $0x088e4489             // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0f44be0f; BYTE $0x03 // movsx    eax, byte [rdi + rcx + 3]
	LONG $0x0c8e4489             // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB41_6
	JMP  LBB41_16

LBB41_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB41_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB41_12:
	LONG $0x217de2c4; WORD $0x1704             // vpmovsxbd    ymm0, qword [rdi + rdx]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x08 // vpmovsxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x10 // vpmovsxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x18 // vpmovsxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x217de2c4; WORD $0x1744; BYTE $0x20 // vpmovsxbd    ymm0, qword [rdi + rdx + 32]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x28 // vpmovsxbd    ymm1, qword [rdi + rdx + 40]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x30 // vpmovsxbd    ymm2, qword [rdi + rdx + 48]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x38 // vpmovsxbd    ymm3, qword [rdi + rdx + 56]
	QUAD $0x00008096847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c096947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB41_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB41_15

LBB41_14:
	LONG $0x217de2c4; WORD $0x1704             // vpmovsxbd    ymm0, qword [rdi + rdx]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x08 // vpmovsxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x10 // vpmovsxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x18 // vpmovsxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3

LBB41_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB41_3

LBB41_16:
	VZEROUPPER
	RET

LBB41_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB41_14
	JMP  LBB41_15

TEXT ·_cast_numeric_uint16_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB42_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB42_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB42_10

LBB42_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB42_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB42_6:
	LONG $0x337de2c4; WORD $0x5704             // vpmovzxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x10 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x20 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x30 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x337de2c4; WORD $0x5744; BYTE $0x40 // vpmovzxwd    ymm0, oword [rdi + 2*rdx + 64]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x50 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 80]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x60 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 96]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x70 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 112]
	QUAD $0x00008096847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c096947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB42_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB42_9

LBB42_8:
	LONG $0x337de2c4; WORD $0x5704             // vpmovzxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x10 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x20 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x30 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3

LBB42_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB42_11

LBB42_10:
	LONG $0x4f04b70f         // movzx    eax, word [rdi + 2*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB42_10

LBB42_11:
	VZEROUPPER
	RET

LBB42_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB42_8
	JMP  LBB42_9

TEXT ·_cast_numeric_int16_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB43_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB43_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB43_10

LBB43_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB43_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB43_6:
	LONG $0x237de2c4; WORD $0x5704             // vpmovsxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x20 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x30 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x237de2c4; WORD $0x5744; BYTE $0x40 // vpmovsxwd    ymm0, oword [rdi + 2*rdx + 64]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x50 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 80]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x60 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 96]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x70 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 112]
	QUAD $0x00008096847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c096947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB43_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB43_9

LBB43_8:
	LONG $0x237de2c4; WORD $0x5704             // vpmovsxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x20 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x30 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3

LBB43_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB43_11

LBB43_10:
	LONG $0x4f04bf0f         // movsx    eax, word [rdi + 2*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB43_10

LBB43_11:
	VZEROUPPER
	RET

LBB43_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB43_8
	JMP  LBB43_9

TEXT ·_cast_numeric_uint32_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB44_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB44_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB44_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB44_9

LBB44_2:
	WORD $0xc931 // xor    ecx, ecx

LBB44_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB44_5

LBB44_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB44_4

LBB44_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB44_16

LBB44_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB44_6
	JMP  LBB44_16

LBB44_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB44_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB44_12:
	LONG $0x0410fcc5; BYTE $0x97         // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097       // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097       // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097       // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96         // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096       // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096       // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096       // vmovups    yword [rsi + 4*rdx + 96], ymm3
	QUAD $0x000080978410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a0978c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e0979c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 4*rdx + 224]
	QUAD $0x000080968411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB44_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB44_15

LBB44_14:
	LONG $0x0410fcc5; BYTE $0x97   // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097 // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097 // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097 // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96   // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096 // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096 // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096 // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB44_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB44_3

LBB44_16:
	VZEROUPPER
	RET

LBB44_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB44_14
	JMP  LBB44_15

TEXT ·_cast_numeric_int32_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB45_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB45_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB45_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB45_9

LBB45_2:
	WORD $0xc931 // xor    ecx, ecx

LBB45_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB45_5

LBB45_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB45_4

LBB45_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB45_16

LBB45_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB45_6
	JMP  LBB45_16

LBB45_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB45_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB45_12:
	LONG $0x0410fcc5; BYTE $0x97         // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097       // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097       // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097       // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96         // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096       // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096       // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096       // vmovups    yword [rsi + 4*rdx + 96], ymm3
	QUAD $0x000080978410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a0978c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e0979c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 4*rdx + 224]
	QUAD $0x000080968411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB45_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB45_15

LBB45_14:
	LONG $0x0410fcc5; BYTE $0x97   // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097 // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097 // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097 // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96   // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096 // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096 // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096 // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB45_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB45_3

LBB45_16:
	VZEROUPPER
	RET

LBB45_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB45_14
	JMP  LBB45_15

TEXT ·_cast_numeric_uint64_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB46_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB46_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB46_10

LBB46_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB46_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB46_6:
	LONG $0x0410f8c5; BYTE $0xd7               // vmovups    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c10f8c5; WORD $0x20d7             // vmovups    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x5410f8c5; WORD $0x40d7             // vmovups    xmm2, oword [rdi + 8*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x60d7             // vmovups    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x44c6f8c5; WORD $0x10d7; BYTE $0x88 // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 16], 136
	LONG $0x4cc6f0c5; WORD $0x30d7; BYTE $0x88 // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 48], 136
	LONG $0x54c6e8c5; WORD $0x50d7; BYTE $0x88 // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 80], 136
	LONG $0x5cc6e0c5; WORD $0x70d7; BYTE $0x88 // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 112], 136
	LONG $0x0411f8c5; BYTE $0x96               // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096             // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096             // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096             // vmovups    oword [rsi + 4*rdx + 48], xmm3
	QUAD $0x000080d78410f8c5; BYTE $0x00       // vmovups    xmm0, oword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10f8c5; BYTE $0x00       // vmovups    xmm1, oword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410f8c5; BYTE $0x00       // vmovups    xmm2, oword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10f8c5; BYTE $0x00       // vmovups    xmm3, oword [rdi + 8*rdx + 224]
	QUAD $0x000090d784c6f8c5; WORD $0x8800     // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 144], 136
	QUAD $0x0000b0d78cc6f0c5; WORD $0x8800     // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 176], 136
	QUAD $0x0000d0d794c6e8c5; WORD $0x8800     // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 208], 136
	QUAD $0x0000f0d79cc6e0c5; WORD $0x8800     // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 240], 136
	LONG $0x4411f8c5; WORD $0x4096             // vmovups    oword [rsi + 4*rdx + 64], xmm0
	LONG $0x4c11f8c5; WORD $0x5096             // vmovups    oword [rsi + 4*rdx + 80], xmm1
	LONG $0x5411f8c5; WORD $0x6096             // vmovups    oword [rsi + 4*rdx + 96], xmm2
	LONG $0x5c11f8c5; WORD $0x7096             // vmovups    oword [rsi + 4*rdx + 112], xmm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB46_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB46_9

LBB46_8:
	LONG $0x0410f8c5; BYTE $0xd7               // vmovups    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c10f8c5; WORD $0x20d7             // vmovups    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x5410f8c5; WORD $0x40d7             // vmovups    xmm2, oword [rdi + 8*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x60d7             // vmovups    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x44c6f8c5; WORD $0x10d7; BYTE $0x88 // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 16], 136
	LONG $0x4cc6f0c5; WORD $0x30d7; BYTE $0x88 // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 48], 136
	LONG $0x54c6e8c5; WORD $0x50d7; BYTE $0x88 // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 80], 136
	LONG $0x5cc6e0c5; WORD $0x70d7; BYTE $0x88 // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 112], 136
	LONG $0x0411f8c5; BYTE $0x96               // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096             // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096             // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096             // vmovups    oword [rsi + 4*rdx + 48], xmm3

LBB46_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB46_11

LBB46_10:
	WORD $0x048b; BYTE $0xcf // mov    eax, dword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB46_10

LBB46_11:
	RET

LBB46_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB46_8
	JMP  LBB46_9

TEXT ·_cast_numeric_int64_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB47_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB47_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB47_10

LBB47_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB47_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB47_6:
	LONG $0x0410f8c5; BYTE $0xd7               // vmovups    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c10f8c5; WORD $0x20d7             // vmovups    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x5410f8c5; WORD $0x40d7             // vmovups    xmm2, oword [rdi + 8*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x60d7             // vmovups    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x44c6f8c5; WORD $0x10d7; BYTE $0x88 // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 16], 136
	LONG $0x4cc6f0c5; WORD $0x30d7; BYTE $0x88 // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 48], 136
	LONG $0x54c6e8c5; WORD $0x50d7; BYTE $0x88 // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 80], 136
	LONG $0x5cc6e0c5; WORD $0x70d7; BYTE $0x88 // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 112], 136
	LONG $0x0411f8c5; BYTE $0x96               // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096             // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096             // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096             // vmovups    oword [rsi + 4*rdx + 48], xmm3
	QUAD $0x000080d78410f8c5; BYTE $0x00       // vmovups    xmm0, oword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10f8c5; BYTE $0x00       // vmovups    xmm1, oword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410f8c5; BYTE $0x00       // vmovups    xmm2, oword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10f8c5; BYTE $0x00       // vmovups    xmm3, oword [rdi + 8*rdx + 224]
	QUAD $0x000090d784c6f8c5; WORD $0x8800     // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 144], 136
	QUAD $0x0000b0d78cc6f0c5; WORD $0x8800     // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 176], 136
	QUAD $0x0000d0d794c6e8c5; WORD $0x8800     // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 208], 136
	QUAD $0x0000f0d79cc6e0c5; WORD $0x8800     // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 240], 136
	LONG $0x4411f8c5; WORD $0x4096             // vmovups    oword [rsi + 4*rdx + 64], xmm0
	LONG $0x4c11f8c5; WORD $0x5096             // vmovups    oword [rsi + 4*rdx + 80], xmm1
	LONG $0x5411f8c5; WORD $0x6096             // vmovups    oword [rsi + 4*rdx + 96], xmm2
	LONG $0x5c11f8c5; WORD $0x7096             // vmovups    oword [rsi + 4*rdx + 112], xmm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB47_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB47_9

LBB47_8:
	LONG $0x0410f8c5; BYTE $0xd7               // vmovups    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c10f8c5; WORD $0x20d7             // vmovups    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x5410f8c5; WORD $0x40d7             // vmovups    xmm2, oword [rdi + 8*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x60d7             // vmovups    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x44c6f8c5; WORD $0x10d7; BYTE $0x88 // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 16], 136
	LONG $0x4cc6f0c5; WORD $0x30d7; BYTE $0x88 // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 48], 136
	LONG $0x54c6e8c5; WORD $0x50d7; BYTE $0x88 // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 80], 136
	LONG $0x5cc6e0c5; WORD $0x70d7; BYTE $0x88 // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 112], 136
	LONG $0x0411f8c5; BYTE $0x96               // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096             // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096             // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096             // vmovups    oword [rsi + 4*rdx + 48], xmm3

LBB47_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB47_11

LBB47_10:
	WORD $0x048b; BYTE $0xcf // mov    eax, dword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB47_10

LBB47_11:
	RET

LBB47_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB47_8
	JMP  LBB47_9

DATA LCDATA17<>+0x000(SB)/8, $0x800000004f000000
GLOBL LCDATA17<>(SB), 8, $8

TEXT ·_cast_numeric_float32_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA17<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB48_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB48_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB48_10

LBB48_3:
	WORD $0x8944; BYTE $0xc9       // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0       // mov    r8, rax
	LONG $0x04e8c149               // shr    r8, 4
	LONG $0x01c08349               // add    r8, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB48_4
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0xfee08348               // and    rax, -2
	WORD $0xf748; BYTE $0xd8       // neg    rax
	WORD $0xd231                   // xor    edx, edx
	LONG $0x1879e2c4; WORD $0x0045 // vbroadcastss    xmm0, dword 0[rbp] /* [rip + .LCPI48_0] */
	LONG $0x1879e2c4; WORD $0x044d // vbroadcastss    xmm1, dword 4[rbp] /* [rip + .LCPI48_1] */

LBB48_6:
	LONG $0x1410f8c5; BYTE $0x97   // vmovups    xmm2, oword [rdi + 4*rdx]
	LONG $0x5c10f8c5; WORD $0x1097 // vmovups    xmm3, oword [rdi + 4*rdx + 16]
	LONG $0x6410f8c5; WORD $0x2097 // vmovups    xmm4, oword [rdi + 4*rdx + 32]
	LONG $0xe8c2e8c5; BYTE $0x01   // vcmpltps    xmm5, xmm2, xmm0
	LONG $0xf05ce8c5               // vsubps    xmm6, xmm2, xmm0
	LONG $0xf65bfac5               // vcvttps2dq    xmm6, xmm6
	LONG $0xf157c8c5               // vxorps    xmm6, xmm6, xmm1
	LONG $0xd25bfac5               // vcvttps2dq    xmm2, xmm2
	LONG $0x4a49e3c4; WORD $0x50d2 // vblendvps    xmm2, xmm6, xmm2, xmm5
	LONG $0x6c10f8c5; WORD $0x3097 // vmovups    xmm5, oword [rdi + 4*rdx + 48]
	LONG $0xf0c2e0c5; BYTE $0x01   // vcmpltps    xmm6, xmm3, xmm0
	LONG $0xf85ce0c5               // vsubps    xmm7, xmm3, xmm0
	LONG $0xff5bfac5               // vcvttps2dq    xmm7, xmm7
	LONG $0xf957c0c5               // vxorps    xmm7, xmm7, xmm1
	LONG $0xdb5bfac5               // vcvttps2dq    xmm3, xmm3
	LONG $0x4a41e3c4; WORD $0x60db // vblendvps    xmm3, xmm7, xmm3, xmm6
	LONG $0xf0c2d8c5; BYTE $0x01   // vcmpltps    xmm6, xmm4, xmm0
	LONG $0xf85cd8c5               // vsubps    xmm7, xmm4, xmm0
	LONG $0xff5bfac5               // vcvttps2dq    xmm7, xmm7
	LONG $0xf957c0c5               // vxorps    xmm7, xmm7, xmm1
	LONG $0xe45bfac5               // vcvttps2dq    xmm4, xmm4
	LONG $0x4a41e3c4; WORD $0x60e4 // vblendvps    xmm4, xmm7, xmm4, xmm6
	LONG $0xf0c2d0c5; BYTE $0x01   // vcmpltps    xmm6, xmm5, xmm0
	LONG $0xf85cd0c5               // vsubps    xmm7, xmm5, xmm0
	LONG $0xff5bfac5               // vcvttps2dq    xmm7, xmm7
	LONG $0xf957c0c5               // vxorps    xmm7, xmm7, xmm1
	LONG $0xed5bfac5               // vcvttps2dq    xmm5, xmm5
	LONG $0x4a41e3c4; WORD $0x60ed // vblendvps    xmm5, xmm7, xmm5, xmm6
	LONG $0x1411f8c5; BYTE $0x96   // vmovups    oword [rsi + 4*rdx], xmm2
	LONG $0x5c11f8c5; WORD $0x1096 // vmovups    oword [rsi + 4*rdx + 16], xmm3
	LONG $0x6411f8c5; WORD $0x2096 // vmovups    oword [rsi + 4*rdx + 32], xmm4
	LONG $0x6c11f8c5; WORD $0x3096 // vmovups    oword [rsi + 4*rdx + 48], xmm5
	LONG $0x5410f8c5; WORD $0x4097 // vmovups    xmm2, oword [rdi + 4*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x5097 // vmovups    xmm3, oword [rdi + 4*rdx + 80]
	LONG $0x6410f8c5; WORD $0x6097 // vmovups    xmm4, oword [rdi + 4*rdx + 96]
	LONG $0xe8c2e8c5; BYTE $0x01   // vcmpltps    xmm5, xmm2, xmm0
	LONG $0xf05ce8c5               // vsubps    xmm6, xmm2, xmm0
	LONG $0xf65bfac5               // vcvttps2dq    xmm6, xmm6
	LONG $0xf157c8c5               // vxorps    xmm6, xmm6, xmm1
	LONG $0xd25bfac5               // vcvttps2dq    xmm2, xmm2
	LONG $0x4a49e3c4; WORD $0x50d2 // vblendvps    xmm2, xmm6, xmm2, xmm5
	LONG $0x6c10f8c5; WORD $0x7097 // vmovups    xmm5, oword [rdi + 4*rdx + 112]
	LONG $0xf0c2e0c5; BYTE $0x01   // vcmpltps    xmm6, xmm3, xmm0
	LONG $0xf85ce0c5               // vsubps    xmm7, xmm3, xmm0
	LONG $0xff5bfac5               // vcvttps2dq    xmm7, xmm7
	LONG $0xf957c0c5               // vxorps    xmm7, xmm7, xmm1
	LONG $0xdb5bfac5               // vcvttps2dq    xmm3, xmm3
	LONG $0x4a41e3c4; WORD $0x60db // vblendvps    xmm3, xmm7, xmm3, xmm6
	LONG $0xf0c2d8c5; BYTE $0x01   // vcmpltps    xmm6, xmm4, xmm0
	LONG $0xf85cd8c5               // vsubps    xmm7, xmm4, xmm0
	LONG $0xff5bfac5               // vcvttps2dq    xmm7, xmm7
	LONG $0xf957c0c5               // vxorps    xmm7, xmm7, xmm1
	LONG $0xe45bfac5               // vcvttps2dq    xmm4, xmm4
	LONG $0x4a41e3c4; WORD $0x60e4 // vblendvps    xmm4, xmm7, xmm4, xmm6
	LONG $0xf0c2d0c5; BYTE $0x01   // vcmpltps    xmm6, xmm5, xmm0
	LONG $0xf85cd0c5               // vsubps    xmm7, xmm5, xmm0
	LONG $0xff5bfac5               // vcvttps2dq    xmm7, xmm7
	LONG $0xf957c0c5               // vxorps    xmm7, xmm7, xmm1
	LONG $0xed5bfac5               // vcvttps2dq    xmm5, xmm5
	LONG $0x4a41e3c4; WORD $0x60ed // vblendvps    xmm5, xmm7, xmm5, xmm6
	LONG $0x5411f8c5; WORD $0x4096 // vmovups    oword [rsi + 4*rdx + 64], xmm2
	LONG $0x5c11f8c5; WORD $0x5096 // vmovups    oword [rsi + 4*rdx + 80], xmm3
	LONG $0x6411f8c5; WORD $0x6096 // vmovups    oword [rsi + 4*rdx + 96], xmm4
	LONG $0x6c11f8c5; WORD $0x7096 // vmovups    oword [rsi + 4*rdx + 112], xmm5
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB48_6
	LONG $0x01c0f641               // test    r8b, 1
	JE   LBB48_9

LBB48_8:
	LONG $0x0410f8c5; BYTE $0x97   // vmovups    xmm0, oword [rdi + 4*rdx]
	LONG $0x1879e2c4; WORD $0x004d // vbroadcastss    xmm1, dword 0[rbp] /* [rip + .LCPI48_0] */
	LONG $0xd1c2f8c5; BYTE $0x01   // vcmpltps    xmm2, xmm0, xmm1
	LONG $0xd95cf8c5               // vsubps    xmm3, xmm0, xmm1
	LONG $0xdb5bfac5               // vcvttps2dq    xmm3, xmm3
	LONG $0x1879e2c4; WORD $0x0465 // vbroadcastss    xmm4, dword 4[rbp] /* [rip + .LCPI48_1] */
	LONG $0xdc57e0c5               // vxorps    xmm3, xmm3, xmm4
	LONG $0xc05bfac5               // vcvttps2dq    xmm0, xmm0
	LONG $0x4a61e3c4; WORD $0x20c0 // vblendvps    xmm0, xmm3, xmm0, xmm2
	LONG $0x5410f8c5; WORD $0x1097 // vmovups    xmm2, oword [rdi + 4*rdx + 16]
	LONG $0xd9c2e8c5; BYTE $0x01   // vcmpltps    xmm3, xmm2, xmm1
	LONG $0xe95ce8c5               // vsubps    xmm5, xmm2, xmm1
	LONG $0xed5bfac5               // vcvttps2dq    xmm5, xmm5
	LONG $0xec57d0c5               // vxorps    xmm5, xmm5, xmm4
	LONG $0xd25bfac5               // vcvttps2dq    xmm2, xmm2
	LONG $0x4a51e3c4; WORD $0x30d2 // vblendvps    xmm2, xmm5, xmm2, xmm3
	LONG $0x5c10f8c5; WORD $0x2097 // vmovups    xmm3, oword [rdi + 4*rdx + 32]
	LONG $0xe9c2e0c5; BYTE $0x01   // vcmpltps    xmm5, xmm3, xmm1
	LONG $0xf15ce0c5               // vsubps    xmm6, xmm3, xmm1
	LONG $0xf65bfac5               // vcvttps2dq    xmm6, xmm6
	LONG $0xf457c8c5               // vxorps    xmm6, xmm6, xmm4
	LONG $0xdb5bfac5               // vcvttps2dq    xmm3, xmm3
	LONG $0x4a49e3c4; WORD $0x50db // vblendvps    xmm3, xmm6, xmm3, xmm5
	LONG $0x6c10f8c5; WORD $0x3097 // vmovups    xmm5, oword [rdi + 4*rdx + 48]
	LONG $0xf1c2d0c5; BYTE $0x01   // vcmpltps    xmm6, xmm5, xmm1
	LONG $0xc95cd0c5               // vsubps    xmm1, xmm5, xmm1
	LONG $0xc95bfac5               // vcvttps2dq    xmm1, xmm1
	LONG $0xcc57f0c5               // vxorps    xmm1, xmm1, xmm4
	LONG $0xe55bfac5               // vcvttps2dq    xmm4, xmm5
	LONG $0x4a71e3c4; WORD $0x60cc // vblendvps    xmm1, xmm1, xmm4, xmm6
	LONG $0x0411f8c5; BYTE $0x96   // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x5411f8c5; WORD $0x1096 // vmovups    oword [rsi + 4*rdx + 16], xmm2
	LONG $0x5c11f8c5; WORD $0x2096 // vmovups    oword [rsi + 4*rdx + 32], xmm3
	LONG $0x4c11f8c5; WORD $0x3096 // vmovups    oword [rsi + 4*rdx + 48], xmm1

LBB48_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB48_11

LBB48_10:
	LONG $0x2cfae1c4; WORD $0x8f04 // vcvttss2si    rax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e       // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348               // add    rcx, 1
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB48_10

LBB48_11:
	RET

LBB48_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB48_8
	JMP  LBB48_9

TEXT ·_cast_numeric_float64_uint32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB49_6
	WORD $0xd189             // mov    ecx, edx
	LONG $0xff518d48         // lea    rdx, [rcx - 1]
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03e08341         // and    r8d, 3
	LONG $0x03fa8348         // cmp    rdx, 3
	JAE  LBB49_7
	WORD $0xd231             // xor    edx, edx
	JMP  LBB49_3

LBB49_7:
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	WORD $0xd231             // xor    edx, edx

LBB49_8:
	LONG $0x2cfbe1c4; WORD $0xd704             // vcvttsd2si    rax, qword [rdi + 8*rdx]
	WORD $0x0489; BYTE $0x96                   // mov    dword [rsi + 4*rdx], eax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x08 // vcvttsd2si    rax, qword [rdi + 8*rdx + 8]
	LONG $0x04964489                           // mov    dword [rsi + 4*rdx + 4], eax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x10 // vcvttsd2si    rax, qword [rdi + 8*rdx + 16]
	LONG $0x08964489                           // mov    dword [rsi + 4*rdx + 8], eax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x18 // vcvttsd2si    rax, qword [rdi + 8*rdx + 24]
	LONG $0x0c964489                           // mov    dword [rsi + 4*rdx + 12], eax
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd1                   // cmp    rcx, rdx
	JNE  LBB49_8

LBB49_3:
	WORD $0x854d; BYTE $0xc0 // test    r8, r8
	JE   LBB49_6
	LONG $0x960c8d48         // lea    rcx, [rsi + 4*rdx]
	LONG $0xd7148d48         // lea    rdx, [rdi + 8*rdx]
	WORD $0xf631             // xor    esi, esi

LBB49_5:
	LONG $0x2cfbe1c4; WORD $0xf23c // vcvttsd2si    rdi, qword [rdx + 8*rsi]
	WORD $0x3c89; BYTE $0xb1       // mov    dword [rcx + 4*rsi], edi
	LONG $0x01c68348               // add    rsi, 1
	WORD $0x3949; BYTE $0xf0       // cmp    r8, rsi
	JNE  LBB49_5

LBB49_6:
	RET

TEXT ·_cast_numeric_uint8_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB50_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB50_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB50_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB50_9

LBB50_2:
	WORD $0xc931 // xor    ecx, ecx

LBB50_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB50_5

LBB50_4:
	LONG $0x0f04b60f         // movzx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB50_4

LBB50_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB50_16

LBB50_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0x048e4489             // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0x088e4489             // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0x0c8e4489             // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB50_6
	JMP  LBB50_16

LBB50_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB50_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB50_12:
	LONG $0x317de2c4; WORD $0x1704             // vpmovzxbd    ymm0, qword [rdi + rdx]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x08 // vpmovzxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x10 // vpmovzxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x18 // vpmovzxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x317de2c4; WORD $0x1744; BYTE $0x20 // vpmovzxbd    ymm0, qword [rdi + rdx + 32]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x28 // vpmovzxbd    ymm1, qword [rdi + rdx + 40]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x30 // vpmovzxbd    ymm2, qword [rdi + rdx + 48]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x38 // vpmovzxbd    ymm3, qword [rdi + rdx + 56]
	QUAD $0x00008096847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c096947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB50_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB50_15

LBB50_14:
	LONG $0x317de2c4; WORD $0x1704             // vpmovzxbd    ymm0, qword [rdi + rdx]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x08 // vpmovzxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x10 // vpmovzxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x18 // vpmovzxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3

LBB50_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB50_3

LBB50_16:
	VZEROUPPER
	RET

LBB50_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB50_14
	JMP  LBB50_15

TEXT ·_cast_numeric_int8_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB51_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB51_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB51_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB51_9

LBB51_2:
	WORD $0xc931 // xor    ecx, ecx

LBB51_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB51_5

LBB51_4:
	LONG $0x0f04be0f         // movsx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB51_4

LBB51_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB51_16

LBB51_6:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x0f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rcx + 1]
	LONG $0x048e4489             // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x0f44be0f; BYTE $0x02 // movsx    eax, byte [rdi + rcx + 2]
	LONG $0x088e4489             // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0f44be0f; BYTE $0x03 // movsx    eax, byte [rdi + rcx + 3]
	LONG $0x0c8e4489             // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB51_6
	JMP  LBB51_16

LBB51_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB51_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB51_12:
	LONG $0x217de2c4; WORD $0x1704             // vpmovsxbd    ymm0, qword [rdi + rdx]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x08 // vpmovsxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x10 // vpmovsxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x18 // vpmovsxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x217de2c4; WORD $0x1744; BYTE $0x20 // vpmovsxbd    ymm0, qword [rdi + rdx + 32]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x28 // vpmovsxbd    ymm1, qword [rdi + rdx + 40]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x30 // vpmovsxbd    ymm2, qword [rdi + rdx + 48]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x38 // vpmovsxbd    ymm3, qword [rdi + rdx + 56]
	QUAD $0x00008096847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c096947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB51_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB51_15

LBB51_14:
	LONG $0x217de2c4; WORD $0x1704             // vpmovsxbd    ymm0, qword [rdi + rdx]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x08 // vpmovsxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x10 // vpmovsxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x18 // vpmovsxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3

LBB51_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB51_3

LBB51_16:
	VZEROUPPER
	RET

LBB51_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB51_14
	JMP  LBB51_15

TEXT ·_cast_numeric_uint16_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB52_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB52_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB52_10

LBB52_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB52_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB52_6:
	LONG $0x337de2c4; WORD $0x5704             // vpmovzxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x10 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x20 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x30 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x337de2c4; WORD $0x5744; BYTE $0x40 // vpmovzxwd    ymm0, oword [rdi + 2*rdx + 64]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x50 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 80]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x60 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 96]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x70 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 112]
	QUAD $0x00008096847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c096947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB52_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB52_9

LBB52_8:
	LONG $0x337de2c4; WORD $0x5704             // vpmovzxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x10 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x20 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x30 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3

LBB52_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB52_11

LBB52_10:
	LONG $0x4f04b70f         // movzx    eax, word [rdi + 2*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB52_10

LBB52_11:
	VZEROUPPER
	RET

LBB52_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB52_8
	JMP  LBB52_9

TEXT ·_cast_numeric_int16_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB53_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB53_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB53_10

LBB53_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB53_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB53_6:
	LONG $0x237de2c4; WORD $0x5704             // vpmovsxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x20 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x30 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x237de2c4; WORD $0x5744; BYTE $0x40 // vpmovsxwd    ymm0, oword [rdi + 2*rdx + 64]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x50 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 80]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x60 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 96]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x70 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 112]
	QUAD $0x00008096847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c096947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB53_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB53_9

LBB53_8:
	LONG $0x237de2c4; WORD $0x5704             // vpmovsxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x20 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x30 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0x047ffec5; BYTE $0x96               // vmovdqu    yword [rsi + 4*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x2096             // vmovdqu    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x4096             // vmovdqu    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x6096             // vmovdqu    yword [rsi + 4*rdx + 96], ymm3

LBB53_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB53_11

LBB53_10:
	LONG $0x4f04bf0f         // movsx    eax, word [rdi + 2*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB53_10

LBB53_11:
	VZEROUPPER
	RET

LBB53_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB53_8
	JMP  LBB53_9

TEXT ·_cast_numeric_uint32_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB54_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB54_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB54_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB54_9

LBB54_2:
	WORD $0xc931 // xor    ecx, ecx

LBB54_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB54_5

LBB54_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB54_4

LBB54_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB54_16

LBB54_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB54_6
	JMP  LBB54_16

LBB54_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB54_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB54_12:
	LONG $0x0410fcc5; BYTE $0x97         // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097       // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097       // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097       // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96         // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096       // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096       // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096       // vmovups    yword [rsi + 4*rdx + 96], ymm3
	QUAD $0x000080978410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a0978c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e0979c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 4*rdx + 224]
	QUAD $0x000080968411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB54_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB54_15

LBB54_14:
	LONG $0x0410fcc5; BYTE $0x97   // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097 // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097 // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097 // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96   // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096 // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096 // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096 // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB54_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB54_3

LBB54_16:
	VZEROUPPER
	RET

LBB54_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB54_14
	JMP  LBB54_15

TEXT ·_cast_numeric_int32_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB55_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB55_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB55_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB55_9

LBB55_2:
	WORD $0xc931 // xor    ecx, ecx

LBB55_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB55_5

LBB55_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB55_4

LBB55_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB55_16

LBB55_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x04c18348         // add    rcx, 4
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB55_6
	JMP  LBB55_16

LBB55_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB55_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB55_12:
	LONG $0x0410fcc5; BYTE $0x97         // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097       // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097       // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097       // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96         // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096       // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096       // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096       // vmovups    yword [rsi + 4*rdx + 96], ymm3
	QUAD $0x000080978410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a0978c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e0979c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 4*rdx + 224]
	QUAD $0x000080968411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB55_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB55_15

LBB55_14:
	LONG $0x0410fcc5; BYTE $0x97   // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097 // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097 // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097 // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96   // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096 // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096 // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096 // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB55_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB55_3

LBB55_16:
	VZEROUPPER
	RET

LBB55_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB55_14
	JMP  LBB55_15

TEXT ·_cast_numeric_uint64_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB56_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB56_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB56_10

LBB56_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB56_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB56_6:
	LONG $0x0410f8c5; BYTE $0xd7               // vmovups    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c10f8c5; WORD $0x20d7             // vmovups    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x5410f8c5; WORD $0x40d7             // vmovups    xmm2, oword [rdi + 8*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x60d7             // vmovups    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x44c6f8c5; WORD $0x10d7; BYTE $0x88 // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 16], 136
	LONG $0x4cc6f0c5; WORD $0x30d7; BYTE $0x88 // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 48], 136
	LONG $0x54c6e8c5; WORD $0x50d7; BYTE $0x88 // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 80], 136
	LONG $0x5cc6e0c5; WORD $0x70d7; BYTE $0x88 // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 112], 136
	LONG $0x0411f8c5; BYTE $0x96               // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096             // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096             // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096             // vmovups    oword [rsi + 4*rdx + 48], xmm3
	QUAD $0x000080d78410f8c5; BYTE $0x00       // vmovups    xmm0, oword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10f8c5; BYTE $0x00       // vmovups    xmm1, oword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410f8c5; BYTE $0x00       // vmovups    xmm2, oword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10f8c5; BYTE $0x00       // vmovups    xmm3, oword [rdi + 8*rdx + 224]
	QUAD $0x000090d784c6f8c5; WORD $0x8800     // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 144], 136
	QUAD $0x0000b0d78cc6f0c5; WORD $0x8800     // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 176], 136
	QUAD $0x0000d0d794c6e8c5; WORD $0x8800     // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 208], 136
	QUAD $0x0000f0d79cc6e0c5; WORD $0x8800     // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 240], 136
	LONG $0x4411f8c5; WORD $0x4096             // vmovups    oword [rsi + 4*rdx + 64], xmm0
	LONG $0x4c11f8c5; WORD $0x5096             // vmovups    oword [rsi + 4*rdx + 80], xmm1
	LONG $0x5411f8c5; WORD $0x6096             // vmovups    oword [rsi + 4*rdx + 96], xmm2
	LONG $0x5c11f8c5; WORD $0x7096             // vmovups    oword [rsi + 4*rdx + 112], xmm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB56_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB56_9

LBB56_8:
	LONG $0x0410f8c5; BYTE $0xd7               // vmovups    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c10f8c5; WORD $0x20d7             // vmovups    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x5410f8c5; WORD $0x40d7             // vmovups    xmm2, oword [rdi + 8*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x60d7             // vmovups    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x44c6f8c5; WORD $0x10d7; BYTE $0x88 // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 16], 136
	LONG $0x4cc6f0c5; WORD $0x30d7; BYTE $0x88 // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 48], 136
	LONG $0x54c6e8c5; WORD $0x50d7; BYTE $0x88 // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 80], 136
	LONG $0x5cc6e0c5; WORD $0x70d7; BYTE $0x88 // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 112], 136
	LONG $0x0411f8c5; BYTE $0x96               // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096             // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096             // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096             // vmovups    oword [rsi + 4*rdx + 48], xmm3

LBB56_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB56_11

LBB56_10:
	WORD $0x048b; BYTE $0xcf // mov    eax, dword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB56_10

LBB56_11:
	RET

LBB56_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB56_8
	JMP  LBB56_9

TEXT ·_cast_numeric_int64_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB57_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB57_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB57_10

LBB57_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB57_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB57_6:
	LONG $0x0410f8c5; BYTE $0xd7               // vmovups    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c10f8c5; WORD $0x20d7             // vmovups    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x5410f8c5; WORD $0x40d7             // vmovups    xmm2, oword [rdi + 8*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x60d7             // vmovups    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x44c6f8c5; WORD $0x10d7; BYTE $0x88 // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 16], 136
	LONG $0x4cc6f0c5; WORD $0x30d7; BYTE $0x88 // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 48], 136
	LONG $0x54c6e8c5; WORD $0x50d7; BYTE $0x88 // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 80], 136
	LONG $0x5cc6e0c5; WORD $0x70d7; BYTE $0x88 // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 112], 136
	LONG $0x0411f8c5; BYTE $0x96               // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096             // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096             // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096             // vmovups    oword [rsi + 4*rdx + 48], xmm3
	QUAD $0x000080d78410f8c5; BYTE $0x00       // vmovups    xmm0, oword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10f8c5; BYTE $0x00       // vmovups    xmm1, oword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410f8c5; BYTE $0x00       // vmovups    xmm2, oword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10f8c5; BYTE $0x00       // vmovups    xmm3, oword [rdi + 8*rdx + 224]
	QUAD $0x000090d784c6f8c5; WORD $0x8800     // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 144], 136
	QUAD $0x0000b0d78cc6f0c5; WORD $0x8800     // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 176], 136
	QUAD $0x0000d0d794c6e8c5; WORD $0x8800     // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 208], 136
	QUAD $0x0000f0d79cc6e0c5; WORD $0x8800     // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 240], 136
	LONG $0x4411f8c5; WORD $0x4096             // vmovups    oword [rsi + 4*rdx + 64], xmm0
	LONG $0x4c11f8c5; WORD $0x5096             // vmovups    oword [rsi + 4*rdx + 80], xmm1
	LONG $0x5411f8c5; WORD $0x6096             // vmovups    oword [rsi + 4*rdx + 96], xmm2
	LONG $0x5c11f8c5; WORD $0x7096             // vmovups    oword [rsi + 4*rdx + 112], xmm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB57_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB57_9

LBB57_8:
	LONG $0x0410f8c5; BYTE $0xd7               // vmovups    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c10f8c5; WORD $0x20d7             // vmovups    xmm1, oword [rdi + 8*rdx + 32]
	LONG $0x5410f8c5; WORD $0x40d7             // vmovups    xmm2, oword [rdi + 8*rdx + 64]
	LONG $0x5c10f8c5; WORD $0x60d7             // vmovups    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x44c6f8c5; WORD $0x10d7; BYTE $0x88 // vshufps    xmm0, xmm0, oword [rdi + 8*rdx + 16], 136
	LONG $0x4cc6f0c5; WORD $0x30d7; BYTE $0x88 // vshufps    xmm1, xmm1, oword [rdi + 8*rdx + 48], 136
	LONG $0x54c6e8c5; WORD $0x50d7; BYTE $0x88 // vshufps    xmm2, xmm2, oword [rdi + 8*rdx + 80], 136
	LONG $0x5cc6e0c5; WORD $0x70d7; BYTE $0x88 // vshufps    xmm3, xmm3, oword [rdi + 8*rdx + 112], 136
	LONG $0x0411f8c5; BYTE $0x96               // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096             // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096             // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096             // vmovups    oword [rsi + 4*rdx + 48], xmm3

LBB57_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB57_11

LBB57_10:
	WORD $0x048b; BYTE $0xcf // mov    eax, dword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB57_10

LBB57_11:
	RET

LBB57_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB57_8
	JMP  LBB57_9

TEXT ·_cast_numeric_float32_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB58_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB58_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB58_10

LBB58_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB58_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB58_6:
	LONG $0x045bfec5; BYTE $0x97         // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c5bfec5; WORD $0x2097       // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x545bfec5; WORD $0x4097       // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c5bfec5; WORD $0x6097       // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96         // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096       // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096       // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096       // vmovups    yword [rsi + 4*rdx + 96], ymm3
	QUAD $0x00008097845bfec5; BYTE $0x00 // vcvttps2dq    ymm0, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a0978c5bfec5; BYTE $0x00 // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c097945bfec5; BYTE $0x00 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e0979c5bfec5; BYTE $0x00 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 224]
	QUAD $0x000080968411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB58_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB58_9

LBB58_8:
	LONG $0x045bfec5; BYTE $0x97   // vcvttps2dq    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c5bfec5; WORD $0x2097 // vcvttps2dq    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x545bfec5; WORD $0x4097 // vcvttps2dq    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c5bfec5; WORD $0x6097 // vcvttps2dq    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96   // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096 // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096 // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096 // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB58_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB58_11

LBB58_10:
	LONG $0x042cfac5; BYTE $0x8f // vcvttss2si    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB58_10

LBB58_11:
	VZEROUPPER
	RET

LBB58_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB58_8
	JMP  LBB58_9

TEXT ·_cast_numeric_float64_int32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB59_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB59_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB59_10

LBB59_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB59_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB59_6:
	LONG $0x04e6fdc5; BYTE $0xd7         // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0x4ce6fdc5; WORD $0x20d7       // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x54e6fdc5; WORD $0x40d7       // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0x5ce6fdc5; WORD $0x60d7       // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411f9c5; BYTE $0x96         // vmovupd    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f9c5; WORD $0x1096       // vmovupd    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f9c5; WORD $0x2096       // vmovupd    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f9c5; WORD $0x3096       // vmovupd    oword [rsi + 4*rdx + 48], xmm3
	QUAD $0x000080d784e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d794e6fdc5; BYTE $0x00 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79ce6fdc5; BYTE $0x00 // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 224]
	LONG $0x4411f9c5; WORD $0x4096       // vmovupd    oword [rsi + 4*rdx + 64], xmm0
	LONG $0x4c11f9c5; WORD $0x5096       // vmovupd    oword [rsi + 4*rdx + 80], xmm1
	LONG $0x5411f9c5; WORD $0x6096       // vmovupd    oword [rsi + 4*rdx + 96], xmm2
	LONG $0x5c11f9c5; WORD $0x7096       // vmovupd    oword [rsi + 4*rdx + 112], xmm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB59_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB59_9

LBB59_8:
	LONG $0x04e6fdc5; BYTE $0xd7   // vcvttpd2dq    xmm0, yword [rdi + 8*rdx]
	LONG $0x4ce6fdc5; WORD $0x20d7 // vcvttpd2dq    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x54e6fdc5; WORD $0x40d7 // vcvttpd2dq    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0x5ce6fdc5; WORD $0x60d7 // vcvttpd2dq    xmm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411f9c5; BYTE $0x96   // vmovupd    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f9c5; WORD $0x1096 // vmovupd    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f9c5; WORD $0x2096 // vmovupd    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f9c5; WORD $0x3096 // vmovupd    oword [rsi + 4*rdx + 48], xmm3

LBB59_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB59_11

LBB59_10:
	LONG $0x042cfbc5; BYTE $0xcf // vcvttsd2si    eax, qword [rdi + 8*rcx]
	WORD $0x0489; BYTE $0x8e     // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB59_10

LBB59_11:
	RET

LBB59_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB59_8
	JMP  LBB59_9

TEXT ·_cast_numeric_uint8_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB60_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB60_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB60_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB60_9

LBB60_2:
	WORD $0xc931 // xor    ecx, ecx

LBB60_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB60_5

LBB60_4:
	LONG $0x0f04b60f // movzx    eax, byte [rdi + rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB60_4

LBB60_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB60_16

LBB60_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB60_6
	JMP  LBB60_16

LBB60_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB60_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB60_12:
	LONG $0x327de2c4; WORD $0x1704             // vpmovzxbq    ymm0, dword [rdi + rdx]
	LONG $0x327de2c4; WORD $0x174c; BYTE $0x04 // vpmovzxbq    ymm1, dword [rdi + rdx + 4]
	LONG $0x327de2c4; WORD $0x1754; BYTE $0x08 // vpmovzxbq    ymm2, dword [rdi + rdx + 8]
	LONG $0x327de2c4; WORD $0x175c; BYTE $0x0c // vpmovzxbq    ymm3, dword [rdi + rdx + 12]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x327de2c4; WORD $0x1744; BYTE $0x10 // vpmovzxbq    ymm0, dword [rdi + rdx + 16]
	LONG $0x327de2c4; WORD $0x174c; BYTE $0x14 // vpmovzxbq    ymm1, dword [rdi + rdx + 20]
	LONG $0x327de2c4; WORD $0x1754; BYTE $0x18 // vpmovzxbq    ymm2, dword [rdi + rdx + 24]
	LONG $0x327de2c4; WORD $0x175c; BYTE $0x1c // vpmovzxbq    ymm3, dword [rdi + rdx + 28]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB60_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB60_15

LBB60_14:
	LONG $0x327de2c4; WORD $0x1704             // vpmovzxbq    ymm0, dword [rdi + rdx]
	LONG $0x327de2c4; WORD $0x174c; BYTE $0x04 // vpmovzxbq    ymm1, dword [rdi + rdx + 4]
	LONG $0x327de2c4; WORD $0x1754; BYTE $0x08 // vpmovzxbq    ymm2, dword [rdi + rdx + 8]
	LONG $0x327de2c4; WORD $0x175c; BYTE $0x0c // vpmovzxbq    ymm3, dword [rdi + rdx + 12]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB60_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB60_3

LBB60_16:
	VZEROUPPER
	RET

LBB60_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB60_14
	JMP  LBB60_15

TEXT ·_cast_numeric_int8_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB61_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB61_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB61_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB61_9

LBB61_2:
	WORD $0xc931 // xor    ecx, ecx

LBB61_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB61_5

LBB61_4:
	LONG $0x04be0f48; BYTE $0x0f // movsx    rax, byte [rdi + rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB61_4

LBB61_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB61_16

LBB61_6:
	LONG $0x04be0f48; BYTE $0x0f   // movsx    rax, byte [rdi + rcx]
	LONG $0xce048948               // mov    qword [rsi + 8*rcx], rax
	LONG $0x44be0f48; WORD $0x010f // movsx    rax, byte [rdi + rcx + 1]
	LONG $0xce448948; BYTE $0x08   // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0x44be0f48; WORD $0x020f // movsx    rax, byte [rdi + rcx + 2]
	LONG $0xce448948; BYTE $0x10   // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0x44be0f48; WORD $0x030f // movsx    rax, byte [rdi + rcx + 3]
	LONG $0xce448948; BYTE $0x18   // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB61_6
	JMP  LBB61_16

LBB61_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB61_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB61_12:
	LONG $0x227de2c4; WORD $0x1704             // vpmovsxbq    ymm0, dword [rdi + rdx]
	LONG $0x227de2c4; WORD $0x174c; BYTE $0x04 // vpmovsxbq    ymm1, dword [rdi + rdx + 4]
	LONG $0x227de2c4; WORD $0x1754; BYTE $0x08 // vpmovsxbq    ymm2, dword [rdi + rdx + 8]
	LONG $0x227de2c4; WORD $0x175c; BYTE $0x0c // vpmovsxbq    ymm3, dword [rdi + rdx + 12]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x227de2c4; WORD $0x1744; BYTE $0x10 // vpmovsxbq    ymm0, dword [rdi + rdx + 16]
	LONG $0x227de2c4; WORD $0x174c; BYTE $0x14 // vpmovsxbq    ymm1, dword [rdi + rdx + 20]
	LONG $0x227de2c4; WORD $0x1754; BYTE $0x18 // vpmovsxbq    ymm2, dword [rdi + rdx + 24]
	LONG $0x227de2c4; WORD $0x175c; BYTE $0x1c // vpmovsxbq    ymm3, dword [rdi + rdx + 28]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB61_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB61_15

LBB61_14:
	LONG $0x227de2c4; WORD $0x1704             // vpmovsxbq    ymm0, dword [rdi + rdx]
	LONG $0x227de2c4; WORD $0x174c; BYTE $0x04 // vpmovsxbq    ymm1, dword [rdi + rdx + 4]
	LONG $0x227de2c4; WORD $0x1754; BYTE $0x08 // vpmovsxbq    ymm2, dword [rdi + rdx + 8]
	LONG $0x227de2c4; WORD $0x175c; BYTE $0x0c // vpmovsxbq    ymm3, dword [rdi + rdx + 12]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB61_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB61_3

LBB61_16:
	VZEROUPPER
	RET

LBB61_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB61_14
	JMP  LBB61_15

TEXT ·_cast_numeric_uint16_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB62_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB62_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB62_10

LBB62_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB62_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB62_6:
	LONG $0x347de2c4; WORD $0x5704             // vpmovzxwq    ymm0, qword [rdi + 2*rdx]
	LONG $0x347de2c4; WORD $0x574c; BYTE $0x08 // vpmovzxwq    ymm1, qword [rdi + 2*rdx + 8]
	LONG $0x347de2c4; WORD $0x5754; BYTE $0x10 // vpmovzxwq    ymm2, qword [rdi + 2*rdx + 16]
	LONG $0x347de2c4; WORD $0x575c; BYTE $0x18 // vpmovzxwq    ymm3, qword [rdi + 2*rdx + 24]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x347de2c4; WORD $0x5744; BYTE $0x20 // vpmovzxwq    ymm0, qword [rdi + 2*rdx + 32]
	LONG $0x347de2c4; WORD $0x574c; BYTE $0x28 // vpmovzxwq    ymm1, qword [rdi + 2*rdx + 40]
	LONG $0x347de2c4; WORD $0x5754; BYTE $0x30 // vpmovzxwq    ymm2, qword [rdi + 2*rdx + 48]
	LONG $0x347de2c4; WORD $0x575c; BYTE $0x38 // vpmovzxwq    ymm3, qword [rdi + 2*rdx + 56]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB62_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB62_9

LBB62_8:
	LONG $0x347de2c4; WORD $0x5704             // vpmovzxwq    ymm0, qword [rdi + 2*rdx]
	LONG $0x347de2c4; WORD $0x574c; BYTE $0x08 // vpmovzxwq    ymm1, qword [rdi + 2*rdx + 8]
	LONG $0x347de2c4; WORD $0x5754; BYTE $0x10 // vpmovzxwq    ymm2, qword [rdi + 2*rdx + 16]
	LONG $0x347de2c4; WORD $0x575c; BYTE $0x18 // vpmovzxwq    ymm3, qword [rdi + 2*rdx + 24]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB62_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB62_11

LBB62_10:
	LONG $0x4f04b70f         // movzx    eax, word [rdi + 2*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB62_10

LBB62_11:
	VZEROUPPER
	RET

LBB62_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB62_8
	JMP  LBB62_9

TEXT ·_cast_numeric_int16_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB63_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB63_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB63_10

LBB63_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB63_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB63_6:
	LONG $0x247de2c4; WORD $0x5704             // vpmovsxwq    ymm0, qword [rdi + 2*rdx]
	LONG $0x247de2c4; WORD $0x574c; BYTE $0x08 // vpmovsxwq    ymm1, qword [rdi + 2*rdx + 8]
	LONG $0x247de2c4; WORD $0x5754; BYTE $0x10 // vpmovsxwq    ymm2, qword [rdi + 2*rdx + 16]
	LONG $0x247de2c4; WORD $0x575c; BYTE $0x18 // vpmovsxwq    ymm3, qword [rdi + 2*rdx + 24]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x247de2c4; WORD $0x5744; BYTE $0x20 // vpmovsxwq    ymm0, qword [rdi + 2*rdx + 32]
	LONG $0x247de2c4; WORD $0x574c; BYTE $0x28 // vpmovsxwq    ymm1, qword [rdi + 2*rdx + 40]
	LONG $0x247de2c4; WORD $0x5754; BYTE $0x30 // vpmovsxwq    ymm2, qword [rdi + 2*rdx + 48]
	LONG $0x247de2c4; WORD $0x575c; BYTE $0x38 // vpmovsxwq    ymm3, qword [rdi + 2*rdx + 56]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB63_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB63_9

LBB63_8:
	LONG $0x247de2c4; WORD $0x5704             // vpmovsxwq    ymm0, qword [rdi + 2*rdx]
	LONG $0x247de2c4; WORD $0x574c; BYTE $0x08 // vpmovsxwq    ymm1, qword [rdi + 2*rdx + 8]
	LONG $0x247de2c4; WORD $0x5754; BYTE $0x10 // vpmovsxwq    ymm2, qword [rdi + 2*rdx + 16]
	LONG $0x247de2c4; WORD $0x575c; BYTE $0x18 // vpmovsxwq    ymm3, qword [rdi + 2*rdx + 24]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB63_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB63_11

LBB63_10:
	LONG $0x04bf0f48; BYTE $0x4f // movsx    rax, word [rdi + 2*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB63_10

LBB63_11:
	VZEROUPPER
	RET

LBB63_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB63_8
	JMP  LBB63_9

TEXT ·_cast_numeric_uint32_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB64_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB64_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB64_10

LBB64_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB64_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB64_6:
	LONG $0x357de2c4; WORD $0x9704             // vpmovzxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x357de2c4; WORD $0x974c; BYTE $0x10 // vpmovzxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x20 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x30 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x357de2c4; WORD $0x9744; BYTE $0x40 // vpmovzxdq    ymm0, oword [rdi + 4*rdx + 64]
	LONG $0x357de2c4; WORD $0x974c; BYTE $0x50 // vpmovzxdq    ymm1, oword [rdi + 4*rdx + 80]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x60 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 96]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x70 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 112]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB64_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB64_9

LBB64_8:
	LONG $0x357de2c4; WORD $0x9704             // vpmovzxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x357de2c4; WORD $0x974c; BYTE $0x10 // vpmovzxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x20 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x30 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB64_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB64_11

LBB64_10:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB64_10

LBB64_11:
	VZEROUPPER
	RET

LBB64_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB64_8
	JMP  LBB64_9

TEXT ·_cast_numeric_int32_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB65_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB65_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB65_10

LBB65_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB65_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB65_6:
	LONG $0x257de2c4; WORD $0x9704             // vpmovsxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x257de2c4; WORD $0x974c; BYTE $0x10 // vpmovsxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x257de2c4; WORD $0x9754; BYTE $0x20 // vpmovsxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x257de2c4; WORD $0x975c; BYTE $0x30 // vpmovsxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x257de2c4; WORD $0x9744; BYTE $0x40 // vpmovsxdq    ymm0, oword [rdi + 4*rdx + 64]
	LONG $0x257de2c4; WORD $0x974c; BYTE $0x50 // vpmovsxdq    ymm1, oword [rdi + 4*rdx + 80]
	LONG $0x257de2c4; WORD $0x9754; BYTE $0x60 // vpmovsxdq    ymm2, oword [rdi + 4*rdx + 96]
	LONG $0x257de2c4; WORD $0x975c; BYTE $0x70 // vpmovsxdq    ymm3, oword [rdi + 4*rdx + 112]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB65_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB65_9

LBB65_8:
	LONG $0x257de2c4; WORD $0x9704             // vpmovsxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x257de2c4; WORD $0x974c; BYTE $0x10 // vpmovsxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x257de2c4; WORD $0x9754; BYTE $0x20 // vpmovsxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x257de2c4; WORD $0x975c; BYTE $0x30 // vpmovsxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB65_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB65_11

LBB65_10:
	LONG $0x8f046348         // movsxd    rax, dword [rdi + 4*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB65_10

LBB65_11:
	VZEROUPPER
	RET

LBB65_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB65_8
	JMP  LBB65_9

TEXT ·_cast_numeric_uint64_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB66_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB66_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB66_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB66_9

LBB66_2:
	WORD $0xc931 // xor    ecx, ecx

LBB66_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB66_5

LBB66_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB66_4

LBB66_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB66_16

LBB66_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB66_6
	JMP  LBB66_16

LBB66_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB66_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB66_12:
	LONG $0x0410fcc5; BYTE $0xd7         // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7       // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7       // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7       // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6         // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6       // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6       // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6       // vmovups    yword [rsi + 8*rdx + 96], ymm3
	QUAD $0x000080d78410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 8*rdx + 224]
	QUAD $0x000080d68411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB66_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB66_15

LBB66_14:
	LONG $0x0410fcc5; BYTE $0xd7   // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7 // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7 // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7 // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6   // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6 // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6 // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6 // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB66_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB66_3

LBB66_16:
	VZEROUPPER
	RET

LBB66_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB66_14
	JMP  LBB66_15

TEXT ·_cast_numeric_int64_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB67_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB67_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB67_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB67_9

LBB67_2:
	WORD $0xc931 // xor    ecx, ecx

LBB67_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB67_5

LBB67_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB67_4

LBB67_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB67_16

LBB67_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB67_6
	JMP  LBB67_16

LBB67_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB67_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB67_12:
	LONG $0x0410fcc5; BYTE $0xd7         // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7       // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7       // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7       // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6         // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6       // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6       // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6       // vmovups    yword [rsi + 8*rdx + 96], ymm3
	QUAD $0x000080d78410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 8*rdx + 224]
	QUAD $0x000080d68411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB67_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB67_15

LBB67_14:
	LONG $0x0410fcc5; BYTE $0xd7   // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7 // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7 // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7 // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6   // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6 // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6 // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6 // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB67_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB67_3

LBB67_16:
	VZEROUPPER
	RET

LBB67_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB67_14
	JMP  LBB67_15

DATA LCDATA18<>+0x000(SB)/8, $0x000000005f000000
GLOBL LCDATA18<>(SB), 8, $8

TEXT ·_cast_numeric_float32_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA18<>(SB), BP

	WORD $0xd285                           // test    edx, edx
	JLE  LBB68_13
	WORD $0x8941; BYTE $0xd0               // mov    r8d, edx
	QUAD $0x000000000000bb49; WORD $0x8000 // mov    r11, -9223372036854775808
	WORD $0xfa83; BYTE $0x03               // cmp    edx, 3
	JA   LBB68_5
	WORD $0x3145; BYTE $0xf6               // xor    r14d, r14d
	JMP  LBB68_3

LBB68_5:
	WORD $0x8945; BYTE $0xc6 // mov    r14d, r8d
	LONG $0xfce68341         // and    r14d, -4
	LONG $0xfc468d49         // lea    rax, [r14 - 4]
	WORD $0x8949; BYTE $0xc2 // mov    r10, rax
	LONG $0x02eac149         // shr    r10, 2
	LONG $0x01c28349         // add    r10, 1
	WORD $0x8945; BYTE $0xd1 // mov    r9d, r10d
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB68_7
	WORD $0xc031             // xor    eax, eax
	JMP  LBB68_9

LBB68_7:
	LONG $0xfce28349             // and    r10, -4
	WORD $0xf749; BYTE $0xda     // neg    r10
	WORD $0xc031                 // xor    eax, eax
	LONG $0x4510fac5; BYTE $0x00 // vmovss    xmm0, dword 0[rbp] /* [rip + .LCPI68_0] */

LBB68_8:
	LONG $0x4c10fac5; WORD $0x0487 // vmovss    xmm1, dword [rdi + 4*rax + 4]
	LONG $0xd05cf2c5               // vsubss    xmm2, xmm1, xmm0
	LONG $0x2cfae1c4; BYTE $0xca   // vcvttss2si    rcx, xmm2
	LONG $0x1410fac5; BYTE $0x87   // vmovss    xmm2, dword [rdi + 4*rax]
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd9   // vcvttss2si    rbx, xmm1
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0xc85ceac5               // vsubss    xmm1, xmm2, xmm0
	LONG $0x2cfae1c4; BYTE $0xc9   // vcvttss2si    rcx, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd2   // vcvttss2si    rdx, xmm2
	LONG $0xd02ef8c5               // vucomiss    xmm2, xmm0
	LONG $0x6ef9e1c4; BYTE $0xcb   // vmovq    xmm1, rbx
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0x5c10fac5; WORD $0x0c87 // vmovss    xmm3, dword [rdi + 4*rax + 12]
	LONG $0xe05ce2c5               // vsubss    xmm4, xmm3, xmm0
	LONG $0x2cfae1c4; BYTE $0xcc   // vcvttss2si    rcx, xmm4
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd3   // vcvttss2si    rdx, xmm3
	LONG $0xd82ef8c5               // vucomiss    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x5410fac5; WORD $0x0887 // vmovss    xmm2, dword [rdi + 4*rax + 8]
	LONG $0xd85ceac5               // vsubss    xmm3, xmm2, xmm0
	LONG $0x2cfae1c4; BYTE $0xcb   // vcvttss2si    rcx, xmm3
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd2   // vcvttss2si    rdx, xmm2
	LONG $0xd02ef8c5               // vucomiss    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0xd36ce9c5               // vpunpcklqdq    xmm2, xmm2, xmm3
	LONG $0x547ffac5; WORD $0x10c6 // vmovdqu    oword [rsi + 8*rax + 16], xmm2
	LONG $0x0c7ffac5; BYTE $0xc6   // vmovdqu    oword [rsi + 8*rax], xmm1
	LONG $0x4c10fac5; WORD $0x1487 // vmovss    xmm1, dword [rdi + 4*rax + 20]
	LONG $0xd05cf2c5               // vsubss    xmm2, xmm1, xmm0
	LONG $0x2cfae1c4; BYTE $0xca   // vcvttss2si    rcx, xmm2
	LONG $0x5410fac5; WORD $0x1087 // vmovss    xmm2, dword [rdi + 4*rax + 16]
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd1   // vcvttss2si    rdx, xmm1
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0xc85ceac5               // vsubss    xmm1, xmm2, xmm0
	LONG $0x2cfae1c4; BYTE $0xc9   // vcvttss2si    rcx, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xda   // vcvttss2si    rbx, xmm2
	LONG $0xd02ef8c5               // vucomiss    xmm2, xmm0
	LONG $0x6ef9e1c4; BYTE $0xca   // vmovq    xmm1, rdx
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd3   // vmovq    xmm2, rbx
	LONG $0x5c10fac5; WORD $0x1c87 // vmovss    xmm3, dword [rdi + 4*rax + 28]
	LONG $0xe05ce2c5               // vsubss    xmm4, xmm3, xmm0
	LONG $0x2cfae1c4; BYTE $0xcc   // vcvttss2si    rcx, xmm4
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd3   // vcvttss2si    rdx, xmm3
	LONG $0xd82ef8c5               // vucomiss    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x5410fac5; WORD $0x1887 // vmovss    xmm2, dword [rdi + 4*rax + 24]
	LONG $0xd85ceac5               // vsubss    xmm3, xmm2, xmm0
	LONG $0x2cfae1c4; BYTE $0xcb   // vcvttss2si    rcx, xmm3
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd2   // vcvttss2si    rdx, xmm2
	LONG $0xd02ef8c5               // vucomiss    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0xd36ce9c5               // vpunpcklqdq    xmm2, xmm2, xmm3
	LONG $0x547ffac5; WORD $0x30c6 // vmovdqu    oword [rsi + 8*rax + 48], xmm2
	LONG $0x4c7ffac5; WORD $0x20c6 // vmovdqu    oword [rsi + 8*rax + 32], xmm1
	LONG $0x4c10fac5; WORD $0x2487 // vmovss    xmm1, dword [rdi + 4*rax + 36]
	LONG $0xd05cf2c5               // vsubss    xmm2, xmm1, xmm0
	LONG $0x2cfae1c4; BYTE $0xca   // vcvttss2si    rcx, xmm2
	LONG $0x5410fac5; WORD $0x2087 // vmovss    xmm2, dword [rdi + 4*rax + 32]
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd1   // vcvttss2si    rdx, xmm1
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0xc85ceac5               // vsubss    xmm1, xmm2, xmm0
	LONG $0x2cfae1c4; BYTE $0xc9   // vcvttss2si    rcx, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xda   // vcvttss2si    rbx, xmm2
	LONG $0xd02ef8c5               // vucomiss    xmm2, xmm0
	LONG $0x6ef9e1c4; BYTE $0xca   // vmovq    xmm1, rdx
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd3   // vmovq    xmm2, rbx
	LONG $0x5c10fac5; WORD $0x2c87 // vmovss    xmm3, dword [rdi + 4*rax + 44]
	LONG $0xe05ce2c5               // vsubss    xmm4, xmm3, xmm0
	LONG $0x2cfae1c4; BYTE $0xcc   // vcvttss2si    rcx, xmm4
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd3   // vcvttss2si    rdx, xmm3
	LONG $0xd82ef8c5               // vucomiss    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x5410fac5; WORD $0x2887 // vmovss    xmm2, dword [rdi + 4*rax + 40]
	LONG $0xd85ceac5               // vsubss    xmm3, xmm2, xmm0
	LONG $0x2cfae1c4; BYTE $0xcb   // vcvttss2si    rcx, xmm3
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd2   // vcvttss2si    rdx, xmm2
	LONG $0xd02ef8c5               // vucomiss    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0xd36ce9c5               // vpunpcklqdq    xmm2, xmm2, xmm3
	LONG $0x547ffac5; WORD $0x50c6 // vmovdqu    oword [rsi + 8*rax + 80], xmm2
	LONG $0x4c7ffac5; WORD $0x40c6 // vmovdqu    oword [rsi + 8*rax + 64], xmm1
	LONG $0x4c10fac5; WORD $0x3487 // vmovss    xmm1, dword [rdi + 4*rax + 52]
	LONG $0xd05cf2c5               // vsubss    xmm2, xmm1, xmm0
	LONG $0x2cfae1c4; BYTE $0xca   // vcvttss2si    rcx, xmm2
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd1   // vcvttss2si    rdx, xmm1
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x4c10fac5; WORD $0x3087 // vmovss    xmm1, dword [rdi + 4*rax + 48]
	LONG $0xd05cf2c5               // vsubss    xmm2, xmm1, xmm0
	LONG $0x2cfae1c4; BYTE $0xca   // vcvttss2si    rcx, xmm2
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd9   // vcvttss2si    rbx, xmm1
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0x6ef9e1c4; BYTE $0xca   // vmovq    xmm1, rdx
	LONG $0x6ef9e1c4; BYTE $0xd3   // vmovq    xmm2, rbx
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0x5410fac5; WORD $0x3c87 // vmovss    xmm2, dword [rdi + 4*rax + 60]
	LONG $0xd85ceac5               // vsubss    xmm3, xmm2, xmm0
	LONG $0x2cfae1c4; BYTE $0xcb   // vcvttss2si    rcx, xmm3
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd2   // vcvttss2si    rdx, xmm2
	LONG $0xd02ef8c5               // vucomiss    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0x5c10fac5; WORD $0x3887 // vmovss    xmm3, dword [rdi + 4*rax + 56]
	LONG $0xe05ce2c5               // vsubss    xmm4, xmm3, xmm0
	LONG $0x2cfae1c4; BYTE $0xcc   // vcvttss2si    rcx, xmm4
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd3   // vcvttss2si    rdx, xmm3
	LONG $0xd82ef8c5               // vucomiss    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	LONG $0xd26ce1c5               // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x547ffac5; WORD $0x70c6 // vmovdqu    oword [rsi + 8*rax + 112], xmm2
	LONG $0x4c7ffac5; WORD $0x60c6 // vmovdqu    oword [rsi + 8*rax + 96], xmm1
	LONG $0x10c08348               // add    rax, 16
	LONG $0x04c28349               // add    r10, 4
	JNE  LBB68_8

LBB68_9:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB68_12
	LONG $0x02e0c148             // shl    rax, 2
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x4510fac5; BYTE $0x00 // vmovss    xmm0, dword 0[rbp] /* [rip + .LCPI68_0] */

LBB68_11:
	LONG $0x4c10fac5; WORD $0x0407 // vmovss    xmm1, dword [rdi + rax + 4]
	LONG $0xd05cf2c5               // vsubss    xmm2, xmm1, xmm0
	LONG $0x2cfae1c4; BYTE $0xca   // vcvttss2si    rcx, xmm2
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd1   // vcvttss2si    rdx, xmm1
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x0c10fac5; BYTE $0x07   // vmovss    xmm1, dword [rdi + rax]
	LONG $0xd05cf2c5               // vsubss    xmm2, xmm1, xmm0
	LONG $0x2cfae1c4; BYTE $0xca   // vcvttss2si    rcx, xmm2
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd9   // vcvttss2si    rbx, xmm1
	LONG $0xc82ef8c5               // vucomiss    xmm1, xmm0
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0x6ef9e1c4; BYTE $0xca   // vmovq    xmm1, rdx
	LONG $0x6ef9e1c4; BYTE $0xd3   // vmovq    xmm2, rbx
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0x5410fac5; WORD $0x0c07 // vmovss    xmm2, dword [rdi + rax + 12]
	LONG $0xd85ceac5               // vsubss    xmm3, xmm2, xmm0
	LONG $0x2cfae1c4; BYTE $0xcb   // vcvttss2si    rcx, xmm3
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd2   // vcvttss2si    rdx, xmm2
	LONG $0xd02ef8c5               // vucomiss    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0x5c10fac5; WORD $0x0807 // vmovss    xmm3, dword [rdi + rax + 8]
	LONG $0xe05ce2c5               // vsubss    xmm4, xmm3, xmm0
	LONG $0x2cfae1c4; BYTE $0xcc   // vcvttss2si    rcx, xmm4
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfae1c4; BYTE $0xd3   // vcvttss2si    rdx, xmm3
	LONG $0xd82ef8c5               // vucomiss    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	LONG $0xd26ce1c5               // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x547ffac5; WORD $0x1046 // vmovdqu    oword [rsi + 2*rax + 16], xmm2
	LONG $0x0c7ffac5; BYTE $0x46   // vmovdqu    oword [rsi + 2*rax], xmm1
	LONG $0x10c08348               // add    rax, 16
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB68_11

LBB68_12:
	WORD $0x394d; BYTE $0xc6 // cmp    r14, r8
	JE   LBB68_13

LBB68_3:
	LONG $0x4510fac5; BYTE $0x00 // vmovss    xmm0, dword 0[rbp] /* [rip + .LCPI68_0] */

LBB68_4:
	LONG $0x107aa1c4; WORD $0xb70c // vmovss    xmm1, dword [rdi + 4*r14]
	LONG $0xd05cf2c5               // vsubss    xmm2, xmm1, xmm0
	LONG $0x2cfae1c4; BYTE $0xc2   // vcvttss2si    rax, xmm2
	WORD $0x314c; BYTE $0xd8       // xor    rax, r11
	LONG $0x2cfae1c4; BYTE $0xc9   // vcvttss2si    rcx, xmm1
	LONG $0xc12ef8c5               // vucomiss    xmm0, xmm1
	LONG $0xc8460f48               // cmovbe    rcx, rax
	LONG $0xf60c894a               // mov    qword [rsi + 8*r14], rcx
	LONG $0x01c68349               // add    r14, 1
	WORD $0x394d; BYTE $0xf0       // cmp    r8, r14
	JNE  LBB68_4

LBB68_13:
	RET

DATA LCDATA19<>+0x000(SB)/8, $0x43e0000000000000
GLOBL LCDATA19<>(SB), 8, $8

TEXT ·_cast_numeric_float64_uint64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA19<>(SB), BP

	WORD $0xd285                           // test    edx, edx
	JLE  LBB69_13
	WORD $0x8941; BYTE $0xd0               // mov    r8d, edx
	QUAD $0x000000000000bb49; WORD $0x8000 // mov    r11, -9223372036854775808
	WORD $0xfa83; BYTE $0x03               // cmp    edx, 3
	JA   LBB69_5
	WORD $0x3145; BYTE $0xf6               // xor    r14d, r14d
	JMP  LBB69_3

LBB69_5:
	WORD $0x8945; BYTE $0xc6 // mov    r14d, r8d
	LONG $0xfce68341         // and    r14d, -4
	LONG $0xfc468d49         // lea    rax, [r14 - 4]
	WORD $0x8949; BYTE $0xc2 // mov    r10, rax
	LONG $0x02eac149         // shr    r10, 2
	LONG $0x01c28349         // add    r10, 1
	WORD $0x8945; BYTE $0xd1 // mov    r9d, r10d
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB69_7
	WORD $0xc031             // xor    eax, eax
	JMP  LBB69_9

LBB69_7:
	LONG $0xfce28349             // and    r10, -4
	WORD $0xf749; BYTE $0xda     // neg    r10
	WORD $0xc031                 // xor    eax, eax
	LONG $0x4510fbc5; BYTE $0x00 // vmovsd    xmm0, qword 0[rbp] /* [rip + .LCPI69_0] */

LBB69_8:
	LONG $0x4c10fbc5; WORD $0x08c7 // vmovsd    xmm1, qword [rdi + 8*rax + 8]
	LONG $0xd05cf3c5               // vsubsd    xmm2, xmm1, xmm0
	LONG $0x2cfbe1c4; BYTE $0xca   // vcvttsd2si    rcx, xmm2
	LONG $0x1410fbc5; BYTE $0xc7   // vmovsd    xmm2, qword [rdi + 8*rax]
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd9   // vcvttsd2si    rbx, xmm1
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0xc85cebc5               // vsubsd    xmm1, xmm2, xmm0
	LONG $0x2cfbe1c4; BYTE $0xc9   // vcvttsd2si    rcx, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd2   // vcvttsd2si    rdx, xmm2
	LONG $0xd02ef9c5               // vucomisd    xmm2, xmm0
	LONG $0x6ef9e1c4; BYTE $0xcb   // vmovq    xmm1, rbx
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0x5c10fbc5; WORD $0x18c7 // vmovsd    xmm3, qword [rdi + 8*rax + 24]
	LONG $0xe05ce3c5               // vsubsd    xmm4, xmm3, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcc   // vcvttsd2si    rcx, xmm4
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd3   // vcvttsd2si    rdx, xmm3
	LONG $0xd82ef9c5               // vucomisd    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x5410fbc5; WORD $0x10c7 // vmovsd    xmm2, qword [rdi + 8*rax + 16]
	LONG $0xd85cebc5               // vsubsd    xmm3, xmm2, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcb   // vcvttsd2si    rcx, xmm3
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd2   // vcvttsd2si    rdx, xmm2
	LONG $0xd02ef9c5               // vucomisd    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0xd36ce9c5               // vpunpcklqdq    xmm2, xmm2, xmm3
	LONG $0x547ffac5; WORD $0x10c6 // vmovdqu    oword [rsi + 8*rax + 16], xmm2
	LONG $0x0c7ffac5; BYTE $0xc6   // vmovdqu    oword [rsi + 8*rax], xmm1
	LONG $0x4c10fbc5; WORD $0x28c7 // vmovsd    xmm1, qword [rdi + 8*rax + 40]
	LONG $0xd05cf3c5               // vsubsd    xmm2, xmm1, xmm0
	LONG $0x2cfbe1c4; BYTE $0xca   // vcvttsd2si    rcx, xmm2
	LONG $0x5410fbc5; WORD $0x20c7 // vmovsd    xmm2, qword [rdi + 8*rax + 32]
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd1   // vcvttsd2si    rdx, xmm1
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0xc85cebc5               // vsubsd    xmm1, xmm2, xmm0
	LONG $0x2cfbe1c4; BYTE $0xc9   // vcvttsd2si    rcx, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xda   // vcvttsd2si    rbx, xmm2
	LONG $0xd02ef9c5               // vucomisd    xmm2, xmm0
	LONG $0x6ef9e1c4; BYTE $0xca   // vmovq    xmm1, rdx
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd3   // vmovq    xmm2, rbx
	LONG $0x5c10fbc5; WORD $0x38c7 // vmovsd    xmm3, qword [rdi + 8*rax + 56]
	LONG $0xe05ce3c5               // vsubsd    xmm4, xmm3, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcc   // vcvttsd2si    rcx, xmm4
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd3   // vcvttsd2si    rdx, xmm3
	LONG $0xd82ef9c5               // vucomisd    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x5410fbc5; WORD $0x30c7 // vmovsd    xmm2, qword [rdi + 8*rax + 48]
	LONG $0xd85cebc5               // vsubsd    xmm3, xmm2, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcb   // vcvttsd2si    rcx, xmm3
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd2   // vcvttsd2si    rdx, xmm2
	LONG $0xd02ef9c5               // vucomisd    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0xd36ce9c5               // vpunpcklqdq    xmm2, xmm2, xmm3
	LONG $0x547ffac5; WORD $0x30c6 // vmovdqu    oword [rsi + 8*rax + 48], xmm2
	LONG $0x4c7ffac5; WORD $0x20c6 // vmovdqu    oword [rsi + 8*rax + 32], xmm1
	LONG $0x4c10fbc5; WORD $0x48c7 // vmovsd    xmm1, qword [rdi + 8*rax + 72]
	LONG $0xd05cf3c5               // vsubsd    xmm2, xmm1, xmm0
	LONG $0x2cfbe1c4; BYTE $0xca   // vcvttsd2si    rcx, xmm2
	LONG $0x5410fbc5; WORD $0x40c7 // vmovsd    xmm2, qword [rdi + 8*rax + 64]
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd1   // vcvttsd2si    rdx, xmm1
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0xc85cebc5               // vsubsd    xmm1, xmm2, xmm0
	LONG $0x2cfbe1c4; BYTE $0xc9   // vcvttsd2si    rcx, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xda   // vcvttsd2si    rbx, xmm2
	LONG $0xd02ef9c5               // vucomisd    xmm2, xmm0
	LONG $0x6ef9e1c4; BYTE $0xca   // vmovq    xmm1, rdx
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd3   // vmovq    xmm2, rbx
	LONG $0x5c10fbc5; WORD $0x58c7 // vmovsd    xmm3, qword [rdi + 8*rax + 88]
	LONG $0xe05ce3c5               // vsubsd    xmm4, xmm3, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcc   // vcvttsd2si    rcx, xmm4
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd3   // vcvttsd2si    rdx, xmm3
	LONG $0xd82ef9c5               // vucomisd    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x5410fbc5; WORD $0x50c7 // vmovsd    xmm2, qword [rdi + 8*rax + 80]
	LONG $0xd85cebc5               // vsubsd    xmm3, xmm2, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcb   // vcvttsd2si    rcx, xmm3
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd2   // vcvttsd2si    rdx, xmm2
	LONG $0xd02ef9c5               // vucomisd    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0xd36ce9c5               // vpunpcklqdq    xmm2, xmm2, xmm3
	LONG $0x547ffac5; WORD $0x50c6 // vmovdqu    oword [rsi + 8*rax + 80], xmm2
	LONG $0x4c7ffac5; WORD $0x40c6 // vmovdqu    oword [rsi + 8*rax + 64], xmm1
	LONG $0x4c10fbc5; WORD $0x68c7 // vmovsd    xmm1, qword [rdi + 8*rax + 104]
	LONG $0xd05cf3c5               // vsubsd    xmm2, xmm1, xmm0
	LONG $0x2cfbe1c4; BYTE $0xca   // vcvttsd2si    rcx, xmm2
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd1   // vcvttsd2si    rdx, xmm1
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x4c10fbc5; WORD $0x60c7 // vmovsd    xmm1, qword [rdi + 8*rax + 96]
	LONG $0xd05cf3c5               // vsubsd    xmm2, xmm1, xmm0
	LONG $0x2cfbe1c4; BYTE $0xca   // vcvttsd2si    rcx, xmm2
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd9   // vcvttsd2si    rbx, xmm1
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0x6ef9e1c4; BYTE $0xca   // vmovq    xmm1, rdx
	LONG $0x6ef9e1c4; BYTE $0xd3   // vmovq    xmm2, rbx
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0x5410fbc5; WORD $0x78c7 // vmovsd    xmm2, qword [rdi + 8*rax + 120]
	LONG $0xd85cebc5               // vsubsd    xmm3, xmm2, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcb   // vcvttsd2si    rcx, xmm3
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd2   // vcvttsd2si    rdx, xmm2
	LONG $0xd02ef9c5               // vucomisd    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0x5c10fbc5; WORD $0x70c7 // vmovsd    xmm3, qword [rdi + 8*rax + 112]
	LONG $0xe05ce3c5               // vsubsd    xmm4, xmm3, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcc   // vcvttsd2si    rcx, xmm4
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd3   // vcvttsd2si    rdx, xmm3
	LONG $0xd82ef9c5               // vucomisd    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	LONG $0xd26ce1c5               // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x547ffac5; WORD $0x70c6 // vmovdqu    oword [rsi + 8*rax + 112], xmm2
	LONG $0x4c7ffac5; WORD $0x60c6 // vmovdqu    oword [rsi + 8*rax + 96], xmm1
	LONG $0x10c08348               // add    rax, 16
	LONG $0x04c28349               // add    r10, 4
	JNE  LBB69_8

LBB69_9:
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE   LBB69_12
	LONG $0x03e0c148             // shl    rax, 3
	WORD $0xf749; BYTE $0xd9     // neg    r9
	LONG $0x4510fbc5; BYTE $0x00 // vmovsd    xmm0, qword 0[rbp] /* [rip + .LCPI69_0] */

LBB69_11:
	LONG $0x4c10fbc5; WORD $0x0807 // vmovsd    xmm1, qword [rdi + rax + 8]
	LONG $0xd05cf3c5               // vsubsd    xmm2, xmm1, xmm0
	LONG $0x2cfbe1c4; BYTE $0xca   // vcvttsd2si    rcx, xmm2
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd1   // vcvttsd2si    rdx, xmm1
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x0c10fbc5; BYTE $0x07   // vmovsd    xmm1, qword [rdi + rax]
	LONG $0xd05cf3c5               // vsubsd    xmm2, xmm1, xmm0
	LONG $0x2cfbe1c4; BYTE $0xca   // vcvttsd2si    rcx, xmm2
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd9   // vcvttsd2si    rbx, xmm1
	LONG $0xc82ef9c5               // vucomisd    xmm1, xmm0
	LONG $0xd9430f48               // cmovae    rbx, rcx
	LONG $0x6ef9e1c4; BYTE $0xca   // vmovq    xmm1, rdx
	LONG $0x6ef9e1c4; BYTE $0xd3   // vmovq    xmm2, rbx
	LONG $0xc96ce9c5               // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0x5410fbc5; WORD $0x1807 // vmovsd    xmm2, qword [rdi + rax + 24]
	LONG $0xd85cebc5               // vsubsd    xmm3, xmm2, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcb   // vcvttsd2si    rcx, xmm3
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd2   // vcvttsd2si    rdx, xmm2
	LONG $0xd02ef9c5               // vucomisd    xmm2, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xd2   // vmovq    xmm2, rdx
	LONG $0x5c10fbc5; WORD $0x1007 // vmovsd    xmm3, qword [rdi + rax + 16]
	LONG $0xe05ce3c5               // vsubsd    xmm4, xmm3, xmm0
	LONG $0x2cfbe1c4; BYTE $0xcc   // vcvttsd2si    rcx, xmm4
	WORD $0x314c; BYTE $0xd9       // xor    rcx, r11
	LONG $0x2cfbe1c4; BYTE $0xd3   // vcvttsd2si    rdx, xmm3
	LONG $0xd82ef9c5               // vucomisd    xmm3, xmm0
	LONG $0xd1430f48               // cmovae    rdx, rcx
	LONG $0x6ef9e1c4; BYTE $0xda   // vmovq    xmm3, rdx
	LONG $0xd26ce1c5               // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x547ffac5; WORD $0x1006 // vmovdqu    oword [rsi + rax + 16], xmm2
	LONG $0x0c7ffac5; BYTE $0x06   // vmovdqu    oword [rsi + rax], xmm1
	LONG $0x20c08348               // add    rax, 32
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB69_11

LBB69_12:
	WORD $0x394d; BYTE $0xc6 // cmp    r14, r8
	JE   LBB69_13

LBB69_3:
	LONG $0x4510fbc5; BYTE $0x00 // vmovsd    xmm0, qword 0[rbp] /* [rip + .LCPI69_0] */

LBB69_4:
	LONG $0x107ba1c4; WORD $0xf70c // vmovsd    xmm1, qword [rdi + 8*r14]
	LONG $0xd05cf3c5               // vsubsd    xmm2, xmm1, xmm0
	LONG $0x2cfbe1c4; BYTE $0xc2   // vcvttsd2si    rax, xmm2
	WORD $0x314c; BYTE $0xd8       // xor    rax, r11
	LONG $0x2cfbe1c4; BYTE $0xc9   // vcvttsd2si    rcx, xmm1
	LONG $0xc12ef9c5               // vucomisd    xmm0, xmm1
	LONG $0xc8460f48               // cmovbe    rcx, rax
	LONG $0xf60c894a               // mov    qword [rsi + 8*r14], rcx
	LONG $0x01c68349               // add    r14, 1
	WORD $0x394d; BYTE $0xf0       // cmp    r8, r14
	JNE  LBB69_4

LBB69_13:
	RET

TEXT ·_cast_numeric_uint8_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB70_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB70_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB70_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB70_9

LBB70_2:
	WORD $0xc931 // xor    ecx, ecx

LBB70_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB70_5

LBB70_4:
	LONG $0x0f04b60f // movzx    eax, byte [rdi + rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB70_4

LBB70_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB70_16

LBB70_6:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x0f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rcx + 1]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0x0f44b60f; BYTE $0x02 // movzx    eax, byte [rdi + rcx + 2]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0x0f44b60f; BYTE $0x03 // movzx    eax, byte [rdi + rcx + 3]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB70_6
	JMP  LBB70_16

LBB70_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB70_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB70_12:
	LONG $0x327de2c4; WORD $0x1704             // vpmovzxbq    ymm0, dword [rdi + rdx]
	LONG $0x327de2c4; WORD $0x174c; BYTE $0x04 // vpmovzxbq    ymm1, dword [rdi + rdx + 4]
	LONG $0x327de2c4; WORD $0x1754; BYTE $0x08 // vpmovzxbq    ymm2, dword [rdi + rdx + 8]
	LONG $0x327de2c4; WORD $0x175c; BYTE $0x0c // vpmovzxbq    ymm3, dword [rdi + rdx + 12]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x327de2c4; WORD $0x1744; BYTE $0x10 // vpmovzxbq    ymm0, dword [rdi + rdx + 16]
	LONG $0x327de2c4; WORD $0x174c; BYTE $0x14 // vpmovzxbq    ymm1, dword [rdi + rdx + 20]
	LONG $0x327de2c4; WORD $0x1754; BYTE $0x18 // vpmovzxbq    ymm2, dword [rdi + rdx + 24]
	LONG $0x327de2c4; WORD $0x175c; BYTE $0x1c // vpmovzxbq    ymm3, dword [rdi + rdx + 28]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB70_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB70_15

LBB70_14:
	LONG $0x327de2c4; WORD $0x1704             // vpmovzxbq    ymm0, dword [rdi + rdx]
	LONG $0x327de2c4; WORD $0x174c; BYTE $0x04 // vpmovzxbq    ymm1, dword [rdi + rdx + 4]
	LONG $0x327de2c4; WORD $0x1754; BYTE $0x08 // vpmovzxbq    ymm2, dword [rdi + rdx + 8]
	LONG $0x327de2c4; WORD $0x175c; BYTE $0x0c // vpmovzxbq    ymm3, dword [rdi + rdx + 12]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB70_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB70_3

LBB70_16:
	VZEROUPPER
	RET

LBB70_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB70_14
	JMP  LBB70_15

TEXT ·_cast_numeric_int8_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB71_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB71_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB71_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB71_9

LBB71_2:
	WORD $0xc931 // xor    ecx, ecx

LBB71_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB71_5

LBB71_4:
	LONG $0x04be0f48; BYTE $0x0f // movsx    rax, byte [rdi + rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB71_4

LBB71_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB71_16

LBB71_6:
	LONG $0x04be0f48; BYTE $0x0f   // movsx    rax, byte [rdi + rcx]
	LONG $0xce048948               // mov    qword [rsi + 8*rcx], rax
	LONG $0x44be0f48; WORD $0x010f // movsx    rax, byte [rdi + rcx + 1]
	LONG $0xce448948; BYTE $0x08   // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0x44be0f48; WORD $0x020f // movsx    rax, byte [rdi + rcx + 2]
	LONG $0xce448948; BYTE $0x10   // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0x44be0f48; WORD $0x030f // movsx    rax, byte [rdi + rcx + 3]
	LONG $0xce448948; BYTE $0x18   // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB71_6
	JMP  LBB71_16

LBB71_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB71_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB71_12:
	LONG $0x227de2c4; WORD $0x1704             // vpmovsxbq    ymm0, dword [rdi + rdx]
	LONG $0x227de2c4; WORD $0x174c; BYTE $0x04 // vpmovsxbq    ymm1, dword [rdi + rdx + 4]
	LONG $0x227de2c4; WORD $0x1754; BYTE $0x08 // vpmovsxbq    ymm2, dword [rdi + rdx + 8]
	LONG $0x227de2c4; WORD $0x175c; BYTE $0x0c // vpmovsxbq    ymm3, dword [rdi + rdx + 12]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x227de2c4; WORD $0x1744; BYTE $0x10 // vpmovsxbq    ymm0, dword [rdi + rdx + 16]
	LONG $0x227de2c4; WORD $0x174c; BYTE $0x14 // vpmovsxbq    ymm1, dword [rdi + rdx + 20]
	LONG $0x227de2c4; WORD $0x1754; BYTE $0x18 // vpmovsxbq    ymm2, dword [rdi + rdx + 24]
	LONG $0x227de2c4; WORD $0x175c; BYTE $0x1c // vpmovsxbq    ymm3, dword [rdi + rdx + 28]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB71_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB71_15

LBB71_14:
	LONG $0x227de2c4; WORD $0x1704             // vpmovsxbq    ymm0, dword [rdi + rdx]
	LONG $0x227de2c4; WORD $0x174c; BYTE $0x04 // vpmovsxbq    ymm1, dword [rdi + rdx + 4]
	LONG $0x227de2c4; WORD $0x1754; BYTE $0x08 // vpmovsxbq    ymm2, dword [rdi + rdx + 8]
	LONG $0x227de2c4; WORD $0x175c; BYTE $0x0c // vpmovsxbq    ymm3, dword [rdi + rdx + 12]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB71_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB71_3

LBB71_16:
	VZEROUPPER
	RET

LBB71_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB71_14
	JMP  LBB71_15

TEXT ·_cast_numeric_uint16_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB72_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB72_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB72_10

LBB72_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB72_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB72_6:
	LONG $0x347de2c4; WORD $0x5704             // vpmovzxwq    ymm0, qword [rdi + 2*rdx]
	LONG $0x347de2c4; WORD $0x574c; BYTE $0x08 // vpmovzxwq    ymm1, qword [rdi + 2*rdx + 8]
	LONG $0x347de2c4; WORD $0x5754; BYTE $0x10 // vpmovzxwq    ymm2, qword [rdi + 2*rdx + 16]
	LONG $0x347de2c4; WORD $0x575c; BYTE $0x18 // vpmovzxwq    ymm3, qword [rdi + 2*rdx + 24]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x347de2c4; WORD $0x5744; BYTE $0x20 // vpmovzxwq    ymm0, qword [rdi + 2*rdx + 32]
	LONG $0x347de2c4; WORD $0x574c; BYTE $0x28 // vpmovzxwq    ymm1, qword [rdi + 2*rdx + 40]
	LONG $0x347de2c4; WORD $0x5754; BYTE $0x30 // vpmovzxwq    ymm2, qword [rdi + 2*rdx + 48]
	LONG $0x347de2c4; WORD $0x575c; BYTE $0x38 // vpmovzxwq    ymm3, qword [rdi + 2*rdx + 56]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB72_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB72_9

LBB72_8:
	LONG $0x347de2c4; WORD $0x5704             // vpmovzxwq    ymm0, qword [rdi + 2*rdx]
	LONG $0x347de2c4; WORD $0x574c; BYTE $0x08 // vpmovzxwq    ymm1, qword [rdi + 2*rdx + 8]
	LONG $0x347de2c4; WORD $0x5754; BYTE $0x10 // vpmovzxwq    ymm2, qword [rdi + 2*rdx + 16]
	LONG $0x347de2c4; WORD $0x575c; BYTE $0x18 // vpmovzxwq    ymm3, qword [rdi + 2*rdx + 24]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB72_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB72_11

LBB72_10:
	LONG $0x4f04b70f         // movzx    eax, word [rdi + 2*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB72_10

LBB72_11:
	VZEROUPPER
	RET

LBB72_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB72_8
	JMP  LBB72_9

TEXT ·_cast_numeric_int16_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB73_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB73_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB73_10

LBB73_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB73_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB73_6:
	LONG $0x247de2c4; WORD $0x5704             // vpmovsxwq    ymm0, qword [rdi + 2*rdx]
	LONG $0x247de2c4; WORD $0x574c; BYTE $0x08 // vpmovsxwq    ymm1, qword [rdi + 2*rdx + 8]
	LONG $0x247de2c4; WORD $0x5754; BYTE $0x10 // vpmovsxwq    ymm2, qword [rdi + 2*rdx + 16]
	LONG $0x247de2c4; WORD $0x575c; BYTE $0x18 // vpmovsxwq    ymm3, qword [rdi + 2*rdx + 24]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x247de2c4; WORD $0x5744; BYTE $0x20 // vpmovsxwq    ymm0, qword [rdi + 2*rdx + 32]
	LONG $0x247de2c4; WORD $0x574c; BYTE $0x28 // vpmovsxwq    ymm1, qword [rdi + 2*rdx + 40]
	LONG $0x247de2c4; WORD $0x5754; BYTE $0x30 // vpmovsxwq    ymm2, qword [rdi + 2*rdx + 48]
	LONG $0x247de2c4; WORD $0x575c; BYTE $0x38 // vpmovsxwq    ymm3, qword [rdi + 2*rdx + 56]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB73_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB73_9

LBB73_8:
	LONG $0x247de2c4; WORD $0x5704             // vpmovsxwq    ymm0, qword [rdi + 2*rdx]
	LONG $0x247de2c4; WORD $0x574c; BYTE $0x08 // vpmovsxwq    ymm1, qword [rdi + 2*rdx + 8]
	LONG $0x247de2c4; WORD $0x5754; BYTE $0x10 // vpmovsxwq    ymm2, qword [rdi + 2*rdx + 16]
	LONG $0x247de2c4; WORD $0x575c; BYTE $0x18 // vpmovsxwq    ymm3, qword [rdi + 2*rdx + 24]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB73_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB73_11

LBB73_10:
	LONG $0x04bf0f48; BYTE $0x4f // movsx    rax, word [rdi + 2*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB73_10

LBB73_11:
	VZEROUPPER
	RET

LBB73_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB73_8
	JMP  LBB73_9

TEXT ·_cast_numeric_uint32_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB74_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB74_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB74_10

LBB74_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB74_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB74_6:
	LONG $0x357de2c4; WORD $0x9704             // vpmovzxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x357de2c4; WORD $0x974c; BYTE $0x10 // vpmovzxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x20 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x30 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x357de2c4; WORD $0x9744; BYTE $0x40 // vpmovzxdq    ymm0, oword [rdi + 4*rdx + 64]
	LONG $0x357de2c4; WORD $0x974c; BYTE $0x50 // vpmovzxdq    ymm1, oword [rdi + 4*rdx + 80]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x60 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 96]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x70 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 112]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB74_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB74_9

LBB74_8:
	LONG $0x357de2c4; WORD $0x9704             // vpmovzxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x357de2c4; WORD $0x974c; BYTE $0x10 // vpmovzxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x20 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x30 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB74_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB74_11

LBB74_10:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB74_10

LBB74_11:
	VZEROUPPER
	RET

LBB74_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB74_8
	JMP  LBB74_9

TEXT ·_cast_numeric_int32_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB75_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB75_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB75_10

LBB75_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB75_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB75_6:
	LONG $0x257de2c4; WORD $0x9704             // vpmovsxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x257de2c4; WORD $0x974c; BYTE $0x10 // vpmovsxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x257de2c4; WORD $0x9754; BYTE $0x20 // vpmovsxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x257de2c4; WORD $0x975c; BYTE $0x30 // vpmovsxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x257de2c4; WORD $0x9744; BYTE $0x40 // vpmovsxdq    ymm0, oword [rdi + 4*rdx + 64]
	LONG $0x257de2c4; WORD $0x974c; BYTE $0x50 // vpmovsxdq    ymm1, oword [rdi + 4*rdx + 80]
	LONG $0x257de2c4; WORD $0x9754; BYTE $0x60 // vpmovsxdq    ymm2, oword [rdi + 4*rdx + 96]
	LONG $0x257de2c4; WORD $0x975c; BYTE $0x70 // vpmovsxdq    ymm3, oword [rdi + 4*rdx + 112]
	QUAD $0x000080d6847ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d6947ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c7ffec5; BYTE $0x00       // vmovdqu    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB75_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB75_9

LBB75_8:
	LONG $0x257de2c4; WORD $0x9704             // vpmovsxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x257de2c4; WORD $0x974c; BYTE $0x10 // vpmovsxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x257de2c4; WORD $0x9754; BYTE $0x20 // vpmovsxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x257de2c4; WORD $0x975c; BYTE $0x30 // vpmovsxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x047ffec5; BYTE $0xd6               // vmovdqu    yword [rsi + 8*rdx], ymm0
	LONG $0x4c7ffec5; WORD $0x20d6             // vmovdqu    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x547ffec5; WORD $0x40d6             // vmovdqu    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c7ffec5; WORD $0x60d6             // vmovdqu    yword [rsi + 8*rdx + 96], ymm3

LBB75_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB75_11

LBB75_10:
	LONG $0x8f046348         // movsxd    rax, dword [rdi + 4*rcx]
	LONG $0xce048948         // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB75_10

LBB75_11:
	VZEROUPPER
	RET

LBB75_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB75_8
	JMP  LBB75_9

TEXT ·_cast_numeric_uint64_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB76_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB76_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB76_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB76_9

LBB76_2:
	WORD $0xc931 // xor    ecx, ecx

LBB76_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB76_5

LBB76_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB76_4

LBB76_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB76_16

LBB76_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB76_6
	JMP  LBB76_16

LBB76_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB76_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB76_12:
	LONG $0x0410fcc5; BYTE $0xd7         // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7       // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7       // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7       // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6         // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6       // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6       // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6       // vmovups    yword [rsi + 8*rdx + 96], ymm3
	QUAD $0x000080d78410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 8*rdx + 224]
	QUAD $0x000080d68411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB76_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB76_15

LBB76_14:
	LONG $0x0410fcc5; BYTE $0xd7   // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7 // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7 // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7 // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6   // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6 // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6 // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6 // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB76_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB76_3

LBB76_16:
	VZEROUPPER
	RET

LBB76_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB76_14
	JMP  LBB76_15

TEXT ·_cast_numeric_int64_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB77_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB77_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB77_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB77_9

LBB77_2:
	WORD $0xc931 // xor    ecx, ecx

LBB77_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB77_5

LBB77_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB77_4

LBB77_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB77_16

LBB77_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB77_6
	JMP  LBB77_16

LBB77_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB77_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB77_12:
	LONG $0x0410fcc5; BYTE $0xd7         // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7       // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7       // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7       // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6         // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6       // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6       // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6       // vmovups    yword [rsi + 8*rdx + 96], ymm3
	QUAD $0x000080d78410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 8*rdx + 224]
	QUAD $0x000080d68411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB77_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB77_15

LBB77_14:
	LONG $0x0410fcc5; BYTE $0xd7   // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7 // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7 // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7 // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6   // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6 // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6 // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6 // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB77_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB77_3

LBB77_16:
	VZEROUPPER
	RET

LBB77_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB77_14
	JMP  LBB77_15

TEXT ·_cast_numeric_float32_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB78_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB78_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB78_10

LBB78_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB78_4
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xfee28349         // and    r10, -2
	WORD $0xf749; BYTE $0xda // neg    r10
	WORD $0xd231             // xor    edx, edx

LBB78_6:
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x04 // vcvttss2si    rax, dword [rdi + 4*rdx + 4]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x2cfae1c4; WORD $0x9704             // vcvttss2si    rax, dword [rdi + 4*rdx]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x0c // vcvttss2si    rax, dword [rdi + 4*rdx + 12]
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0x2cfa61c4; WORD $0x975c; BYTE $0x08 // vcvttss2si    r11, dword [rdi + 4*rdx + 8]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x1c // vcvttss2si    rbx, dword [rdi + 4*rdx + 28]
	LONG $0x6ef9c1c4; BYTE $0xd3               // vmovq    xmm2, r11
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x18 // vcvttss2si    rax, dword [rdi + 4*rdx + 24]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0x6ef9e1c4; BYTE $0xd3               // vmovq    xmm2, rbx
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0xd26ce1c5                           // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x14 // vcvttss2si    rax, dword [rdi + 4*rdx + 20]
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x10 // vcvttss2si    rax, dword [rdi + 4*rdx + 16]
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x2c // vcvttss2si    rax, dword [rdi + 4*rdx + 44]
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x28 // vcvttss2si    rax, dword [rdi + 4*rdx + 40]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x24 // vcvttss2si    rax, dword [rdi + 4*rdx + 36]
	LONG $0xe46cd1c5                           // vpunpcklqdq    xmm4, xmm5, xmm4
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x20 // vcvttss2si    rbx, dword [rdi + 4*rdx + 32]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x3c // vcvttss2si    rax, dword [rdi + 4*rdx + 60]
	LONG $0x6ef9e1c4; BYTE $0xf3               // vmovq    xmm6, rbx
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x38 // vcvttss2si    rbx, dword [rdi + 4*rdx + 56]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0x6ef9e1c4; BYTE $0xfb               // vmovq    xmm7, rbx
	LONG $0xf66cc1c5                           // vpunpcklqdq    xmm6, xmm7, xmm6
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x34 // vcvttss2si    rax, dword [rdi + 4*rdx + 52]
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x30 // vcvttss2si    rax, dword [rdi + 4*rdx + 48]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0xc76cf9c5                           // vpunpcklqdq    xmm0, xmm0, xmm7
	LONG $0x4c7ffac5; WORD $0x10d6             // vmovdqu    oword [rsi + 8*rdx + 16], xmm1
	LONG $0x047f7ac5; BYTE $0xd6               // vmovdqu    oword [rsi + 8*rdx], xmm8
	LONG $0x5c7ffac5; WORD $0x20d6             // vmovdqu    oword [rsi + 8*rdx + 32], xmm3
	LONG $0x547ffac5; WORD $0x30d6             // vmovdqu    oword [rsi + 8*rdx + 48], xmm2
	LONG $0x6c7ffac5; WORD $0x40d6             // vmovdqu    oword [rsi + 8*rdx + 64], xmm5
	LONG $0x647ffac5; WORD $0x50d6             // vmovdqu    oword [rsi + 8*rdx + 80], xmm4
	LONG $0x447ffac5; WORD $0x60d6             // vmovdqu    oword [rsi + 8*rdx + 96], xmm0
	LONG $0x747ffac5; WORD $0x70d6             // vmovdqu    oword [rsi + 8*rdx + 112], xmm6
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x44 // vcvttss2si    rax, dword [rdi + 4*rdx + 68]
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x40 // vcvttss2si    rbx, dword [rdi + 4*rdx + 64]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x4c // vcvttss2si    rax, dword [rdi + 4*rdx + 76]
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x48 // vcvttss2si    rbx, dword [rdi + 4*rdx + 72]
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	LONG $0xca6cf1c5                           // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x5c // vcvttss2si    rax, dword [rdi + 4*rdx + 92]
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x58 // vcvttss2si    rax, dword [rdi + 4*rdx + 88]
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0xd26ce1c5                           // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x54 // vcvttss2si    rax, dword [rdi + 4*rdx + 84]
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x50 // vcvttss2si    rax, dword [rdi + 4*rdx + 80]
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x6c // vcvttss2si    rax, dword [rdi + 4*rdx + 108]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x68 // vcvttss2si    rax, dword [rdi + 4*rdx + 104]
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x64 // vcvttss2si    rax, dword [rdi + 4*rdx + 100]
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x60 // vcvttss2si    rax, dword [rdi + 4*rdx + 96]
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0xe56cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm5
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0xef6cd1c5                           // vpunpcklqdq    xmm5, xmm5, xmm7
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x7c // vcvttss2si    rax, dword [rdi + 4*rdx + 124]
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x78 // vcvttss2si    rax, dword [rdi + 4*rdx + 120]
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	LONG $0xf66cc1c5                           // vpunpcklqdq    xmm6, xmm7, xmm6
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x74 // vcvttss2si    rax, dword [rdi + 4*rdx + 116]
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x70 // vcvttss2si    rax, dword [rdi + 4*rdx + 112]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0xc76cf9c5                           // vpunpcklqdq    xmm0, xmm0, xmm7
	QUAD $0x000090d68c7ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 144], xmm1
	QUAD $0x000080d6847f7ac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 128], xmm8
	QUAD $0x0000a0d69c7ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 160], xmm3
	QUAD $0x0000b0d6947ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 176], xmm2
	QUAD $0x0000c0d6ac7ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 192], xmm5
	QUAD $0x0000d0d6a47ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 208], xmm4
	QUAD $0x0000e0d6847ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 224], xmm0
	QUAD $0x0000f0d6b47ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 240], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c28349                           // add    r10, 2
	JNE  LBB78_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB78_9

LBB78_8:
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x04 // vcvttss2si    rax, dword [rdi + 4*rdx + 4]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x2cfae1c4; WORD $0x9704             // vcvttss2si    rax, dword [rdi + 4*rdx]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x0c // vcvttss2si    rax, dword [rdi + 4*rdx + 12]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x08 // vcvttss2si    rax, dword [rdi + 4*rdx + 8]
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x1c // vcvttss2si    rax, dword [rdi + 4*rdx + 28]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x18 // vcvttss2si    rbx, dword [rdi + 4*rdx + 24]
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x14 // vcvttss2si    rax, dword [rdi + 4*rdx + 20]
	LONG $0x6ef9e1c4; BYTE $0xdb               // vmovq    xmm3, rbx
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x10 // vcvttss2si    rbx, dword [rdi + 4*rdx + 16]
	LONG $0xd26ce1c5                           // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0x6ef9e1c4; BYTE $0xe3               // vmovq    xmm4, rbx
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x2c // vcvttss2si    rax, dword [rdi + 4*rdx + 44]
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x28 // vcvttss2si    rax, dword [rdi + 4*rdx + 40]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0xe46cd1c5                           // vpunpcklqdq    xmm4, xmm5, xmm4
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x24 // vcvttss2si    rax, dword [rdi + 4*rdx + 36]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x20 // vcvttss2si    rax, dword [rdi + 4*rdx + 32]
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x3c // vcvttss2si    rax, dword [rdi + 4*rdx + 60]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x38 // vcvttss2si    rbx, dword [rdi + 4*rdx + 56]
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0x2cfae1c4; WORD $0x9744; BYTE $0x34 // vcvttss2si    rax, dword [rdi + 4*rdx + 52]
	LONG $0x6ef9e1c4; BYTE $0xfb               // vmovq    xmm7, rbx
	LONG $0x2cfae1c4; WORD $0x975c; BYTE $0x30 // vcvttss2si    rbx, dword [rdi + 4*rdx + 48]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0xf66cc1c5                           // vpunpcklqdq    xmm6, xmm7, xmm6
	LONG $0x6ef9e1c4; BYTE $0xfb               // vmovq    xmm7, rbx
	LONG $0xc06cc1c5                           // vpunpcklqdq    xmm0, xmm7, xmm0
	LONG $0x4c7ffac5; WORD $0x10d6             // vmovdqu    oword [rsi + 8*rdx + 16], xmm1
	LONG $0x047f7ac5; BYTE $0xd6               // vmovdqu    oword [rsi + 8*rdx], xmm8
	LONG $0x5c7ffac5; WORD $0x20d6             // vmovdqu    oword [rsi + 8*rdx + 32], xmm3
	LONG $0x547ffac5; WORD $0x30d6             // vmovdqu    oword [rsi + 8*rdx + 48], xmm2
	LONG $0x6c7ffac5; WORD $0x40d6             // vmovdqu    oword [rsi + 8*rdx + 64], xmm5
	LONG $0x647ffac5; WORD $0x50d6             // vmovdqu    oword [rsi + 8*rdx + 80], xmm4
	LONG $0x447ffac5; WORD $0x60d6             // vmovdqu    oword [rsi + 8*rdx + 96], xmm0
	LONG $0x747ffac5; WORD $0x70d6             // vmovdqu    oword [rsi + 8*rdx + 112], xmm6

LBB78_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB78_11

LBB78_10:
	LONG $0x2cfae1c4; WORD $0x8f04 // vcvttss2si    rax, dword [rdi + 4*rcx]
	LONG $0xce048948               // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348               // add    rcx, 1
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB78_10

LBB78_11:
	RET

LBB78_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB78_8
	JMP  LBB78_9

TEXT ·_cast_numeric_float64_int64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB79_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB79_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB79_10

LBB79_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB79_4
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xfee28349         // and    r10, -2
	WORD $0xf749; BYTE $0xda // neg    r10
	WORD $0xd231             // xor    edx, edx

LBB79_6:
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x08 // vcvttsd2si    rax, qword [rdi + 8*rdx + 8]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x2cfbe1c4; WORD $0xd704             // vcvttsd2si    rax, qword [rdi + 8*rdx]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x18 // vcvttsd2si    rax, qword [rdi + 8*rdx + 24]
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0x2cfb61c4; WORD $0xd75c; BYTE $0x10 // vcvttsd2si    r11, qword [rdi + 8*rdx + 16]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x2cfbe1c4; WORD $0xd75c; BYTE $0x38 // vcvttsd2si    rbx, qword [rdi + 8*rdx + 56]
	LONG $0x6ef9c1c4; BYTE $0xd3               // vmovq    xmm2, r11
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x30 // vcvttsd2si    rax, qword [rdi + 8*rdx + 48]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0x6ef9e1c4; BYTE $0xd3               // vmovq    xmm2, rbx
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0xd26ce1c5                           // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x28 // vcvttsd2si    rax, qword [rdi + 8*rdx + 40]
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x20 // vcvttsd2si    rax, qword [rdi + 8*rdx + 32]
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x58 // vcvttsd2si    rax, qword [rdi + 8*rdx + 88]
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x50 // vcvttsd2si    rax, qword [rdi + 8*rdx + 80]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x48 // vcvttsd2si    rax, qword [rdi + 8*rdx + 72]
	LONG $0xe46cd1c5                           // vpunpcklqdq    xmm4, xmm5, xmm4
	LONG $0x2cfbe1c4; WORD $0xd75c; BYTE $0x40 // vcvttsd2si    rbx, qword [rdi + 8*rdx + 64]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x78 // vcvttsd2si    rax, qword [rdi + 8*rdx + 120]
	LONG $0x6ef9e1c4; BYTE $0xf3               // vmovq    xmm6, rbx
	LONG $0x2cfbe1c4; WORD $0xd75c; BYTE $0x70 // vcvttsd2si    rbx, qword [rdi + 8*rdx + 112]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0x6ef9e1c4; BYTE $0xfb               // vmovq    xmm7, rbx
	LONG $0xf66cc1c5                           // vpunpcklqdq    xmm6, xmm7, xmm6
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x68 // vcvttsd2si    rax, qword [rdi + 8*rdx + 104]
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x60 // vcvttsd2si    rax, qword [rdi + 8*rdx + 96]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0xc76cf9c5                           // vpunpcklqdq    xmm0, xmm0, xmm7
	LONG $0x4c7ffac5; WORD $0x10d6             // vmovdqu    oword [rsi + 8*rdx + 16], xmm1
	LONG $0x047f7ac5; BYTE $0xd6               // vmovdqu    oword [rsi + 8*rdx], xmm8
	LONG $0x5c7ffac5; WORD $0x20d6             // vmovdqu    oword [rsi + 8*rdx + 32], xmm3
	LONG $0x547ffac5; WORD $0x30d6             // vmovdqu    oword [rsi + 8*rdx + 48], xmm2
	LONG $0x6c7ffac5; WORD $0x40d6             // vmovdqu    oword [rsi + 8*rdx + 64], xmm5
	LONG $0x647ffac5; WORD $0x50d6             // vmovdqu    oword [rsi + 8*rdx + 80], xmm4
	LONG $0x447ffac5; WORD $0x60d6             // vmovdqu    oword [rsi + 8*rdx + 96], xmm0
	LONG $0x747ffac5; WORD $0x70d6             // vmovdqu    oword [rsi + 8*rdx + 112], xmm6
	QUAD $0x0088d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 136]
	QUAD $0x0080d79c2cfbe1c4; WORD $0x0000     // vcvttsd2si    rbx, qword [rdi + 8*rdx + 128]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	QUAD $0x0098d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 152]
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	QUAD $0x0090d79c2cfbe1c4; WORD $0x0000     // vcvttsd2si    rbx, qword [rdi + 8*rdx + 144]
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0x6ef9e1c4; BYTE $0xcb               // vmovq    xmm1, rbx
	LONG $0xca6cf1c5                           // vpunpcklqdq    xmm1, xmm1, xmm2
	QUAD $0x00b8d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 184]
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	QUAD $0x00b0d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 176]
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0xd26ce1c5                           // vpunpcklqdq    xmm2, xmm3, xmm2
	QUAD $0x00a8d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 168]
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	QUAD $0x00a0d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 160]
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	QUAD $0x00d8d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 216]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	QUAD $0x00d0d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 208]
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	QUAD $0x00c8d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 200]
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	QUAD $0x00c0d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 192]
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0xe56cc9c5                           // vpunpcklqdq    xmm4, xmm6, xmm5
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0xef6cd1c5                           // vpunpcklqdq    xmm5, xmm5, xmm7
	QUAD $0x00f8d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 248]
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	QUAD $0x00f0d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 240]
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	LONG $0xf66cc1c5                           // vpunpcklqdq    xmm6, xmm7, xmm6
	QUAD $0x00e8d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 232]
	LONG $0x6ef9e1c4; BYTE $0xf8               // vmovq    xmm7, rax
	QUAD $0x00e0d7842cfbe1c4; WORD $0x0000     // vcvttsd2si    rax, qword [rdi + 8*rdx + 224]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0xc76cf9c5                           // vpunpcklqdq    xmm0, xmm0, xmm7
	QUAD $0x000090d68c7ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 144], xmm1
	QUAD $0x000080d6847f7ac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 128], xmm8
	QUAD $0x0000a0d69c7ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 160], xmm3
	QUAD $0x0000b0d6947ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 176], xmm2
	QUAD $0x0000c0d6ac7ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 192], xmm5
	QUAD $0x0000d0d6a47ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 208], xmm4
	QUAD $0x0000e0d6847ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 224], xmm0
	QUAD $0x0000f0d6b47ffac5; BYTE $0x00       // vmovdqu    oword [rsi + 8*rdx + 240], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c28349                           // add    r10, 2
	JNE  LBB79_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB79_9

LBB79_8:
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x08 // vcvttsd2si    rax, qword [rdi + 8*rdx + 8]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x2cfbe1c4; WORD $0xd704             // vcvttsd2si    rax, qword [rdi + 8*rdx]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xc06c71c5                           // vpunpcklqdq    xmm8, xmm1, xmm0
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x18 // vcvttsd2si    rax, qword [rdi + 8*rdx + 24]
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x10 // vcvttsd2si    rax, qword [rdi + 8*rdx + 16]
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x38 // vcvttsd2si    rax, qword [rdi + 8*rdx + 56]
	LONG $0xc96ce9c5                           // vpunpcklqdq    xmm1, xmm2, xmm1
	LONG $0x2cfbe1c4; WORD $0xd75c; BYTE $0x30 // vcvttsd2si    rbx, qword [rdi + 8*rdx + 48]
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x28 // vcvttsd2si    rax, qword [rdi + 8*rdx + 40]
	LONG $0x6ef9e1c4; BYTE $0xdb               // vmovq    xmm3, rbx
	LONG $0x2cfbe1c4; WORD $0xd75c; BYTE $0x20 // vcvttsd2si    rbx, qword [rdi + 8*rdx + 32]
	LONG $0xd26ce1c5                           // vpunpcklqdq    xmm2, xmm3, xmm2
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq    xmm3, rax
	LONG $0x6ef9e1c4; BYTE $0xe3               // vmovq    xmm4, rbx
	LONG $0xdb6cd9c5                           // vpunpcklqdq    xmm3, xmm4, xmm3
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x58 // vcvttsd2si    rax, qword [rdi + 8*rdx + 88]
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x50 // vcvttsd2si    rax, qword [rdi + 8*rdx + 80]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0xe46cd1c5                           // vpunpcklqdq    xmm4, xmm5, xmm4
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x48 // vcvttsd2si    rax, qword [rdi + 8*rdx + 72]
	LONG $0x6ef9e1c4; BYTE $0xe8               // vmovq    xmm5, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x40 // vcvttsd2si    rax, qword [rdi + 8*rdx + 64]
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x78 // vcvttsd2si    rax, qword [rdi + 8*rdx + 120]
	LONG $0xed6cc9c5                           // vpunpcklqdq    xmm5, xmm6, xmm5
	LONG $0x2cfbe1c4; WORD $0xd75c; BYTE $0x70 // vcvttsd2si    rbx, qword [rdi + 8*rdx + 112]
	LONG $0x6ef9e1c4; BYTE $0xf0               // vmovq    xmm6, rax
	LONG $0x2cfbe1c4; WORD $0xd744; BYTE $0x68 // vcvttsd2si    rax, qword [rdi + 8*rdx + 104]
	LONG $0x6ef9e1c4; BYTE $0xfb               // vmovq    xmm7, rbx
	LONG $0x2cfbe1c4; WORD $0xd75c; BYTE $0x60 // vcvttsd2si    rbx, qword [rdi + 8*rdx + 96]
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0xf66cc1c5                           // vpunpcklqdq    xmm6, xmm7, xmm6
	LONG $0x6ef9e1c4; BYTE $0xfb               // vmovq    xmm7, rbx
	LONG $0xc06cc1c5                           // vpunpcklqdq    xmm0, xmm7, xmm0
	LONG $0x4c7ffac5; WORD $0x10d6             // vmovdqu    oword [rsi + 8*rdx + 16], xmm1
	LONG $0x047f7ac5; BYTE $0xd6               // vmovdqu    oword [rsi + 8*rdx], xmm8
	LONG $0x5c7ffac5; WORD $0x20d6             // vmovdqu    oword [rsi + 8*rdx + 32], xmm3
	LONG $0x547ffac5; WORD $0x30d6             // vmovdqu    oword [rsi + 8*rdx + 48], xmm2
	LONG $0x6c7ffac5; WORD $0x40d6             // vmovdqu    oword [rsi + 8*rdx + 64], xmm5
	LONG $0x647ffac5; WORD $0x50d6             // vmovdqu    oword [rsi + 8*rdx + 80], xmm4
	LONG $0x447ffac5; WORD $0x60d6             // vmovdqu    oword [rsi + 8*rdx + 96], xmm0
	LONG $0x747ffac5; WORD $0x70d6             // vmovdqu    oword [rsi + 8*rdx + 112], xmm6

LBB79_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB79_11

LBB79_10:
	LONG $0x2cfbe1c4; WORD $0xcf04 // vcvttsd2si    rax, qword [rdi + 8*rcx]
	LONG $0xce048948               // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348               // add    rcx, 1
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB79_10

LBB79_11:
	RET

LBB79_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB79_8
	JMP  LBB79_9

TEXT ·_cast_numeric_uint8_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB80_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB80_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB80_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB80_9

LBB80_2:
	WORD $0xc931 // xor    ecx, ecx

LBB80_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB80_5

LBB80_4:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0xc02adac5             // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB80_4

LBB80_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB80_16

LBB80_6:
	LONG $0x0f04b60f               // movzx    eax, byte [rdi + rcx]
	LONG $0xc02adac5               // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x0411fac5; BYTE $0x8e   // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x0f44b60f; BYTE $0x01   // movzx    eax, byte [rdi + rcx + 1]
	LONG $0xc02adac5               // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x4411fac5; WORD $0x048e // vmovss    dword [rsi + 4*rcx + 4], xmm0
	LONG $0x0f44b60f; BYTE $0x02   // movzx    eax, byte [rdi + rcx + 2]
	LONG $0xc02adac5               // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x4411fac5; WORD $0x088e // vmovss    dword [rsi + 4*rcx + 8], xmm0
	LONG $0x0f44b60f; BYTE $0x03   // movzx    eax, byte [rdi + rcx + 3]
	LONG $0xc02adac5               // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x4411fac5; WORD $0x0c8e // vmovss    dword [rsi + 4*rcx + 12], xmm0
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB80_6
	JMP  LBB80_16

LBB80_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB80_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB80_12:
	LONG $0x317de2c4; WORD $0x1704             // vpmovzxbd    ymm0, qword [rdi + rdx]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x08 // vpmovzxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x10 // vpmovzxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x18 // vpmovzxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	LONG $0x0411fcc5; BYTE $0x96               // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096             // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096             // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096             // vmovups    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x317de2c4; WORD $0x1744; BYTE $0x20 // vpmovzxbd    ymm0, qword [rdi + rdx + 32]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x28 // vpmovzxbd    ymm1, qword [rdi + rdx + 40]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x30 // vpmovzxbd    ymm2, qword [rdi + rdx + 48]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x38 // vpmovzxbd    ymm3, qword [rdi + rdx + 56]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	QUAD $0x000080968411fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB80_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB80_15

LBB80_14:
	LONG $0x317de2c4; WORD $0x1704             // vpmovzxbd    ymm0, qword [rdi + rdx]
	LONG $0x317de2c4; WORD $0x174c; BYTE $0x08 // vpmovzxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x317de2c4; WORD $0x1754; BYTE $0x10 // vpmovzxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x317de2c4; WORD $0x175c; BYTE $0x18 // vpmovzxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	LONG $0x0411fcc5; BYTE $0x96               // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096             // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096             // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096             // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB80_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB80_3

LBB80_16:
	VZEROUPPER
	RET

LBB80_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB80_14
	JMP  LBB80_15

TEXT ·_cast_numeric_int8_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB81_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB81_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB81_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB81_9

LBB81_2:
	WORD $0xc931 // xor    ecx, ecx

LBB81_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB81_5

LBB81_4:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	LONG $0xc02adac5             // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB81_4

LBB81_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB81_16

LBB81_6:
	LONG $0x0f04be0f               // movsx    eax, byte [rdi + rcx]
	LONG $0xc02adac5               // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x0411fac5; BYTE $0x8e   // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x0f44be0f; BYTE $0x01   // movsx    eax, byte [rdi + rcx + 1]
	LONG $0xc02adac5               // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x4411fac5; WORD $0x048e // vmovss    dword [rsi + 4*rcx + 4], xmm0
	LONG $0x0f44be0f; BYTE $0x02   // movsx    eax, byte [rdi + rcx + 2]
	LONG $0xc02adac5               // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x4411fac5; WORD $0x088e // vmovss    dword [rsi + 4*rcx + 8], xmm0
	LONG $0x0f44be0f; BYTE $0x03   // movsx    eax, byte [rdi + rcx + 3]
	LONG $0xc02adac5               // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x4411fac5; WORD $0x0c8e // vmovss    dword [rsi + 4*rcx + 12], xmm0
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB81_6
	JMP  LBB81_16

LBB81_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB81_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB81_12:
	LONG $0x217de2c4; WORD $0x1704             // vpmovsxbd    ymm0, qword [rdi + rdx]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x08 // vpmovsxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x10 // vpmovsxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x18 // vpmovsxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	LONG $0x0411fcc5; BYTE $0x96               // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096             // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096             // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096             // vmovups    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x217de2c4; WORD $0x1744; BYTE $0x20 // vpmovsxbd    ymm0, qword [rdi + rdx + 32]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x28 // vpmovsxbd    ymm1, qword [rdi + rdx + 40]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x30 // vpmovsxbd    ymm2, qword [rdi + rdx + 48]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x38 // vpmovsxbd    ymm3, qword [rdi + rdx + 56]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	QUAD $0x000080968411fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB81_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB81_15

LBB81_14:
	LONG $0x217de2c4; WORD $0x1704             // vpmovsxbd    ymm0, qword [rdi + rdx]
	LONG $0x217de2c4; WORD $0x174c; BYTE $0x08 // vpmovsxbd    ymm1, qword [rdi + rdx + 8]
	LONG $0x217de2c4; WORD $0x1754; BYTE $0x10 // vpmovsxbd    ymm2, qword [rdi + rdx + 16]
	LONG $0x217de2c4; WORD $0x175c; BYTE $0x18 // vpmovsxbd    ymm3, qword [rdi + rdx + 24]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	LONG $0x0411fcc5; BYTE $0x96               // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096             // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096             // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096             // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB81_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB81_3

LBB81_16:
	VZEROUPPER
	RET

LBB81_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB81_14
	JMP  LBB81_15

TEXT ·_cast_numeric_uint16_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB82_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB82_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB82_10

LBB82_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB82_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB82_6:
	LONG $0x337de2c4; WORD $0x5704             // vpmovzxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x10 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x20 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x30 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	LONG $0x0411fcc5; BYTE $0x96               // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096             // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096             // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096             // vmovups    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x337de2c4; WORD $0x5744; BYTE $0x40 // vpmovzxwd    ymm0, oword [rdi + 2*rdx + 64]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x50 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 80]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x60 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 96]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x70 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 112]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	QUAD $0x000080968411fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB82_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB82_9

LBB82_8:
	LONG $0x337de2c4; WORD $0x5704             // vpmovzxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x337de2c4; WORD $0x574c; BYTE $0x10 // vpmovzxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x337de2c4; WORD $0x5754; BYTE $0x20 // vpmovzxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x337de2c4; WORD $0x575c; BYTE $0x30 // vpmovzxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	LONG $0x0411fcc5; BYTE $0x96               // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096             // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096             // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096             // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB82_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB82_11

LBB82_10:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0xc02adac5             // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB82_10

LBB82_11:
	VZEROUPPER
	RET

LBB82_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB82_8
	JMP  LBB82_9

TEXT ·_cast_numeric_int16_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB83_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB83_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB83_10

LBB83_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB83_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB83_6:
	LONG $0x237de2c4; WORD $0x5704             // vpmovsxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x20 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x30 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	LONG $0x0411fcc5; BYTE $0x96               // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096             // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096             // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096             // vmovups    yword [rsi + 4*rdx + 96], ymm3
	LONG $0x237de2c4; WORD $0x5744; BYTE $0x40 // vpmovsxwd    ymm0, oword [rdi + 2*rdx + 64]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x50 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 80]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x60 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 96]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x70 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 112]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	QUAD $0x000080968411fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB83_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB83_9

LBB83_8:
	LONG $0x237de2c4; WORD $0x5704             // vpmovsxwd    ymm0, oword [rdi + 2*rdx]
	LONG $0x237de2c4; WORD $0x574c; BYTE $0x10 // vpmovsxwd    ymm1, oword [rdi + 2*rdx + 16]
	LONG $0x237de2c4; WORD $0x5754; BYTE $0x20 // vpmovsxwd    ymm2, oword [rdi + 2*rdx + 32]
	LONG $0x237de2c4; WORD $0x575c; BYTE $0x30 // vpmovsxwd    ymm3, oword [rdi + 2*rdx + 48]
	LONG $0xc05bfcc5                           // vcvtdq2ps    ymm0, ymm0
	LONG $0xc95bfcc5                           // vcvtdq2ps    ymm1, ymm1
	LONG $0xd25bfcc5                           // vcvtdq2ps    ymm2, ymm2
	LONG $0xdb5bfcc5                           // vcvtdq2ps    ymm3, ymm3
	LONG $0x0411fcc5; BYTE $0x96               // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096             // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096             // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096             // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB83_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB83_11

LBB83_10:
	LONG $0x4f04bf0f             // movsx    eax, word [rdi + 2*rcx]
	LONG $0xc02adac5             // vcvtsi2ss    xmm0, xmm4, eax
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB83_10

LBB83_11:
	VZEROUPPER
	RET

LBB83_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB83_8
	JMP  LBB83_9

DATA LCDATA20<>+0x000(SB)/8, $0x530000004b000000
DATA LCDATA20<>+0x008(SB)/8, $0x0000000053000080
GLOBL LCDATA20<>(SB), 8, $16

TEXT ·_cast_numeric_uint32_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA20<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB84_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB84_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB84_10

LBB84_3:
	WORD $0x8944; BYTE $0xc9       // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0       // and    ecx, -32
	LONG $0xe0418d48               // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0       // mov    r8, rax
	LONG $0x05e8c149               // shr    r8, 5
	LONG $0x01c08349               // add    r8, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB84_4
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0xfee08348               // and    rax, -2
	WORD $0xf748; BYTE $0xd8       // neg    rax
	LONG $0x587de2c4; WORD $0x0045 // vpbroadcastd    ymm0, dword 0[rbp] /* [rip + .LCPI84_0] */
	WORD $0xd231                   // xor    edx, edx
	LONG $0x587de2c4; WORD $0x044d // vpbroadcastd    ymm1, dword 4[rbp] /* [rip + .LCPI84_1] */
	LONG $0x187de2c4; WORD $0x0855 // vbroadcastss    ymm2, dword 8[rbp] /* [rip + .LCPI84_2] */

LBB84_6:
	LONG $0x1c6ffec5; BYTE $0x97         // vmovdqu    ymm3, yword [rdi + 4*rdx]
	LONG $0x646ffec5; WORD $0x2097       // vmovdqu    ymm4, yword [rdi + 4*rdx + 32]
	LONG $0x6c6ffec5; WORD $0x4097       // vmovdqu    ymm5, yword [rdi + 4*rdx + 64]
	LONG $0x746ffec5; WORD $0x6097       // vmovdqu    ymm6, yword [rdi + 4*rdx + 96]
	LONG $0x0e65e3c4; WORD $0xaaf8       // vpblendw    ymm7, ymm3, ymm0, 170
	LONG $0xd372e5c5; BYTE $0x10         // vpsrld    ymm3, ymm3, 16
	LONG $0x0e65e3c4; WORD $0xaad9       // vpblendw    ymm3, ymm3, ymm1, 170
	LONG $0xda5ce4c5                     // vsubps    ymm3, ymm3, ymm2
	LONG $0xdb58c4c5                     // vaddps    ymm3, ymm7, ymm3
	LONG $0x0e5de3c4; WORD $0xaaf8       // vpblendw    ymm7, ymm4, ymm0, 170
	LONG $0xd472ddc5; BYTE $0x10         // vpsrld    ymm4, ymm4, 16
	LONG $0x0e5de3c4; WORD $0xaae1       // vpblendw    ymm4, ymm4, ymm1, 170
	LONG $0xe25cdcc5                     // vsubps    ymm4, ymm4, ymm2
	LONG $0xe458c4c5                     // vaddps    ymm4, ymm7, ymm4
	LONG $0x0e55e3c4; WORD $0xaaf8       // vpblendw    ymm7, ymm5, ymm0, 170
	LONG $0xd572d5c5; BYTE $0x10         // vpsrld    ymm5, ymm5, 16
	LONG $0x0e55e3c4; WORD $0xaae9       // vpblendw    ymm5, ymm5, ymm1, 170
	LONG $0xea5cd4c5                     // vsubps    ymm5, ymm5, ymm2
	LONG $0xed58c4c5                     // vaddps    ymm5, ymm7, ymm5
	LONG $0x0e4de3c4; WORD $0xaaf8       // vpblendw    ymm7, ymm6, ymm0, 170
	LONG $0xd672cdc5; BYTE $0x10         // vpsrld    ymm6, ymm6, 16
	LONG $0x0e4de3c4; WORD $0xaaf1       // vpblendw    ymm6, ymm6, ymm1, 170
	LONG $0xf25cccc5                     // vsubps    ymm6, ymm6, ymm2
	LONG $0xf658c4c5                     // vaddps    ymm6, ymm7, ymm6
	LONG $0x1c11fcc5; BYTE $0x96         // vmovups    yword [rsi + 4*rdx], ymm3
	LONG $0x6411fcc5; WORD $0x2096       // vmovups    yword [rsi + 4*rdx + 32], ymm4
	LONG $0x6c11fcc5; WORD $0x4096       // vmovups    yword [rsi + 4*rdx + 64], ymm5
	LONG $0x7411fcc5; WORD $0x6096       // vmovups    yword [rsi + 4*rdx + 96], ymm6
	QUAD $0x000080979c6ffec5; BYTE $0x00 // vmovdqu    ymm3, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a097a46ffec5; BYTE $0x00 // vmovdqu    ymm4, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c097ac6ffec5; BYTE $0x00 // vmovdqu    ymm5, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e097b46ffec5; BYTE $0x00 // vmovdqu    ymm6, yword [rdi + 4*rdx + 224]
	LONG $0x0e65e3c4; WORD $0xaaf8       // vpblendw    ymm7, ymm3, ymm0, 170
	LONG $0xd372e5c5; BYTE $0x10         // vpsrld    ymm3, ymm3, 16
	LONG $0x0e65e3c4; WORD $0xaad9       // vpblendw    ymm3, ymm3, ymm1, 170
	LONG $0xda5ce4c5                     // vsubps    ymm3, ymm3, ymm2
	LONG $0xdb58c4c5                     // vaddps    ymm3, ymm7, ymm3
	LONG $0x0e5de3c4; WORD $0xaaf8       // vpblendw    ymm7, ymm4, ymm0, 170
	LONG $0xd472ddc5; BYTE $0x10         // vpsrld    ymm4, ymm4, 16
	LONG $0x0e5de3c4; WORD $0xaae1       // vpblendw    ymm4, ymm4, ymm1, 170
	LONG $0xe25cdcc5                     // vsubps    ymm4, ymm4, ymm2
	LONG $0xe458c4c5                     // vaddps    ymm4, ymm7, ymm4
	LONG $0x0e55e3c4; WORD $0xaaf8       // vpblendw    ymm7, ymm5, ymm0, 170
	LONG $0xd572d5c5; BYTE $0x10         // vpsrld    ymm5, ymm5, 16
	LONG $0x0e55e3c4; WORD $0xaae9       // vpblendw    ymm5, ymm5, ymm1, 170
	LONG $0xea5cd4c5                     // vsubps    ymm5, ymm5, ymm2
	LONG $0xed58c4c5                     // vaddps    ymm5, ymm7, ymm5
	LONG $0x0e4de3c4; WORD $0xaaf8       // vpblendw    ymm7, ymm6, ymm0, 170
	LONG $0xd672cdc5; BYTE $0x10         // vpsrld    ymm6, ymm6, 16
	LONG $0x0e4de3c4; WORD $0xaaf1       // vpblendw    ymm6, ymm6, ymm1, 170
	LONG $0xf25cccc5                     // vsubps    ymm6, ymm6, ymm2
	LONG $0xf658c4c5                     // vaddps    ymm6, ymm7, ymm6
	QUAD $0x000080969c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 128], ymm3
	QUAD $0x0000a096a411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 160], ymm4
	QUAD $0x0000c096ac11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 192], ymm5
	QUAD $0x0000e096b411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 224], ymm6
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB84_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB84_9

LBB84_8:
	LONG $0x046ffec5; BYTE $0x97   // vmovdqu    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c6ffec5; WORD $0x2097 // vmovdqu    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x546ffec5; WORD $0x4097 // vmovdqu    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x587de2c4; WORD $0x005d // vpbroadcastd    ymm3, dword 0[rbp] /* [rip + .LCPI84_0] */
	LONG $0x646ffec5; WORD $0x6097 // vmovdqu    ymm4, yword [rdi + 4*rdx + 96]
	LONG $0x0e7de3c4; WORD $0xaaeb // vpblendw    ymm5, ymm0, ymm3, 170
	LONG $0x587de2c4; WORD $0x0475 // vpbroadcastd    ymm6, dword 4[rbp] /* [rip + .LCPI84_1] */
	LONG $0xd072fdc5; BYTE $0x10   // vpsrld    ymm0, ymm0, 16
	LONG $0x0e7de3c4; WORD $0xaac6 // vpblendw    ymm0, ymm0, ymm6, 170
	LONG $0x187de2c4; WORD $0x087d // vbroadcastss    ymm7, dword 8[rbp] /* [rip + .LCPI84_2] */
	LONG $0xc75cfcc5               // vsubps    ymm0, ymm0, ymm7
	LONG $0xc058d4c5               // vaddps    ymm0, ymm5, ymm0
	LONG $0x0e75e3c4; WORD $0xaaeb // vpblendw    ymm5, ymm1, ymm3, 170
	LONG $0xd172f5c5; BYTE $0x10   // vpsrld    ymm1, ymm1, 16
	LONG $0x0e75e3c4; WORD $0xaace // vpblendw    ymm1, ymm1, ymm6, 170
	LONG $0xcf5cf4c5               // vsubps    ymm1, ymm1, ymm7
	LONG $0xc958d4c5               // vaddps    ymm1, ymm5, ymm1
	LONG $0x0e6de3c4; WORD $0xaaeb // vpblendw    ymm5, ymm2, ymm3, 170
	LONG $0xd272edc5; BYTE $0x10   // vpsrld    ymm2, ymm2, 16
	LONG $0x0e6de3c4; WORD $0xaad6 // vpblendw    ymm2, ymm2, ymm6, 170
	LONG $0xd75cecc5               // vsubps    ymm2, ymm2, ymm7
	LONG $0xd258d4c5               // vaddps    ymm2, ymm5, ymm2
	LONG $0x0e5de3c4; WORD $0xaadb // vpblendw    ymm3, ymm4, ymm3, 170
	LONG $0xd472ddc5; BYTE $0x10   // vpsrld    ymm4, ymm4, 16
	LONG $0x0e5de3c4; WORD $0xaae6 // vpblendw    ymm4, ymm4, ymm6, 170
	LONG $0xe75cdcc5               // vsubps    ymm4, ymm4, ymm7
	LONG $0xdc58e4c5               // vaddps    ymm3, ymm3, ymm4
	LONG $0x0411fcc5; BYTE $0x96   // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096 // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096 // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096 // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB84_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB84_11

LBB84_10:
	WORD $0x048b; BYTE $0x8f     // mov    eax, dword [rdi + 4*rcx]
	LONG $0x2abae1c4; BYTE $0xc0 // vcvtsi2ss    xmm0, xmm8, rax
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB84_10

LBB84_11:
	VZEROUPPER
	RET

LBB84_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB84_8
	JMP  LBB84_9

TEXT ·_cast_numeric_int32_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB85_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JA   LBB85_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB85_10

LBB85_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB85_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB85_6:
	LONG $0x045bfcc5; BYTE $0x97         // vcvtdq2ps    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c5bfcc5; WORD $0x2097       // vcvtdq2ps    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x545bfcc5; WORD $0x4097       // vcvtdq2ps    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c5bfcc5; WORD $0x6097       // vcvtdq2ps    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96         // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096       // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096       // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096       // vmovups    yword [rsi + 4*rdx + 96], ymm3
	QUAD $0x00008097845bfcc5; BYTE $0x00 // vcvtdq2ps    ymm0, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a0978c5bfcc5; BYTE $0x00 // vcvtdq2ps    ymm1, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c097945bfcc5; BYTE $0x00 // vcvtdq2ps    ymm2, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e0979c5bfcc5; BYTE $0x00 // vcvtdq2ps    ymm3, yword [rdi + 4*rdx + 224]
	QUAD $0x000080968411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB85_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB85_9

LBB85_8:
	LONG $0x045bfcc5; BYTE $0x97   // vcvtdq2ps    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c5bfcc5; WORD $0x2097 // vcvtdq2ps    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x545bfcc5; WORD $0x4097 // vcvtdq2ps    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c5bfcc5; WORD $0x6097 // vcvtdq2ps    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96   // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096 // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096 // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096 // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB85_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB85_11

LBB85_10:
	LONG $0x042adac5; BYTE $0x8f // vcvtsi2ss    xmm0, xmm4, dword [rdi + 4*rcx]
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB85_10

LBB85_11:
	VZEROUPPER
	RET

LBB85_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB85_8
	JMP  LBB85_9

DATA LCDATA21<>+0x000(SB)/8, $0x0000000000000001
GLOBL LCDATA21<>(SB), 8, $8

TEXT ·_cast_numeric_uint64_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA21<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB86_15
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	WORD $0xfa83; BYTE $0x03 // cmp    edx, 3
	JA   LBB86_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB86_11

LBB86_3:
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc2 // mov    r10, rax
	LONG $0x02eac149         // shr    r10, 2
	LONG $0x01c28349         // add    r10, 1
	WORD $0x8945; BYTE $0xd1 // mov    r9d, r10d
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB86_5
	WORD $0xc031             // xor    eax, eax
	JMP  LBB86_7

LBB86_5:
	LONG $0xfce28349               // and    r10, -4
	WORD $0xf749; BYTE $0xda       // neg    r10
	WORD $0xc031                   // xor    eax, eax
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI86_0] */

LBB86_6:
	LONG $0x0c6ffec5; BYTE $0xc7   // vmovdqu    ymm1, yword [rdi + 8*rax]
	LONG $0xd0dbf5c5               // vpand    ymm2, ymm1, ymm0
	LONG $0xd173e5c5; BYTE $0x01   // vpsrlq    ymm3, ymm1, 1
	LONG $0xd2ebe5c5               // vpor    ymm2, ymm3, ymm2
	LONG $0x4b75e3c4; WORD $0x10ca // vblendvpd    ymm1, ymm1, ymm2, ymm1
	LONG $0x16f9e3c4; WORD $0x01ca // vpextrq    rdx, xmm1, 1
	LONG $0x2ad2e1c4; BYTE $0xd2   // vcvtsi2ss    xmm2, xmm5, rdx
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xda   // vcvtsi2ss    xmm3, xmm5, rdx
	LONG $0x397de3c4; WORD $0x01c9 // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xe2   // vcvtsi2ss    xmm4, xmm5, rdx
	LONG $0x2161e3c4; WORD $0x10d2 // vinsertps    xmm2, xmm3, xmm2, 16
	LONG $0x16f9e3c4; WORD $0x01ca // vpextrq    rdx, xmm1, 1
	LONG $0x2169e3c4; WORD $0x20cc // vinsertps    xmm1, xmm2, xmm4, 32
	LONG $0x2ad2e1c4; BYTE $0xd2   // vcvtsi2ss    xmm2, xmm5, rdx
	LONG $0x2171e3c4; WORD $0x30ca // vinsertps    xmm1, xmm1, xmm2, 48
	LONG $0x146ffac5; BYTE $0xc7   // vmovdqu    xmm2, oword [rdi + 8*rax]
	LONG $0x546be9c5; WORD $0x10c7 // vpackssdw    xmm2, xmm2, oword [rdi + 8*rax + 16]
	LONG $0xd958f0c5               // vaddps    xmm3, xmm1, xmm1
	LONG $0x4a71e3c4; WORD $0x20cb // vblendvps    xmm1, xmm1, xmm3, xmm2
	LONG $0x0c11f8c5; BYTE $0x86   // vmovups    oword [rsi + 4*rax], xmm1
	LONG $0x4c6ffec5; WORD $0x20c7 // vmovdqu    ymm1, yword [rdi + 8*rax + 32]
	LONG $0xd0dbf5c5               // vpand    ymm2, ymm1, ymm0
	LONG $0xd173e5c5; BYTE $0x01   // vpsrlq    ymm3, ymm1, 1
	LONG $0xd2ebe5c5               // vpor    ymm2, ymm3, ymm2
	LONG $0x4b75e3c4; WORD $0x10ca // vblendvpd    ymm1, ymm1, ymm2, ymm1
	LONG $0x16f9e3c4; WORD $0x01ca // vpextrq    rdx, xmm1, 1
	LONG $0x2ad2e1c4; BYTE $0xd2   // vcvtsi2ss    xmm2, xmm5, rdx
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xda   // vcvtsi2ss    xmm3, xmm5, rdx
	LONG $0x397de3c4; WORD $0x01c9 // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xe2   // vcvtsi2ss    xmm4, xmm5, rdx
	LONG $0x2161e3c4; WORD $0x10d2 // vinsertps    xmm2, xmm3, xmm2, 16
	LONG $0x16f9e3c4; WORD $0x01ca // vpextrq    rdx, xmm1, 1
	LONG $0x2169e3c4; WORD $0x20cc // vinsertps    xmm1, xmm2, xmm4, 32
	LONG $0x2ad2e1c4; BYTE $0xd2   // vcvtsi2ss    xmm2, xmm5, rdx
	LONG $0x2171e3c4; WORD $0x30ca // vinsertps    xmm1, xmm1, xmm2, 48
	LONG $0x546ffac5; WORD $0x20c7 // vmovdqu    xmm2, oword [rdi + 8*rax + 32]
	LONG $0x546be9c5; WORD $0x30c7 // vpackssdw    xmm2, xmm2, oword [rdi + 8*rax + 48]
	LONG $0xd958f0c5               // vaddps    xmm3, xmm1, xmm1
	LONG $0x4a71e3c4; WORD $0x20cb // vblendvps    xmm1, xmm1, xmm3, xmm2
	LONG $0x4c11f8c5; WORD $0x1086 // vmovups    oword [rsi + 4*rax + 16], xmm1
	LONG $0x4c6ffec5; WORD $0x40c7 // vmovdqu    ymm1, yword [rdi + 8*rax + 64]
	LONG $0xd0dbf5c5               // vpand    ymm2, ymm1, ymm0
	LONG $0xd173e5c5; BYTE $0x01   // vpsrlq    ymm3, ymm1, 1
	LONG $0xd2ebe5c5               // vpor    ymm2, ymm3, ymm2
	LONG $0x4b75e3c4; WORD $0x10ca // vblendvpd    ymm1, ymm1, ymm2, ymm1
	LONG $0x16f9e3c4; WORD $0x01ca // vpextrq    rdx, xmm1, 1
	LONG $0x2ad2e1c4; BYTE $0xd2   // vcvtsi2ss    xmm2, xmm5, rdx
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xda   // vcvtsi2ss    xmm3, xmm5, rdx
	LONG $0x397de3c4; WORD $0x01c9 // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xe2   // vcvtsi2ss    xmm4, xmm5, rdx
	LONG $0x2161e3c4; WORD $0x10d2 // vinsertps    xmm2, xmm3, xmm2, 16
	LONG $0x16f9e3c4; WORD $0x01ca // vpextrq    rdx, xmm1, 1
	LONG $0x2169e3c4; WORD $0x20cc // vinsertps    xmm1, xmm2, xmm4, 32
	LONG $0x2ad2e1c4; BYTE $0xd2   // vcvtsi2ss    xmm2, xmm5, rdx
	LONG $0x2171e3c4; WORD $0x30ca // vinsertps    xmm1, xmm1, xmm2, 48
	LONG $0x546ffac5; WORD $0x40c7 // vmovdqu    xmm2, oword [rdi + 8*rax + 64]
	LONG $0x546be9c5; WORD $0x50c7 // vpackssdw    xmm2, xmm2, oword [rdi + 8*rax + 80]
	LONG $0xd958f0c5               // vaddps    xmm3, xmm1, xmm1
	LONG $0x4a71e3c4; WORD $0x20cb // vblendvps    xmm1, xmm1, xmm3, xmm2
	LONG $0x4c11f8c5; WORD $0x2086 // vmovups    oword [rsi + 4*rax + 32], xmm1
	LONG $0x4c6ffec5; WORD $0x60c7 // vmovdqu    ymm1, yword [rdi + 8*rax + 96]
	LONG $0xd0dbf5c5               // vpand    ymm2, ymm1, ymm0
	LONG $0xd173e5c5; BYTE $0x01   // vpsrlq    ymm3, ymm1, 1
	LONG $0xd2ebe5c5               // vpor    ymm2, ymm3, ymm2
	LONG $0x4b75e3c4; WORD $0x10ca // vblendvpd    ymm1, ymm1, ymm2, ymm1
	LONG $0x16f9e3c4; WORD $0x01ca // vpextrq    rdx, xmm1, 1
	LONG $0x2ad2e1c4; BYTE $0xd2   // vcvtsi2ss    xmm2, xmm5, rdx
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xda   // vcvtsi2ss    xmm3, xmm5, rdx
	LONG $0x397de3c4; WORD $0x01c9 // vextracti128    xmm1, ymm1, 1
	LONG $0x16f9c3c4; WORD $0x01cb // vpextrq    r11, xmm1, 1
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xca   // vcvtsi2ss    xmm1, xmm5, rdx
	LONG $0x2161e3c4; WORD $0x10d2 // vinsertps    xmm2, xmm3, xmm2, 16
	LONG $0x2ad2c1c4; BYTE $0xdb   // vcvtsi2ss    xmm3, xmm5, r11
	LONG $0x2169e3c4; WORD $0x20c9 // vinsertps    xmm1, xmm2, xmm1, 32
	LONG $0x2171e3c4; WORD $0x30cb // vinsertps    xmm1, xmm1, xmm3, 48
	LONG $0xd158f0c5               // vaddps    xmm2, xmm1, xmm1
	LONG $0x5c6ffac5; WORD $0x60c7 // vmovdqu    xmm3, oword [rdi + 8*rax + 96]
	LONG $0x5c6be1c5; WORD $0x70c7 // vpackssdw    xmm3, xmm3, oword [rdi + 8*rax + 112]
	LONG $0x4a71e3c4; WORD $0x30ca // vblendvps    xmm1, xmm1, xmm2, xmm3
	LONG $0x4c11f8c5; WORD $0x3086 // vmovups    oword [rsi + 4*rax + 48], xmm1
	LONG $0x10c08348               // add    rax, 16
	LONG $0x04c28349               // add    r10, 4
	JNE  LBB86_6

LBB86_7:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	JE   LBB86_10
	LONG $0x02e0c148               // shl    rax, 2
	WORD $0xf749; BYTE $0xd9       // neg    r9
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI86_0] */

LBB86_9:
	LONG $0x0c6ffec5; BYTE $0x47   // vmovdqu    ymm1, yword [rdi + 2*rax]
	LONG $0xd0dbf5c5               // vpand    ymm2, ymm1, ymm0
	LONG $0xd173e5c5; BYTE $0x01   // vpsrlq    ymm3, ymm1, 1
	LONG $0xd2ebe5c5               // vpor    ymm2, ymm3, ymm2
	LONG $0x4b75e3c4; WORD $0x10ca // vblendvpd    ymm1, ymm1, ymm2, ymm1
	LONG $0x16f9e3c4; WORD $0x01ca // vpextrq    rdx, xmm1, 1
	LONG $0x2ad2e1c4; BYTE $0xd2   // vcvtsi2ss    xmm2, xmm5, rdx
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xda   // vcvtsi2ss    xmm3, xmm5, rdx
	LONG $0x397de3c4; WORD $0x01c9 // vextracti128    xmm1, ymm1, 1
	LONG $0x16f9c3c4; WORD $0x01ca // vpextrq    r10, xmm1, 1
	LONG $0x7ef9e1c4; BYTE $0xca   // vmovq    rdx, xmm1
	LONG $0x2ad2e1c4; BYTE $0xca   // vcvtsi2ss    xmm1, xmm5, rdx
	LONG $0x2161e3c4; WORD $0x10d2 // vinsertps    xmm2, xmm3, xmm2, 16
	LONG $0x2ad2c1c4; BYTE $0xda   // vcvtsi2ss    xmm3, xmm5, r10
	LONG $0x2169e3c4; WORD $0x20c9 // vinsertps    xmm1, xmm2, xmm1, 32
	LONG $0x2171e3c4; WORD $0x30cb // vinsertps    xmm1, xmm1, xmm3, 48
	LONG $0xd158f0c5               // vaddps    xmm2, xmm1, xmm1
	LONG $0x1c6ffac5; BYTE $0x47   // vmovdqu    xmm3, oword [rdi + 2*rax]
	LONG $0x5c6be1c5; WORD $0x1047 // vpackssdw    xmm3, xmm3, oword [rdi + 2*rax + 16]
	LONG $0x4a71e3c4; WORD $0x30ca // vblendvps    xmm1, xmm1, xmm2, xmm3
	LONG $0x0c11f8c5; BYTE $0x06   // vmovups    oword [rsi + rax], xmm1
	LONG $0x10c08348               // add    rax, 16
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB86_9

LBB86_10:
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JNE  LBB86_11
	JMP  LBB86_15

LBB86_13:
	LONG $0x2ad2e1c4; BYTE $0xc0 // vcvtsi2ss    xmm0, xmm5, rax
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JE   LBB86_15

LBB86_11:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JNS  LBB86_13
	WORD $0x8948; BYTE $0xc2     // mov    rdx, rax
	WORD $0xd148; BYTE $0xea     // shr    rdx, 1
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x0948; BYTE $0xd0     // or    rax, rdx
	LONG $0x2ad2e1c4; BYTE $0xc0 // vcvtsi2ss    xmm0, xmm5, rax
	LONG $0xc058fac5             // vaddss    xmm0, xmm0, xmm0
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB86_11

LBB86_15:
	VZEROUPPER
	RET

TEXT ·_cast_numeric_int64_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB87_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB87_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB87_10

LBB87_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB87_4
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xfee28349         // and    r10, -2
	WORD $0xf749; BYTE $0xda // neg    r10
	WORD $0xd231             // xor    edx, edx

LBB87_6:
	LONG $0x046ffac5; BYTE $0xd7         // vmovdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x16f9e3c4; WORD $0x01c0       // vpextrq    rax, xmm0, 1
	LONG $0x4c6ffac5; WORD $0x10d7       // vmovdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x2abae1c4; BYTE $0xd0         // vcvtsi2ss    xmm2, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xc0         // vmovq    rax, xmm0
	LONG $0x2abae1c4; BYTE $0xc0         // vcvtsi2ss    xmm0, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xc8         // vmovq    rax, xmm1
	LONG $0x2abae1c4; BYTE $0xd8         // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x16f9e3c4; WORD $0x01c8       // vpextrq    rax, xmm1, 1
	LONG $0x2abae1c4; BYTE $0xc8         // vcvtsi2ss    xmm1, xmm8, rax
	LONG $0x646ffac5; WORD $0x20d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 32]
	LONG $0x16f9e3c4; WORD $0x01e0       // vpextrq    rax, xmm4, 1
	LONG $0x6c6ffac5; WORD $0x30d7       // vmovdqu    xmm5, oword [rdi + 8*rdx + 48]
	LONG $0x2abae1c4; BYTE $0xf0         // vcvtsi2ss    xmm6, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xe0         // vmovq    rax, xmm4
	LONG $0x2abae1c4; BYTE $0xe0         // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xe8         // vmovq    rax, xmm5
	LONG $0x2abae1c4; BYTE $0xf8         // vcvtsi2ss    xmm7, xmm8, rax
	LONG $0x2179e3c4; WORD $0x10c2       // vinsertps    xmm0, xmm0, xmm2, 16
	LONG $0x2179e3c4; WORD $0x20c3       // vinsertps    xmm0, xmm0, xmm3, 32
	LONG $0x16f9e3c4; WORD $0x01e8       // vpextrq    rax, xmm5, 1
	LONG $0x2179e3c4; WORD $0x30c1       // vinsertps    xmm0, xmm0, xmm1, 48
	LONG $0x2abae1c4; BYTE $0xc8         // vcvtsi2ss    xmm1, xmm8, rax
	LONG $0x2159e3c4; WORD $0x10d6       // vinsertps    xmm2, xmm4, xmm6, 16
	LONG $0x5c6ffac5; WORD $0x40d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x16f9e3c4; WORD $0x01d8       // vpextrq    rax, xmm3, 1
	LONG $0x2abae1c4; BYTE $0xe0         // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xd8         // vmovq    rax, xmm3
	LONG $0x2abae1c4; BYTE $0xd8         // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x6c6ffac5; WORD $0x50d7       // vmovdqu    xmm5, oword [rdi + 8*rdx + 80]
	LONG $0x7ef9e1c4; BYTE $0xe8         // vmovq    rax, xmm5
	LONG $0x2abae1c4; BYTE $0xf0         // vcvtsi2ss    xmm6, xmm8, rax
	LONG $0x2169e3c4; WORD $0x20d7       // vinsertps    xmm2, xmm2, xmm7, 32
	LONG $0x2169e3c4; WORD $0x30c9       // vinsertps    xmm1, xmm2, xmm1, 48
	LONG $0x16f9e3c4; WORD $0x01e8       // vpextrq    rax, xmm5, 1
	LONG $0x2161e3c4; WORD $0x10d4       // vinsertps    xmm2, xmm3, xmm4, 16
	LONG $0x2abae1c4; BYTE $0xd8         // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x2169e3c4; WORD $0x20d6       // vinsertps    xmm2, xmm2, xmm6, 32
	LONG $0x646ffac5; WORD $0x60d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 96]
	LONG $0x16f9e3c4; WORD $0x01e0       // vpextrq    rax, xmm4, 1
	LONG $0x2abae1c4; BYTE $0xe8         // vcvtsi2ss    xmm5, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xe0         // vmovq    rax, xmm4
	LONG $0x2abae1c4; BYTE $0xe0         // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x746ffac5; WORD $0x70d7       // vmovdqu    xmm6, oword [rdi + 8*rdx + 112]
	LONG $0x7ef9e1c4; BYTE $0xf0         // vmovq    rax, xmm6
	LONG $0x2abae1c4; BYTE $0xf8         // vcvtsi2ss    xmm7, xmm8, rax
	LONG $0x2169e3c4; WORD $0x30d3       // vinsertps    xmm2, xmm2, xmm3, 48
	LONG $0x2159e3c4; WORD $0x10dd       // vinsertps    xmm3, xmm4, xmm5, 16
	LONG $0x16f9e3c4; WORD $0x01f0       // vpextrq    rax, xmm6, 1
	LONG $0x2161e3c4; WORD $0x20df       // vinsertps    xmm3, xmm3, xmm7, 32
	LONG $0x2abae1c4; BYTE $0xe0         // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x2161e3c4; WORD $0x30dc       // vinsertps    xmm3, xmm3, xmm4, 48
	LONG $0x0411f8c5; BYTE $0x96         // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096       // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096       // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096       // vmovups    oword [rsi + 4*rdx + 48], xmm3
	QUAD $0x000080d7846ffac5; BYTE $0x00 // vmovdqu    xmm0, oword [rdi + 8*rdx + 128]
	LONG $0x16f9e3c4; WORD $0x01c0       // vpextrq    rax, xmm0, 1
	QUAD $0x000090d78c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 8*rdx + 144]
	LONG $0x2abae1c4; BYTE $0xd0         // vcvtsi2ss    xmm2, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xc0         // vmovq    rax, xmm0
	LONG $0x2abae1c4; BYTE $0xc0         // vcvtsi2ss    xmm0, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xc8         // vmovq    rax, xmm1
	LONG $0x2abae1c4; BYTE $0xd8         // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x16f9e3c4; WORD $0x01c8       // vpextrq    rax, xmm1, 1
	LONG $0x2abae1c4; BYTE $0xc8         // vcvtsi2ss    xmm1, xmm8, rax
	QUAD $0x0000a0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 160]
	LONG $0x16f9e3c4; WORD $0x01e0       // vpextrq    rax, xmm4, 1
	LONG $0x2abae1c4; BYTE $0xe8         // vcvtsi2ss    xmm5, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xe0         // vmovq    rax, xmm4
	LONG $0x2abae1c4; BYTE $0xe0         // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x2179e3c4; WORD $0x10c2       // vinsertps    xmm0, xmm0, xmm2, 16
	QUAD $0x0000b0d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 176]
	LONG $0x16f9c3c4; WORD $0x01d3       // vpextrq    r11, xmm2, 1
	LONG $0x7ef9e1c4; BYTE $0xd0         // vmovq    rax, xmm2
	LONG $0x2abae1c4; BYTE $0xd0         // vcvtsi2ss    xmm2, xmm8, rax
	LONG $0x2179e3c4; WORD $0x20c3       // vinsertps    xmm0, xmm0, xmm3, 32
	LONG $0x2abac1c4; BYTE $0xdb         // vcvtsi2ss    xmm3, xmm8, r11
	LONG $0x2179e3c4; WORD $0x30c1       // vinsertps    xmm0, xmm0, xmm1, 48
	QUAD $0x0000c0d78c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 8*rdx + 192]
	LONG $0x16f9e3c4; WORD $0x01c8       // vpextrq    rax, xmm1, 1
	LONG $0x2159e3c4; WORD $0x10e5       // vinsertps    xmm4, xmm4, xmm5, 16
	LONG $0x2abae1c4; BYTE $0xe8         // vcvtsi2ss    xmm5, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xc8         // vmovq    rax, xmm1
	LONG $0x2abae1c4; BYTE $0xc8         // vcvtsi2ss    xmm1, xmm8, rax
	LONG $0x2159e3c4; WORD $0x20d2       // vinsertps    xmm2, xmm4, xmm2, 32
	QUAD $0x0000d0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 208]
	LONG $0x16f9c3c4; WORD $0x01e3       // vpextrq    r11, xmm4, 1
	LONG $0x7ef9e1c4; BYTE $0xe0         // vmovq    rax, xmm4
	LONG $0x2abae1c4; BYTE $0xe0         // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x2169e3c4; WORD $0x30d3       // vinsertps    xmm2, xmm2, xmm3, 48
	LONG $0x2abac1c4; BYTE $0xdb         // vcvtsi2ss    xmm3, xmm8, r11
	LONG $0x2171e3c4; WORD $0x10cd       // vinsertps    xmm1, xmm1, xmm5, 16
	QUAD $0x0000e0d7ac6ffac5; BYTE $0x00 // vmovdqu    xmm5, oword [rdi + 8*rdx + 224]
	LONG $0x16f9e3c4; WORD $0x01e8       // vpextrq    rax, xmm5, 1
	LONG $0x2171e3c4; WORD $0x20cc       // vinsertps    xmm1, xmm1, xmm4, 32
	LONG $0x2abae1c4; BYTE $0xe0         // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xe8         // vmovq    rax, xmm5
	LONG $0x2abae1c4; BYTE $0xe8         // vcvtsi2ss    xmm5, xmm8, rax
	LONG $0x2171e3c4; WORD $0x30cb       // vinsertps    xmm1, xmm1, xmm3, 48
	QUAD $0x0000f0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 240]
	LONG $0x16f9c3c4; WORD $0x01db       // vpextrq    r11, xmm3, 1
	LONG $0x7ef9e1c4; BYTE $0xd8         // vmovq    rax, xmm3
	LONG $0x2abae1c4; BYTE $0xd8         // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x2151e3c4; WORD $0x10e4       // vinsertps    xmm4, xmm5, xmm4, 16
	LONG $0x2abac1c4; BYTE $0xeb         // vcvtsi2ss    xmm5, xmm8, r11
	LONG $0x2159e3c4; WORD $0x20db       // vinsertps    xmm3, xmm4, xmm3, 32
	LONG $0x2161e3c4; WORD $0x30dd       // vinsertps    xmm3, xmm3, xmm5, 48
	LONG $0x4411f8c5; WORD $0x4096       // vmovups    oword [rsi + 4*rdx + 64], xmm0
	LONG $0x5411f8c5; WORD $0x5096       // vmovups    oword [rsi + 4*rdx + 80], xmm2
	LONG $0x4c11f8c5; WORD $0x6096       // vmovups    oword [rsi + 4*rdx + 96], xmm1
	LONG $0x5c11f8c5; WORD $0x7096       // vmovups    oword [rsi + 4*rdx + 112], xmm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c28349                     // add    r10, 2
	JNE  LBB87_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB87_9

LBB87_8:
	LONG $0x046ffac5; BYTE $0xd7   // vmovdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	LONG $0x4c6ffac5; WORD $0x10d7 // vmovdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x2abae1c4; BYTE $0xd0   // vcvtsi2ss    xmm2, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	LONG $0x2abae1c4; BYTE $0xc0   // vcvtsi2ss    xmm0, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xc8   // vmovq    rax, xmm1
	LONG $0x2abae1c4; BYTE $0xd8   // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x16f9e3c4; WORD $0x01c8 // vpextrq    rax, xmm1, 1
	LONG $0x2abae1c4; BYTE $0xc8   // vcvtsi2ss    xmm1, xmm8, rax
	LONG $0x646ffac5; WORD $0x20d7 // vmovdqu    xmm4, oword [rdi + 8*rdx + 32]
	LONG $0x6c6ffac5; WORD $0x30d7 // vmovdqu    xmm5, oword [rdi + 8*rdx + 48]
	LONG $0x16f9e3c4; WORD $0x01e0 // vpextrq    rax, xmm4, 1
	LONG $0x2179e3c4; WORD $0x10c2 // vinsertps    xmm0, xmm0, xmm2, 16
	LONG $0x2abae1c4; BYTE $0xd0   // vcvtsi2ss    xmm2, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xe0   // vmovq    rax, xmm4
	LONG $0x2abae1c4; BYTE $0xe0   // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	LONG $0x2abae1c4; BYTE $0xf0   // vcvtsi2ss    xmm6, xmm8, rax
	LONG $0x2179e3c4; WORD $0x20c3 // vinsertps    xmm0, xmm0, xmm3, 32
	LONG $0x2179e3c4; WORD $0x30c1 // vinsertps    xmm0, xmm0, xmm1, 48
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	LONG $0x2159e3c4; WORD $0x10ca // vinsertps    xmm1, xmm4, xmm2, 16
	LONG $0x2abae1c4; BYTE $0xd0   // vcvtsi2ss    xmm2, xmm8, rax
	LONG $0x2171e3c4; WORD $0x20ce // vinsertps    xmm1, xmm1, xmm6, 32
	LONG $0x5c6ffac5; WORD $0x40d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 64]
	LONG $0x16f9e3c4; WORD $0x01d8 // vpextrq    rax, xmm3, 1
	LONG $0x2abae1c4; BYTE $0xe0   // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xd8   // vmovq    rax, xmm3
	LONG $0x2abae1c4; BYTE $0xd8   // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x6c6ffac5; WORD $0x50d7 // vmovdqu    xmm5, oword [rdi + 8*rdx + 80]
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	LONG $0x2abae1c4; BYTE $0xf0   // vcvtsi2ss    xmm6, xmm8, rax
	LONG $0x2171e3c4; WORD $0x30ca // vinsertps    xmm1, xmm1, xmm2, 48
	LONG $0x2161e3c4; WORD $0x10d4 // vinsertps    xmm2, xmm3, xmm4, 16
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	LONG $0x2169e3c4; WORD $0x20d6 // vinsertps    xmm2, xmm2, xmm6, 32
	LONG $0x2abae1c4; BYTE $0xd8   // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x2169e3c4; WORD $0x30d3 // vinsertps    xmm2, xmm2, xmm3, 48
	LONG $0x5c6ffac5; WORD $0x60d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 96]
	LONG $0x16f9e3c4; WORD $0x01d8 // vpextrq    rax, xmm3, 1
	LONG $0x2abae1c4; BYTE $0xe0   // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x7ef9e1c4; BYTE $0xd8   // vmovq    rax, xmm3
	LONG $0x2abae1c4; BYTE $0xd8   // vcvtsi2ss    xmm3, xmm8, rax
	LONG $0x6c6ffac5; WORD $0x70d7 // vmovdqu    xmm5, oword [rdi + 8*rdx + 112]
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	LONG $0x2abae1c4; BYTE $0xf0   // vcvtsi2ss    xmm6, xmm8, rax
	LONG $0x2161e3c4; WORD $0x10dc // vinsertps    xmm3, xmm3, xmm4, 16
	LONG $0x2161e3c4; WORD $0x20de // vinsertps    xmm3, xmm3, xmm6, 32
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	LONG $0x2abae1c4; BYTE $0xe0   // vcvtsi2ss    xmm4, xmm8, rax
	LONG $0x2161e3c4; WORD $0x30dc // vinsertps    xmm3, xmm3, xmm4, 48
	LONG $0x0411f8c5; BYTE $0x96   // vmovups    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f8c5; WORD $0x1096 // vmovups    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f8c5; WORD $0x2096 // vmovups    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f8c5; WORD $0x3096 // vmovups    oword [rsi + 4*rdx + 48], xmm3

LBB87_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB87_11

LBB87_10:
	LONG $0x2abae1c4; WORD $0xcf04 // vcvtsi2ss    xmm0, xmm8, qword [rdi + 8*rcx]
	LONG $0x0411fac5; BYTE $0x8e   // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348               // add    rcx, 1
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB87_10

LBB87_11:
	RET

LBB87_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB87_8
	JMP  LBB87_9

TEXT ·_cast_numeric_float32_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB88_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x1f // cmp    edx, 31
	JBE  LBB88_2
	LONG $0x8f048d4a         // lea    rax, [rdi + 4*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB88_9
	LONG $0x8e048d4a         // lea    rax, [rsi + 4*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB88_9

LBB88_2:
	WORD $0xc931 // xor    ecx, ecx

LBB88_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x07e28348         // and    rdx, 7
	JE   LBB88_5

LBB88_4:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc28348         // add    rdx, -1
	JNE  LBB88_4

LBB88_5:
	LONG $0x07f88349 // cmp    r8, 7
	JB   LBB88_16

LBB88_6:
	WORD $0x048b; BYTE $0x8f // mov    eax, dword [rdi + 4*rcx]
	WORD $0x0489; BYTE $0x8e // mov    dword [rsi + 4*rcx], eax
	LONG $0x048f448b         // mov    eax, dword [rdi + 4*rcx + 4]
	LONG $0x048e4489         // mov    dword [rsi + 4*rcx + 4], eax
	LONG $0x088f448b         // mov    eax, dword [rdi + 4*rcx + 8]
	LONG $0x088e4489         // mov    dword [rsi + 4*rcx + 8], eax
	LONG $0x0c8f448b         // mov    eax, dword [rdi + 4*rcx + 12]
	LONG $0x0c8e4489         // mov    dword [rsi + 4*rcx + 12], eax
	LONG $0x108f448b         // mov    eax, dword [rdi + 4*rcx + 16]
	LONG $0x108e4489         // mov    dword [rsi + 4*rcx + 16], eax
	LONG $0x148f448b         // mov    eax, dword [rdi + 4*rcx + 20]
	LONG $0x148e4489         // mov    dword [rsi + 4*rcx + 20], eax
	LONG $0x188f448b         // mov    eax, dword [rdi + 4*rcx + 24]
	LONG $0x188e4489         // mov    dword [rsi + 4*rcx + 24], eax
	LONG $0x1c8f448b         // mov    eax, dword [rdi + 4*rcx + 28]
	LONG $0x1c8e4489         // mov    dword [rsi + 4*rcx + 28], eax
	LONG $0x08c18348         // add    rcx, 8
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB88_6
	JMP  LBB88_16

LBB88_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0418d48         // lea    rax, [rcx - 32]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x05e8c149         // shr    r8, 5
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB88_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB88_12:
	LONG $0x0410fcc5; BYTE $0x97         // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097       // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097       // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097       // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96         // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096       // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096       // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096       // vmovups    yword [rsi + 4*rdx + 96], ymm3
	QUAD $0x000080978410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 4*rdx + 128]
	QUAD $0x0000a0978c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 4*rdx + 160]
	QUAD $0x0000c0979410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 4*rdx + 192]
	QUAD $0x0000e0979c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 4*rdx + 224]
	QUAD $0x000080968411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 128], ymm0
	QUAD $0x0000a0968c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 160], ymm1
	QUAD $0x0000c0969411fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 192], ymm2
	QUAD $0x0000e0969c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 4*rdx + 224], ymm3
	LONG $0x40c28348                     // add    rdx, 64
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB88_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB88_15

LBB88_14:
	LONG $0x0410fcc5; BYTE $0x97   // vmovups    ymm0, yword [rdi + 4*rdx]
	LONG $0x4c10fcc5; WORD $0x2097 // vmovups    ymm1, yword [rdi + 4*rdx + 32]
	LONG $0x5410fcc5; WORD $0x4097 // vmovups    ymm2, yword [rdi + 4*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x6097 // vmovups    ymm3, yword [rdi + 4*rdx + 96]
	LONG $0x0411fcc5; BYTE $0x96   // vmovups    yword [rsi + 4*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x2096 // vmovups    yword [rsi + 4*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4096 // vmovups    yword [rsi + 4*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6096 // vmovups    yword [rsi + 4*rdx + 96], ymm3

LBB88_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB88_3

LBB88_16:
	VZEROUPPER
	RET

LBB88_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB88_14
	JMP  LBB88_15

TEXT ·_cast_numeric_float64_float32_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB89_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB89_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB89_10

LBB89_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB89_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB89_6:
	LONG $0x045afdc5; BYTE $0xd7         // vcvtpd2ps    xmm0, yword [rdi + 8*rdx]
	LONG $0x4c5afdc5; WORD $0x20d7       // vcvtpd2ps    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x545afdc5; WORD $0x40d7       // vcvtpd2ps    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c5afdc5; WORD $0x60d7       // vcvtpd2ps    xmm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411f9c5; BYTE $0x96         // vmovupd    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f9c5; WORD $0x1096       // vmovupd    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f9c5; WORD $0x2096       // vmovupd    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f9c5; WORD $0x3096       // vmovupd    oword [rsi + 4*rdx + 48], xmm3
	QUAD $0x000080d7845afdc5; BYTE $0x00 // vcvtpd2ps    xmm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c5afdc5; BYTE $0x00 // vcvtpd2ps    xmm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d7945afdc5; BYTE $0x00 // vcvtpd2ps    xmm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c5afdc5; BYTE $0x00 // vcvtpd2ps    xmm3, yword [rdi + 8*rdx + 224]
	LONG $0x4411f9c5; WORD $0x4096       // vmovupd    oword [rsi + 4*rdx + 64], xmm0
	LONG $0x4c11f9c5; WORD $0x5096       // vmovupd    oword [rsi + 4*rdx + 80], xmm1
	LONG $0x5411f9c5; WORD $0x6096       // vmovupd    oword [rsi + 4*rdx + 96], xmm2
	LONG $0x5c11f9c5; WORD $0x7096       // vmovupd    oword [rsi + 4*rdx + 112], xmm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB89_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB89_9

LBB89_8:
	LONG $0x045afdc5; BYTE $0xd7   // vcvtpd2ps    xmm0, yword [rdi + 8*rdx]
	LONG $0x4c5afdc5; WORD $0x20d7 // vcvtpd2ps    xmm1, yword [rdi + 8*rdx + 32]
	LONG $0x545afdc5; WORD $0x40d7 // vcvtpd2ps    xmm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c5afdc5; WORD $0x60d7 // vcvtpd2ps    xmm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411f9c5; BYTE $0x96   // vmovupd    oword [rsi + 4*rdx], xmm0
	LONG $0x4c11f9c5; WORD $0x1096 // vmovupd    oword [rsi + 4*rdx + 16], xmm1
	LONG $0x5411f9c5; WORD $0x2096 // vmovupd    oword [rsi + 4*rdx + 32], xmm2
	LONG $0x5c11f9c5; WORD $0x3096 // vmovupd    oword [rsi + 4*rdx + 48], xmm3

LBB89_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB89_11

LBB89_10:
	LONG $0x0410fbc5; BYTE $0xcf // vmovsd    xmm0, qword [rdi + 8*rcx]
	LONG $0xc05afbc5             // vcvtsd2ss    xmm0, xmm0, xmm0
	LONG $0x0411fac5; BYTE $0x8e // vmovss    dword [rsi + 4*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB89_10

LBB89_11:
	RET

LBB89_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB89_8
	JMP  LBB89_9

TEXT ·_cast_numeric_uint8_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB90_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB90_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB90_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB90_9

LBB90_2:
	WORD $0xc931 // xor    ecx, ecx

LBB90_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB90_5

LBB90_4:
	LONG $0x0f04b60f             // movzx    eax, byte [rdi + rcx]
	LONG $0xc02adbc5             // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x0411fbc5; BYTE $0xce // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB90_4

LBB90_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB90_16

LBB90_6:
	LONG $0x0f04b60f               // movzx    eax, byte [rdi + rcx]
	LONG $0xc02adbc5               // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x0411fbc5; BYTE $0xce   // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x0f44b60f; BYTE $0x01   // movzx    eax, byte [rdi + rcx + 1]
	LONG $0xc02adbc5               // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x4411fbc5; WORD $0x08ce // vmovsd    qword [rsi + 8*rcx + 8], xmm0
	LONG $0x0f44b60f; BYTE $0x02   // movzx    eax, byte [rdi + rcx + 2]
	LONG $0xc02adbc5               // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x4411fbc5; WORD $0x10ce // vmovsd    qword [rsi + 8*rcx + 16], xmm0
	LONG $0x0f44b60f; BYTE $0x03   // movzx    eax, byte [rdi + rcx + 3]
	LONG $0xc02adbc5               // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x4411fbc5; WORD $0x18ce // vmovsd    qword [rsi + 8*rcx + 24], xmm0
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB90_6
	JMP  LBB90_16

LBB90_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB90_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB90_12:
	LONG $0x3179e2c4; WORD $0x1704             // vpmovzxbd    xmm0, dword [rdi + rdx]
	LONG $0x3179e2c4; WORD $0x174c; BYTE $0x04 // vpmovzxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x3179e2c4; WORD $0x1754; BYTE $0x08 // vpmovzxbd    xmm2, dword [rdi + rdx + 8]
	LONG $0x3179e2c4; WORD $0x175c; BYTE $0x0c // vpmovzxbd    xmm3, dword [rdi + rdx + 12]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	LONG $0x0411fcc5; BYTE $0xd6               // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6             // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6             // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6             // vmovups    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x3179e2c4; WORD $0x1744; BYTE $0x10 // vpmovzxbd    xmm0, dword [rdi + rdx + 16]
	LONG $0x3179e2c4; WORD $0x174c; BYTE $0x14 // vpmovzxbd    xmm1, dword [rdi + rdx + 20]
	LONG $0x3179e2c4; WORD $0x1754; BYTE $0x18 // vpmovzxbd    xmm2, dword [rdi + rdx + 24]
	LONG $0x3179e2c4; WORD $0x175c; BYTE $0x1c // vpmovzxbd    xmm3, dword [rdi + rdx + 28]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	QUAD $0x000080d68411fdc5; BYTE $0x00       // vmovupd    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB90_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB90_15

LBB90_14:
	LONG $0x3179e2c4; WORD $0x1704             // vpmovzxbd    xmm0, dword [rdi + rdx]
	LONG $0x3179e2c4; WORD $0x174c; BYTE $0x04 // vpmovzxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x3179e2c4; WORD $0x1754; BYTE $0x08 // vpmovzxbd    xmm2, dword [rdi + rdx + 8]
	LONG $0x3179e2c4; WORD $0x175c; BYTE $0x0c // vpmovzxbd    xmm3, dword [rdi + rdx + 12]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	LONG $0x0411fdc5; BYTE $0xd6               // vmovupd    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6             // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6             // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6             // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB90_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB90_3

LBB90_16:
	VZEROUPPER
	RET

LBB90_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB90_14
	JMP  LBB90_15

TEXT ·_cast_numeric_int8_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB91_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB91_2
	LONG $0x0f048d4a         // lea    rax, [rdi + r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB91_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB91_9

LBB91_2:
	WORD $0xc931 // xor    ecx, ecx

LBB91_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x03e28348         // and    rdx, 3
	JE   LBB91_5

LBB91_4:
	LONG $0x0f04be0f             // movsx    eax, byte [rdi + rcx]
	LONG $0xc02adbc5             // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x0411fbc5; BYTE $0xce // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc28348             // add    rdx, -1
	JNE  LBB91_4

LBB91_5:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB91_16

LBB91_6:
	LONG $0x0f04be0f               // movsx    eax, byte [rdi + rcx]
	LONG $0xc02adbc5               // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x0411fbc5; BYTE $0xce   // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x0f44be0f; BYTE $0x01   // movsx    eax, byte [rdi + rcx + 1]
	LONG $0xc02adbc5               // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x4411fbc5; WORD $0x08ce // vmovsd    qword [rsi + 8*rcx + 8], xmm0
	LONG $0x0f44be0f; BYTE $0x02   // movsx    eax, byte [rdi + rcx + 2]
	LONG $0xc02adbc5               // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x4411fbc5; WORD $0x10ce // vmovsd    qword [rsi + 8*rcx + 16], xmm0
	LONG $0x0f44be0f; BYTE $0x03   // movsx    eax, byte [rdi + rcx + 3]
	LONG $0xc02adbc5               // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x4411fbc5; WORD $0x18ce // vmovsd    qword [rsi + 8*rcx + 24], xmm0
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB91_6
	JMP  LBB91_16

LBB91_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB91_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB91_12:
	LONG $0x2179e2c4; WORD $0x1704             // vpmovsxbd    xmm0, dword [rdi + rdx]
	LONG $0x2179e2c4; WORD $0x174c; BYTE $0x04 // vpmovsxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x2179e2c4; WORD $0x1754; BYTE $0x08 // vpmovsxbd    xmm2, dword [rdi + rdx + 8]
	LONG $0x2179e2c4; WORD $0x175c; BYTE $0x0c // vpmovsxbd    xmm3, dword [rdi + rdx + 12]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	LONG $0x0411fcc5; BYTE $0xd6               // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6             // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6             // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6             // vmovups    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x2179e2c4; WORD $0x1744; BYTE $0x10 // vpmovsxbd    xmm0, dword [rdi + rdx + 16]
	LONG $0x2179e2c4; WORD $0x174c; BYTE $0x14 // vpmovsxbd    xmm1, dword [rdi + rdx + 20]
	LONG $0x2179e2c4; WORD $0x1754; BYTE $0x18 // vpmovsxbd    xmm2, dword [rdi + rdx + 24]
	LONG $0x2179e2c4; WORD $0x175c; BYTE $0x1c // vpmovsxbd    xmm3, dword [rdi + rdx + 28]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	QUAD $0x000080d68411fdc5; BYTE $0x00       // vmovupd    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB91_12
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB91_15

LBB91_14:
	LONG $0x2179e2c4; WORD $0x1704             // vpmovsxbd    xmm0, dword [rdi + rdx]
	LONG $0x2179e2c4; WORD $0x174c; BYTE $0x04 // vpmovsxbd    xmm1, dword [rdi + rdx + 4]
	LONG $0x2179e2c4; WORD $0x1754; BYTE $0x08 // vpmovsxbd    xmm2, dword [rdi + rdx + 8]
	LONG $0x2179e2c4; WORD $0x175c; BYTE $0x0c // vpmovsxbd    xmm3, dword [rdi + rdx + 12]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	LONG $0x0411fdc5; BYTE $0xd6               // vmovupd    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6             // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6             // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6             // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB91_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB91_3

LBB91_16:
	VZEROUPPER
	RET

LBB91_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB91_14
	JMP  LBB91_15

TEXT ·_cast_numeric_uint16_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB92_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB92_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB92_10

LBB92_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB92_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB92_6:
	LONG $0x3379e2c4; WORD $0x5704             // vpmovzxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x3379e2c4; WORD $0x574c; BYTE $0x08 // vpmovzxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x3379e2c4; WORD $0x5754; BYTE $0x10 // vpmovzxwd    xmm2, qword [rdi + 2*rdx + 16]
	LONG $0x3379e2c4; WORD $0x575c; BYTE $0x18 // vpmovzxwd    xmm3, qword [rdi + 2*rdx + 24]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	LONG $0x0411fcc5; BYTE $0xd6               // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6             // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6             // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6             // vmovups    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x3379e2c4; WORD $0x5744; BYTE $0x20 // vpmovzxwd    xmm0, qword [rdi + 2*rdx + 32]
	LONG $0x3379e2c4; WORD $0x574c; BYTE $0x28 // vpmovzxwd    xmm1, qword [rdi + 2*rdx + 40]
	LONG $0x3379e2c4; WORD $0x5754; BYTE $0x30 // vpmovzxwd    xmm2, qword [rdi + 2*rdx + 48]
	LONG $0x3379e2c4; WORD $0x575c; BYTE $0x38 // vpmovzxwd    xmm3, qword [rdi + 2*rdx + 56]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	QUAD $0x000080d68411fdc5; BYTE $0x00       // vmovupd    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB92_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB92_9

LBB92_8:
	LONG $0x3379e2c4; WORD $0x5704             // vpmovzxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x3379e2c4; WORD $0x574c; BYTE $0x08 // vpmovzxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x3379e2c4; WORD $0x5754; BYTE $0x10 // vpmovzxwd    xmm2, qword [rdi + 2*rdx + 16]
	LONG $0x3379e2c4; WORD $0x575c; BYTE $0x18 // vpmovzxwd    xmm3, qword [rdi + 2*rdx + 24]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	LONG $0x0411fdc5; BYTE $0xd6               // vmovupd    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6             // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6             // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6             // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB92_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB92_11

LBB92_10:
	LONG $0x4f04b70f             // movzx    eax, word [rdi + 2*rcx]
	LONG $0xc02adbc5             // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x0411fbc5; BYTE $0xce // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB92_10

LBB92_11:
	VZEROUPPER
	RET

LBB92_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB92_8
	JMP  LBB92_9

TEXT ·_cast_numeric_int16_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB93_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB93_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB93_10

LBB93_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB93_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB93_6:
	LONG $0x2379e2c4; WORD $0x5704             // vpmovsxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x2379e2c4; WORD $0x574c; BYTE $0x08 // vpmovsxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x2379e2c4; WORD $0x5754; BYTE $0x10 // vpmovsxwd    xmm2, qword [rdi + 2*rdx + 16]
	LONG $0x2379e2c4; WORD $0x575c; BYTE $0x18 // vpmovsxwd    xmm3, qword [rdi + 2*rdx + 24]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	LONG $0x0411fcc5; BYTE $0xd6               // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6             // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6             // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6             // vmovups    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x2379e2c4; WORD $0x5744; BYTE $0x20 // vpmovsxwd    xmm0, qword [rdi + 2*rdx + 32]
	LONG $0x2379e2c4; WORD $0x574c; BYTE $0x28 // vpmovsxwd    xmm1, qword [rdi + 2*rdx + 40]
	LONG $0x2379e2c4; WORD $0x5754; BYTE $0x30 // vpmovsxwd    xmm2, qword [rdi + 2*rdx + 48]
	LONG $0x2379e2c4; WORD $0x575c; BYTE $0x38 // vpmovsxwd    xmm3, qword [rdi + 2*rdx + 56]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	QUAD $0x000080d68411fdc5; BYTE $0x00       // vmovupd    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00       // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB93_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB93_9

LBB93_8:
	LONG $0x2379e2c4; WORD $0x5704             // vpmovsxwd    xmm0, qword [rdi + 2*rdx]
	LONG $0x2379e2c4; WORD $0x574c; BYTE $0x08 // vpmovsxwd    xmm1, qword [rdi + 2*rdx + 8]
	LONG $0x2379e2c4; WORD $0x5754; BYTE $0x10 // vpmovsxwd    xmm2, qword [rdi + 2*rdx + 16]
	LONG $0x2379e2c4; WORD $0x575c; BYTE $0x18 // vpmovsxwd    xmm3, qword [rdi + 2*rdx + 24]
	LONG $0xc0e6fec5                           // vcvtdq2pd    ymm0, xmm0
	LONG $0xc9e6fec5                           // vcvtdq2pd    ymm1, xmm1
	LONG $0xd2e6fec5                           // vcvtdq2pd    ymm2, xmm2
	LONG $0xdbe6fec5                           // vcvtdq2pd    ymm3, xmm3
	LONG $0x0411fdc5; BYTE $0xd6               // vmovupd    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6             // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6             // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6             // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB93_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB93_11

LBB93_10:
	LONG $0x4f04bf0f             // movsx    eax, word [rdi + 2*rcx]
	LONG $0xc02adbc5             // vcvtsi2sd    xmm0, xmm4, eax
	LONG $0x0411fbc5; BYTE $0xce // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB93_10

LBB93_11:
	VZEROUPPER
	RET

LBB93_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB93_8
	JMP  LBB93_9

DATA LCDATA22<>+0x000(SB)/8, $0x4330000000000000
GLOBL LCDATA22<>(SB), 8, $8

TEXT ·_cast_numeric_uint32_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA22<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB94_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB94_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB94_10

LBB94_3:
	WORD $0x8944; BYTE $0xc9       // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0       // mov    r8, rax
	LONG $0x04e8c149               // shr    r8, 4
	LONG $0x01c08349               // add    r8, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB94_4
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0xfee08348               // and    rax, -2
	WORD $0xf748; BYTE $0xd8       // neg    rax
	WORD $0xd231                   // xor    edx, edx
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI94_0] */

LBB94_6:
	LONG $0x357de2c4; WORD $0x970c             // vpmovzxdq    ymm1, oword [rdi + 4*rdx]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x10 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 16]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x20 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 32]
	LONG $0x357de2c4; WORD $0x9764; BYTE $0x30 // vpmovzxdq    ymm4, oword [rdi + 4*rdx + 48]
	LONG $0xc8ebf5c5                           // vpor    ymm1, ymm1, ymm0
	LONG $0xc85cf5c5                           // vsubpd    ymm1, ymm1, ymm0
	LONG $0xd0ebedc5                           // vpor    ymm2, ymm2, ymm0
	LONG $0xd05cedc5                           // vsubpd    ymm2, ymm2, ymm0
	LONG $0xd8ebe5c5                           // vpor    ymm3, ymm3, ymm0
	LONG $0xd85ce5c5                           // vsubpd    ymm3, ymm3, ymm0
	LONG $0xe0ebddc5                           // vpor    ymm4, ymm4, ymm0
	LONG $0xe05cddc5                           // vsubpd    ymm4, ymm4, ymm0
	LONG $0x0c11fdc5; BYTE $0xd6               // vmovupd    yword [rsi + 8*rdx], ymm1
	LONG $0x5411fdc5; WORD $0x20d6             // vmovupd    yword [rsi + 8*rdx + 32], ymm2
	LONG $0x5c11fdc5; WORD $0x40d6             // vmovupd    yword [rsi + 8*rdx + 64], ymm3
	LONG $0x6411fdc5; WORD $0x60d6             // vmovupd    yword [rsi + 8*rdx + 96], ymm4
	LONG $0x357de2c4; WORD $0x974c; BYTE $0x40 // vpmovzxdq    ymm1, oword [rdi + 4*rdx + 64]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x50 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 80]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x60 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 96]
	LONG $0x357de2c4; WORD $0x9764; BYTE $0x70 // vpmovzxdq    ymm4, oword [rdi + 4*rdx + 112]
	LONG $0xc8ebf5c5                           // vpor    ymm1, ymm1, ymm0
	LONG $0xc85cf5c5                           // vsubpd    ymm1, ymm1, ymm0
	LONG $0xd0ebedc5                           // vpor    ymm2, ymm2, ymm0
	LONG $0xd05cedc5                           // vsubpd    ymm2, ymm2, ymm0
	LONG $0xd8ebe5c5                           // vpor    ymm3, ymm3, ymm0
	LONG $0xd85ce5c5                           // vsubpd    ymm3, ymm3, ymm0
	LONG $0xe0ebddc5                           // vpor    ymm4, ymm4, ymm0
	LONG $0xe05cddc5                           // vsubpd    ymm4, ymm4, ymm0
	QUAD $0x000080d68c11fdc5; BYTE $0x00       // vmovupd    yword [rsi + 8*rdx + 128], ymm1
	QUAD $0x0000a0d69411fdc5; BYTE $0x00       // vmovupd    yword [rsi + 8*rdx + 160], ymm2
	QUAD $0x0000c0d69c11fdc5; BYTE $0x00       // vmovupd    yword [rsi + 8*rdx + 192], ymm3
	QUAD $0x0000e0d6a411fdc5; BYTE $0x00       // vmovupd    yword [rsi + 8*rdx + 224], ymm4
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB94_6
	LONG $0x01c0f641                           // test    r8b, 1
	JE   LBB94_9

LBB94_8:
	LONG $0x357de2c4; WORD $0x9704             // vpmovzxdq    ymm0, oword [rdi + 4*rdx]
	LONG $0x357de2c4; WORD $0x974c; BYTE $0x10 // vpmovzxdq    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x357de2c4; WORD $0x9754; BYTE $0x20 // vpmovzxdq    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x357de2c4; WORD $0x975c; BYTE $0x30 // vpmovzxdq    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x597de2c4; WORD $0x0065             // vpbroadcastq    ymm4, qword 0[rbp] /* [rip + .LCPI94_0] */
	LONG $0xc4ebfdc5                           // vpor    ymm0, ymm0, ymm4
	LONG $0xc45cfdc5                           // vsubpd    ymm0, ymm0, ymm4
	LONG $0xccebf5c5                           // vpor    ymm1, ymm1, ymm4
	LONG $0xcc5cf5c5                           // vsubpd    ymm1, ymm1, ymm4
	LONG $0xd4ebedc5                           // vpor    ymm2, ymm2, ymm4
	LONG $0xd45cedc5                           // vsubpd    ymm2, ymm2, ymm4
	LONG $0xdcebe5c5                           // vpor    ymm3, ymm3, ymm4
	LONG $0xdc5ce5c5                           // vsubpd    ymm3, ymm3, ymm4
	LONG $0x0411fdc5; BYTE $0xd6               // vmovupd    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fdc5; WORD $0x20d6             // vmovupd    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fdc5; WORD $0x40d6             // vmovupd    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fdc5; WORD $0x60d6             // vmovupd    yword [rsi + 8*rdx + 96], ymm3

LBB94_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB94_11

LBB94_10:
	WORD $0x048b; BYTE $0x8f     // mov    eax, dword [rdi + 4*rcx]
	LONG $0x2ad3e1c4; BYTE $0xc0 // vcvtsi2sd    xmm0, xmm5, rax
	LONG $0x0411fbc5; BYTE $0xce // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB94_10

LBB94_11:
	VZEROUPPER
	RET

LBB94_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB94_8
	JMP  LBB94_9

TEXT ·_cast_numeric_int32_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB95_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB95_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB95_10

LBB95_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB95_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB95_6:
	LONG $0x04e6fec5; BYTE $0x97         // vcvtdq2pd    ymm0, oword [rdi + 4*rdx]
	LONG $0x4ce6fec5; WORD $0x1097       // vcvtdq2pd    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x54e6fec5; WORD $0x2097       // vcvtdq2pd    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x5ce6fec5; WORD $0x3097       // vcvtdq2pd    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x0411fcc5; BYTE $0xd6         // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6       // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6       // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6       // vmovups    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x44e6fec5; WORD $0x4097       // vcvtdq2pd    ymm0, oword [rdi + 4*rdx + 64]
	LONG $0x4ce6fec5; WORD $0x5097       // vcvtdq2pd    ymm1, oword [rdi + 4*rdx + 80]
	LONG $0x54e6fec5; WORD $0x6097       // vcvtdq2pd    ymm2, oword [rdi + 4*rdx + 96]
	LONG $0x5ce6fec5; WORD $0x7097       // vcvtdq2pd    ymm3, oword [rdi + 4*rdx + 112]
	QUAD $0x000080d68411fdc5; BYTE $0x00 // vmovupd    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB95_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB95_9

LBB95_8:
	LONG $0x04e6fec5; BYTE $0x97   // vcvtdq2pd    ymm0, oword [rdi + 4*rdx]
	LONG $0x4ce6fec5; WORD $0x1097 // vcvtdq2pd    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x54e6fec5; WORD $0x2097 // vcvtdq2pd    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x5ce6fec5; WORD $0x3097 // vcvtdq2pd    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x0411fdc5; BYTE $0xd6   // vmovupd    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6 // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6 // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6 // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB95_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB95_11

LBB95_10:
	LONG $0x042adbc5; BYTE $0x8f // vcvtsi2sd    xmm0, xmm4, dword [rdi + 4*rcx]
	LONG $0x0411fbc5; BYTE $0xce // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB95_10

LBB95_11:
	VZEROUPPER
	RET

LBB95_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB95_8
	JMP  LBB95_9

DATA LCDATA23<>+0x000(SB)/8, $0x4330000000000000
DATA LCDATA23<>+0x008(SB)/8, $0x4530000000000000
DATA LCDATA23<>+0x010(SB)/8, $0x4530000000100000
DATA LCDATA23<>+0x018(SB)/8, $0x0000000000000000
DATA LCDATA23<>+0x020(SB)/8, $0x4530000043300000
DATA LCDATA23<>+0x028(SB)/8, $0x0000000000000000
DATA LCDATA23<>+0x030(SB)/8, $0x4330000000000000
DATA LCDATA23<>+0x038(SB)/8, $0x4530000000000000
GLOBL LCDATA23<>(SB), 8, $64

TEXT ·_cast_numeric_uint64_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX
	LEAQ LCDATA23<>(SB), BP

	WORD $0xd285             // test    edx, edx
	JLE  LBB96_12
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB96_5
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB96_3

LBB96_5:
	WORD $0x8944; BYTE $0xc9       // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0418d48               // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0       // mov    r8, rax
	LONG $0x04e8c149               // shr    r8, 4
	LONG $0x01c08349               // add    r8, 1
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	JE   LBB96_6
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0xfee08348               // and    rax, -2
	WORD $0xf748; BYTE $0xd8       // neg    rax
	WORD $0xd231                   // xor    edx, edx
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI96_0] */
	LONG $0xc9eff1c5               // vpxor    xmm1, xmm1, xmm1
	LONG $0x597de2c4; WORD $0x0855 // vpbroadcastq    ymm2, qword 8[rbp] /* [rip + .LCPI96_1] */
	LONG $0x197de2c4; WORD $0x105d // vbroadcastsd    ymm3, qword 16[rbp] /* [rip + .LCPI96_2] */

LBB96_8:
	LONG $0x246ffec5; BYTE $0xd7         // vmovdqu    ymm4, yword [rdi + 8*rdx]
	LONG $0x6c6ffec5; WORD $0x20d7       // vmovdqu    ymm5, yword [rdi + 8*rdx + 32]
	LONG $0x746ffec5; WORD $0x40d7       // vmovdqu    ymm6, yword [rdi + 8*rdx + 64]
	LONG $0x7c6ffec5; WORD $0x60d7       // vmovdqu    ymm7, yword [rdi + 8*rdx + 96]
	LONG $0x025d63c4; WORD $0xaac1       // vpblendd    ymm8, ymm4, ymm1, 170
	LONG $0xc0eb3dc5                     // vpor    ymm8, ymm8, ymm0
	LONG $0xd473ddc5; BYTE $0x20         // vpsrlq    ymm4, ymm4, 32
	LONG $0xe2ebddc5                     // vpor    ymm4, ymm4, ymm2
	LONG $0xe35cddc5                     // vsubpd    ymm4, ymm4, ymm3
	LONG $0xe458bdc5                     // vaddpd    ymm4, ymm8, ymm4
	LONG $0x025563c4; WORD $0xaac1       // vpblendd    ymm8, ymm5, ymm1, 170
	LONG $0xc0eb3dc5                     // vpor    ymm8, ymm8, ymm0
	LONG $0xd573d5c5; BYTE $0x20         // vpsrlq    ymm5, ymm5, 32
	LONG $0xeaebd5c5                     // vpor    ymm5, ymm5, ymm2
	LONG $0xeb5cd5c5                     // vsubpd    ymm5, ymm5, ymm3
	LONG $0xed58bdc5                     // vaddpd    ymm5, ymm8, ymm5
	LONG $0x024d63c4; WORD $0xaac1       // vpblendd    ymm8, ymm6, ymm1, 170
	LONG $0xc0eb3dc5                     // vpor    ymm8, ymm8, ymm0
	LONG $0xd673cdc5; BYTE $0x20         // vpsrlq    ymm6, ymm6, 32
	LONG $0xf2ebcdc5                     // vpor    ymm6, ymm6, ymm2
	LONG $0xf35ccdc5                     // vsubpd    ymm6, ymm6, ymm3
	LONG $0xf658bdc5                     // vaddpd    ymm6, ymm8, ymm6
	LONG $0x024563c4; WORD $0xaac1       // vpblendd    ymm8, ymm7, ymm1, 170
	LONG $0xc0eb3dc5                     // vpor    ymm8, ymm8, ymm0
	LONG $0xd773c5c5; BYTE $0x20         // vpsrlq    ymm7, ymm7, 32
	LONG $0xfaebc5c5                     // vpor    ymm7, ymm7, ymm2
	LONG $0xfb5cc5c5                     // vsubpd    ymm7, ymm7, ymm3
	LONG $0xff58bdc5                     // vaddpd    ymm7, ymm8, ymm7
	LONG $0x2411fdc5; BYTE $0xd6         // vmovupd    yword [rsi + 8*rdx], ymm4
	LONG $0x6c11fdc5; WORD $0x20d6       // vmovupd    yword [rsi + 8*rdx + 32], ymm5
	LONG $0x7411fdc5; WORD $0x40d6       // vmovupd    yword [rsi + 8*rdx + 64], ymm6
	LONG $0x7c11fdc5; WORD $0x60d6       // vmovupd    yword [rsi + 8*rdx + 96], ymm7
	QUAD $0x000080d7a46ffec5; BYTE $0x00 // vmovdqu    ymm4, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d7ac6ffec5; BYTE $0x00 // vmovdqu    ymm5, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d7b46ffec5; BYTE $0x00 // vmovdqu    ymm6, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d7bc6ffec5; BYTE $0x00 // vmovdqu    ymm7, yword [rdi + 8*rdx + 224]
	LONG $0x025d63c4; WORD $0xaac1       // vpblendd    ymm8, ymm4, ymm1, 170
	LONG $0xc0eb3dc5                     // vpor    ymm8, ymm8, ymm0
	LONG $0xd473ddc5; BYTE $0x20         // vpsrlq    ymm4, ymm4, 32
	LONG $0xe2ebddc5                     // vpor    ymm4, ymm4, ymm2
	LONG $0xe35cddc5                     // vsubpd    ymm4, ymm4, ymm3
	LONG $0xe458bdc5                     // vaddpd    ymm4, ymm8, ymm4
	LONG $0x025563c4; WORD $0xaac1       // vpblendd    ymm8, ymm5, ymm1, 170
	LONG $0xc0eb3dc5                     // vpor    ymm8, ymm8, ymm0
	LONG $0xd573d5c5; BYTE $0x20         // vpsrlq    ymm5, ymm5, 32
	LONG $0xeaebd5c5                     // vpor    ymm5, ymm5, ymm2
	LONG $0xeb5cd5c5                     // vsubpd    ymm5, ymm5, ymm3
	LONG $0xed58bdc5                     // vaddpd    ymm5, ymm8, ymm5
	LONG $0x024d63c4; WORD $0xaac1       // vpblendd    ymm8, ymm6, ymm1, 170
	LONG $0xc0eb3dc5                     // vpor    ymm8, ymm8, ymm0
	LONG $0xd673cdc5; BYTE $0x20         // vpsrlq    ymm6, ymm6, 32
	LONG $0xf2ebcdc5                     // vpor    ymm6, ymm6, ymm2
	LONG $0xf35ccdc5                     // vsubpd    ymm6, ymm6, ymm3
	LONG $0xf658bdc5                     // vaddpd    ymm6, ymm8, ymm6
	LONG $0x024563c4; WORD $0xaac1       // vpblendd    ymm8, ymm7, ymm1, 170
	LONG $0xc0eb3dc5                     // vpor    ymm8, ymm8, ymm0
	LONG $0xd773c5c5; BYTE $0x20         // vpsrlq    ymm7, ymm7, 32
	LONG $0xfaebc5c5                     // vpor    ymm7, ymm7, ymm2
	LONG $0xfb5cc5c5                     // vsubpd    ymm7, ymm7, ymm3
	LONG $0xff58bdc5                     // vaddpd    ymm7, ymm8, ymm7
	QUAD $0x000080d6a411fdc5; BYTE $0x00 // vmovupd    yword [rsi + 8*rdx + 128], ymm4
	QUAD $0x0000a0d6ac11fdc5; BYTE $0x00 // vmovupd    yword [rsi + 8*rdx + 160], ymm5
	QUAD $0x0000c0d6b411fdc5; BYTE $0x00 // vmovupd    yword [rsi + 8*rdx + 192], ymm6
	QUAD $0x0000e0d6bc11fdc5; BYTE $0x00 // vmovupd    yword [rsi + 8*rdx + 224], ymm7
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB96_8
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB96_11

LBB96_10:
	LONG $0x046ffec5; BYTE $0xd7   // vmovdqu    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c6ffec5; WORD $0x20d7 // vmovdqu    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x546ffec5; WORD $0x40d7 // vmovdqu    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c6ffec5; WORD $0x60d7 // vmovdqu    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0xe457d9c5               // vxorpd    xmm4, xmm4, xmm4
	LONG $0x027de3c4; WORD $0xaaec // vpblendd    ymm5, ymm0, ymm4, 170
	LONG $0x597de2c4; WORD $0x0075 // vpbroadcastq    ymm6, qword 0[rbp] /* [rip + .LCPI96_0] */
	LONG $0xeeebd5c5               // vpor    ymm5, ymm5, ymm6
	LONG $0xd073fdc5; BYTE $0x20   // vpsrlq    ymm0, ymm0, 32
	LONG $0x597de2c4; WORD $0x087d // vpbroadcastq    ymm7, qword 8[rbp] /* [rip + .LCPI96_1] */
	LONG $0xc7ebfdc5               // vpor    ymm0, ymm0, ymm7
	LONG $0x197d62c4; WORD $0x1045 // vbroadcastsd    ymm8, qword 16[rbp] /* [rip + .LCPI96_2] */
	LONG $0x5c7dc1c4; BYTE $0xc0   // vsubpd    ymm0, ymm0, ymm8
	LONG $0xc058d5c5               // vaddpd    ymm0, ymm5, ymm0
	LONG $0x0275e3c4; WORD $0xaaec // vpblendd    ymm5, ymm1, ymm4, 170
	LONG $0xeeebd5c5               // vpor    ymm5, ymm5, ymm6
	LONG $0xd173f5c5; BYTE $0x20   // vpsrlq    ymm1, ymm1, 32
	LONG $0xcfebf5c5               // vpor    ymm1, ymm1, ymm7
	LONG $0x5c75c1c4; BYTE $0xc8   // vsubpd    ymm1, ymm1, ymm8
	LONG $0xc958d5c5               // vaddpd    ymm1, ymm5, ymm1
	LONG $0x026de3c4; WORD $0xaaec // vpblendd    ymm5, ymm2, ymm4, 170
	LONG $0xeeebd5c5               // vpor    ymm5, ymm5, ymm6
	LONG $0xd273edc5; BYTE $0x20   // vpsrlq    ymm2, ymm2, 32
	LONG $0xd7ebedc5               // vpor    ymm2, ymm2, ymm7
	LONG $0x5c6dc1c4; BYTE $0xd0   // vsubpd    ymm2, ymm2, ymm8
	LONG $0xd258d5c5               // vaddpd    ymm2, ymm5, ymm2
	LONG $0x0265e3c4; WORD $0xaae4 // vpblendd    ymm4, ymm3, ymm4, 170
	LONG $0xe6ebddc5               // vpor    ymm4, ymm4, ymm6
	LONG $0xd373e5c5; BYTE $0x20   // vpsrlq    ymm3, ymm3, 32
	LONG $0xdfebe5c5               // vpor    ymm3, ymm3, ymm7
	LONG $0x5c65c1c4; BYTE $0xd8   // vsubpd    ymm3, ymm3, ymm8
	LONG $0xdb58ddc5               // vaddpd    ymm3, ymm4, ymm3
	LONG $0x0411fdc5; BYTE $0xd6   // vmovupd    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fdc5; WORD $0x20d6 // vmovupd    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fdc5; WORD $0x40d6 // vmovupd    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fdc5; WORD $0x60d6 // vmovupd    yword [rsi + 8*rdx + 96], ymm3

LBB96_11:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB96_12

LBB96_3:
	LONG $0x4528f9c5; BYTE $0x20 // vmovapd    xmm0, oword 32[rbp] /* [rip + .LCPI96_3] */
	LONG $0x4d28f9c5; BYTE $0x30 // vmovapd    xmm1, oword 48[rbp] /* [rip + .LCPI96_4] */

LBB96_4:
	LONG $0x1410fbc5; BYTE $0xcf   // vmovsd    xmm2, qword [rdi + 8*rcx]
	LONG $0xd014e8c5               // vunpcklps    xmm2, xmm2, xmm0
	LONG $0xd15ce9c5               // vsubpd    xmm2, xmm2, xmm1
	LONG $0x0579e3c4; WORD $0x01da // vpermilpd    xmm3, xmm2, 1
	LONG $0xd258e3c5               // vaddsd    xmm2, xmm3, xmm2
	LONG $0x1411fbc5; BYTE $0xce   // vmovsd    qword [rsi + 8*rcx], xmm2
	LONG $0x01c18348               // add    rcx, 1
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB96_4

LBB96_12:
	VZEROUPPER
	RET

LBB96_6:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB96_10
	JMP  LBB96_11

TEXT ·_cast_numeric_int64_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB97_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB97_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB97_10

LBB97_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB97_4
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	LONG $0xfee28349         // and    r10, -2
	WORD $0xf749; BYTE $0xda // neg    r10
	WORD $0xd231             // xor    edx, edx

LBB97_6:
	LONG $0x046ffac5; BYTE $0xd7         // vmovdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6ffac5; WORD $0x10d7       // vmovdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x16f9e3c4; WORD $0x01c0       // vpextrq    rax, xmm0, 1
	LONG $0x2aa3e1c4; BYTE $0xd0         // vcvtsi2sd    xmm2, xmm11, rax
	LONG $0x5c6ffac5; WORD $0x20d7       // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x7ef9e1c4; BYTE $0xc0         // vmovq    rax, xmm0
	LONG $0x2aa3e1c4; BYTE $0xc0         // vcvtsi2sd    xmm0, xmm11, rax
	LONG $0x16f9e3c4; WORD $0x01c8       // vpextrq    rax, xmm1, 1
	LONG $0x2aa3e1c4; BYTE $0xe0         // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0x6c6ffac5; WORD $0x30d7       // vmovdqu    xmm5, oword [rdi + 8*rdx + 48]
	LONG $0x7ef9e1c4; BYTE $0xc8         // vmovq    rax, xmm1
	LONG $0x2aa3e1c4; BYTE $0xc8         // vcvtsi2sd    xmm1, xmm11, rax
	LONG $0x16f9e3c4; WORD $0x01e8       // vpextrq    rax, xmm5, 1
	LONG $0x2aa3e1c4; BYTE $0xf0         // vcvtsi2sd    xmm6, xmm11, rax
	LONG $0xc21479c5                     // vunpcklpd    xmm8, xmm0, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe8         // vmovq    rax, xmm5
	LONG $0x2aa3e1c4; BYTE $0xd0         // vcvtsi2sd    xmm2, xmm11, rax
	LONG $0x16f9e3c4; WORD $0x01d8       // vpextrq    rax, xmm3, 1
	LONG $0x2aa3e1c4; BYTE $0xe8         // vcvtsi2sd    xmm5, xmm11, rax
	LONG $0xd41471c5                     // vunpcklpd    xmm10, xmm1, xmm4
	LONG $0x7ef9e1c4; BYTE $0xd8         // vmovq    rax, xmm3
	LONG $0x2aa3e1c4; BYTE $0xd8         // vcvtsi2sd    xmm3, xmm11, rax
	LONG $0xce1469c5                     // vunpcklpd    xmm9, xmm2, xmm6
	LONG $0x646ffac5; WORD $0x50d7       // vmovdqu    xmm4, oword [rdi + 8*rdx + 80]
	LONG $0x16f9e3c4; WORD $0x01e0       // vpextrq    rax, xmm4, 1
	LONG $0xdd14e1c5                     // vunpcklpd    xmm3, xmm3, xmm5
	LONG $0x2aa3e1c4; BYTE $0xe8         // vcvtsi2sd    xmm5, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xe0         // vmovq    rax, xmm4
	LONG $0x2aa3e1c4; BYTE $0xe0         // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0xe514d9c5                     // vunpcklpd    xmm4, xmm4, xmm5
	LONG $0x6c6ffac5; WORD $0x40d7       // vmovdqu    xmm5, oword [rdi + 8*rdx + 64]
	LONG $0x16f9e3c4; WORD $0x01e8       // vpextrq    rax, xmm5, 1
	LONG $0x2aa3e1c4; BYTE $0xf0         // vcvtsi2sd    xmm6, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xe8         // vmovq    rax, xmm5
	LONG $0x2aa3e1c4; BYTE $0xe8         // vcvtsi2sd    xmm5, xmm11, rax
	LONG $0x7c6ffac5; WORD $0x70d7       // vmovdqu    xmm7, oword [rdi + 8*rdx + 112]
	LONG $0x16f9e3c4; WORD $0x01f8       // vpextrq    rax, xmm7, 1
	LONG $0x2aa3e1c4; BYTE $0xc0         // vcvtsi2sd    xmm0, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xf8         // vmovq    rax, xmm7
	LONG $0x2aa3e1c4; BYTE $0xf8         // vcvtsi2sd    xmm7, xmm11, rax
	LONG $0x546ffac5; WORD $0x60d7       // vmovdqu    xmm2, oword [rdi + 8*rdx + 96]
	LONG $0x16f9e3c4; WORD $0x01d0       // vpextrq    rax, xmm2, 1
	LONG $0x2aa3e1c4; BYTE $0xc8         // vcvtsi2sd    xmm1, xmm11, rax
	LONG $0xee14d1c5                     // vunpcklpd    xmm5, xmm5, xmm6
	LONG $0x7ef9e1c4; BYTE $0xd0         // vmovq    rax, xmm2
	LONG $0x2aa3e1c4; BYTE $0xd0         // vcvtsi2sd    xmm2, xmm11, rax
	LONG $0xc014c1c5                     // vunpcklpd    xmm0, xmm7, xmm0
	LONG $0xc914e9c5                     // vunpcklpd    xmm1, xmm2, xmm1
	LONG $0x541179c5; WORD $0x10d6       // vmovupd    oword [rsi + 8*rdx + 16], xmm10
	LONG $0x041179c5; BYTE $0xd6         // vmovupd    oword [rsi + 8*rdx], xmm8
	LONG $0x5c11f9c5; WORD $0x20d6       // vmovupd    oword [rsi + 8*rdx + 32], xmm3
	LONG $0x4c1179c5; WORD $0x30d6       // vmovupd    oword [rsi + 8*rdx + 48], xmm9
	LONG $0x6c11f9c5; WORD $0x40d6       // vmovupd    oword [rsi + 8*rdx + 64], xmm5
	LONG $0x6411f9c5; WORD $0x50d6       // vmovupd    oword [rsi + 8*rdx + 80], xmm4
	LONG $0x4c11f9c5; WORD $0x60d6       // vmovupd    oword [rsi + 8*rdx + 96], xmm1
	LONG $0x4411f9c5; WORD $0x70d6       // vmovupd    oword [rsi + 8*rdx + 112], xmm0
	QUAD $0x000080d7846ffac5; BYTE $0x00 // vmovdqu    xmm0, oword [rdi + 8*rdx + 128]
	QUAD $0x000090d78c6ffac5; BYTE $0x00 // vmovdqu    xmm1, oword [rdi + 8*rdx + 144]
	LONG $0x16f9e3c4; WORD $0x01c0       // vpextrq    rax, xmm0, 1
	LONG $0x2aa3e1c4; BYTE $0xd0         // vcvtsi2sd    xmm2, xmm11, rax
	QUAD $0x0000a0d79c6ffac5; BYTE $0x00 // vmovdqu    xmm3, oword [rdi + 8*rdx + 160]
	LONG $0x7ef9e1c4; BYTE $0xc0         // vmovq    rax, xmm0
	LONG $0x2aa3e1c4; BYTE $0xc0         // vcvtsi2sd    xmm0, xmm11, rax
	LONG $0x16f9e3c4; WORD $0x01c8       // vpextrq    rax, xmm1, 1
	LONG $0x2aa3e1c4; BYTE $0xe0         // vcvtsi2sd    xmm4, xmm11, rax
	QUAD $0x0000b0d7ac6ffac5; BYTE $0x00 // vmovdqu    xmm5, oword [rdi + 8*rdx + 176]
	LONG $0x7ef9e1c4; BYTE $0xc8         // vmovq    rax, xmm1
	LONG $0x2aa3e1c4; BYTE $0xc8         // vcvtsi2sd    xmm1, xmm11, rax
	LONG $0x16f9e3c4; WORD $0x01e8       // vpextrq    rax, xmm5, 1
	LONG $0x2aa3e1c4; BYTE $0xf0         // vcvtsi2sd    xmm6, xmm11, rax
	LONG $0xc21479c5                     // vunpcklpd    xmm8, xmm0, xmm2
	LONG $0x7ef9e1c4; BYTE $0xe8         // vmovq    rax, xmm5
	LONG $0x2aa3e1c4; BYTE $0xd0         // vcvtsi2sd    xmm2, xmm11, rax
	LONG $0x16f9e3c4; WORD $0x01d8       // vpextrq    rax, xmm3, 1
	LONG $0x2aa3e1c4; BYTE $0xe8         // vcvtsi2sd    xmm5, xmm11, rax
	LONG $0xd41471c5                     // vunpcklpd    xmm10, xmm1, xmm4
	LONG $0x7ef9e1c4; BYTE $0xd8         // vmovq    rax, xmm3
	LONG $0x2aa3e1c4; BYTE $0xd8         // vcvtsi2sd    xmm3, xmm11, rax
	LONG $0xce1469c5                     // vunpcklpd    xmm9, xmm2, xmm6
	QUAD $0x0000d0d7a46ffac5; BYTE $0x00 // vmovdqu    xmm4, oword [rdi + 8*rdx + 208]
	LONG $0x16f9e3c4; WORD $0x01e0       // vpextrq    rax, xmm4, 1
	LONG $0xdd14e1c5                     // vunpcklpd    xmm3, xmm3, xmm5
	LONG $0x2aa3e1c4; BYTE $0xe8         // vcvtsi2sd    xmm5, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xe0         // vmovq    rax, xmm4
	LONG $0x2aa3e1c4; BYTE $0xe0         // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0xe514d9c5                     // vunpcklpd    xmm4, xmm4, xmm5
	QUAD $0x0000c0d7ac6ffac5; BYTE $0x00 // vmovdqu    xmm5, oword [rdi + 8*rdx + 192]
	LONG $0x16f9e3c4; WORD $0x01e8       // vpextrq    rax, xmm5, 1
	LONG $0x2aa3e1c4; BYTE $0xf0         // vcvtsi2sd    xmm6, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xe8         // vmovq    rax, xmm5
	LONG $0x2aa3e1c4; BYTE $0xe8         // vcvtsi2sd    xmm5, xmm11, rax
	QUAD $0x0000f0d7bc6ffac5; BYTE $0x00 // vmovdqu    xmm7, oword [rdi + 8*rdx + 240]
	LONG $0x16f9e3c4; WORD $0x01f8       // vpextrq    rax, xmm7, 1
	LONG $0x2aa3e1c4; BYTE $0xc0         // vcvtsi2sd    xmm0, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xf8         // vmovq    rax, xmm7
	LONG $0x2aa3e1c4; BYTE $0xf8         // vcvtsi2sd    xmm7, xmm11, rax
	QUAD $0x0000e0d7946ffac5; BYTE $0x00 // vmovdqu    xmm2, oword [rdi + 8*rdx + 224]
	LONG $0x16f9e3c4; WORD $0x01d0       // vpextrq    rax, xmm2, 1
	LONG $0x2aa3e1c4; BYTE $0xc8         // vcvtsi2sd    xmm1, xmm11, rax
	LONG $0xee14d1c5                     // vunpcklpd    xmm5, xmm5, xmm6
	LONG $0x7ef9e1c4; BYTE $0xd0         // vmovq    rax, xmm2
	LONG $0x2aa3e1c4; BYTE $0xd0         // vcvtsi2sd    xmm2, xmm11, rax
	LONG $0xc014c1c5                     // vunpcklpd    xmm0, xmm7, xmm0
	LONG $0xc914e9c5                     // vunpcklpd    xmm1, xmm2, xmm1
	QUAD $0x000090d6941179c5; BYTE $0x00 // vmovupd    oword [rsi + 8*rdx + 144], xmm10
	QUAD $0x000080d6841179c5; BYTE $0x00 // vmovupd    oword [rsi + 8*rdx + 128], xmm8
	QUAD $0x0000a0d69c11f9c5; BYTE $0x00 // vmovupd    oword [rsi + 8*rdx + 160], xmm3
	QUAD $0x0000b0d68c1179c5; BYTE $0x00 // vmovupd    oword [rsi + 8*rdx + 176], xmm9
	QUAD $0x0000c0d6ac11f9c5; BYTE $0x00 // vmovupd    oword [rsi + 8*rdx + 192], xmm5
	QUAD $0x0000d0d6a411f9c5; BYTE $0x00 // vmovupd    oword [rsi + 8*rdx + 208], xmm4
	QUAD $0x0000e0d68c11f9c5; BYTE $0x00 // vmovupd    oword [rsi + 8*rdx + 224], xmm1
	QUAD $0x0000f0d68411f9c5; BYTE $0x00 // vmovupd    oword [rsi + 8*rdx + 240], xmm0
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c28349                     // add    r10, 2
	JNE  LBB97_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB97_9

LBB97_8:
	LONG $0x046ffac5; BYTE $0xd7   // vmovdqu    xmm0, oword [rdi + 8*rdx]
	LONG $0x4c6ffac5; WORD $0x10d7 // vmovdqu    xmm1, oword [rdi + 8*rdx + 16]
	LONG $0x5c6ffac5; WORD $0x20d7 // vmovdqu    xmm3, oword [rdi + 8*rdx + 32]
	LONG $0x546ffac5; WORD $0x30d7 // vmovdqu    xmm2, oword [rdi + 8*rdx + 48]
	LONG $0x16f9e3c4; WORD $0x01c0 // vpextrq    rax, xmm0, 1
	LONG $0x2aa3e1c4; BYTE $0xe0   // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	LONG $0x2aa3e1c4; BYTE $0xc0   // vcvtsi2sd    xmm0, xmm11, rax
	LONG $0xc41479c5               // vunpcklpd    xmm8, xmm0, xmm4
	LONG $0x16f9e3c4; WORD $0x01c8 // vpextrq    rax, xmm1, 1
	LONG $0x2aa3e1c4; BYTE $0xe0   // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xc8   // vmovq    rax, xmm1
	LONG $0x2aa3e1c4; BYTE $0xc8   // vcvtsi2sd    xmm1, xmm11, rax
	LONG $0xcc14f1c5               // vunpcklpd    xmm1, xmm1, xmm4
	LONG $0x16f9e3c4; WORD $0x01d0 // vpextrq    rax, xmm2, 1
	LONG $0x2aa3e1c4; BYTE $0xe0   // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xd0   // vmovq    rax, xmm2
	LONG $0x2aa3e1c4; BYTE $0xd0   // vcvtsi2sd    xmm2, xmm11, rax
	LONG $0xd414e9c5               // vunpcklpd    xmm2, xmm2, xmm4
	LONG $0x16f9e3c4; WORD $0x01d8 // vpextrq    rax, xmm3, 1
	LONG $0x2aa3e1c4; BYTE $0xe0   // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xd8   // vmovq    rax, xmm3
	LONG $0x2aa3e1c4; BYTE $0xd8   // vcvtsi2sd    xmm3, xmm11, rax
	LONG $0x6c6ffac5; WORD $0x50d7 // vmovdqu    xmm5, oword [rdi + 8*rdx + 80]
	LONG $0x16f9e3c4; WORD $0x01e8 // vpextrq    rax, xmm5, 1
	LONG $0x2aa3e1c4; BYTE $0xf0   // vcvtsi2sd    xmm6, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xe8   // vmovq    rax, xmm5
	LONG $0x2aa3e1c4; BYTE $0xe8   // vcvtsi2sd    xmm5, xmm11, rax
	LONG $0x7c6ffac5; WORD $0x40d7 // vmovdqu    xmm7, oword [rdi + 8*rdx + 64]
	LONG $0x16f9e3c4; WORD $0x01f8 // vpextrq    rax, xmm7, 1
	LONG $0x2aa3e1c4; BYTE $0xc0   // vcvtsi2sd    xmm0, xmm11, rax
	LONG $0xdc14e1c5               // vunpcklpd    xmm3, xmm3, xmm4
	LONG $0x7ef9e1c4; BYTE $0xf8   // vmovq    rax, xmm7
	LONG $0x2aa3e1c4; BYTE $0xe0   // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0xee14d1c5               // vunpcklpd    xmm5, xmm5, xmm6
	LONG $0x746ffac5; WORD $0x70d7 // vmovdqu    xmm6, oword [rdi + 8*rdx + 112]
	LONG $0x16f9e3c4; WORD $0x01f0 // vpextrq    rax, xmm6, 1
	LONG $0xc014d9c5               // vunpcklpd    xmm0, xmm4, xmm0
	LONG $0x2aa3e1c4; BYTE $0xe0   // vcvtsi2sd    xmm4, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xf0   // vmovq    rax, xmm6
	LONG $0x2aa3e1c4; BYTE $0xf0   // vcvtsi2sd    xmm6, xmm11, rax
	LONG $0xe414c9c5               // vunpcklpd    xmm4, xmm6, xmm4
	LONG $0x746ffac5; WORD $0x60d7 // vmovdqu    xmm6, oword [rdi + 8*rdx + 96]
	LONG $0x16f9e3c4; WORD $0x01f0 // vpextrq    rax, xmm6, 1
	LONG $0x2aa3e1c4; BYTE $0xf8   // vcvtsi2sd    xmm7, xmm11, rax
	LONG $0x7ef9e1c4; BYTE $0xf0   // vmovq    rax, xmm6
	LONG $0x2aa3e1c4; BYTE $0xf0   // vcvtsi2sd    xmm6, xmm11, rax
	LONG $0xf714c9c5               // vunpcklpd    xmm6, xmm6, xmm7
	LONG $0x4c11f9c5; WORD $0x10d6 // vmovupd    oword [rsi + 8*rdx + 16], xmm1
	LONG $0x041179c5; BYTE $0xd6   // vmovupd    oword [rsi + 8*rdx], xmm8
	LONG $0x5c11f9c5; WORD $0x20d6 // vmovupd    oword [rsi + 8*rdx + 32], xmm3
	LONG $0x5411f9c5; WORD $0x30d6 // vmovupd    oword [rsi + 8*rdx + 48], xmm2
	LONG $0x4411f9c5; WORD $0x40d6 // vmovupd    oword [rsi + 8*rdx + 64], xmm0
	LONG $0x6c11f9c5; WORD $0x50d6 // vmovupd    oword [rsi + 8*rdx + 80], xmm5
	LONG $0x7411f9c5; WORD $0x60d6 // vmovupd    oword [rsi + 8*rdx + 96], xmm6
	LONG $0x6411f9c5; WORD $0x70d6 // vmovupd    oword [rsi + 8*rdx + 112], xmm4

LBB97_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB97_11

LBB97_10:
	LONG $0x2aa3e1c4; WORD $0xcf04 // vcvtsi2sd    xmm0, xmm11, qword [rdi + 8*rcx]
	LONG $0x0411fbc5; BYTE $0xce   // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348               // add    rcx, 1
	WORD $0x3949; BYTE $0xc9       // cmp    r9, rcx
	JNE  LBB97_10

LBB97_11:
	RET

LBB97_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB97_8
	JMP  LBB97_9

TEXT ·_cast_numeric_float32_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB98_11
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JA   LBB98_3
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB98_10

LBB98_3:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB98_4
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB98_6:
	LONG $0x045afcc5; BYTE $0x97         // vcvtps2pd    ymm0, oword [rdi + 4*rdx]
	LONG $0x4c5afcc5; WORD $0x1097       // vcvtps2pd    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x545afcc5; WORD $0x2097       // vcvtps2pd    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x5c5afcc5; WORD $0x3097       // vcvtps2pd    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x0411fcc5; BYTE $0xd6         // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6       // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6       // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6       // vmovups    yword [rsi + 8*rdx + 96], ymm3
	LONG $0x445afcc5; WORD $0x4097       // vcvtps2pd    ymm0, oword [rdi + 4*rdx + 64]
	LONG $0x4c5afcc5; WORD $0x5097       // vcvtps2pd    ymm1, oword [rdi + 4*rdx + 80]
	LONG $0x545afcc5; WORD $0x6097       // vcvtps2pd    ymm2, oword [rdi + 4*rdx + 96]
	LONG $0x5c5afcc5; WORD $0x7097       // vcvtps2pd    ymm3, oword [rdi + 4*rdx + 112]
	QUAD $0x000080d68411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB98_6
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB98_9

LBB98_8:
	LONG $0x045afcc5; BYTE $0x97   // vcvtps2pd    ymm0, oword [rdi + 4*rdx]
	LONG $0x4c5afcc5; WORD $0x1097 // vcvtps2pd    ymm1, oword [rdi + 4*rdx + 16]
	LONG $0x545afcc5; WORD $0x2097 // vcvtps2pd    ymm2, oword [rdi + 4*rdx + 32]
	LONG $0x5c5afcc5; WORD $0x3097 // vcvtps2pd    ymm3, oword [rdi + 4*rdx + 48]
	LONG $0x0411fcc5; BYTE $0xd6   // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6 // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6 // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6 // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB98_9:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JE   LBB98_11

LBB98_10:
	LONG $0x0410fac5; BYTE $0x8f // vmovss    xmm0, dword [rdi + 4*rcx]
	LONG $0xc05afac5             // vcvtss2sd    xmm0, xmm0, xmm0
	LONG $0x0411fbc5; BYTE $0xce // vmovsd    qword [rsi + 8*rcx], xmm0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB98_10

LBB98_11:
	VZEROUPPER
	RET

LBB98_4:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB98_8
	JMP  LBB98_9

TEXT ·_cast_numeric_float64_float64_avx2(SB), $0-24

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ len+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB99_16
	WORD $0x8941; BYTE $0xd1 // mov    r9d, edx
	WORD $0xfa83; BYTE $0x0f // cmp    edx, 15
	JBE  LBB99_2
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x3948; BYTE $0xf0 // cmp    rax, rsi
	JBE  LBB99_9
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JBE  LBB99_9

LBB99_2:
	WORD $0xc931 // xor    ecx, ecx

LBB99_3:
	WORD $0x8949; BYTE $0xc8 // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x894c; BYTE $0xca // mov    rdx, r9
	LONG $0x07e28348         // and    rdx, 7
	JE   LBB99_5

LBB99_4:
	LONG $0xcf048b48 // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948 // mov    qword [rsi + 8*rcx], rax
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc28348 // add    rdx, -1
	JNE  LBB99_4

LBB99_5:
	LONG $0x07f88349 // cmp    r8, 7
	JB   LBB99_16

LBB99_6:
	LONG $0xcf048b48             // mov    rax, qword [rdi + 8*rcx]
	LONG $0xce048948             // mov    qword [rsi + 8*rcx], rax
	LONG $0xcf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rcx + 8]
	LONG $0xce448948; BYTE $0x08 // mov    qword [rsi + 8*rcx + 8], rax
	LONG $0xcf448b48; BYTE $0x10 // mov    rax, qword [rdi + 8*rcx + 16]
	LONG $0xce448948; BYTE $0x10 // mov    qword [rsi + 8*rcx + 16], rax
	LONG $0xcf448b48; BYTE $0x18 // mov    rax, qword [rdi + 8*rcx + 24]
	LONG $0xce448948; BYTE $0x18 // mov    qword [rsi + 8*rcx + 24], rax
	LONG $0xcf448b48; BYTE $0x20 // mov    rax, qword [rdi + 8*rcx + 32]
	LONG $0xce448948; BYTE $0x20 // mov    qword [rsi + 8*rcx + 32], rax
	LONG $0xcf448b48; BYTE $0x28 // mov    rax, qword [rdi + 8*rcx + 40]
	LONG $0xce448948; BYTE $0x28 // mov    qword [rsi + 8*rcx + 40], rax
	LONG $0xcf448b48; BYTE $0x30 // mov    rax, qword [rdi + 8*rcx + 48]
	LONG $0xce448948; BYTE $0x30 // mov    qword [rsi + 8*rcx + 48], rax
	LONG $0xcf448b48; BYTE $0x38 // mov    rax, qword [rdi + 8*rcx + 56]
	LONG $0xce448948; BYTE $0x38 // mov    qword [rsi + 8*rcx + 56], rax
	LONG $0x08c18348             // add    rcx, 8
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB99_6
	JMP  LBB99_16

LBB99_9:
	WORD $0x8944; BYTE $0xc9 // mov    ecx, r9d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8949; BYTE $0xc0 // mov    r8, rax
	LONG $0x04e8c149         // shr    r8, 4
	LONG $0x01c08349         // add    r8, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB99_10
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xd231             // xor    edx, edx

LBB99_12:
	LONG $0x0410fcc5; BYTE $0xd7         // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7       // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7       // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7       // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6         // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6       // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6       // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6       // vmovups    yword [rsi + 8*rdx + 96], ymm3
	QUAD $0x000080d78410fcc5; BYTE $0x00 // vmovups    ymm0, yword [rdi + 8*rdx + 128]
	QUAD $0x0000a0d78c10fcc5; BYTE $0x00 // vmovups    ymm1, yword [rdi + 8*rdx + 160]
	QUAD $0x0000c0d79410fcc5; BYTE $0x00 // vmovups    ymm2, yword [rdi + 8*rdx + 192]
	QUAD $0x0000e0d79c10fcc5; BYTE $0x00 // vmovups    ymm3, yword [rdi + 8*rdx + 224]
	QUAD $0x000080d68411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 128], ymm0
	QUAD $0x0000a0d68c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 160], ymm1
	QUAD $0x0000c0d69411fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 192], ymm2
	QUAD $0x0000e0d69c11fcc5; BYTE $0x00 // vmovups    yword [rsi + 8*rdx + 224], ymm3
	LONG $0x20c28348                     // add    rdx, 32
	LONG $0x02c08348                     // add    rax, 2
	JNE  LBB99_12
	LONG $0x01c0f641                     // test    r8b, 1
	JE   LBB99_15

LBB99_14:
	LONG $0x0410fcc5; BYTE $0xd7   // vmovups    ymm0, yword [rdi + 8*rdx]
	LONG $0x4c10fcc5; WORD $0x20d7 // vmovups    ymm1, yword [rdi + 8*rdx + 32]
	LONG $0x5410fcc5; WORD $0x40d7 // vmovups    ymm2, yword [rdi + 8*rdx + 64]
	LONG $0x5c10fcc5; WORD $0x60d7 // vmovups    ymm3, yword [rdi + 8*rdx + 96]
	LONG $0x0411fcc5; BYTE $0xd6   // vmovups    yword [rsi + 8*rdx], ymm0
	LONG $0x4c11fcc5; WORD $0x20d6 // vmovups    yword [rsi + 8*rdx + 32], ymm1
	LONG $0x5411fcc5; WORD $0x40d6 // vmovups    yword [rsi + 8*rdx + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x60d6 // vmovups    yword [rsi + 8*rdx + 96], ymm3

LBB99_15:
	WORD $0x394c; BYTE $0xc9 // cmp    rcx, r9
	JNE  LBB99_3

LBB99_16:
	VZEROUPPER
	RET

LBB99_10:
	WORD $0xd231     // xor    edx, edx
	LONG $0x01c0f641 // test    r8b, 1
	JNE  LBB99_14
	JMP  LBB99_15
