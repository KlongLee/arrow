//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA1<>+0x008(SB)/8, $0x7fffffffffffffff
DATA LCDATA1<>+0x010(SB)/8, $0x7fffffff7fffffff
DATA LCDATA1<>+0x018(SB)/8, $0x7fffffff7fffffff
DATA LCDATA1<>+0x020(SB)/8, $0x000000ff000000ff
DATA LCDATA1<>+0x028(SB)/8, $0x000000ff000000ff
DATA LCDATA1<>+0x030(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x038(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA1<>(SB), 8, $64

TEXT Â·_arithmetic_sse4(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA1<>(SB), BP

	LONG $0x04fe8040         // cmp    sil, 4
	JG   LBB0_16
	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB0_31
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB0_51
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB0_1395
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_99
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_179
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_299
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_306
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_579
	WORD $0xf631             // xor    esi, esi

LBB0_12:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_14

LBB0_13:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_13

LBB0_14:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_15:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_15
	JMP  LBB0_1395

LBB0_16:
	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB0_41
	LONG $0x05fe8040         // cmp    sil, 5
	JE   LBB0_63
	LONG $0x06fe8040         // cmp    sil, 6
	JNE  LBB0_1395
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_110
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_188
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_313
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_320
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_584
	WORD $0xf631             // xor    esi, esi

LBB0_27:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_29

LBB0_28:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_28

LBB0_29:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_30:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_30
	JMP  LBB0_1395

LBB0_31:
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB0_75
	LONG $0x04fe8040         // cmp    sil, 4
	JNE  LBB0_1395
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_121
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_197
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_327
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_330
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_40
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_939
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_939

LBB0_40:
	WORD $0xc931 // xor    ecx, ecx

LBB0_997:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_999

LBB0_998:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_998

LBB0_999:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_1000:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1000
	JMP  LBB0_1395

LBB0_41:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB0_87
	LONG $0x09fe8040         // cmp    sil, 9
	JNE  LBB0_1395
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_128
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_202
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_333
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_336
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_50
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_941
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_941

LBB0_50:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1007:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1009

LBB0_1008:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_1008

LBB0_1009:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_1010:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1010
	JMP  LBB0_1395

LBB0_51:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_135
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_207
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_339
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_346
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_595
	WORD $0xf631             // xor    esi, esi

LBB0_59:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_61

LBB0_60:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2 // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_60

LBB0_61:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_62:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_62
	JMP  LBB0_1395

LBB0_63:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_146
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_216
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_353
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_360
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_600
	WORD $0xf631             // xor    esi, esi

LBB0_71:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_73

LBB0_72:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2 // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_72

LBB0_73:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_74:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_74
	JMP  LBB0_1395

LBB0_75:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_157
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_225
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_367
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_374
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_605
	WORD $0xf631             // xor    esi, esi

LBB0_83:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_85

LBB0_84:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f         // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_84

LBB0_85:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_86:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_86
	JMP  LBB0_1395

LBB0_87:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_168
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_234
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_381
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_388
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_610
	WORD $0xf631             // xor    esi, esi

LBB0_95:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_97

LBB0_96:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f         // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_96

LBB0_97:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_98:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_98
	JMP  LBB0_1395

LBB0_99:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_243
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_395
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_402
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_615
	WORD $0xf631             // xor    esi, esi

LBB0_106:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_108

LBB0_107:
	LONG $0x04100ff2; BYTE $0xf2   // movsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045c0ff2; BYTE $0xf1   // subsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_107

LBB0_108:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_109:
	LONG $0x04100ff2; BYTE $0xf2               // movsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045c0ff2; BYTE $0xf1               // subsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f2             // movsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445c0ff2; WORD $0x08f1             // subsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f2             // movsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445c0ff2; WORD $0x10f1             // subsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f2             // movsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445c0ff2; WORD $0x18f1             // subsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_109
	JMP  LBB0_1395

LBB0_110:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_252
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_409
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_416
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_620
	WORD $0xf631             // xor    esi, esi

LBB0_117:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_119

LBB0_118:
	LONG $0x04100ff2; BYTE $0xf2   // movsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045c0ff2; BYTE $0xf1   // subsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_118

LBB0_119:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_120:
	LONG $0x04100ff2; BYTE $0xf2               // movsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045c0ff2; BYTE $0xf1               // subsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f2             // movsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445c0ff2; WORD $0x08f1             // subsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f2             // movsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445c0ff2; WORD $0x10f1             // subsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f2             // movsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445c0ff2; WORD $0x18f1             // subsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_120
	JMP  LBB0_1395

LBB0_121:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_261
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_423
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_426
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_127
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_943
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_943

LBB0_127:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1299:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB0_1301

LBB0_1300:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_1300

LBB0_1301:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_1302:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1302
	JMP  LBB0_1395

LBB0_128:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_266
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_429
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_432
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_134
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_946
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_946

LBB0_134:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1307:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB0_1309

LBB0_1308:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_1308

LBB0_1309:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_1310:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1310
	JMP  LBB0_1395

LBB0_135:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_271
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_435
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_442
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_631
	WORD $0xf631             // xor    esi, esi

LBB0_142:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_144

LBB0_143:
	LONG $0x04100ff2; BYTE $0xf1   // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04580ff2; BYTE $0xf2   // addsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_143

LBB0_144:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_145:
	LONG $0x04100ff2; BYTE $0xf1               // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04580ff2; BYTE $0xf2               // addsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f1             // movsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x44580ff2; WORD $0x08f2             // addsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f1             // movsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x44580ff2; WORD $0x10f2             // addsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f1             // movsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x44580ff2; WORD $0x18f2             // addsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_145
	JMP  LBB0_1395

LBB0_146:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_280
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_449
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_456
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_636
	WORD $0xf631             // xor    esi, esi

LBB0_153:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_155

LBB0_154:
	LONG $0x04100ff2; BYTE $0xf1   // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04580ff2; BYTE $0xf2   // addsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_154

LBB0_155:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_156:
	LONG $0x04100ff2; BYTE $0xf1               // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04580ff2; BYTE $0xf2               // addsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f1             // movsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x44580ff2; WORD $0x08f2             // addsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f1             // movsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x44580ff2; WORD $0x10f2             // addsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f1             // movsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x44580ff2; WORD $0x18f2             // addsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_156
	JMP  LBB0_1395

LBB0_157:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_289
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_463
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_466
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_641
	WORD $0xf631             // xor    esi, esi

LBB0_164:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_166

LBB0_165:
	LONG $0x04100ff2; BYTE $0xf1   // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04590ff2; BYTE $0xf2   // mulsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_165

LBB0_166:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_167:
	LONG $0x04100ff2; BYTE $0xf1               // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04590ff2; BYTE $0xf2               // mulsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f1             // movsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x44590ff2; WORD $0x08f2             // mulsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f1             // movsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x44590ff2; WORD $0x10f2             // mulsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f1             // movsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x44590ff2; WORD $0x18f2             // mulsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_167
	JMP  LBB0_1395

LBB0_168:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_294
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_473
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_476
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_646
	WORD $0xf631             // xor    esi, esi

LBB0_175:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_177

LBB0_176:
	LONG $0x04100ff2; BYTE $0xf1   // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04590ff2; BYTE $0xf2   // mulsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_176

LBB0_177:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_178:
	LONG $0x04100ff2; BYTE $0xf1               // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04590ff2; BYTE $0xf2               // mulsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f1             // movsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x44590ff2; WORD $0x08f2             // mulsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f1             // movsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x44590ff2; WORD $0x10f2             // mulsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f1             // movsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x44590ff2; WORD $0x18f2             // mulsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_178
	JMP  LBB0_1395

LBB0_179:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_483
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_651
	WORD $0xf631             // xor    esi, esi

LBB0_184:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_186

LBB0_185:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_185

LBB0_186:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_187:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_187
	JMP  LBB0_1395

LBB0_188:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_490
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_656
	WORD $0xf631             // xor    esi, esi

LBB0_193:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_195

LBB0_194:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_194

LBB0_195:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_196:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_196
	JMP  LBB0_1395

LBB0_197:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_497
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_201
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_949
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_949

LBB0_201:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1315:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB0_1317
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB0_1317:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB0_1395

LBB0_1318:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1318
	JMP  LBB0_1395

LBB0_202:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_500
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_206
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_952
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_952

LBB0_206:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1323:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB0_1325
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB0_1325:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB0_1395

LBB0_1326:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1326
	JMP  LBB0_1395

LBB0_207:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_503
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_667
	WORD $0xf631             // xor    esi, esi

LBB0_212:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_214

LBB0_213:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_213

LBB0_214:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_215:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_215
	JMP  LBB0_1395

LBB0_216:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_510
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_672
	WORD $0xf631             // xor    esi, esi

LBB0_221:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_223

LBB0_222:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_222

LBB0_223:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_224:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_224
	JMP  LBB0_1395

LBB0_225:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_517
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_677
	WORD $0xff31             // xor    edi, edi

LBB0_230:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_232

LBB0_231:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_231

LBB0_232:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_233:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_233
	JMP  LBB0_1395

LBB0_234:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_524
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_682
	WORD $0xff31             // xor    edi, edi

LBB0_239:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_241

LBB0_240:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_240

LBB0_241:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_242:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_242
	JMP  LBB0_1395

LBB0_243:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_531
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_687
	WORD $0xf631             // xor    esi, esi

LBB0_248:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_250

LBB0_249:
	LONG $0xf2048b48 // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48 // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_249

LBB0_250:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_251:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_251
	JMP  LBB0_1395

LBB0_252:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_538
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_692
	WORD $0xf631             // xor    esi, esi

LBB0_257:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_259

LBB0_258:
	LONG $0xf2048b48 // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48 // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_258

LBB0_259:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_260:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_260
	JMP  LBB0_1395

LBB0_261:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_545
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_265
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_955
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_955

LBB0_265:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1017:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1019

LBB0_1018:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB0_1018

LBB0_1019:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_1020:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1020
	JMP  LBB0_1395

LBB0_266:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_548
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_270
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_957
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_957

LBB0_270:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1027:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1029

LBB0_1028:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB0_1028

LBB0_1029:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_1030:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1030
	JMP  LBB0_1395

LBB0_271:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_551
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_703
	WORD $0xf631             // xor    esi, esi

LBB0_276:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_278

LBB0_277:
	LONG $0xf1048b48 // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348 // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_277

LBB0_278:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_279:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_279
	JMP  LBB0_1395

LBB0_280:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_558
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_708
	WORD $0xf631             // xor    esi, esi

LBB0_285:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_287

LBB0_286:
	LONG $0xf1048b48 // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348 // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_286

LBB0_287:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_288:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_288
	JMP  LBB0_1395

LBB0_289:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_565
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB0_713
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_715

LBB0_294:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_572
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1395
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB0_718
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_720

LBB0_299:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_723
	WORD $0xf631             // xor    esi, esi

LBB0_302:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_304

LBB0_303:
	LONG $0x7204b70f             // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66             // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_303

LBB0_304:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_305:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_305
	JMP  LBB0_1395

LBB0_306:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_728
	WORD $0xf631             // xor    esi, esi

LBB0_309:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_311

LBB0_310:
	LONG $0x7204b70f             // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66             // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_310

LBB0_311:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_312:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_312
	JMP  LBB0_1395

LBB0_313:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_733
	WORD $0xf631             // xor    esi, esi

LBB0_316:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_318

LBB0_317:
	LONG $0x7204b70f             // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66             // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_317

LBB0_318:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_319:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_319
	JMP  LBB0_1395

LBB0_320:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_738
	WORD $0xf631             // xor    esi, esi

LBB0_323:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_325

LBB0_324:
	LONG $0x7204b70f             // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66             // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_324

LBB0_325:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_326:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_326
	JMP  LBB0_1395

LBB0_327:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_329
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_959
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_959

LBB0_329:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1037:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1039

LBB0_1038:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_1038

LBB0_1039:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_1040:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB0_1040
	JMP  LBB0_1395

LBB0_330:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_332
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_961
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_961

LBB0_332:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1331:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB0_1333
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB0_1333:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1395

LBB0_1334:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1334
	JMP  LBB0_1395

LBB0_333:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_335
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_964
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_964

LBB0_335:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1047:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1049

LBB0_1048:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_1048

LBB0_1049:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_1050:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB0_1050
	JMP  LBB0_1395

LBB0_336:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_338
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_966
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_966

LBB0_338:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1339:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB0_1341
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB0_1341:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1395

LBB0_1342:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1342
	JMP  LBB0_1395

LBB0_339:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_755
	WORD $0xf631             // xor    esi, esi

LBB0_342:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_344

LBB0_343:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366             // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_343

LBB0_344:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_345:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_345
	JMP  LBB0_1395

LBB0_346:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_760
	WORD $0xf631             // xor    esi, esi

LBB0_349:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_351

LBB0_350:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366             // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_350

LBB0_351:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_352:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_352
	JMP  LBB0_1395

LBB0_353:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_765
	WORD $0xf631             // xor    esi, esi

LBB0_356:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_358

LBB0_357:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366             // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_357

LBB0_358:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_359:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_359
	JMP  LBB0_1395

LBB0_360:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_770
	WORD $0xf631             // xor    esi, esi

LBB0_363:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_365

LBB0_364:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366             // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_364

LBB0_365:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_366:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_366
	JMP  LBB0_1395

LBB0_367:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_775
	WORD $0xf631             // xor    esi, esi

LBB0_370:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_372

LBB0_371:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72 // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_371

LBB0_372:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_373:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_373
	JMP  LBB0_1395

LBB0_374:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_780
	WORD $0xf631             // xor    esi, esi

LBB0_377:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_379

LBB0_378:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72 // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_378

LBB0_379:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_380:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_380
	JMP  LBB0_1395

LBB0_381:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_785
	WORD $0xf631             // xor    esi, esi

LBB0_384:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_386

LBB0_385:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72 // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_385

LBB0_386:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_387:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_387
	JMP  LBB0_1395

LBB0_388:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_790
	WORD $0xf631             // xor    esi, esi

LBB0_391:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_393

LBB0_392:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72 // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_392

LBB0_393:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_394:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_394
	JMP  LBB0_1395

LBB0_395:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_795
	WORD $0xf631             // xor    esi, esi

LBB0_398:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_400

LBB0_399:
	LONG $0xf2048b48 // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48 // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_399

LBB0_400:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_401:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_401
	JMP  LBB0_1395

LBB0_402:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_800
	WORD $0xf631             // xor    esi, esi

LBB0_405:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_407

LBB0_406:
	LONG $0x04100ff3; BYTE $0xb2   // movss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045c0ff3; BYTE $0xb1   // subss    xmm0, dword [rcx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_406

LBB0_407:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_408:
	LONG $0x04100ff3; BYTE $0xb2               // movss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045c0ff3; BYTE $0xb1               // subss    xmm0, dword [rcx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b2             // movss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445c0ff3; WORD $0x04b1             // subss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b2             // movss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445c0ff3; WORD $0x08b1             // subss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb2             // movss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445c0ff3; WORD $0x0cb1             // subss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_408
	JMP  LBB0_1395

LBB0_409:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_805
	WORD $0xf631             // xor    esi, esi

LBB0_412:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_414

LBB0_413:
	LONG $0xf2048b48 // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48 // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_413

LBB0_414:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_415:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_415
	JMP  LBB0_1395

LBB0_416:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_810
	WORD $0xf631             // xor    esi, esi

LBB0_419:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_421

LBB0_420:
	LONG $0x04100ff3; BYTE $0xb2   // movss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045c0ff3; BYTE $0xb1   // subss    xmm0, dword [rcx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_420

LBB0_421:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_422:
	LONG $0x04100ff3; BYTE $0xb2               // movss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045c0ff3; BYTE $0xb1               // subss    xmm0, dword [rcx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b2             // movss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445c0ff3; WORD $0x04b1             // subss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b2             // movss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445c0ff3; WORD $0x08b1             // subss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb2             // movss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445c0ff3; WORD $0x0cb1             // subss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_422
	JMP  LBB0_1395

LBB0_423:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_425
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_969
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_969

LBB0_425:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1347:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1349
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1349:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1395

LBB0_1350:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1350
	JMP  LBB0_1395

LBB0_426:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_428
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_972
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_972

LBB0_428:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1355:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1358
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1357:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1357

LBB0_1358:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB0_1395
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1360:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1360
	JMP  LBB0_1395

LBB0_429:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_431
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_975
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_975

LBB0_431:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1365:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1367
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1367:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1395

LBB0_1368:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1368
	JMP  LBB0_1395

LBB0_432:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_434
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_978
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_978

LBB0_434:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1373:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1376
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1375:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1375

LBB0_1376:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB0_1395
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1378:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1378
	JMP  LBB0_1395

LBB0_435:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_827
	WORD $0xf631             // xor    esi, esi

LBB0_438:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_440

LBB0_439:
	LONG $0xf1048b48 // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348 // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_439

LBB0_440:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_441:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_441
	JMP  LBB0_1395

LBB0_442:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_832
	WORD $0xf631             // xor    esi, esi

LBB0_445:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_447

LBB0_446:
	LONG $0x04100ff3; BYTE $0xb1   // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04580ff3; BYTE $0xb2   // addss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_446

LBB0_447:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_448:
	LONG $0x04100ff3; BYTE $0xb1               // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04580ff3; BYTE $0xb2               // addss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b1             // movss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x44580ff3; WORD $0x04b2             // addss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b1             // movss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x44580ff3; WORD $0x08b2             // addss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb1             // movss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x44580ff3; WORD $0x0cb2             // addss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_448
	JMP  LBB0_1395

LBB0_449:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_837
	WORD $0xf631             // xor    esi, esi

LBB0_452:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_454

LBB0_453:
	LONG $0xf1048b48 // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348 // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_453

LBB0_454:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_455:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_455
	JMP  LBB0_1395

LBB0_456:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_842
	WORD $0xf631             // xor    esi, esi

LBB0_459:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_461

LBB0_460:
	LONG $0x04100ff3; BYTE $0xb1   // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04580ff3; BYTE $0xb2   // addss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_460

LBB0_461:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_462:
	LONG $0x04100ff3; BYTE $0xb1               // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04580ff3; BYTE $0xb2               // addss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b1             // movss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x44580ff3; WORD $0x04b2             // addss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b1             // movss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x44580ff3; WORD $0x08b2             // addss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb1             // movss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x44580ff3; WORD $0x0cb2             // addss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_462
	JMP  LBB0_1395

LBB0_463:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB0_847
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_849

LBB0_466:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_852
	WORD $0xf631             // xor    esi, esi

LBB0_469:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_471

LBB0_470:
	LONG $0x04100ff3; BYTE $0xb1   // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04590ff3; BYTE $0xb2   // mulss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_470

LBB0_471:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_472:
	LONG $0x04100ff3; BYTE $0xb1               // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04590ff3; BYTE $0xb2               // mulss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b1             // movss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x44590ff3; WORD $0x04b2             // mulss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b1             // movss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x44590ff3; WORD $0x08b2             // mulss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb1             // movss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x44590ff3; WORD $0x0cb2             // mulss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_472
	JMP  LBB0_1395

LBB0_473:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB0_857
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_859

LBB0_476:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_862
	WORD $0xf631             // xor    esi, esi

LBB0_479:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_481

LBB0_480:
	LONG $0x04100ff3; BYTE $0xb1   // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04590ff3; BYTE $0xb2   // mulss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_480

LBB0_481:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1395

LBB0_482:
	LONG $0x04100ff3; BYTE $0xb1               // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04590ff3; BYTE $0xb2               // mulss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b1             // movss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x44590ff3; WORD $0x04b2             // mulss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b1             // movss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x44590ff3; WORD $0x08b2             // mulss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb1             // movss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x44590ff3; WORD $0x0cb2             // mulss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_482
	JMP  LBB0_1395

LBB0_483:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_867
	WORD $0xf631             // xor    esi, esi

LBB0_486:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_488

LBB0_487:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_487

LBB0_488:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_489:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_489
	JMP  LBB0_1395

LBB0_490:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_872
	WORD $0xf631             // xor    esi, esi

LBB0_493:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_495

LBB0_494:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_494

LBB0_495:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_496:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_496
	JMP  LBB0_1395

LBB0_497:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_499
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_981
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_981

LBB0_499:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1057:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1059

LBB0_1058:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB0_1058

LBB0_1059:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1395

LBB0_1060:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1060
	JMP  LBB0_1395

LBB0_500:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_502
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_983
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_983

LBB0_502:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1067:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1069

LBB0_1068:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB0_1068

LBB0_1069:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1395

LBB0_1070:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1070
	JMP  LBB0_1395

LBB0_503:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_883
	WORD $0xf631             // xor    esi, esi

LBB0_506:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_508

LBB0_507:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_507

LBB0_508:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_509:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_509
	JMP  LBB0_1395

LBB0_510:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_888
	WORD $0xf631             // xor    esi, esi

LBB0_513:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_515

LBB0_514:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_514

LBB0_515:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_516:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_516
	JMP  LBB0_1395

LBB0_517:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_893
	WORD $0xff31             // xor    edi, edi

LBB0_520:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_522

LBB0_521:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_521

LBB0_522:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_523:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_523
	JMP  LBB0_1395

LBB0_524:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_898
	WORD $0xff31             // xor    edi, edi

LBB0_527:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_529

LBB0_528:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_528

LBB0_529:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_530:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_530
	JMP  LBB0_1395

LBB0_531:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_903
	WORD $0xf631             // xor    esi, esi

LBB0_534:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_536

LBB0_535:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_535

LBB0_536:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_537:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_537
	JMP  LBB0_1395

LBB0_538:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_908
	WORD $0xf631             // xor    esi, esi

LBB0_541:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_543

LBB0_542:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_542

LBB0_543:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_544:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_544
	JMP  LBB0_1395

LBB0_545:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_547
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_985
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_985

LBB0_547:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1383:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1385
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1385:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1395

LBB0_1386:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1386
	JMP  LBB0_1395

LBB0_548:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_550
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_988
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_988

LBB0_550:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1391:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1393
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1393:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1395

LBB0_1394:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1394
	JMP  LBB0_1395

LBB0_551:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_919
	WORD $0xf631             // xor    esi, esi

LBB0_554:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_556

LBB0_555:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2 // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_555

LBB0_556:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_557:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_557
	JMP  LBB0_1395

LBB0_558:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_924
	WORD $0xf631             // xor    esi, esi

LBB0_561:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_563

LBB0_562:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2 // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_562

LBB0_563:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_564:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_564
	JMP  LBB0_1395

LBB0_565:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_929
	WORD $0xf631             // xor    esi, esi

LBB0_568:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_570

LBB0_569:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f         // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_569

LBB0_570:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_571:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_571
	JMP  LBB0_1395

LBB0_572:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1395
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_934
	WORD $0xf631             // xor    esi, esi

LBB0_575:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_577

LBB0_576:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f         // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_576

LBB0_577:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1395

LBB0_578:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_578
	JMP  LBB0_1395

LBB0_579:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_12
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_12
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1071
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_583:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_583
	JMP  LBB0_1072

LBB0_584:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_27
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_27
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1075
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_588:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_588
	JMP  LBB0_1076

LBB0_595:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_59
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_59
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1079
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_599:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_599
	JMP  LBB0_1080

LBB0_600:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_71
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_71
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1083
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_604:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_604
	JMP  LBB0_1084

LBB0_605:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_83
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_83
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1087
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_609:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_609
	JMP  LBB0_1088

LBB0_610:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_95
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_95
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1091
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_614:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_614
	JMP  LBB0_1092

LBB0_615:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_106
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_106
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1095
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_619:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x10f9             // movupd    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf804             // movupd    oword [r8 + 8*rdi], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x30f9             // movupd    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_619
	JMP  LBB0_1096

LBB0_620:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_117
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_117
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1099
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_624:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x10f9             // movupd    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf804             // movupd    oword [r8 + 8*rdi], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x30f9             // movupd    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_624
	JMP  LBB0_1100

LBB0_631:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_142
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_142
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1103
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_635:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x30f9             // movupd    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_635
	JMP  LBB0_1104

LBB0_636:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_153
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_153
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1107
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_640:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x30f9             // movupd    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_640
	JMP  LBB0_1108

LBB0_641:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_164
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_164
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1111
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_645:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x30f9             // movupd    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_645
	JMP  LBB0_1112

LBB0_646:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_175
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_175
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1115
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_650:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x30f9             // movupd    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_650
	JMP  LBB0_1116

LBB0_651:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_184
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_184
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1119
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_655:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_655
	JMP  LBB0_1120

LBB0_656:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_193
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_193
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1123
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_660:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_660
	JMP  LBB0_1124

LBB0_667:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_212
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_212
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1127
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_671:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3039             // movdqu    xmm0, oword [rcx + rdi + 48]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_671
	JMP  LBB0_1128

LBB0_672:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_221
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_221
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1131
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_676:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3039             // movdqu    xmm0, oword [rcx + rdi + 48]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_676
	JMP  LBB0_1132

LBB0_677:
	LONG $0x10348d4b             // lea    rsi, [r8 + r10]
	LONG $0x12048d4a             // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x11048d4a             // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6     // cmp    rsi, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xce     // cmp    rsi, rcx
	LONG $0xd6970f40             // seta    sil
	WORD $0xff31                 // xor    edi, edi
	WORD $0x8445; BYTE $0xd9     // test    r9b, r11b
	JNE  LBB0_230
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	JNE  LBB0_230
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1135
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI0_3] */

LBB0_681:
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x646f0ff3; WORD $0x1001             // movdqu    xmm4, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0034             // movdqu    oword [r8 + rax], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm3
	LONG $0x4c6f0ff3; WORD $0x2002             // movdqu    xmm1, oword [rdx + rax + 32]
	LONG $0x546f0ff3; WORD $0x3002             // movdqu    xmm2, oword [rdx + rax + 48]
	LONG $0x5c6f0ff3; WORD $0x2001             // movdqu    xmm3, oword [rcx + rax + 32]
	LONG $0x646f0ff3; WORD $0x3001             // movdqu    xmm4, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0074; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm3
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_681
	JMP  LBB0_1136

LBB0_682:
	LONG $0x10348d4b             // lea    rsi, [r8 + r10]
	LONG $0x12048d4a             // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x11048d4a             // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6     // cmp    rsi, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xce     // cmp    rsi, rcx
	LONG $0xd6970f40             // seta    sil
	WORD $0xff31                 // xor    edi, edi
	WORD $0x8445; BYTE $0xd9     // test    r9b, r11b
	JNE  LBB0_239
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	JNE  LBB0_239
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1139
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI0_3] */

LBB0_686:
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x646f0ff3; WORD $0x1001             // movdqu    xmm4, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0034             // movdqu    oword [r8 + rax], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm3
	LONG $0x4c6f0ff3; WORD $0x2002             // movdqu    xmm1, oword [rdx + rax + 32]
	LONG $0x546f0ff3; WORD $0x3002             // movdqu    xmm2, oword [rdx + rax + 48]
	LONG $0x5c6f0ff3; WORD $0x2001             // movdqu    xmm3, oword [rcx + rax + 32]
	LONG $0x646f0ff3; WORD $0x3001             // movdqu    xmm4, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0074; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm3
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_686
	JMP  LBB0_1140

LBB0_687:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_248
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_248
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1143
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_691:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_691
	JMP  LBB0_1144

LBB0_692:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_257
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_257
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1147
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_696:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_696
	JMP  LBB0_1148

LBB0_703:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_276
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_276
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1151
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_707:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30f9             // movdqu    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_707
	JMP  LBB0_1152

LBB0_708:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_285
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_285
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1155
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_712:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30f9             // movdqu    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_712
	JMP  LBB0_1156

LBB0_713:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB0_714:
	LONG $0xf9048b48               // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa   // imul    rax, qword [rdx + 8*rdi]
	LONG $0xf8048949               // mov    qword [r8 + 8*rdi], rax
	LONG $0xf9448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rdi + 8]
	LONG $0x44af0f48; WORD $0x08fa // imul    rax, qword [rdx + 8*rdi + 8]
	LONG $0xf8448949; BYTE $0x08   // mov    qword [r8 + 8*rdi + 8], rax
	LONG $0xf9448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rdi + 16]
	LONG $0x44af0f48; WORD $0x10fa // imul    rax, qword [rdx + 8*rdi + 16]
	LONG $0xf8448949; BYTE $0x10   // mov    qword [r8 + 8*rdi + 16], rax
	LONG $0xf9448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rdi + 24]
	LONG $0x44af0f48; WORD $0x18fa // imul    rax, qword [rdx + 8*rdi + 24]
	LONG $0xf8448949; BYTE $0x18   // mov    qword [r8 + 8*rdi + 24], rax
	LONG $0x04c78348               // add    rdi, 4
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JNE  LBB0_714

LBB0_715:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_1395
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB0_717:
	LONG $0xf9048b48             // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa // imul    rax, qword [rdx + 8*rdi]
	LONG $0xfe048948             // mov    qword [rsi + 8*rdi], rax
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JNE  LBB0_717
	JMP  LBB0_1395

LBB0_718:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB0_719:
	LONG $0xf9048b48               // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa   // imul    rax, qword [rdx + 8*rdi]
	LONG $0xf8048949               // mov    qword [r8 + 8*rdi], rax
	LONG $0xf9448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rdi + 8]
	LONG $0x44af0f48; WORD $0x08fa // imul    rax, qword [rdx + 8*rdi + 8]
	LONG $0xf8448949; BYTE $0x08   // mov    qword [r8 + 8*rdi + 8], rax
	LONG $0xf9448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rdi + 16]
	LONG $0x44af0f48; WORD $0x10fa // imul    rax, qword [rdx + 8*rdi + 16]
	LONG $0xf8448949; BYTE $0x10   // mov    qword [r8 + 8*rdi + 16], rax
	LONG $0xf9448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rdi + 24]
	LONG $0x44af0f48; WORD $0x18fa // imul    rax, qword [rdx + 8*rdi + 24]
	LONG $0xf8448949; BYTE $0x18   // mov    qword [r8 + 8*rdi + 24], rax
	LONG $0x04c78348               // add    rdi, 4
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JNE  LBB0_719

LBB0_720:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_1395
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB0_722:
	LONG $0xf9048b48             // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa // imul    rax, qword [rdx + 8*rdi]
	LONG $0xfe048948             // mov    qword [rsi + 8*rdi], rax
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JNE  LBB0_722
	JMP  LBB0_1395

LBB0_723:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_302
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_302
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1159
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_727:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_727
	JMP  LBB0_1160

LBB0_728:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_309
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_309
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1163
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_732:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_732
	JMP  LBB0_1164

LBB0_733:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_316
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_316
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1167
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_737:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_737
	JMP  LBB0_1168

LBB0_738:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_323
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_323
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1171
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_742:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_742
	JMP  LBB0_1172

LBB0_755:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_342
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_342
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1175
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_759:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_759
	JMP  LBB0_1176

LBB0_760:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_349
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_349
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1179
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_764:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_764
	JMP  LBB0_1180

LBB0_765:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_356
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_356
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1183
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_769:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_769
	JMP  LBB0_1184

LBB0_770:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_363
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_363
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1187
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_774:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_774
	JMP  LBB0_1188

LBB0_775:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_370
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_370
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1191
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_779:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_779
	JMP  LBB0_1192

LBB0_780:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_377
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_377
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1195
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_784:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_784
	JMP  LBB0_1196

LBB0_785:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_384
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_384
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1199
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_789:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_789
	JMP  LBB0_1200

LBB0_790:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_391
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_391
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1203
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_794:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_794
	JMP  LBB0_1204

LBB0_795:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_398
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_398
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1207
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_799:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_799
	JMP  LBB0_1208

LBB0_800:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_405
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_405
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1211
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_804:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x10   // movups    xmm2, oword [rcx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x04110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm0
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x30   // movups    xmm2, oword [rcx + 4*rdi + 48]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x44110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_804
	JMP  LBB0_1212

LBB0_805:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_412
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_412
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1215
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_809:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_809
	JMP  LBB0_1216

LBB0_810:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_419
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_419
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1219
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_814:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x10   // movups    xmm2, oword [rcx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x04110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm0
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x30   // movups    xmm2, oword [rcx + 4*rdi + 48]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x44110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_814
	JMP  LBB0_1220

LBB0_827:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_438
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_438
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1223
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_831:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30f9             // movdqu    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_831
	JMP  LBB0_1224

LBB0_832:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_445
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_445
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1227
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_836:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x30   // movups    xmm0, oword [rcx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x44110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_836
	JMP  LBB0_1228

LBB0_837:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_452
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_452
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1231
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_841:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30f9             // movdqu    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_841
	JMP  LBB0_1232

LBB0_842:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_459
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_459
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1235
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_846:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x30   // movups    xmm0, oword [rcx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x44110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_846
	JMP  LBB0_1236

LBB0_847:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB0_848:
	LONG $0xf9048b48               // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa   // imul    rax, qword [rdx + 8*rdi]
	LONG $0xf8048949               // mov    qword [r8 + 8*rdi], rax
	LONG $0xf9448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rdi + 8]
	LONG $0x44af0f48; WORD $0x08fa // imul    rax, qword [rdx + 8*rdi + 8]
	LONG $0xf8448949; BYTE $0x08   // mov    qword [r8 + 8*rdi + 8], rax
	LONG $0xf9448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rdi + 16]
	LONG $0x44af0f48; WORD $0x10fa // imul    rax, qword [rdx + 8*rdi + 16]
	LONG $0xf8448949; BYTE $0x10   // mov    qword [r8 + 8*rdi + 16], rax
	LONG $0xf9448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rdi + 24]
	LONG $0x44af0f48; WORD $0x18fa // imul    rax, qword [rdx + 8*rdi + 24]
	LONG $0xf8448949; BYTE $0x18   // mov    qword [r8 + 8*rdi + 24], rax
	LONG $0x04c78348               // add    rdi, 4
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JNE  LBB0_848

LBB0_849:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_1395
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB0_851:
	LONG $0xf9048b48             // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa // imul    rax, qword [rdx + 8*rdi]
	LONG $0xfe048948             // mov    qword [rsi + 8*rdi], rax
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JNE  LBB0_851
	JMP  LBB0_1395

LBB0_852:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_469
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_469
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1239
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_856:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x30   // movups    xmm0, oword [rcx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x44110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_856
	JMP  LBB0_1240

LBB0_857:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB0_858:
	LONG $0xf9048b48               // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa   // imul    rax, qword [rdx + 8*rdi]
	LONG $0xf8048949               // mov    qword [r8 + 8*rdi], rax
	LONG $0xf9448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rdi + 8]
	LONG $0x44af0f48; WORD $0x08fa // imul    rax, qword [rdx + 8*rdi + 8]
	LONG $0xf8448949; BYTE $0x08   // mov    qword [r8 + 8*rdi + 8], rax
	LONG $0xf9448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rdi + 16]
	LONG $0x44af0f48; WORD $0x10fa // imul    rax, qword [rdx + 8*rdi + 16]
	LONG $0xf8448949; BYTE $0x10   // mov    qword [r8 + 8*rdi + 16], rax
	LONG $0xf9448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rdi + 24]
	LONG $0x44af0f48; WORD $0x18fa // imul    rax, qword [rdx + 8*rdi + 24]
	LONG $0xf8448949; BYTE $0x18   // mov    qword [r8 + 8*rdi + 24], rax
	LONG $0x04c78348               // add    rdi, 4
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JNE  LBB0_858

LBB0_859:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_1395
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB0_861:
	LONG $0xf9048b48             // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa // imul    rax, qword [rdx + 8*rdi]
	LONG $0xfe048948             // mov    qword [rsi + 8*rdi], rax
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JNE  LBB0_861

LBB0_1395:
	RET

LBB0_862:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_479
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_479
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1243
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_866:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x30   // movups    xmm0, oword [rcx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x44110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_866
	JMP  LBB0_1244

LBB0_867:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_486
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_486
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1247
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_871:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_871
	JMP  LBB0_1248

LBB0_872:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_493
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_493
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1251
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_876:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_876
	JMP  LBB0_1252

LBB0_883:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_506
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_506
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1255
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_887:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3039             // movdqu    xmm0, oword [rcx + rdi + 48]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_887
	JMP  LBB0_1256

LBB0_888:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_513
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_513
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1259
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_892:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3039             // movdqu    xmm0, oword [rcx + rdi + 48]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_892
	JMP  LBB0_1260

LBB0_893:
	LONG $0x10348d4b             // lea    rsi, [r8 + r10]
	LONG $0x12048d4a             // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x11048d4a             // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6     // cmp    rsi, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xce     // cmp    rsi, rcx
	LONG $0xd6970f40             // seta    sil
	WORD $0xff31                 // xor    edi, edi
	WORD $0x8445; BYTE $0xd9     // test    r9b, r11b
	JNE  LBB0_520
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	JNE  LBB0_520
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1263
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI0_3] */

LBB0_897:
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x646f0ff3; WORD $0x1001             // movdqu    xmm4, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0034             // movdqu    oword [r8 + rax], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm3
	LONG $0x4c6f0ff3; WORD $0x2002             // movdqu    xmm1, oword [rdx + rax + 32]
	LONG $0x546f0ff3; WORD $0x3002             // movdqu    xmm2, oword [rdx + rax + 48]
	LONG $0x5c6f0ff3; WORD $0x2001             // movdqu    xmm3, oword [rcx + rax + 32]
	LONG $0x646f0ff3; WORD $0x3001             // movdqu    xmm4, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0074; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm3
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_897
	JMP  LBB0_1264

LBB0_898:
	LONG $0x10348d4b             // lea    rsi, [r8 + r10]
	LONG $0x12048d4a             // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x11048d4a             // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6     // cmp    rsi, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xce     // cmp    rsi, rcx
	LONG $0xd6970f40             // seta    sil
	WORD $0xff31                 // xor    edi, edi
	WORD $0x8445; BYTE $0xd9     // test    r9b, r11b
	JNE  LBB0_527
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	JNE  LBB0_527
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1267
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI0_3] */

LBB0_902:
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x646f0ff3; WORD $0x1001             // movdqu    xmm4, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0034             // movdqu    oword [r8 + rax], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm3
	LONG $0x4c6f0ff3; WORD $0x2002             // movdqu    xmm1, oword [rdx + rax + 32]
	LONG $0x546f0ff3; WORD $0x3002             // movdqu    xmm2, oword [rdx + rax + 48]
	LONG $0x5c6f0ff3; WORD $0x2001             // movdqu    xmm3, oword [rcx + rax + 32]
	LONG $0x646f0ff3; WORD $0x3001             // movdqu    xmm4, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0074; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm3
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_902
	JMP  LBB0_1268

LBB0_903:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_534
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_534
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1271
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_907:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_907
	JMP  LBB0_1272

LBB0_908:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_541
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_541
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1275
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_912:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_912
	JMP  LBB0_1276

LBB0_919:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_554
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_554
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1279
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_923:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_923
	JMP  LBB0_1280

LBB0_924:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_561
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_561
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1283
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_928:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_928
	JMP  LBB0_1284

LBB0_929:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_568
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_568
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1287
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_933:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_933
	JMP  LBB0_1288

LBB0_934:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_575
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_575
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1291
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_938:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_938
	JMP  LBB0_1292

LBB0_939:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB0_991
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_993

LBB0_941:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB0_1001
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1003

LBB0_943:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1295
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_945:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_945
	JMP  LBB0_1296

LBB0_946:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1303
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_948:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_948
	JMP  LBB0_1304

LBB0_949:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1311
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x2045 // movdqa    xmm8, oword 32[rbp] /* [rip + .LCPI0_2] */

LBB0_951:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_951
	JMP  LBB0_1312

LBB0_952:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1319
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x2045 // movdqa    xmm8, oword 32[rbp] /* [rip + .LCPI0_2] */

LBB0_954:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_954
	JMP  LBB0_1320

LBB0_955:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB0_1011
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1013

LBB0_957:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB0_1021
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1023

LBB0_959:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB0_1031
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1033

LBB0_961:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1327
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_963:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_963
	JMP  LBB0_1328

LBB0_964:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB0_1041
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1043

LBB0_966:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1335
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_968:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_968
	JMP  LBB0_1336

LBB0_969:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1343
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB0_971:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_971
	JMP  LBB0_1344

LBB0_972:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1351
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_974:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_974
	JMP  LBB0_1352

LBB0_975:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1361
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB0_977:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_977
	JMP  LBB0_1362

LBB0_978:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1369
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_980:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_980
	JMP  LBB0_1370

LBB0_981:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB0_1051
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1053

LBB0_983:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB0_1061
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1063

LBB0_985:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1379
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_987:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_987
	JMP  LBB0_1380

LBB0_988:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1387
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_990:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_990
	JMP  LBB0_1388

LBB0_991:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_992:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_992

LBB0_993:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_996
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_995:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_995

LBB0_996:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_997

LBB0_1001:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1002:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1002

LBB0_1003:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1006
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1005:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1005

LBB0_1006:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1007

LBB0_1011:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1012:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1012

LBB0_1013:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1016
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1015:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1015

LBB0_1016:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1017

LBB0_1021:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1022:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1022

LBB0_1023:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1026
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1025:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1025

LBB0_1026:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1027

LBB0_1031:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1032:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1032

LBB0_1033:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1036
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1035:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1035

LBB0_1036:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1037

LBB0_1041:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1042:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1042

LBB0_1043:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1046
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1045:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1045

LBB0_1046:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1047

LBB0_1051:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1052:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB0_1052

LBB0_1053:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1056
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB0_1055:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB0_1055

LBB0_1056:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1057

LBB0_1061:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1062:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB0_1062

LBB0_1063:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1066
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB0_1065:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB0_1065

LBB0_1066:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1067

LBB0_1071:
	WORD $0xff31 // xor    edi, edi

LBB0_1072:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1074
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1074:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_12
	JMP  LBB0_1395

LBB0_1075:
	WORD $0xff31 // xor    edi, edi

LBB0_1076:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1078
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1078:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_27
	JMP  LBB0_1395

LBB0_1079:
	WORD $0xff31 // xor    edi, edi

LBB0_1080:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1082
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1082:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_59
	JMP  LBB0_1395

LBB0_1083:
	WORD $0xff31 // xor    edi, edi

LBB0_1084:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1086
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1086:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_71
	JMP  LBB0_1395

LBB0_1087:
	WORD $0xff31 // xor    edi, edi

LBB0_1088:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1090
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1090:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_83
	JMP  LBB0_1395

LBB0_1091:
	WORD $0xff31 // xor    edi, edi

LBB0_1092:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1094
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1094:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_95
	JMP  LBB0_1395

LBB0_1095:
	WORD $0xff31 // xor    edi, edi

LBB0_1096:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1098
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x10f9             // movupd    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf804             // movupd    oword [r8 + 8*rdi], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1

LBB0_1098:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_106
	JMP  LBB0_1395

LBB0_1099:
	WORD $0xff31 // xor    edi, edi

LBB0_1100:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1102
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x10f9             // movupd    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf804             // movupd    oword [r8 + 8*rdi], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1

LBB0_1102:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_117
	JMP  LBB0_1395

LBB0_1103:
	WORD $0xff31 // xor    edi, edi

LBB0_1104:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1106
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0

LBB0_1106:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_142
	JMP  LBB0_1395

LBB0_1107:
	WORD $0xff31 // xor    edi, edi

LBB0_1108:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1110
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0

LBB0_1110:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_153
	JMP  LBB0_1395

LBB0_1111:
	WORD $0xff31 // xor    edi, edi

LBB0_1112:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1114
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0

LBB0_1114:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_164
	JMP  LBB0_1395

LBB0_1115:
	WORD $0xff31 // xor    edi, edi

LBB0_1116:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1118
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0

LBB0_1118:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_175
	JMP  LBB0_1395

LBB0_1119:
	WORD $0xff31 // xor    edi, edi

LBB0_1120:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1122
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1

LBB0_1122:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_184
	JMP  LBB0_1395

LBB0_1123:
	WORD $0xff31 // xor    edi, edi

LBB0_1124:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1126
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1

LBB0_1126:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_193
	JMP  LBB0_1395

LBB0_1127:
	WORD $0xff31 // xor    edi, edi

LBB0_1128:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1130
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB0_1130:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_212
	JMP  LBB0_1395

LBB0_1131:
	WORD $0xff31 // xor    edi, edi

LBB0_1132:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1134
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB0_1134:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_221
	JMP  LBB0_1395

LBB0_1135:
	WORD $0xc031 // xor    eax, eax

LBB0_1136:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1138
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x446f0ff3; WORD $0x1001             // movdqu    xmm0, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe1               // pmovzxbw    xmm4, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xeb               // pmovzxbw    xmm5, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0x4d6f0f66; BYTE $0x30               // movdqa    xmm1, oword 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeb670f66                           // packuswb    xmm5, xmm3
	LONG $0x30380f66; BYTE $0xda               // pmovzxbw    xmm3, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xe0               // pmovzxbw    xmm4, xmm0
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0xc2d50f66                           // pmullw    xmm0, xmm2
	LONG $0xc1db0f66                           // pand    xmm0, xmm1
	LONG $0xe3d50f66                           // pmullw    xmm4, xmm3
	LONG $0xe1db0f66                           // pand    xmm4, xmm1
	LONG $0xe0670f66                           // packuswb    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0064; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm4

LBB0_1138:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_230
	JMP  LBB0_1395

LBB0_1139:
	WORD $0xc031 // xor    eax, eax

LBB0_1140:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1142
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x446f0ff3; WORD $0x1001             // movdqu    xmm0, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe1               // pmovzxbw    xmm4, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xeb               // pmovzxbw    xmm5, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0x4d6f0f66; BYTE $0x30               // movdqa    xmm1, oword 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeb670f66                           // packuswb    xmm5, xmm3
	LONG $0x30380f66; BYTE $0xda               // pmovzxbw    xmm3, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xe0               // pmovzxbw    xmm4, xmm0
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0xc2d50f66                           // pmullw    xmm0, xmm2
	LONG $0xc1db0f66                           // pand    xmm0, xmm1
	LONG $0xe3d50f66                           // pmullw    xmm4, xmm3
	LONG $0xe1db0f66                           // pand    xmm4, xmm1
	LONG $0xe0670f66                           // packuswb    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0064; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm4

LBB0_1142:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_239
	JMP  LBB0_1395

LBB0_1143:
	WORD $0xff31 // xor    edi, edi

LBB0_1144:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1146
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1146:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_248
	JMP  LBB0_1395

LBB0_1147:
	WORD $0xff31 // xor    edi, edi

LBB0_1148:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1150
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1150:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_257
	JMP  LBB0_1395

LBB0_1151:
	WORD $0xff31 // xor    edi, edi

LBB0_1152:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1154
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB0_1154:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_276
	JMP  LBB0_1395

LBB0_1155:
	WORD $0xff31 // xor    edi, edi

LBB0_1156:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1158
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB0_1158:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_285
	JMP  LBB0_1395

LBB0_1159:
	WORD $0xff31 // xor    edi, edi

LBB0_1160:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1162
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1

LBB0_1162:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_302
	JMP  LBB0_1395

LBB0_1163:
	WORD $0xff31 // xor    edi, edi

LBB0_1164:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1166
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1

LBB0_1166:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_309
	JMP  LBB0_1395

LBB0_1167:
	WORD $0xff31 // xor    edi, edi

LBB0_1168:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1170
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1

LBB0_1170:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_316
	JMP  LBB0_1395

LBB0_1171:
	WORD $0xff31 // xor    edi, edi

LBB0_1172:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1174
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1

LBB0_1174:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_323
	JMP  LBB0_1395

LBB0_1175:
	WORD $0xff31 // xor    edi, edi

LBB0_1176:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1178
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1178:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_342
	JMP  LBB0_1395

LBB0_1179:
	WORD $0xff31 // xor    edi, edi

LBB0_1180:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1182
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1182:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_349
	JMP  LBB0_1395

LBB0_1183:
	WORD $0xff31 // xor    edi, edi

LBB0_1184:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1186
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1186:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_356
	JMP  LBB0_1395

LBB0_1187:
	WORD $0xff31 // xor    edi, edi

LBB0_1188:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1190
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1190:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_363
	JMP  LBB0_1395

LBB0_1191:
	WORD $0xff31 // xor    edi, edi

LBB0_1192:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1194
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1194:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_370
	JMP  LBB0_1395

LBB0_1195:
	WORD $0xff31 // xor    edi, edi

LBB0_1196:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1198
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1198:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_377
	JMP  LBB0_1395

LBB0_1199:
	WORD $0xff31 // xor    edi, edi

LBB0_1200:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1202
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1202:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_384
	JMP  LBB0_1395

LBB0_1203:
	WORD $0xff31 // xor    edi, edi

LBB0_1204:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1206
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1206:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_391
	JMP  LBB0_1395

LBB0_1207:
	WORD $0xff31 // xor    edi, edi

LBB0_1208:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1210
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1210:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_398
	JMP  LBB0_1395

LBB0_1211:
	WORD $0xff31 // xor    edi, edi

LBB0_1212:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1214
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x10   // movups    xmm2, oword [rcx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x04110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm0
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1

LBB0_1214:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_405
	JMP  LBB0_1395

LBB0_1215:
	WORD $0xff31 // xor    edi, edi

LBB0_1216:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1218
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1218:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_412
	JMP  LBB0_1395

LBB0_1219:
	WORD $0xff31 // xor    edi, edi

LBB0_1220:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1222
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x10   // movups    xmm2, oword [rcx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x04110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm0
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1

LBB0_1222:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_419
	JMP  LBB0_1395

LBB0_1223:
	WORD $0xff31 // xor    edi, edi

LBB0_1224:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1226
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB0_1226:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_438
	JMP  LBB0_1395

LBB0_1227:
	WORD $0xff31 // xor    edi, edi

LBB0_1228:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1230
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0

LBB0_1230:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_445
	JMP  LBB0_1395

LBB0_1231:
	WORD $0xff31 // xor    edi, edi

LBB0_1232:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1234
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB0_1234:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_452
	JMP  LBB0_1395

LBB0_1235:
	WORD $0xff31 // xor    edi, edi

LBB0_1236:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1238
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0

LBB0_1238:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_459
	JMP  LBB0_1395

LBB0_1239:
	WORD $0xff31 // xor    edi, edi

LBB0_1240:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1242
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0

LBB0_1242:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_469
	JMP  LBB0_1395

LBB0_1243:
	WORD $0xff31 // xor    edi, edi

LBB0_1244:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1246
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0

LBB0_1246:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_479
	JMP  LBB0_1395

LBB0_1247:
	WORD $0xff31 // xor    edi, edi

LBB0_1248:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1250
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1

LBB0_1250:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_486
	JMP  LBB0_1395

LBB0_1251:
	WORD $0xff31 // xor    edi, edi

LBB0_1252:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1254
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1

LBB0_1254:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_493
	JMP  LBB0_1395

LBB0_1255:
	WORD $0xff31 // xor    edi, edi

LBB0_1256:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1258
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB0_1258:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_506
	JMP  LBB0_1395

LBB0_1259:
	WORD $0xff31 // xor    edi, edi

LBB0_1260:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1262
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB0_1262:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_513
	JMP  LBB0_1395

LBB0_1263:
	WORD $0xc031 // xor    eax, eax

LBB0_1264:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1266
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x446f0ff3; WORD $0x1001             // movdqu    xmm0, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe1               // pmovzxbw    xmm4, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xeb               // pmovzxbw    xmm5, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0x4d6f0f66; BYTE $0x30               // movdqa    xmm1, oword 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeb670f66                           // packuswb    xmm5, xmm3
	LONG $0x30380f66; BYTE $0xda               // pmovzxbw    xmm3, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xe0               // pmovzxbw    xmm4, xmm0
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0xc2d50f66                           // pmullw    xmm0, xmm2
	LONG $0xc1db0f66                           // pand    xmm0, xmm1
	LONG $0xe3d50f66                           // pmullw    xmm4, xmm3
	LONG $0xe1db0f66                           // pand    xmm4, xmm1
	LONG $0xe0670f66                           // packuswb    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0064; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm4

LBB0_1266:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_520
	JMP  LBB0_1395

LBB0_1267:
	WORD $0xc031 // xor    eax, eax

LBB0_1268:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1270
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x446f0ff3; WORD $0x1001             // movdqu    xmm0, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe1               // pmovzxbw    xmm4, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xeb               // pmovzxbw    xmm5, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0x4d6f0f66; BYTE $0x30               // movdqa    xmm1, oword 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeb670f66                           // packuswb    xmm5, xmm3
	LONG $0x30380f66; BYTE $0xda               // pmovzxbw    xmm3, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xe0               // pmovzxbw    xmm4, xmm0
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0xc2d50f66                           // pmullw    xmm0, xmm2
	LONG $0xc1db0f66                           // pand    xmm0, xmm1
	LONG $0xe3d50f66                           // pmullw    xmm4, xmm3
	LONG $0xe1db0f66                           // pand    xmm4, xmm1
	LONG $0xe0670f66                           // packuswb    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0064; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm4

LBB0_1270:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_527
	JMP  LBB0_1395

LBB0_1271:
	WORD $0xff31 // xor    edi, edi

LBB0_1272:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1274
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1274:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_534
	JMP  LBB0_1395

LBB0_1275:
	WORD $0xff31 // xor    edi, edi

LBB0_1276:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1278
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1278:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_541
	JMP  LBB0_1395

LBB0_1279:
	WORD $0xff31 // xor    edi, edi

LBB0_1280:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1282
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1282:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_554
	JMP  LBB0_1395

LBB0_1283:
	WORD $0xff31 // xor    edi, edi

LBB0_1284:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1286
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1286:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_561
	JMP  LBB0_1395

LBB0_1287:
	WORD $0xff31 // xor    edi, edi

LBB0_1288:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1290
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1290:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_568
	JMP  LBB0_1395

LBB0_1291:
	WORD $0xff31 // xor    edi, edi

LBB0_1292:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1294
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1294:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_575
	JMP  LBB0_1395

LBB0_1295:
	WORD $0xff31 // xor    edi, edi

LBB0_1296:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1298
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1298:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1299

LBB0_1303:
	WORD $0xff31 // xor    edi, edi

LBB0_1304:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1306
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1306:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1307

LBB0_1311:
	WORD $0xf631 // xor    esi, esi

LBB0_1312:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1314
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, oword 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB0_1314:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1315

LBB0_1319:
	WORD $0xf631 // xor    esi, esi

LBB0_1320:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1322
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, oword 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB0_1322:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1323

LBB0_1327:
	WORD $0xf631 // xor    esi, esi

LBB0_1328:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1330
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB0_1330:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1395
	JMP  LBB0_1331

LBB0_1335:
	WORD $0xf631 // xor    esi, esi

LBB0_1336:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1338
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB0_1338:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1395
	JMP  LBB0_1339

LBB0_1343:
	WORD $0xf631 // xor    esi, esi

LBB0_1344:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1346
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB0_1346:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1395
	JMP  LBB0_1347

LBB0_1351:
	WORD $0xff31 // xor    edi, edi

LBB0_1352:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1354
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1354:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1355

LBB0_1361:
	WORD $0xf631 // xor    esi, esi

LBB0_1362:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1364
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB0_1364:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1395
	JMP  LBB0_1365

LBB0_1369:
	WORD $0xff31 // xor    edi, edi

LBB0_1370:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1372
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1372:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1395
	JMP  LBB0_1373

LBB0_1379:
	WORD $0xff31 // xor    edi, edi

LBB0_1380:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1382
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1382:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1395
	JMP  LBB0_1383

LBB0_1387:
	WORD $0xff31 // xor    edi, edi

LBB0_1388:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1390
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1390:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1395
	JMP  LBB0_1391

DATA LCDATA2<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x008(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x010(SB)/8, $0x7fffffff7fffffff
DATA LCDATA2<>+0x018(SB)/8, $0x7fffffff7fffffff
DATA LCDATA2<>+0x020(SB)/8, $0x000000ff000000ff
DATA LCDATA2<>+0x028(SB)/8, $0x000000ff000000ff
DATA LCDATA2<>+0x030(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x038(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA2<>(SB), 8, $64

TEXT Â·_arithmetic_arr_scalar_sse4(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA2<>(SB), BP

	LONG $0x04fe8040         // cmp    sil, 4
	JG   LBB1_12
	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB1_23
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB1_43
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB1_1451
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_75
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_131
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_211
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_214
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_11
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_603
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_603

LBB1_11:
	WORD $0xf631 // xor    esi, esi

LBB1_907:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_909

LBB1_908:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_908

LBB1_909:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_910:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_910
	JMP  LBB1_1451

LBB1_12:
	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB1_33
	LONG $0x05fe8040         // cmp    sil, 5
	JE   LBB1_51
	LONG $0x06fe8040         // cmp    sil, 6
	JNE  LBB1_1451
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_82
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_136
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_217
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_220
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_22
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_606
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_606

LBB1_22:
	WORD $0xf631 // xor    esi, esi

LBB1_915:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_917

LBB1_916:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_916

LBB1_917:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_918:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_918
	JMP  LBB1_1451

LBB1_23:
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB1_59
	LONG $0x04fe8040         // cmp    sil, 4
	JNE  LBB1_1451
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_89
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_141
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_223
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_226
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_32
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_609
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_609

LBB1_32:
	WORD $0xc931 // xor    ecx, ecx

LBB1_829:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_831

LBB1_830:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB1_830

LBB1_831:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1451

LBB1_832:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_832
	JMP  LBB1_1451

LBB1_33:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB1_67
	LONG $0x09fe8040         // cmp    sil, 9
	JNE  LBB1_1451
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_96
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_146
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_229
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_232
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_42
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_611
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_611

LBB1_42:
	WORD $0xc931 // xor    ecx, ecx

LBB1_839:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_841

LBB1_840:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB1_840

LBB1_841:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1451

LBB1_842:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_842
	JMP  LBB1_1451

LBB1_43:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_103
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_151
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_235
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_238
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_50
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_613
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_613

LBB1_50:
	WORD $0xf631 // xor    esi, esi

LBB1_923:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_925

LBB1_924:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_924

LBB1_925:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_926:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_926
	JMP  LBB1_1451

LBB1_51:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_110
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_156
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_241
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_244
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_58
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_616
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_616

LBB1_58:
	WORD $0xf631 // xor    esi, esi

LBB1_931:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_933

LBB1_932:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_932

LBB1_933:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_934:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_934
	JMP  LBB1_1451

LBB1_59:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_117
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_161
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_247
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_250
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_66
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_619
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_619

LBB1_66:
	WORD $0xf631 // xor    esi, esi

LBB1_939:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_941

LBB1_940:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_940

LBB1_941:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_942:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_942
	JMP  LBB1_1451

LBB1_67:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_124
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_166
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_253
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_256
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_74
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_622
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_622

LBB1_74:
	WORD $0xf631 // xor    esi, esi

LBB1_947:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_949

LBB1_948:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_948

LBB1_949:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_950:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_950
	JMP  LBB1_1451

LBB1_75:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_171
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_259
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_262
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_81
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_625
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_625

LBB1_81:
	WORD $0xc931 // xor    ecx, ecx

LBB1_955:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_957

LBB1_956:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85c0ff2               // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_956

LBB1_957:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_958:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_958
	JMP  LBB1_1451

LBB1_82:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_176
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_265
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_268
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_88
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_628
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_628

LBB1_88:
	WORD $0xc931 // xor    ecx, ecx

LBB1_963:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_965

LBB1_964:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85c0ff2               // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_964

LBB1_965:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_966:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_966
	JMP  LBB1_1451

LBB1_89:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_181
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_271
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_274
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_95
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_631
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_631

LBB1_95:
	WORD $0xc931 // xor    ecx, ecx

LBB1_971:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB1_973

LBB1_972:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB1_972

LBB1_973:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_974:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_974
	JMP  LBB1_1451

LBB1_96:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_186
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_277
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_280
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_102
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_634
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_634

LBB1_102:
	WORD $0xc931 // xor    ecx, ecx

LBB1_979:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB1_981

LBB1_980:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB1_980

LBB1_981:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_982:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_982
	JMP  LBB1_1451

LBB1_103:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_191
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_283
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_286
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_109
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_637
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_637

LBB1_109:
	WORD $0xc931 // xor    ecx, ecx

LBB1_987:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_989

LBB1_988:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_988

LBB1_989:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_990:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_990
	JMP  LBB1_1451

LBB1_110:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_196
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_289
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_292
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_116
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_640
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_640

LBB1_116:
	WORD $0xc931 // xor    ecx, ecx

LBB1_995:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_997

LBB1_996:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_996

LBB1_997:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_998:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_998
	JMP  LBB1_1451

LBB1_117:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_201
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_295
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_298
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_123
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_643
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_643

LBB1_123:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1003:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1005

LBB1_1004:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8590ff2               // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1004

LBB1_1005:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_1006:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1006
	JMP  LBB1_1451

LBB1_124:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_206
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_301
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_304
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_130
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_646
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_646

LBB1_130:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1011:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1013

LBB1_1012:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8590ff2               // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1012

LBB1_1013:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_1014:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1014
	JMP  LBB1_1451

LBB1_131:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_307
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_135
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_649
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_649

LBB1_135:
	WORD $0xf631 // xor    esi, esi

LBB1_1019:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1021

LBB1_1020:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1020

LBB1_1021:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1022:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1022
	JMP  LBB1_1451

LBB1_136:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_310
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_140
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_652
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_652

LBB1_140:
	WORD $0xf631 // xor    esi, esi

LBB1_1027:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1029

LBB1_1028:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1028

LBB1_1029:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1030:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1030
	JMP  LBB1_1451

LBB1_141:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_313
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_145
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_655
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_655

LBB1_145:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1035:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB1_1037
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB1_1037:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB1_1451

LBB1_1038:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1038
	JMP  LBB1_1451

LBB1_146:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_316
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_150
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_658
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_658

LBB1_150:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1043:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB1_1045
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB1_1045:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB1_1451

LBB1_1046:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1046
	JMP  LBB1_1451

LBB1_151:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_319
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_155
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_661
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_661

LBB1_155:
	WORD $0xf631 // xor    esi, esi

LBB1_1051:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1053

LBB1_1052:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1052

LBB1_1053:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1054:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1054
	JMP  LBB1_1451

LBB1_156:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_322
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_160
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_664
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_664

LBB1_160:
	WORD $0xf631 // xor    esi, esi

LBB1_1059:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1061

LBB1_1060:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1060

LBB1_1061:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1062:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1062
	JMP  LBB1_1451

LBB1_161:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_325
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_165
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_667
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_667

LBB1_165:
	WORD $0xff31 // xor    edi, edi

LBB1_1067:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1069

LBB1_1068:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1068

LBB1_1069:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1070:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1070
	JMP  LBB1_1451

LBB1_166:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_328
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_170
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_670
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_670

LBB1_170:
	WORD $0xff31 // xor    edi, edi

LBB1_1075:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1077

LBB1_1076:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1076

LBB1_1077:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1078:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1078
	JMP  LBB1_1451

LBB1_171:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_331
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_175
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_673
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_673

LBB1_175:
	WORD $0xf631 // xor    esi, esi

LBB1_1083:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1085

LBB1_1084:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1084

LBB1_1085:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1086:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1086
	JMP  LBB1_1451

LBB1_176:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_334
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_180
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_676
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_676

LBB1_180:
	WORD $0xf631 // xor    esi, esi

LBB1_1091:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1093

LBB1_1092:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1092

LBB1_1093:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1094:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1094
	JMP  LBB1_1451

LBB1_181:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_337
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_185
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_679
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_679

LBB1_185:
	WORD $0xc931 // xor    ecx, ecx

LBB1_849:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_851

LBB1_850:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_850

LBB1_851:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1451

LBB1_852:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_852
	JMP  LBB1_1451

LBB1_186:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_340
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_190
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_681
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_681

LBB1_190:
	WORD $0xc931 // xor    ecx, ecx

LBB1_859:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_861

LBB1_860:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_860

LBB1_861:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1451

LBB1_862:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_862
	JMP  LBB1_1451

LBB1_191:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_343
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_195
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_683
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_683

LBB1_195:
	WORD $0xf631 // xor    esi, esi

LBB1_1099:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1101

LBB1_1100:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1100

LBB1_1101:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1102:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1102
	JMP  LBB1_1451

LBB1_196:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_346
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_200
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_686
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_686

LBB1_200:
	WORD $0xf631 // xor    esi, esi

LBB1_1107:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1109

LBB1_1108:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1108

LBB1_1109:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1110:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1110
	JMP  LBB1_1451

LBB1_201:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_349
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB1_445
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_447

LBB1_206:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_352
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB1_450
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_452

LBB1_211:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_213
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_689
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_689

LBB1_213:
	WORD $0xf631 // xor    esi, esi

LBB1_1115:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1117

LBB1_1116:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1116

LBB1_1117:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1118:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1118
	JMP  LBB1_1451

LBB1_214:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_216
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_692
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_692

LBB1_216:
	WORD $0xf631 // xor    esi, esi

LBB1_1123:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1125

LBB1_1124:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1124

LBB1_1125:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1126:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1126
	JMP  LBB1_1451

LBB1_217:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_219
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_695
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_695

LBB1_219:
	WORD $0xf631 // xor    esi, esi

LBB1_1131:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1133

LBB1_1132:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1132

LBB1_1133:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1134:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1134
	JMP  LBB1_1451

LBB1_220:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_222
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_698
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_698

LBB1_222:
	WORD $0xf631 // xor    esi, esi

LBB1_1139:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1141

LBB1_1140:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1140

LBB1_1141:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1142:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1142
	JMP  LBB1_1451

LBB1_223:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_225
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_701
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_701

LBB1_225:
	WORD $0xc931 // xor    ecx, ecx

LBB1_869:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_871

LBB1_870:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB1_870

LBB1_871:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1451

LBB1_872:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB1_872
	JMP  LBB1_1451

LBB1_226:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_228
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_703
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_703

LBB1_228:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1147:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_1149
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB1_1149:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1451

LBB1_1150:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1150
	JMP  LBB1_1451

LBB1_229:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_231
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_706
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_706

LBB1_231:
	WORD $0xc931 // xor    ecx, ecx

LBB1_879:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_881

LBB1_880:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB1_880

LBB1_881:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1451

LBB1_882:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB1_882
	JMP  LBB1_1451

LBB1_232:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_234
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_708
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_708

LBB1_234:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1155:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_1157
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB1_1157:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1451

LBB1_1158:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1158
	JMP  LBB1_1451

LBB1_235:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_237
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_711
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_711

LBB1_237:
	WORD $0xf631 // xor    esi, esi

LBB1_1163:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1165

LBB1_1164:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1     // add    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1164

LBB1_1165:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1166:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1166
	JMP  LBB1_1451

LBB1_238:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_240
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_714
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_714

LBB1_240:
	WORD $0xf631 // xor    esi, esi

LBB1_1171:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1173

LBB1_1172:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1     // add    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1172

LBB1_1173:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1174:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1174
	JMP  LBB1_1451

LBB1_241:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_243
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_717
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_717

LBB1_243:
	WORD $0xf631 // xor    esi, esi

LBB1_1179:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1181

LBB1_1180:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1     // add    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1180

LBB1_1181:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1182:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1182
	JMP  LBB1_1451

LBB1_244:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_246
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_720
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_720

LBB1_246:
	WORD $0xf631 // xor    esi, esi

LBB1_1187:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1189

LBB1_1188:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1     // add    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1188

LBB1_1189:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1190:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1190
	JMP  LBB1_1451

LBB1_247:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_249
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_723
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_723

LBB1_249:
	WORD $0xf631 // xor    esi, esi

LBB1_1195:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1197

LBB1_1196:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66             // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1196

LBB1_1197:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1198:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1198
	JMP  LBB1_1451

LBB1_250:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_252
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_726
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_726

LBB1_252:
	WORD $0xf631 // xor    esi, esi

LBB1_1203:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1205

LBB1_1204:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66             // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1204

LBB1_1205:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1206:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1206
	JMP  LBB1_1451

LBB1_253:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_255
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_729
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_729

LBB1_255:
	WORD $0xf631 // xor    esi, esi

LBB1_1211:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1213

LBB1_1212:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66             // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1212

LBB1_1213:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1214:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1214
	JMP  LBB1_1451

LBB1_256:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_258
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_732
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_732

LBB1_258:
	WORD $0xf631 // xor    esi, esi

LBB1_1219:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1221

LBB1_1220:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66             // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1220

LBB1_1221:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1222:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1222
	JMP  LBB1_1451

LBB1_259:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_261
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_735
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_735

LBB1_261:
	WORD $0xf631 // xor    esi, esi

LBB1_1227:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1229

LBB1_1228:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1228

LBB1_1229:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1230:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1230
	JMP  LBB1_1451

LBB1_262:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_264
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_738
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_738

LBB1_264:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1235:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1237

LBB1_1236:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85c0ff3               // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1236

LBB1_1237:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_1238:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1238
	JMP  LBB1_1451

LBB1_265:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_267
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_741
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_741

LBB1_267:
	WORD $0xf631 // xor    esi, esi

LBB1_1243:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1245

LBB1_1244:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1244

LBB1_1245:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1246:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1246
	JMP  LBB1_1451

LBB1_268:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_270
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_744
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_744

LBB1_270:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1251:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1253

LBB1_1252:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85c0ff3               // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1252

LBB1_1253:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_1254:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1254
	JMP  LBB1_1451

LBB1_271:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_273
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_747
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_747

LBB1_273:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1259:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1261
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1261:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1451

LBB1_1262:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1262
	JMP  LBB1_1451

LBB1_274:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_276
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_750
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_750

LBB1_276:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1267:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1270
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1269:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1269

LBB1_1270:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB1_1451
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1272:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1272
	JMP  LBB1_1451

LBB1_277:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_279
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_753
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_753

LBB1_279:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1277:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1279
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1279:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1451

LBB1_1280:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1280
	JMP  LBB1_1451

LBB1_280:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_282
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_756
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_756

LBB1_282:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1285:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1288
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1287:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1287

LBB1_1288:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB1_1451
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1290:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1290
	JMP  LBB1_1451

LBB1_283:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_285
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_759
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_759

LBB1_285:
	WORD $0xf631 // xor    esi, esi

LBB1_1295:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1297

LBB1_1296:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1296

LBB1_1297:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1298:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1298
	JMP  LBB1_1451

LBB1_286:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_288
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_762
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_762

LBB1_288:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1303:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1305

LBB1_1304:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8580ff3               // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1304

LBB1_1305:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_1306:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1306
	JMP  LBB1_1451

LBB1_289:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_291
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_765
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_765

LBB1_291:
	WORD $0xf631 // xor    esi, esi

LBB1_1311:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1313

LBB1_1312:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1312

LBB1_1313:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1314:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1314
	JMP  LBB1_1451

LBB1_292:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_294
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_768
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_768

LBB1_294:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1319:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1321

LBB1_1320:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8580ff3               // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1320

LBB1_1321:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_1322:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1322
	JMP  LBB1_1451

LBB1_295:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB1_539
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_541

LBB1_298:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_300
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_771
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_771

LBB1_300:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1327:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1329

LBB1_1328:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8590ff3               // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1328

LBB1_1329:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_1330:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1330
	JMP  LBB1_1451

LBB1_301:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB1_547
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_549

LBB1_304:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_306
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_774
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_774

LBB1_306:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1335:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1337

LBB1_1336:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8590ff3               // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1336

LBB1_1337:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1451

LBB1_1338:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1338
	JMP  LBB1_1451

LBB1_307:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_309
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_777
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_777

LBB1_309:
	WORD $0xf631 // xor    esi, esi

LBB1_1343:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1345

LBB1_1344:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1344

LBB1_1345:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1346:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1346
	JMP  LBB1_1451

LBB1_310:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_312
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_780
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_780

LBB1_312:
	WORD $0xf631 // xor    esi, esi

LBB1_1351:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1353

LBB1_1352:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1352

LBB1_1353:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1354:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1354
	JMP  LBB1_1451

LBB1_313:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_315
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_783
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_783

LBB1_315:
	WORD $0xc931 // xor    ecx, ecx

LBB1_889:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_891

LBB1_890:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_890

LBB1_891:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_1451

LBB1_892:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_892
	JMP  LBB1_1451

LBB1_316:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_318
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_785
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_785

LBB1_318:
	WORD $0xc931 // xor    ecx, ecx

LBB1_899:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_901

LBB1_900:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_900

LBB1_901:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_1451

LBB1_902:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_902
	JMP  LBB1_1451

LBB1_319:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_321
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_787
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_787

LBB1_321:
	WORD $0xf631 // xor    esi, esi

LBB1_1359:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1361

LBB1_1360:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1360

LBB1_1361:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1362:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1362
	JMP  LBB1_1451

LBB1_322:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_324
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_790
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_790

LBB1_324:
	WORD $0xf631 // xor    esi, esi

LBB1_1367:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1369

LBB1_1368:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1368

LBB1_1369:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1370:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1370
	JMP  LBB1_1451

LBB1_325:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_327
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_793
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_793

LBB1_327:
	WORD $0xff31 // xor    edi, edi

LBB1_1375:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1377

LBB1_1376:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1376

LBB1_1377:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1378:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1378
	JMP  LBB1_1451

LBB1_328:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_330
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_796
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_796

LBB1_330:
	WORD $0xff31 // xor    edi, edi

LBB1_1383:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1385

LBB1_1384:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1384

LBB1_1385:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1386:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1386
	JMP  LBB1_1451

LBB1_331:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_333
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_799
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_799

LBB1_333:
	WORD $0xf631 // xor    esi, esi

LBB1_1391:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1393

LBB1_1392:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1392

LBB1_1393:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1394:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1394
	JMP  LBB1_1451

LBB1_334:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_336
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_802
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_802

LBB1_336:
	WORD $0xf631 // xor    esi, esi

LBB1_1399:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1401

LBB1_1400:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1400

LBB1_1401:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1402:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1402
	JMP  LBB1_1451

LBB1_337:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_339
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_805
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_805

LBB1_339:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1407:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1409
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1409:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1451

LBB1_1410:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1410
	JMP  LBB1_1451

LBB1_340:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_342
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_808
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_808

LBB1_342:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1415:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1417
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1417:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1451

LBB1_1418:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1418
	JMP  LBB1_1451

LBB1_343:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_345
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_811
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_811

LBB1_345:
	WORD $0xf631 // xor    esi, esi

LBB1_1423:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1425

LBB1_1424:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1424

LBB1_1425:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1426:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1426
	JMP  LBB1_1451

LBB1_346:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_348
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_814
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_814

LBB1_348:
	WORD $0xf631 // xor    esi, esi

LBB1_1431:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1433

LBB1_1432:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1432

LBB1_1433:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1434:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1434
	JMP  LBB1_1451

LBB1_349:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_351
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_817
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_817

LBB1_351:
	WORD $0xf631 // xor    esi, esi

LBB1_1439:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1441

LBB1_1440:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1440

LBB1_1441:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1442:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1442
	JMP  LBB1_1451

LBB1_352:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1451
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_354
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_820
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_820

LBB1_354:
	WORD $0xf631 // xor    esi, esi

LBB1_1447:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1449

LBB1_1448:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1448

LBB1_1449:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1451

LBB1_1450:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1450
	JMP  LBB1_1451

LBB1_445:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB1_446:
	LONG $0xfa0c8b48             // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf80c8949             // mov    qword [r8 + 8*rdi], rcx
	LONG $0xfa4c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rdi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rcx
	LONG $0xfa4c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rdi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rcx
	LONG $0xfa4c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rdi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rcx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB1_446

LBB1_447:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_1451
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB1_449:
	LONG $0xfa0c8b48         // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48         // imul    rcx, rax
	LONG $0xfe0c8948         // mov    qword [rsi + 8*rdi], rcx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB1_449
	JMP  LBB1_1451

LBB1_450:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB1_451:
	LONG $0xfa0c8b48             // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf80c8949             // mov    qword [r8 + 8*rdi], rcx
	LONG $0xfa4c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rdi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rcx
	LONG $0xfa4c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rdi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rcx
	LONG $0xfa4c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rdi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rcx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB1_451

LBB1_452:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_1451
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB1_454:
	LONG $0xfa0c8b48         // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48         // imul    rcx, rax
	LONG $0xfe0c8948         // mov    qword [rsi + 8*rdi], rcx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB1_454
	JMP  LBB1_1451

LBB1_539:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB1_540:
	LONG $0xfa0c8b48             // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf80c8949             // mov    qword [r8 + 8*rdi], rcx
	LONG $0xfa4c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rdi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rcx
	LONG $0xfa4c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rdi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rcx
	LONG $0xfa4c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rdi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rcx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB1_540

LBB1_541:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_1451
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB1_543:
	LONG $0xfa0c8b48         // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48         // imul    rcx, rax
	LONG $0xfe0c8948         // mov    qword [rsi + 8*rdi], rcx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB1_543
	JMP  LBB1_1451

LBB1_547:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB1_548:
	LONG $0xfa0c8b48             // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf80c8949             // mov    qword [r8 + 8*rdi], rcx
	LONG $0xfa4c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rdi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rcx
	LONG $0xfa4c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rdi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rcx
	LONG $0xfa4c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rdi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rcx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB1_548

LBB1_549:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_1451
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB1_551:
	LONG $0xfa0c8b48         // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48         // imul    rcx, rax
	LONG $0xfe0c8948         // mov    qword [rsi + 8*rdi], rcx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB1_551

LBB1_1451:
	RET

LBB1_603:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_903
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_605:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_605
	JMP  LBB1_904

LBB1_606:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_911
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_608:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_608
	JMP  LBB1_912

LBB1_609:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB1_823
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_825

LBB1_611:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB1_833
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_835

LBB1_613:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_919
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_615:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_615
	JMP  LBB1_920

LBB1_616:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_927
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_618:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_618
	JMP  LBB1_928

LBB1_619:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_935
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_621:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_621
	JMP  LBB1_936

LBB1_622:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_943
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_624:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_624
	JMP  LBB1_944

LBB1_625:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_951
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_627:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_627
	JMP  LBB1_952

LBB1_628:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_959
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_630:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_630
	JMP  LBB1_960

LBB1_631:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_967
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_633:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_633
	JMP  LBB1_968

LBB1_634:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_975
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_636:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_636
	JMP  LBB1_976

LBB1_637:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_983
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_639:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_639
	JMP  LBB1_984

LBB1_640:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_991
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_642:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_642
	JMP  LBB1_992

LBB1_643:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_999
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_645:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_645
	JMP  LBB1_1000

LBB1_646:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1007
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_648:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_648
	JMP  LBB1_1008

LBB1_649:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1015
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_651:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_651
	JMP  LBB1_1016

LBB1_652:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1023
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_654:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_654
	JMP  LBB1_1024

LBB1_655:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1031
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x2045 // movdqa    xmm8, oword 32[rbp] /* [rip + .LCPI1_2] */

LBB1_657:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_657
	JMP  LBB1_1032

LBB1_658:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1039
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x2045 // movdqa    xmm8, oword 32[rbp] /* [rip + .LCPI1_2] */

LBB1_660:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_660
	JMP  LBB1_1040

LBB1_661:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1047
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_663:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_663
	JMP  LBB1_1048

LBB1_664:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1055
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_666:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_666
	JMP  LBB1_1056

LBB1_667:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1063
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB1_669:
	LONG $0x2c6f0ff3; BYTE $0x02               // movdqu    xmm5, oword [rdx + rax]
	LONG $0x746f0ff3; WORD $0x1002             // movdqu    xmm6, oword [rdx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2002             // movdqu    xmm5, oword [rdx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3002             // movdqu    xmm6, oword [rdx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_669
	JMP  LBB1_1064

LBB1_670:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1071
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB1_672:
	LONG $0x2c6f0ff3; BYTE $0x02               // movdqu    xmm5, oword [rdx + rax]
	LONG $0x746f0ff3; WORD $0x1002             // movdqu    xmm6, oword [rdx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2002             // movdqu    xmm5, oword [rdx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3002             // movdqu    xmm6, oword [rdx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_672
	JMP  LBB1_1072

LBB1_673:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1079
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_675:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_675
	JMP  LBB1_1080

LBB1_676:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1087
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_678:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_678
	JMP  LBB1_1088

LBB1_679:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB1_843
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_845

LBB1_681:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB1_853
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_855

LBB1_683:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1095
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_685:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_685
	JMP  LBB1_1096

LBB1_686:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1103
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_688:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_688
	JMP  LBB1_1104

LBB1_689:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1111
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_691:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_691
	JMP  LBB1_1112

LBB1_692:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1119
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_694:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_694
	JMP  LBB1_1120

LBB1_695:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1127
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_697:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_697
	JMP  LBB1_1128

LBB1_698:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1135
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_700:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_700
	JMP  LBB1_1136

LBB1_701:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB1_863
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_865

LBB1_703:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1143
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_705:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_705
	JMP  LBB1_1144

LBB1_706:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB1_873
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_875

LBB1_708:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1151
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_710:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_710
	JMP  LBB1_1152

LBB1_711:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1159
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_713:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_713
	JMP  LBB1_1160

LBB1_714:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1167
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_716:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_716
	JMP  LBB1_1168

LBB1_717:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1175
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_719:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_719
	JMP  LBB1_1176

LBB1_720:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1183
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_722:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_722
	JMP  LBB1_1184

LBB1_723:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1191
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_725:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_725
	JMP  LBB1_1192

LBB1_726:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1199
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_728:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_728
	JMP  LBB1_1200

LBB1_729:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1207
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_731:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_731
	JMP  LBB1_1208

LBB1_732:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1215
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_734:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_734
	JMP  LBB1_1216

LBB1_735:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1223
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_737:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_737
	JMP  LBB1_1224

LBB1_738:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1231
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_740:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_740
	JMP  LBB1_1232

LBB1_741:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1239
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_743:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_743
	JMP  LBB1_1240

LBB1_744:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1247
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_746:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_746
	JMP  LBB1_1248

LBB1_747:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1255
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB1_749:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_749
	JMP  LBB1_1256

LBB1_750:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1263
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_752:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_752
	JMP  LBB1_1264

LBB1_753:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1273
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB1_755:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_755
	JMP  LBB1_1274

LBB1_756:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1281
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_758:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_758
	JMP  LBB1_1282

LBB1_759:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1291
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_761:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_761
	JMP  LBB1_1292

LBB1_762:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1299
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_764:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_764
	JMP  LBB1_1300

LBB1_765:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1307
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_767:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_767
	JMP  LBB1_1308

LBB1_768:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1315
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_770:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_770
	JMP  LBB1_1316

LBB1_771:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1323
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_773:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_773
	JMP  LBB1_1324

LBB1_774:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1331
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_776:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_776
	JMP  LBB1_1332

LBB1_777:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1339
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_779:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_779
	JMP  LBB1_1340

LBB1_780:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1347
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_782:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_782
	JMP  LBB1_1348

LBB1_783:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB1_883
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_885

LBB1_785:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB1_893
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_895

LBB1_787:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1355
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_789:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_789
	JMP  LBB1_1356

LBB1_790:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1363
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_792:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_792
	JMP  LBB1_1364

LBB1_793:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1371
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB1_795:
	LONG $0x2c6f0ff3; BYTE $0x02               // movdqu    xmm5, oword [rdx + rax]
	LONG $0x746f0ff3; WORD $0x1002             // movdqu    xmm6, oword [rdx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2002             // movdqu    xmm5, oword [rdx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3002             // movdqu    xmm6, oword [rdx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_795
	JMP  LBB1_1372

LBB1_796:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1379
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB1_798:
	LONG $0x2c6f0ff3; BYTE $0x02               // movdqu    xmm5, oword [rdx + rax]
	LONG $0x746f0ff3; WORD $0x1002             // movdqu    xmm6, oword [rdx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2002             // movdqu    xmm5, oword [rdx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3002             // movdqu    xmm6, oword [rdx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_798
	JMP  LBB1_1380

LBB1_799:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1387
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_801:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_801
	JMP  LBB1_1388

LBB1_802:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1395
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_804:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_804
	JMP  LBB1_1396

LBB1_805:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1403
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_807:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_807
	JMP  LBB1_1404

LBB1_808:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1411
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_810:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_810
	JMP  LBB1_1412

LBB1_811:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1419
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_813:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_813
	JMP  LBB1_1420

LBB1_814:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1427
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_816:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_816
	JMP  LBB1_1428

LBB1_817:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1435
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_819:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_819
	JMP  LBB1_1436

LBB1_820:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1443
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_822:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_822
	JMP  LBB1_1444

LBB1_823:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_824:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_824

LBB1_825:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_828
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_827:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_827

LBB1_828:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_829

LBB1_833:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_834:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_834

LBB1_835:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_838
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_837:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_837

LBB1_838:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_839

LBB1_843:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_844:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_844

LBB1_845:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_848
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_847:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_847

LBB1_848:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_849

LBB1_853:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_854:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_854

LBB1_855:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_858
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_857:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_857

LBB1_858:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_859

LBB1_863:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_864:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_864

LBB1_865:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_868
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_867:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_867

LBB1_868:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_869

LBB1_873:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_874:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_874

LBB1_875:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_878
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_877:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_877

LBB1_878:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_879

LBB1_883:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_884:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB1_884

LBB1_885:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB1_888
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB1_887:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB1_887

LBB1_888:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_889

LBB1_893:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_894:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB1_894

LBB1_895:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB1_898
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB1_897:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB1_897

LBB1_898:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_899

LBB1_903:
	WORD $0xff31 // xor    edi, edi

LBB1_904:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_906
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_906:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_907

LBB1_911:
	WORD $0xff31 // xor    edi, edi

LBB1_912:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_914
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_914:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_915

LBB1_919:
	WORD $0xff31 // xor    edi, edi

LBB1_920:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_922
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_922:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_923

LBB1_927:
	WORD $0xff31 // xor    edi, edi

LBB1_928:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_930
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_930:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_931

LBB1_935:
	WORD $0xff31 // xor    edi, edi

LBB1_936:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_938
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_938:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_939

LBB1_943:
	WORD $0xff31 // xor    edi, edi

LBB1_944:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_946
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_946:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_947

LBB1_951:
	WORD $0xff31 // xor    edi, edi

LBB1_952:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_954
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_954:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_955

LBB1_959:
	WORD $0xff31 // xor    edi, edi

LBB1_960:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_962
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_962:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_963

LBB1_967:
	WORD $0xff31 // xor    edi, edi

LBB1_968:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_970
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB1_970:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_971

LBB1_975:
	WORD $0xff31 // xor    edi, edi

LBB1_976:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_978
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB1_978:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_979

LBB1_983:
	WORD $0xff31 // xor    edi, edi

LBB1_984:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_986
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_986:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_987

LBB1_991:
	WORD $0xff31 // xor    edi, edi

LBB1_992:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_994
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_994:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_995

LBB1_999:
	WORD $0xff31 // xor    edi, edi

LBB1_1000:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1002
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_1002:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1003

LBB1_1007:
	WORD $0xff31 // xor    edi, edi

LBB1_1008:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1010
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_1010:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1011

LBB1_1015:
	WORD $0xff31 // xor    edi, edi

LBB1_1016:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1018
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1018:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1019

LBB1_1023:
	WORD $0xff31 // xor    edi, edi

LBB1_1024:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1026
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1026:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1027

LBB1_1031:
	WORD $0xf631 // xor    esi, esi

LBB1_1032:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1034
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, oword 32[rbp] /* [rip + .LCPI1_2] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB1_1034:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_1035

LBB1_1039:
	WORD $0xf631 // xor    esi, esi

LBB1_1040:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1042
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, oword 32[rbp] /* [rip + .LCPI1_2] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB1_1042:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_1043

LBB1_1047:
	WORD $0xff31 // xor    edi, edi

LBB1_1048:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1050
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1050:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1051

LBB1_1055:
	WORD $0xff31 // xor    edi, edi

LBB1_1056:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1058
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1058:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1059

LBB1_1063:
	WORD $0xc031 // xor    eax, eax

LBB1_1064:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1066
	LONG $0x146f0ff3; BYTE $0x02               // movdqu    xmm2, oword [rdx + rax]
	LONG $0x5c6f0ff3; WORD $0x1002             // movdqu    xmm3, oword [rdx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB1_1066:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1451
	JMP  LBB1_1067

LBB1_1071:
	WORD $0xc031 // xor    eax, eax

LBB1_1072:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1074
	LONG $0x146f0ff3; BYTE $0x02               // movdqu    xmm2, oword [rdx + rax]
	LONG $0x5c6f0ff3; WORD $0x1002             // movdqu    xmm3, oword [rdx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB1_1074:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1451
	JMP  LBB1_1075

LBB1_1079:
	WORD $0xff31 // xor    edi, edi

LBB1_1080:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1082
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1082:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1083

LBB1_1087:
	WORD $0xff31 // xor    edi, edi

LBB1_1088:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1090
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1090:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1091

LBB1_1095:
	WORD $0xff31 // xor    edi, edi

LBB1_1096:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1098
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1098:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1099

LBB1_1103:
	WORD $0xff31 // xor    edi, edi

LBB1_1104:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1106
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1106:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1107

LBB1_1111:
	WORD $0xff31 // xor    edi, edi

LBB1_1112:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1114
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1114:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1115

LBB1_1119:
	WORD $0xff31 // xor    edi, edi

LBB1_1120:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1122
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1122:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1123

LBB1_1127:
	WORD $0xff31 // xor    edi, edi

LBB1_1128:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1130
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1130:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1131

LBB1_1135:
	WORD $0xff31 // xor    edi, edi

LBB1_1136:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1138
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1138:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1139

LBB1_1143:
	WORD $0xf631 // xor    esi, esi

LBB1_1144:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1146
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB1_1146:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1147

LBB1_1151:
	WORD $0xf631 // xor    esi, esi

LBB1_1152:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1154
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB1_1154:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1155

LBB1_1159:
	WORD $0xff31 // xor    edi, edi

LBB1_1160:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1162
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1162:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1163

LBB1_1167:
	WORD $0xff31 // xor    edi, edi

LBB1_1168:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1170
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1170:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1171

LBB1_1175:
	WORD $0xff31 // xor    edi, edi

LBB1_1176:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1178
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1178:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1179

LBB1_1183:
	WORD $0xff31 // xor    edi, edi

LBB1_1184:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1186
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1186:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1187

LBB1_1191:
	WORD $0xff31 // xor    edi, edi

LBB1_1192:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1194
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1194:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1195

LBB1_1199:
	WORD $0xff31 // xor    edi, edi

LBB1_1200:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1202
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1202:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1203

LBB1_1207:
	WORD $0xff31 // xor    edi, edi

LBB1_1208:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1210
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1210:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1211

LBB1_1215:
	WORD $0xff31 // xor    edi, edi

LBB1_1216:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1218
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1218:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1219

LBB1_1223:
	WORD $0xff31 // xor    edi, edi

LBB1_1224:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1226
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1226:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1227

LBB1_1231:
	WORD $0xff31 // xor    edi, edi

LBB1_1232:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1234
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1234:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1235

LBB1_1239:
	WORD $0xff31 // xor    edi, edi

LBB1_1240:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1242
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1242:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1243

LBB1_1247:
	WORD $0xff31 // xor    edi, edi

LBB1_1248:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1250
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1250:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1251

LBB1_1255:
	WORD $0xf631 // xor    esi, esi

LBB1_1256:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1258
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB1_1258:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1259

LBB1_1263:
	WORD $0xff31 // xor    edi, edi

LBB1_1264:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1266
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1266:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_1267

LBB1_1273:
	WORD $0xf631 // xor    esi, esi

LBB1_1274:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1276
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB1_1276:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1277

LBB1_1281:
	WORD $0xff31 // xor    edi, edi

LBB1_1282:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1284
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1284:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1451
	JMP  LBB1_1285

LBB1_1291:
	WORD $0xff31 // xor    edi, edi

LBB1_1292:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1294
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1294:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1295

LBB1_1299:
	WORD $0xff31 // xor    edi, edi

LBB1_1300:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1302
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1302:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1303

LBB1_1307:
	WORD $0xff31 // xor    edi, edi

LBB1_1308:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1310
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1310:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1311

LBB1_1315:
	WORD $0xff31 // xor    edi, edi

LBB1_1316:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1318
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1318:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1319

LBB1_1323:
	WORD $0xff31 // xor    edi, edi

LBB1_1324:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1326
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1326:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1327

LBB1_1331:
	WORD $0xff31 // xor    edi, edi

LBB1_1332:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1334
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1334:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1335

LBB1_1339:
	WORD $0xff31 // xor    edi, edi

LBB1_1340:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1342
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1342:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1343

LBB1_1347:
	WORD $0xff31 // xor    edi, edi

LBB1_1348:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1350
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1350:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1351

LBB1_1355:
	WORD $0xff31 // xor    edi, edi

LBB1_1356:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1358
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1358:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1359

LBB1_1363:
	WORD $0xff31 // xor    edi, edi

LBB1_1364:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1366
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1366:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1367

LBB1_1371:
	WORD $0xc031 // xor    eax, eax

LBB1_1372:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1374
	LONG $0x146f0ff3; BYTE $0x02               // movdqu    xmm2, oword [rdx + rax]
	LONG $0x5c6f0ff3; WORD $0x1002             // movdqu    xmm3, oword [rdx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB1_1374:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1451
	JMP  LBB1_1375

LBB1_1379:
	WORD $0xc031 // xor    eax, eax

LBB1_1380:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1382
	LONG $0x146f0ff3; BYTE $0x02               // movdqu    xmm2, oword [rdx + rax]
	LONG $0x5c6f0ff3; WORD $0x1002             // movdqu    xmm3, oword [rdx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB1_1382:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1451
	JMP  LBB1_1383

LBB1_1387:
	WORD $0xff31 // xor    edi, edi

LBB1_1388:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1390
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1390:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1391

LBB1_1395:
	WORD $0xff31 // xor    edi, edi

LBB1_1396:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1398
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1398:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1399

LBB1_1403:
	WORD $0xff31 // xor    edi, edi

LBB1_1404:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1406
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1406:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1407

LBB1_1411:
	WORD $0xff31 // xor    edi, edi

LBB1_1412:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1414
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1414:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1451
	JMP  LBB1_1415

LBB1_1419:
	WORD $0xff31 // xor    edi, edi

LBB1_1420:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1422
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1422:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1423

LBB1_1427:
	WORD $0xff31 // xor    edi, edi

LBB1_1428:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1430
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1430:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1431

LBB1_1435:
	WORD $0xff31 // xor    edi, edi

LBB1_1436:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1438
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1438:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1439

LBB1_1443:
	WORD $0xff31 // xor    edi, edi

LBB1_1444:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1446
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1446:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1451
	JMP  LBB1_1447

DATA LCDATA3<>+0x000(SB)/8, $0x7fffffffffffffff
DATA LCDATA3<>+0x008(SB)/8, $0x7fffffffffffffff
DATA LCDATA3<>+0x010(SB)/8, $0x7fffffff7fffffff
DATA LCDATA3<>+0x018(SB)/8, $0x7fffffff7fffffff
DATA LCDATA3<>+0x020(SB)/8, $0x000000ff000000ff
DATA LCDATA3<>+0x028(SB)/8, $0x000000ff000000ff
DATA LCDATA3<>+0x030(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x038(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA3<>(SB), 8, $64

TEXT Â·_arithmetic_scalar_arr_sse4(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA3<>(SB), BP

	LONG $0x04fe8040         // cmp    sil, 4
	JG   LBB2_12
	LONG $0x01fe8040         // cmp    sil, 1
	JG   LBB2_23
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB2_43
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB2_1451
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_75
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_131
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_211
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_214
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_11
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_603
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_603

LBB2_11:
	WORD $0xf631 // xor    esi, esi

LBB2_907:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_909

LBB2_908:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_908

LBB2_909:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_910:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_910
	JMP  LBB2_1451

LBB2_12:
	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB2_33
	LONG $0x05fe8040         // cmp    sil, 5
	JE   LBB2_51
	LONG $0x06fe8040         // cmp    sil, 6
	JNE  LBB2_1451
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_82
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_136
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_217
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_220
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_22
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_606
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_606

LBB2_22:
	WORD $0xf631 // xor    esi, esi

LBB2_915:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_917

LBB2_916:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_916

LBB2_917:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_918:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_918
	JMP  LBB2_1451

LBB2_23:
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB2_59
	LONG $0x04fe8040         // cmp    sil, 4
	JNE  LBB2_1451
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_89
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_141
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_223
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_226
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_32
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_609
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_609

LBB2_32:
	WORD $0xc931 // xor    ecx, ecx

LBB2_829:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_831

LBB2_830:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB2_830

LBB2_831:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1451

LBB2_832:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_832
	JMP  LBB2_1451

LBB2_33:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB2_67
	LONG $0x09fe8040         // cmp    sil, 9
	JNE  LBB2_1451
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_96
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_146
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_229
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_232
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_42
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_611
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_611

LBB2_42:
	WORD $0xc931 // xor    ecx, ecx

LBB2_839:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_841

LBB2_840:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB2_840

LBB2_841:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1451

LBB2_842:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_842
	JMP  LBB2_1451

LBB2_43:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_103
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_151
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_235
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_238
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_50
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_613
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_613

LBB2_50:
	WORD $0xf631 // xor    esi, esi

LBB2_923:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_925

LBB2_924:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_924

LBB2_925:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_926:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_926
	JMP  LBB2_1451

LBB2_51:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_110
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_156
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_241
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_244
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_58
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_616
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_616

LBB2_58:
	WORD $0xf631 // xor    esi, esi

LBB2_931:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_933

LBB2_932:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_932

LBB2_933:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_934:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_934
	JMP  LBB2_1451

LBB2_59:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_117
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_161
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_247
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_250
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_66
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_619
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_619

LBB2_66:
	WORD $0xf631 // xor    esi, esi

LBB2_939:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_941

LBB2_940:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_940

LBB2_941:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_942:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_942
	JMP  LBB2_1451

LBB2_67:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_124
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_166
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_253
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_256
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_74
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_622
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_622

LBB2_74:
	WORD $0xf631 // xor    esi, esi

LBB2_947:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_949

LBB2_948:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_948

LBB2_949:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_950:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_950
	JMP  LBB2_1451

LBB2_75:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_171
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_259
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_262
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_81
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_625
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_625

LBB2_81:
	WORD $0xd231 // xor    edx, edx

LBB2_955:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_957

LBB2_956:
	LONG $0xc8280f66               // movapd    xmm1, xmm0
	LONG $0x0c5c0ff2; BYTE $0xd1   // subsd    xmm1, qword [rcx + 8*rdx]
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_956

LBB2_957:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_958:
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x0c5c0ff2; BYTE $0xd1               // subsd    xmm1, qword [rcx + 8*rdx]
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x08d1             // subsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x10d1             // subsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x18d1             // subsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_958
	JMP  LBB2_1451

LBB2_82:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_176
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_265
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_268
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_88
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_628
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_628

LBB2_88:
	WORD $0xd231 // xor    edx, edx

LBB2_963:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_965

LBB2_964:
	LONG $0xc8280f66               // movapd    xmm1, xmm0
	LONG $0x0c5c0ff2; BYTE $0xd1   // subsd    xmm1, qword [rcx + 8*rdx]
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_964

LBB2_965:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_966:
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x0c5c0ff2; BYTE $0xd1               // subsd    xmm1, qword [rcx + 8*rdx]
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x08d1             // subsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x10d1             // subsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x18d1             // subsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_966
	JMP  LBB2_1451

LBB2_89:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_181
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_271
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_274
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_95
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_631
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_631

LBB2_95:
	WORD $0xc931 // xor    ecx, ecx

LBB2_971:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB2_973

LBB2_972:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB2_972

LBB2_973:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_974:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_974
	JMP  LBB2_1451

LBB2_96:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_186
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_277
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_280
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_102
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_634
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_634

LBB2_102:
	WORD $0xc931 // xor    ecx, ecx

LBB2_979:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB2_981

LBB2_980:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB2_980

LBB2_981:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_982:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_982
	JMP  LBB2_1451

LBB2_103:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_191
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_283
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_286
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_109
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_637
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_637

LBB2_109:
	WORD $0xd231 // xor    edx, edx

LBB2_987:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_989

LBB2_988:
	LONG $0x0c100ff2; BYTE $0xd1   // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_988

LBB2_989:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_990:
	LONG $0x0c100ff2; BYTE $0xd1               // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c100ff2; WORD $0x08d1             // movsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10d1             // movsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18d1             // movsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_990
	JMP  LBB2_1451

LBB2_110:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_196
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_289
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_292
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_116
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_640
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_640

LBB2_116:
	WORD $0xd231 // xor    edx, edx

LBB2_995:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_997

LBB2_996:
	LONG $0x0c100ff2; BYTE $0xd1   // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_996

LBB2_997:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_998:
	LONG $0x0c100ff2; BYTE $0xd1               // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c100ff2; WORD $0x08d1             // movsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10d1             // movsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18d1             // movsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_998
	JMP  LBB2_1451

LBB2_117:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_201
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_295
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_298
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_123
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_643
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_643

LBB2_123:
	WORD $0xd231 // xor    edx, edx

LBB2_1003:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1005

LBB2_1004:
	LONG $0x0c100ff2; BYTE $0xd1   // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8590ff2               // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1004

LBB2_1005:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_1006:
	LONG $0x0c100ff2; BYTE $0xd1               // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c100ff2; WORD $0x08d1             // movsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10d1             // movsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18d1             // movsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1006
	JMP  LBB2_1451

LBB2_124:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_206
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_301
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_304
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_130
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_646
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_646

LBB2_130:
	WORD $0xd231 // xor    edx, edx

LBB2_1011:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1013

LBB2_1012:
	LONG $0x0c100ff2; BYTE $0xd1   // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8590ff2               // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1012

LBB2_1013:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_1014:
	LONG $0x0c100ff2; BYTE $0xd1               // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c100ff2; WORD $0x08d1             // movsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10d1             // movsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18d1             // movsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1014
	JMP  LBB2_1451

LBB2_131:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_307
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8a44; BYTE $0x1a // mov    r11b, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_135
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_649
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_649

LBB2_135:
	WORD $0xf631 // xor    esi, esi

LBB2_1019:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1021

LBB2_1020:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1020

LBB2_1021:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1022:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1022
	JMP  LBB2_1451

LBB2_136:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_310
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8a44; BYTE $0x1a // mov    r11b, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_140
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_652
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_652

LBB2_140:
	WORD $0xf631 // xor    esi, esi

LBB2_1027:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1029

LBB2_1028:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1028

LBB2_1029:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1030:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1030
	JMP  LBB2_1451

LBB2_141:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_313
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_145
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_655
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_655

LBB2_145:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1035:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB2_1037
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB2_1037:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB2_1451

LBB2_1038:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1038
	JMP  LBB2_1451

LBB2_146:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_316
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_150
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_658
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_658

LBB2_150:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1043:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB2_1045
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB2_1045:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB2_1451

LBB2_1046:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1046
	JMP  LBB2_1451

LBB2_151:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_319
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028a             // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_155
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_661
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_661

LBB2_155:
	WORD $0xf631 // xor    esi, esi

LBB2_1051:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1053

LBB2_1052:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1052

LBB2_1053:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1054:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1054
	JMP  LBB2_1451

LBB2_156:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_322
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028a             // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_160
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_664
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_664

LBB2_160:
	WORD $0xf631 // xor    esi, esi

LBB2_1059:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1061

LBB2_1060:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1060

LBB2_1061:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1062:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1062
	JMP  LBB2_1451

LBB2_161:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_325
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_165
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_667
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_667

LBB2_165:
	WORD $0xff31 // xor    edi, edi

LBB2_1067:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1069

LBB2_1068:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1068

LBB2_1069:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1070:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1070
	JMP  LBB2_1451

LBB2_166:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_328
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_170
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_670
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_670

LBB2_170:
	WORD $0xff31 // xor    edi, edi

LBB2_1075:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1077

LBB2_1076:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1076

LBB2_1077:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1078:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1078
	JMP  LBB2_1451

LBB2_171:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_331
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_175
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_673
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_673

LBB2_175:
	WORD $0xf631 // xor    esi, esi

LBB2_1083:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1085

LBB2_1084:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1084

LBB2_1085:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1086:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1086
	JMP  LBB2_1451

LBB2_176:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_334
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_180
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_676
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_676

LBB2_180:
	WORD $0xf631 // xor    esi, esi

LBB2_1091:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1093

LBB2_1092:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1092

LBB2_1093:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1094:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1094
	JMP  LBB2_1451

LBB2_181:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_337
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_185
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_679
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_679

LBB2_185:
	WORD $0xc931 // xor    ecx, ecx

LBB2_849:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_851

LBB2_850:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_850

LBB2_851:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1451

LBB2_852:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_852
	JMP  LBB2_1451

LBB2_186:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_340
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_190
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_681
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_681

LBB2_190:
	WORD $0xc931 // xor    ecx, ecx

LBB2_859:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_861

LBB2_860:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_860

LBB2_861:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1451

LBB2_862:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_862
	JMP  LBB2_1451

LBB2_191:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_343
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_195
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_683
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_683

LBB2_195:
	WORD $0xf631 // xor    esi, esi

LBB2_1099:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1101

LBB2_1100:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1100

LBB2_1101:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1102:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1102
	JMP  LBB2_1451

LBB2_196:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_346
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_200
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_686
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_686

LBB2_200:
	WORD $0xf631 // xor    esi, esi

LBB2_1107:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1109

LBB2_1108:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1108

LBB2_1109:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1110:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1110
	JMP  LBB2_1451

LBB2_201:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_349
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB2_445
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_447

LBB2_206:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_352
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1451
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB2_450
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_452

LBB2_211:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_213
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_689
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_689

LBB2_213:
	WORD $0xf631 // xor    esi, esi

LBB2_1115:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1117

LBB2_1116:
	WORD $0xc289                 // mov    edx, eax
	LONG $0x71142b66             // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1116

LBB2_1117:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1118:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1118
	JMP  LBB2_1451

LBB2_214:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_216
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_692
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_692

LBB2_216:
	WORD $0xf631 // xor    esi, esi

LBB2_1123:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1125

LBB2_1124:
	WORD $0xc289                 // mov    edx, eax
	LONG $0x71142b66             // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1124

LBB2_1125:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1126:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1126
	JMP  LBB2_1451

LBB2_217:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_219
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_695
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_695

LBB2_219:
	WORD $0xf631 // xor    esi, esi

LBB2_1131:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1133

LBB2_1132:
	WORD $0xc289                 // mov    edx, eax
	LONG $0x71142b66             // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1132

LBB2_1133:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1134:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1134
	JMP  LBB2_1451

LBB2_220:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_222
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_698
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_698

LBB2_222:
	WORD $0xf631 // xor    esi, esi

LBB2_1139:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1141

LBB2_1140:
	WORD $0xc289                 // mov    edx, eax
	LONG $0x71142b66             // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1140

LBB2_1141:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1142:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1142
	JMP  LBB2_1451

LBB2_223:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_225
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_701
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_701

LBB2_225:
	WORD $0xc931 // xor    ecx, ecx

LBB2_869:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_871

LBB2_870:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB2_870

LBB2_871:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1451

LBB2_872:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB2_872
	JMP  LBB2_1451

LBB2_226:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_228
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_703
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_703

LBB2_228:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1147:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB2_1149
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB2_1149:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1451

LBB2_1150:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1150
	JMP  LBB2_1451

LBB2_229:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_231
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_706
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_706

LBB2_231:
	WORD $0xc931 // xor    ecx, ecx

LBB2_879:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_881

LBB2_880:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB2_880

LBB2_881:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1451

LBB2_882:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB2_882
	JMP  LBB2_1451

LBB2_232:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_234
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_708
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_708

LBB2_234:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1155:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB2_1157
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB2_1157:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1451

LBB2_1158:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1158
	JMP  LBB2_1451

LBB2_235:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_237
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_711
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_711

LBB2_237:
	WORD $0xf631 // xor    esi, esi

LBB2_1163:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1165

LBB2_1164:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2     // add    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1164

LBB2_1165:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1166:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1166
	JMP  LBB2_1451

LBB2_238:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_240
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_714
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_714

LBB2_240:
	WORD $0xf631 // xor    esi, esi

LBB2_1171:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1173

LBB2_1172:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2     // add    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1172

LBB2_1173:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1174:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1174
	JMP  LBB2_1451

LBB2_241:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_243
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_717
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_717

LBB2_243:
	WORD $0xf631 // xor    esi, esi

LBB2_1179:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1181

LBB2_1180:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2     // add    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1180

LBB2_1181:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1182:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1182
	JMP  LBB2_1451

LBB2_244:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_246
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_720
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_720

LBB2_246:
	WORD $0xf631 // xor    esi, esi

LBB2_1187:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1189

LBB2_1188:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2     // add    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1188

LBB2_1189:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1190:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1190
	JMP  LBB2_1451

LBB2_247:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_249
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_723
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_723

LBB2_249:
	WORD $0xf631 // xor    esi, esi

LBB2_1195:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1197

LBB2_1196:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66             // imul    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1196

LBB2_1197:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1198:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1198
	JMP  LBB2_1451

LBB2_250:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_252
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_726
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_726

LBB2_252:
	WORD $0xf631 // xor    esi, esi

LBB2_1203:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1205

LBB2_1204:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66             // imul    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1204

LBB2_1205:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1206:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1206
	JMP  LBB2_1451

LBB2_253:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_255
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_729
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_729

LBB2_255:
	WORD $0xf631 // xor    esi, esi

LBB2_1211:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1213

LBB2_1212:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66             // imul    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1212

LBB2_1213:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1214:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1214
	JMP  LBB2_1451

LBB2_256:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_258
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_732
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_732

LBB2_258:
	WORD $0xf631 // xor    esi, esi

LBB2_1219:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1221

LBB2_1220:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66             // imul    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1220

LBB2_1221:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1222:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1222
	JMP  LBB2_1451

LBB2_259:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_261
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_735
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_735

LBB2_261:
	WORD $0xf631 // xor    esi, esi

LBB2_1227:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1229

LBB2_1228:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1228

LBB2_1229:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1230:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1230
	JMP  LBB2_1451

LBB2_262:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_264
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_738
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_738

LBB2_264:
	WORD $0xd231 // xor    edx, edx

LBB2_1235:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1237

LBB2_1236:
	WORD $0x280f; BYTE $0xc8       // movaps    xmm1, xmm0
	LONG $0x0c5c0ff3; BYTE $0x91   // subss    xmm1, dword [rcx + 4*rdx]
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1236

LBB2_1237:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_1238:
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x0c5c0ff3; BYTE $0x91               // subss    xmm1, dword [rcx + 4*rdx]
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0491             // subss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0891             // subss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0c91             // subss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1238
	JMP  LBB2_1451

LBB2_265:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_267
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_741
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_741

LBB2_267:
	WORD $0xf631 // xor    esi, esi

LBB2_1243:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1245

LBB2_1244:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1244

LBB2_1245:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1246:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1246
	JMP  LBB2_1451

LBB2_268:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_270
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_744
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_744

LBB2_270:
	WORD $0xd231 // xor    edx, edx

LBB2_1251:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1253

LBB2_1252:
	WORD $0x280f; BYTE $0xc8       // movaps    xmm1, xmm0
	LONG $0x0c5c0ff3; BYTE $0x91   // subss    xmm1, dword [rcx + 4*rdx]
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1252

LBB2_1253:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_1254:
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x0c5c0ff3; BYTE $0x91               // subss    xmm1, dword [rcx + 4*rdx]
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0491             // subss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0891             // subss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0c91             // subss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1254
	JMP  LBB2_1451

LBB2_271:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_273
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_747
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_747

LBB2_273:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1259:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1261
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1261:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1451

LBB2_1262:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1262
	JMP  LBB2_1451

LBB2_274:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_276
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_750
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_750

LBB2_276:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1267:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1270
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1269:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1269

LBB2_1270:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB2_1451
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1272:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1272
	JMP  LBB2_1451

LBB2_277:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_279
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_753
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_753

LBB2_279:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1277:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1279
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1279:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1451

LBB2_1280:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1280
	JMP  LBB2_1451

LBB2_280:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_282
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_756
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_756

LBB2_282:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1285:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1288
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1287:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1287

LBB2_1288:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB2_1451
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1290:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1290
	JMP  LBB2_1451

LBB2_283:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_285
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_759
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_759

LBB2_285:
	WORD $0xf631 // xor    esi, esi

LBB2_1295:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1297

LBB2_1296:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1296

LBB2_1297:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1298:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1298
	JMP  LBB2_1451

LBB2_286:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_288
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_762
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_762

LBB2_288:
	WORD $0xd231 // xor    edx, edx

LBB2_1303:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1305

LBB2_1304:
	LONG $0x0c100ff3; BYTE $0x91   // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8580ff3               // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1304

LBB2_1305:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_1306:
	LONG $0x0c100ff3; BYTE $0x91               // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c100ff3; WORD $0x0491             // movss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x0891             // movss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c91             // movss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1306
	JMP  LBB2_1451

LBB2_289:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_291
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_765
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_765

LBB2_291:
	WORD $0xf631 // xor    esi, esi

LBB2_1311:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1313

LBB2_1312:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1312

LBB2_1313:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1314:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1314
	JMP  LBB2_1451

LBB2_292:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_294
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_768
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_768

LBB2_294:
	WORD $0xd231 // xor    edx, edx

LBB2_1319:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1321

LBB2_1320:
	LONG $0x0c100ff3; BYTE $0x91   // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8580ff3               // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1320

LBB2_1321:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_1322:
	LONG $0x0c100ff3; BYTE $0x91               // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c100ff3; WORD $0x0491             // movss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x0891             // movss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c91             // movss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1322
	JMP  LBB2_1451

LBB2_295:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB2_539
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_541

LBB2_298:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_300
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_771
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_771

LBB2_300:
	WORD $0xd231 // xor    edx, edx

LBB2_1327:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1329

LBB2_1328:
	LONG $0x0c100ff3; BYTE $0x91   // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8590ff3               // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1328

LBB2_1329:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_1330:
	LONG $0x0c100ff3; BYTE $0x91               // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c100ff3; WORD $0x0491             // movss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x0891             // movss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c91             // movss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1330
	JMP  LBB2_1451

LBB2_301:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB2_547
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_549

LBB2_304:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_306
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_774
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_774

LBB2_306:
	WORD $0xd231 // xor    edx, edx

LBB2_1335:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1337

LBB2_1336:
	LONG $0x0c100ff3; BYTE $0x91   // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8590ff3               // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1336

LBB2_1337:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1451

LBB2_1338:
	LONG $0x0c100ff3; BYTE $0x91               // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c100ff3; WORD $0x0491             // movss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x0891             // movss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c91             // movss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1338
	JMP  LBB2_1451

LBB2_307:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8a44; BYTE $0x1a // mov    r11b, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_309
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_777
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_777

LBB2_309:
	WORD $0xf631 // xor    esi, esi

LBB2_1343:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1345

LBB2_1344:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1344

LBB2_1345:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1346:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1346
	JMP  LBB2_1451

LBB2_310:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8a44; BYTE $0x1a // mov    r11b, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_312
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_780
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_780

LBB2_312:
	WORD $0xf631 // xor    esi, esi

LBB2_1351:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1353

LBB2_1352:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1352

LBB2_1353:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1354:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1354
	JMP  LBB2_1451

LBB2_313:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_315
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_783
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_783

LBB2_315:
	WORD $0xc931 // xor    ecx, ecx

LBB2_889:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_891

LBB2_890:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_890

LBB2_891:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_1451

LBB2_892:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_892
	JMP  LBB2_1451

LBB2_316:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_318
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_785
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_785

LBB2_318:
	WORD $0xc931 // xor    ecx, ecx

LBB2_899:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_901

LBB2_900:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_900

LBB2_901:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_1451

LBB2_902:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_902
	JMP  LBB2_1451

LBB2_319:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028a             // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_321
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_787
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_787

LBB2_321:
	WORD $0xf631 // xor    esi, esi

LBB2_1359:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1361

LBB2_1360:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1360

LBB2_1361:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1362:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1362
	JMP  LBB2_1451

LBB2_322:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028a             // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_324
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_790
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_790

LBB2_324:
	WORD $0xf631 // xor    esi, esi

LBB2_1367:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1369

LBB2_1368:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1368

LBB2_1369:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1370:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1370
	JMP  LBB2_1451

LBB2_325:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_327
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_793
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_793

LBB2_327:
	WORD $0xff31 // xor    edi, edi

LBB2_1375:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1377

LBB2_1376:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1376

LBB2_1377:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1378:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1378
	JMP  LBB2_1451

LBB2_328:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_330
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_796
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_796

LBB2_330:
	WORD $0xff31 // xor    edi, edi

LBB2_1383:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1385

LBB2_1384:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1384

LBB2_1385:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1386:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1386
	JMP  LBB2_1451

LBB2_331:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_333
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_799
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_799

LBB2_333:
	WORD $0xf631 // xor    esi, esi

LBB2_1391:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1393

LBB2_1392:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1392

LBB2_1393:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1394:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1394
	JMP  LBB2_1451

LBB2_334:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_336
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_802
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_802

LBB2_336:
	WORD $0xf631 // xor    esi, esi

LBB2_1399:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1401

LBB2_1400:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1400

LBB2_1401:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1451

LBB2_1402:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1402
	JMP  LBB2_1451

LBB2_337:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_339
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_805
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_805

LBB2_339:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1407:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1409
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1409:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1451

LBB2_1410:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1410
	JMP  LBB2_1451

LBB2_340:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_342
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_808
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_808

LBB2_342:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1415:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1417
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1417:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1451

LBB2_1418:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1418
	JMP  LBB2_1451

LBB2_343:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_345
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_811
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_811

LBB2_345:
	WORD $0xf631 // xor    esi, esi

LBB2_1423:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1425

LBB2_1424:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1424

LBB2_1425:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1426:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1426
	JMP  LBB2_1451

LBB2_346:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_348
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_814
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_814

LBB2_348:
	WORD $0xf631 // xor    esi, esi

LBB2_1431:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1433

LBB2_1432:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1432

LBB2_1433:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1434:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1434
	JMP  LBB2_1451

LBB2_349:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_351
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_817
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_817

LBB2_351:
	WORD $0xf631 // xor    esi, esi

LBB2_1439:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1441

LBB2_1440:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1440

LBB2_1441:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1442:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1442
	JMP  LBB2_1451

LBB2_352:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1451
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_354
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_820
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_820

LBB2_354:
	WORD $0xf631 // xor    esi, esi

LBB2_1447:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1449

LBB2_1448:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1448

LBB2_1449:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1451

LBB2_1450:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1450
	JMP  LBB2_1451

LBB2_445:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB2_446:
	LONG $0xf9148b48             // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8148949             // mov    qword [r8 + 8*rdi], rdx
	LONG $0xf9548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rdi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rdx
	LONG $0xf9548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rdi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rdx
	LONG $0xf9548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rdi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rdx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB2_446

LBB2_447:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_1451
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB2_449:
	LONG $0xf9148b48         // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48         // imul    rdx, rax
	LONG $0xfe148948         // mov    qword [rsi + 8*rdi], rdx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB2_449
	JMP  LBB2_1451

LBB2_450:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB2_451:
	LONG $0xf9148b48             // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8148949             // mov    qword [r8 + 8*rdi], rdx
	LONG $0xf9548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rdi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rdx
	LONG $0xf9548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rdi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rdx
	LONG $0xf9548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rdi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rdx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB2_451

LBB2_452:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_1451
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB2_454:
	LONG $0xf9148b48         // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48         // imul    rdx, rax
	LONG $0xfe148948         // mov    qword [rsi + 8*rdi], rdx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB2_454
	JMP  LBB2_1451

LBB2_539:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB2_540:
	LONG $0xf9148b48             // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8148949             // mov    qword [r8 + 8*rdi], rdx
	LONG $0xf9548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rdi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rdx
	LONG $0xf9548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rdi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rdx
	LONG $0xf9548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rdi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rdx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB2_540

LBB2_541:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_1451
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB2_543:
	LONG $0xf9148b48         // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48         // imul    rdx, rax
	LONG $0xfe148948         // mov    qword [rsi + 8*rdi], rdx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB2_543
	JMP  LBB2_1451

LBB2_547:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB2_548:
	LONG $0xf9148b48             // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8148949             // mov    qword [r8 + 8*rdi], rdx
	LONG $0xf9548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rdi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rdx
	LONG $0xf9548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rdi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rdx
	LONG $0xf9548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rdi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rdx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB2_548

LBB2_549:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_1451
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB2_551:
	LONG $0xf9148b48         // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48         // imul    rdx, rax
	LONG $0xfe148948         // mov    qword [rsi + 8*rdi], rdx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB2_551

LBB2_1451:
	RET

LBB2_603:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x6e0f4166; BYTE $0xc3 // movd    xmm0, r11d
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_903
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_605:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb85c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_605
	JMP  LBB2_904

LBB2_606:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x6e0f4166; BYTE $0xc3 // movd    xmm0, r11d
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_911
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_608:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb85c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_608
	JMP  LBB2_912

LBB2_609:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB2_823
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_825

LBB2_611:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB2_833
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_835

LBB2_613:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_919
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_615:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_615
	JMP  LBB2_920

LBB2_616:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_927
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_618:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_618
	JMP  LBB2_928

LBB2_619:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_935
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_621:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_621
	JMP  LBB2_936

LBB2_622:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_943
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_624:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_624
	JMP  LBB2_944

LBB2_625:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_951
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_627:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xd1280f66                           // movapd    xmm2, xmm1
	LONG $0xd35c0f66                           // subpd    xmm2, xmm3
	LONG $0x110f4166; WORD $0xf824             // movupd    oword [r8 + 8*rdi], xmm4
	LONG $0x110f4166; WORD $0xf854; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xd1280f66                           // movapd    xmm2, xmm1
	LONG $0xd35c0f66                           // subpd    xmm2, xmm3
	LONG $0x110f4166; WORD $0xf864; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm4
	LONG $0x110f4166; WORD $0xf854; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_627
	JMP  LBB2_952

LBB2_628:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_959
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_630:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xd1280f66                           // movapd    xmm2, xmm1
	LONG $0xd35c0f66                           // subpd    xmm2, xmm3
	LONG $0x110f4166; WORD $0xf824             // movupd    oword [r8 + 8*rdi], xmm4
	LONG $0x110f4166; WORD $0xf854; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xd1280f66                           // movapd    xmm2, xmm1
	LONG $0xd35c0f66                           // subpd    xmm2, xmm3
	LONG $0x110f4166; WORD $0xf864; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm4
	LONG $0x110f4166; WORD $0xf854; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_630
	JMP  LBB2_960

LBB2_631:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_967
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_633:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_633
	JMP  LBB2_968

LBB2_634:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_975
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_636:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_636
	JMP  LBB2_976

LBB2_637:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_983
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_639:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_639
	JMP  LBB2_984

LBB2_640:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_991
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_642:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_642
	JMP  LBB2_992

LBB2_643:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_999
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_645:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_645
	JMP  LBB2_1000

LBB2_646:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1007
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_648:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_648
	JMP  LBB2_1008

LBB2_649:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xd3b60f41             // movzx    edx, r11b
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1015
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_651:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x385c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_651
	JMP  LBB2_1016

LBB2_652:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xd3b60f41             // movzx    edx, r11b
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1023
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_654:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x385c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_654
	JMP  LBB2_1024

LBB2_655:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1031
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x2045 // movdqa    xmm8, oword 32[rbp] /* [rip + .LCPI2_2] */

LBB2_657:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_657
	JMP  LBB2_1032

LBB2_658:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1039
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x2045 // movdqa    xmm8, oword 32[rbp] /* [rip + .LCPI2_2] */

LBB2_660:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_660
	JMP  LBB2_1040

LBB2_661:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xd0     // movzx    edx, al
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1047
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_663:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_663
	JMP  LBB2_1048

LBB2_664:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xd0     // movzx    edx, al
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1055
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_666:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_666
	JMP  LBB2_1056

LBB2_667:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc2     // movzx    eax, dl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1063
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB2_669:
	LONG $0x2c6f0ff3; BYTE $0x01               // movdqu    xmm5, oword [rcx + rax]
	LONG $0x746f0ff3; WORD $0x1001             // movdqu    xmm6, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2001             // movdqu    xmm5, oword [rcx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3001             // movdqu    xmm6, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_669
	JMP  LBB2_1064

LBB2_670:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc2     // movzx    eax, dl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1071
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB2_672:
	LONG $0x2c6f0ff3; BYTE $0x01               // movdqu    xmm5, oword [rcx + rax]
	LONG $0x746f0ff3; WORD $0x1001             // movdqu    xmm6, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2001             // movdqu    xmm5, oword [rcx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3001             // movdqu    xmm6, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_672
	JMP  LBB2_1072

LBB2_673:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4966; BYTE $0xc3 // movq    xmm0, r11
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1079
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_675:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf85c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_675
	JMP  LBB2_1080

LBB2_676:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4966; BYTE $0xc3 // movq    xmm0, r11
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1087
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_678:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf85c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_678
	JMP  LBB2_1088

LBB2_679:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB2_843
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_845

LBB2_681:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB2_853
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_855

LBB2_683:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1095
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_685:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_685
	JMP  LBB2_1096

LBB2_686:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1103
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_688:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_688
	JMP  LBB2_1104

LBB2_689:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1111
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_691:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x785c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_691
	JMP  LBB2_1112

LBB2_692:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1119
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_694:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x785c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_694
	JMP  LBB2_1120

LBB2_695:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1127
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_697:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x785c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_697
	JMP  LBB2_1128

LBB2_698:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1135
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_700:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x785c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_700
	JMP  LBB2_1136

LBB2_701:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB2_863
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_865

LBB2_703:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1143
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_705:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_705
	JMP  LBB2_1144

LBB2_706:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB2_873
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_875

LBB2_708:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1151
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_710:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_710
	JMP  LBB2_1152

LBB2_711:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1159
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_713:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_713
	JMP  LBB2_1160

LBB2_714:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1167
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_716:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_716
	JMP  LBB2_1168

LBB2_717:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1175
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_719:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_719
	JMP  LBB2_1176

LBB2_720:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1183
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_722:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_722
	JMP  LBB2_1184

LBB2_723:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1191
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_725:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_725
	JMP  LBB2_1192

LBB2_726:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1199
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_728:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_728
	JMP  LBB2_1200

LBB2_729:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1207
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_731:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_731
	JMP  LBB2_1208

LBB2_732:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1215
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_734:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_734
	JMP  LBB2_1216

LBB2_735:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4966; BYTE $0xc3 // movq    xmm0, r11
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1223
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_737:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf85c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_737
	JMP  LBB2_1224

LBB2_738:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1231
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_740:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd3       // subps    xmm2, xmm3
	LONG $0x24110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm4
	LONG $0x54110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm2
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd3       // subps    xmm2, xmm3
	LONG $0x64110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm4
	LONG $0x54110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_740
	JMP  LBB2_1232

LBB2_741:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4966; BYTE $0xc3 // movq    xmm0, r11
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1239
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_743:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf85c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_743
	JMP  LBB2_1240

LBB2_744:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1247
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_746:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd3       // subps    xmm2, xmm3
	LONG $0x24110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm4
	LONG $0x54110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm2
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd3       // subps    xmm2, xmm3
	LONG $0x64110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm4
	LONG $0x54110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_746
	JMP  LBB2_1248

LBB2_747:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1255
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB2_749:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_749
	JMP  LBB2_1256

LBB2_750:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1263
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_752:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_752
	JMP  LBB2_1264

LBB2_753:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1273
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB2_755:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_755
	JMP  LBB2_1274

LBB2_756:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1281
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_758:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_758
	JMP  LBB2_1282

LBB2_759:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1291
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_761:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_761
	JMP  LBB2_1292

LBB2_762:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1299
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_764:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_764
	JMP  LBB2_1300

LBB2_765:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1307
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_767:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_767
	JMP  LBB2_1308

LBB2_768:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1315
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_770:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_770
	JMP  LBB2_1316

LBB2_771:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1323
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_773:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_773
	JMP  LBB2_1324

LBB2_774:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1331
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_776:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_776
	JMP  LBB2_1332

LBB2_777:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xd3b60f41             // movzx    edx, r11b
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1339
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_779:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x385c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_779
	JMP  LBB2_1340

LBB2_780:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xd3b60f41             // movzx    edx, r11b
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1347
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_782:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x385c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_782
	JMP  LBB2_1348

LBB2_783:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB2_883
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_885

LBB2_785:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB2_893
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_895

LBB2_787:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xd0     // movzx    edx, al
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1355
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_789:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_789
	JMP  LBB2_1356

LBB2_790:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xd0     // movzx    edx, al
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1363
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_792:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_792
	JMP  LBB2_1364

LBB2_793:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc2     // movzx    eax, dl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1371
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB2_795:
	LONG $0x2c6f0ff3; BYTE $0x01               // movdqu    xmm5, oword [rcx + rax]
	LONG $0x746f0ff3; WORD $0x1001             // movdqu    xmm6, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2001             // movdqu    xmm5, oword [rcx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3001             // movdqu    xmm6, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_795
	JMP  LBB2_1372

LBB2_796:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc2     // movzx    eax, dl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1379
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB2_798:
	LONG $0x2c6f0ff3; BYTE $0x01               // movdqu    xmm5, oword [rcx + rax]
	LONG $0x746f0ff3; WORD $0x1001             // movdqu    xmm6, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2001             // movdqu    xmm5, oword [rcx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3001             // movdqu    xmm6, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_798
	JMP  LBB2_1380

LBB2_799:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x6e0f4166; BYTE $0xc3 // movd    xmm0, r11d
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1387
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_801:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb85c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_801
	JMP  LBB2_1388

LBB2_802:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x6e0f4166; BYTE $0xc3 // movd    xmm0, r11d
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1395
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_804:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb85c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_804
	JMP  LBB2_1396

LBB2_805:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1403
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_807:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_807
	JMP  LBB2_1404

LBB2_808:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1411
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_810:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_810
	JMP  LBB2_1412

LBB2_811:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1419
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_813:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_813
	JMP  LBB2_1420

LBB2_814:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1427
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_816:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_816
	JMP  LBB2_1428

LBB2_817:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1435
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_819:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_819
	JMP  LBB2_1436

LBB2_820:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1443
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_822:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_822
	JMP  LBB2_1444

LBB2_823:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_824:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_824

LBB2_825:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_828
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_827:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_827

LBB2_828:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_829

LBB2_833:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_834:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_834

LBB2_835:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_838
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_837:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_837

LBB2_838:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_839

LBB2_843:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_844:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_844

LBB2_845:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_848
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_847:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_847

LBB2_848:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_849

LBB2_853:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_854:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_854

LBB2_855:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_858
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_857:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_857

LBB2_858:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_859

LBB2_863:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_864:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_864

LBB2_865:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_868
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_867:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_867

LBB2_868:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_869

LBB2_873:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_874:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_874

LBB2_875:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_878
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_877:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_877

LBB2_878:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_879

LBB2_883:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_884:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB2_884

LBB2_885:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB2_888
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB2_887:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB2_887

LBB2_888:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_889

LBB2_893:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_894:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB2_894

LBB2_895:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB2_898
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB2_897:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB2_897

LBB2_898:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_899

LBB2_903:
	WORD $0xff31 // xor    edi, edi

LBB2_904:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_906
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB2_906:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_907

LBB2_911:
	WORD $0xff31 // xor    edi, edi

LBB2_912:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_914
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB2_914:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_915

LBB2_919:
	WORD $0xff31 // xor    edi, edi

LBB2_920:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_922
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_922:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_923

LBB2_927:
	WORD $0xff31 // xor    edi, edi

LBB2_928:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_930
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_930:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_931

LBB2_935:
	WORD $0xff31 // xor    edi, edi

LBB2_936:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_938
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_938:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_939

LBB2_943:
	WORD $0xff31 // xor    edi, edi

LBB2_944:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_946
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_946:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_947

LBB2_951:
	WORD $0xff31 // xor    edi, edi

LBB2_952:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_954
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xcb5c0f66                           // subpd    xmm1, xmm3
	LONG $0x110f4166; WORD $0xf824             // movupd    oword [r8 + 8*rdi], xmm4
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1

LBB2_954:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_955

LBB2_959:
	WORD $0xff31 // xor    edi, edi

LBB2_960:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_962
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xcb5c0f66                           // subpd    xmm1, xmm3
	LONG $0x110f4166; WORD $0xf824             // movupd    oword [r8 + 8*rdi], xmm4
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1

LBB2_962:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_963

LBB2_967:
	WORD $0xff31 // xor    edi, edi

LBB2_968:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_970
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB2_970:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_971

LBB2_975:
	WORD $0xff31 // xor    edi, edi

LBB2_976:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_978
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB2_978:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_979

LBB2_983:
	WORD $0xff31 // xor    edi, edi

LBB2_984:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_986
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB2_986:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_987

LBB2_991:
	WORD $0xff31 // xor    edi, edi

LBB2_992:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_994
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB2_994:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_995

LBB2_999:
	WORD $0xff31 // xor    edi, edi

LBB2_1000:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1002
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB2_1002:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_1003

LBB2_1007:
	WORD $0xff31 // xor    edi, edi

LBB2_1008:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1010
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB2_1010:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_1011

LBB2_1015:
	WORD $0xff31 // xor    edi, edi

LBB2_1016:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1018
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB2_1018:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1019

LBB2_1023:
	WORD $0xff31 // xor    edi, edi

LBB2_1024:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1026
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB2_1026:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1027

LBB2_1031:
	WORD $0xf631 // xor    esi, esi

LBB2_1032:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1034
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, oword 32[rbp] /* [rip + .LCPI2_2] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB2_1034:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_1035

LBB2_1039:
	WORD $0xf631 // xor    esi, esi

LBB2_1040:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1042
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, oword 32[rbp] /* [rip + .LCPI2_2] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB2_1042:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_1043

LBB2_1047:
	WORD $0xff31 // xor    edi, edi

LBB2_1048:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1050
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1050:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1051

LBB2_1055:
	WORD $0xff31 // xor    edi, edi

LBB2_1056:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1058
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1058:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1059

LBB2_1063:
	WORD $0xc031 // xor    eax, eax

LBB2_1064:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1066
	LONG $0x146f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rcx + rax]
	LONG $0x5c6f0ff3; WORD $0x1001             // movdqu    xmm3, oword [rcx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB2_1066:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1451
	JMP  LBB2_1067

LBB2_1071:
	WORD $0xc031 // xor    eax, eax

LBB2_1072:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1074
	LONG $0x146f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rcx + rax]
	LONG $0x5c6f0ff3; WORD $0x1001             // movdqu    xmm3, oword [rcx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB2_1074:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1451
	JMP  LBB2_1075

LBB2_1079:
	WORD $0xff31 // xor    edi, edi

LBB2_1080:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1082
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB2_1082:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1083

LBB2_1087:
	WORD $0xff31 // xor    edi, edi

LBB2_1088:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1090
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB2_1090:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1091

LBB2_1095:
	WORD $0xff31 // xor    edi, edi

LBB2_1096:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1098
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1098:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1099

LBB2_1103:
	WORD $0xff31 // xor    edi, edi

LBB2_1104:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1106
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1106:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1107

LBB2_1111:
	WORD $0xff31 // xor    edi, edi

LBB2_1112:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1114
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB2_1114:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1115

LBB2_1119:
	WORD $0xff31 // xor    edi, edi

LBB2_1120:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1122
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB2_1122:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1123

LBB2_1127:
	WORD $0xff31 // xor    edi, edi

LBB2_1128:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1130
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB2_1130:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1131

LBB2_1135:
	WORD $0xff31 // xor    edi, edi

LBB2_1136:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1138
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB2_1138:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1139

LBB2_1143:
	WORD $0xf631 // xor    esi, esi

LBB2_1144:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1146
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB2_1146:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1451
	JMP  LBB2_1147

LBB2_1151:
	WORD $0xf631 // xor    esi, esi

LBB2_1152:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1154
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB2_1154:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1451
	JMP  LBB2_1155

LBB2_1159:
	WORD $0xff31 // xor    edi, edi

LBB2_1160:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1162
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1162:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1163

LBB2_1167:
	WORD $0xff31 // xor    edi, edi

LBB2_1168:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1170
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1170:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1171

LBB2_1175:
	WORD $0xff31 // xor    edi, edi

LBB2_1176:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1178
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1178:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1179

LBB2_1183:
	WORD $0xff31 // xor    edi, edi

LBB2_1184:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1186
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1186:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1187

LBB2_1191:
	WORD $0xff31 // xor    edi, edi

LBB2_1192:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1194
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1194:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1195

LBB2_1199:
	WORD $0xff31 // xor    edi, edi

LBB2_1200:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1202
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1202:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1203

LBB2_1207:
	WORD $0xff31 // xor    edi, edi

LBB2_1208:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1210
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1210:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1211

LBB2_1215:
	WORD $0xff31 // xor    edi, edi

LBB2_1216:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1218
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1218:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1219

LBB2_1223:
	WORD $0xff31 // xor    edi, edi

LBB2_1224:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1226
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB2_1226:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1227

LBB2_1231:
	WORD $0xff31 // xor    edi, edi

LBB2_1232:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1234
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x5c0f; BYTE $0xcb       // subps    xmm1, xmm3
	LONG $0x24110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm4
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1

LBB2_1234:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_1235

LBB2_1239:
	WORD $0xff31 // xor    edi, edi

LBB2_1240:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1242
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB2_1242:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1243

LBB2_1247:
	WORD $0xff31 // xor    edi, edi

LBB2_1248:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1250
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x5c0f; BYTE $0xcb       // subps    xmm1, xmm3
	LONG $0x24110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm4
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1

LBB2_1250:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_1251

LBB2_1255:
	WORD $0xf631 // xor    esi, esi

LBB2_1256:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1258
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB2_1258:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1451
	JMP  LBB2_1259

LBB2_1263:
	WORD $0xff31 // xor    edi, edi

LBB2_1264:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1266
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI2_1] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1266:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_1267

LBB2_1273:
	WORD $0xf631 // xor    esi, esi

LBB2_1274:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1276
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB2_1276:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1451
	JMP  LBB2_1277

LBB2_1281:
	WORD $0xff31 // xor    edi, edi

LBB2_1282:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1284
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI2_1] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1284:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1451
	JMP  LBB2_1285

LBB2_1291:
	WORD $0xff31 // xor    edi, edi

LBB2_1292:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1294
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1294:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1295

LBB2_1299:
	WORD $0xff31 // xor    edi, edi

LBB2_1300:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1302
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB2_1302:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_1303

LBB2_1307:
	WORD $0xff31 // xor    edi, edi

LBB2_1308:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1310
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1310:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1311

LBB2_1315:
	WORD $0xff31 // xor    edi, edi

LBB2_1316:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1318
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB2_1318:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_1319

LBB2_1323:
	WORD $0xff31 // xor    edi, edi

LBB2_1324:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1326
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB2_1326:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_1327

LBB2_1331:
	WORD $0xff31 // xor    edi, edi

LBB2_1332:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1334
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB2_1334:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1451
	JMP  LBB2_1335

LBB2_1339:
	WORD $0xff31 // xor    edi, edi

LBB2_1340:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1342
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB2_1342:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1343

LBB2_1347:
	WORD $0xff31 // xor    edi, edi

LBB2_1348:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1350
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB2_1350:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1351

LBB2_1355:
	WORD $0xff31 // xor    edi, edi

LBB2_1356:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1358
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1358:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1359

LBB2_1363:
	WORD $0xff31 // xor    edi, edi

LBB2_1364:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1366
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1366:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1367

LBB2_1371:
	WORD $0xc031 // xor    eax, eax

LBB2_1372:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1374
	LONG $0x146f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rcx + rax]
	LONG $0x5c6f0ff3; WORD $0x1001             // movdqu    xmm3, oword [rcx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB2_1374:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1451
	JMP  LBB2_1375

LBB2_1379:
	WORD $0xc031 // xor    eax, eax

LBB2_1380:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1382
	LONG $0x146f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rcx + rax]
	LONG $0x5c6f0ff3; WORD $0x1001             // movdqu    xmm3, oword [rcx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB2_1382:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1451
	JMP  LBB2_1383

LBB2_1387:
	WORD $0xff31 // xor    edi, edi

LBB2_1388:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1390
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB2_1390:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1391

LBB2_1395:
	WORD $0xff31 // xor    edi, edi

LBB2_1396:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1398
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB2_1398:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1399

LBB2_1403:
	WORD $0xff31 // xor    edi, edi

LBB2_1404:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1406
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1406:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1451
	JMP  LBB2_1407

LBB2_1411:
	WORD $0xff31 // xor    edi, edi

LBB2_1412:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1414
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1414:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1451
	JMP  LBB2_1415

LBB2_1419:
	WORD $0xff31 // xor    edi, edi

LBB2_1420:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1422
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1422:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1423

LBB2_1427:
	WORD $0xff31 // xor    edi, edi

LBB2_1428:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1430
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1430:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1431

LBB2_1435:
	WORD $0xff31 // xor    edi, edi

LBB2_1436:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1438
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1438:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1439

LBB2_1443:
	WORD $0xff31 // xor    edi, edi

LBB2_1444:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1446
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1446:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1451
	JMP  LBB2_1447
