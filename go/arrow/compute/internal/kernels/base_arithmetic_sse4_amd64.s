//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x008(SB)/8, $0x8000000000000000
DATA LCDATA1<>+0x010(SB)/8, $0x8000000080000000
DATA LCDATA1<>+0x018(SB)/8, $0x8000000080000000
DATA LCDATA1<>+0x020(SB)/8, $0x7fffffffffffffff
DATA LCDATA1<>+0x028(SB)/8, $0x7fffffffffffffff
DATA LCDATA1<>+0x030(SB)/8, $0x7fffffff7fffffff
DATA LCDATA1<>+0x038(SB)/8, $0x7fffffff7fffffff
DATA LCDATA1<>+0x040(SB)/8, $0x000000ff000000ff
DATA LCDATA1<>+0x048(SB)/8, $0x000000ff000000ff
DATA LCDATA1<>+0x050(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x058(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA1<>(SB), 8, $96

TEXT Â·_arithmetic_sse4(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA1<>(SB), BP

	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB0_13
	LONG $0x01fe8040         // cmp    sil, 1
	JLE  LBB0_25
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB0_53
	LONG $0x04fe8040         // cmp    sil, 4
	JE   LBB0_65
	LONG $0x05fe8040         // cmp    sil, 5
	JNE  LBB0_1751
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_117
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_211
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_351
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_354
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_12
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1083
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1083

LBB0_12:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1519:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1521

LBB0_1520:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1520

LBB0_1521:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1522:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1522
	JMP  LBB0_1751

LBB0_13:
	LONG $0x08fe8040         // cmp    sil, 8
	JLE  LBB0_39
	LONG $0x09fe8040         // cmp    sil, 9
	JE   LBB0_73
	LONG $0x0bfe8040         // cmp    sil, 11
	JE   LBB0_85
	LONG $0x0cfe8040         // cmp    sil, 12
	JNE  LBB0_1751
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_124
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_216
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_357
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_360
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_670
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB0_1092

LBB0_25:
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB0_93
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB0_1751
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_131
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_221
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_363
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_370
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_672
	WORD $0xf631             // xor    esi, esi

LBB0_35:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_37

LBB0_36:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_36

LBB0_37:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_38:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_38
	JMP  LBB0_1751

LBB0_39:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB0_105
	LONG $0x08fe8040         // cmp    sil, 8
	JNE  LBB0_1751
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_142
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_230
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_377
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_384
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_677
	WORD $0xf631             // xor    esi, esi

LBB0_49:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_51

LBB0_50:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_50

LBB0_51:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_52:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_52
	JMP  LBB0_1751

LBB0_53:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_153
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_239
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_391
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_398
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_682
	WORD $0xf631             // xor    esi, esi

LBB0_61:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_63

LBB0_62:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f         // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_62

LBB0_63:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_64:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_64
	JMP  LBB0_1751

LBB0_65:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_164
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_248
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_405
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_408
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_72
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1093
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1093

LBB0_72:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1217:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1219

LBB0_1218:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_1218

LBB0_1219:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_1220:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1220
	JMP  LBB0_1751

LBB0_73:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_171
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_253
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_411
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_418
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_690
	WORD $0xf631             // xor    esi, esi

LBB0_81:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_83

LBB0_82:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f         // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_82

LBB0_83:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_84:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_84
	JMP  LBB0_1751

LBB0_85:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_182
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_262
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_425
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_428
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_92
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1095
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1095

LBB0_92:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1227:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1229

LBB0_1228:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_1228

LBB0_1229:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_1230:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1230
	JMP  LBB0_1751

LBB0_93:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_189
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_267
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_431
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_438
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_698
	WORD $0xf631             // xor    esi, esi

LBB0_101:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_103

LBB0_102:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2 // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_102

LBB0_103:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_104:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_104
	JMP  LBB0_1751

LBB0_105:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB0_200
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB0_276
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB0_445
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB0_452
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_703
	WORD $0xf631             // xor    esi, esi

LBB0_113:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_115

LBB0_114:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2 // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_114

LBB0_115:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_116:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_116
	JMP  LBB0_1751

LBB0_117:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_285
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_459
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_462
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_123
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1097
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1097

LBB0_123:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1527:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1530
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_1529:
	LONG $0x0c7e0ff3; BYTE $0xca   // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_1529

LBB0_1530:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB0_1751
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_1532:
	LONG $0x0c7e0ff3; BYTE $0xca               // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c             // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7e0ff3; WORD $0x08ca             // movq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x08 // movq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7e0ff3; WORD $0x10ca             // movq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x10 // movq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7e0ff3; WORD $0x18ca             // movq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x18 // movq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1532
	JMP  LBB0_1751

LBB0_124:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_290
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_465
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_468
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_130
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1100
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1100

LBB0_130:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1537:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1540
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_1539:
	LONG $0x0c7e0ff3; BYTE $0xca   // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_1539

LBB0_1540:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB0_1751
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_1542:
	LONG $0x0c7e0ff3; BYTE $0xca               // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c             // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7e0ff3; WORD $0x08ca             // movq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x08 // movq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7e0ff3; WORD $0x10ca             // movq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x10 // movq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7e0ff3; WORD $0x18ca             // movq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x18 // movq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1542
	JMP  LBB0_1751

LBB0_131:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_295
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_471
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_478
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_714
	WORD $0xf631             // xor    esi, esi

LBB0_138:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_140

LBB0_139:
	LONG $0x04100ff2; BYTE $0xf2   // movsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045c0ff2; BYTE $0xf1   // subsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_139

LBB0_140:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_141:
	LONG $0x04100ff2; BYTE $0xf2               // movsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045c0ff2; BYTE $0xf1               // subsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f2             // movsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445c0ff2; WORD $0x08f1             // subsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f2             // movsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445c0ff2; WORD $0x10f1             // subsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f2             // movsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445c0ff2; WORD $0x18f1             // subsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_141
	JMP  LBB0_1751

LBB0_142:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_304
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_485
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_492
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_719
	WORD $0xf631             // xor    esi, esi

LBB0_149:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_151

LBB0_150:
	LONG $0x04100ff2; BYTE $0xf2   // movsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045c0ff2; BYTE $0xf1   // subsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_150

LBB0_151:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_152:
	LONG $0x04100ff2; BYTE $0xf2               // movsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x045c0ff2; BYTE $0xf1               // subsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f2             // movsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x445c0ff2; WORD $0x08f1             // subsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f2             // movsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x445c0ff2; WORD $0x10f1             // subsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f2             // movsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x445c0ff2; WORD $0x18f1             // subsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_152
	JMP  LBB0_1751

LBB0_153:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_313
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_499
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_502
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_724
	WORD $0xf631             // xor    esi, esi

LBB0_160:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_162

LBB0_161:
	LONG $0x04100ff2; BYTE $0xf1   // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04590ff2; BYTE $0xf2   // mulsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_161

LBB0_162:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_163:
	LONG $0x04100ff2; BYTE $0xf1               // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04590ff2; BYTE $0xf2               // mulsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f1             // movsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x44590ff2; WORD $0x08f2             // mulsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f1             // movsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x44590ff2; WORD $0x10f2             // mulsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f1             // movsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x44590ff2; WORD $0x18f2             // mulsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_163
	JMP  LBB0_1751

LBB0_164:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_318
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_509
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_512
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_170
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1103
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1103

LBB0_170:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1547:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB0_1549

LBB0_1548:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_1548

LBB0_1549:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1550:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1550
	JMP  LBB0_1751

LBB0_171:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_323
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_515
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_518
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_732
	WORD $0xf631             // xor    esi, esi

LBB0_178:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_180

LBB0_179:
	LONG $0x04100ff2; BYTE $0xf1   // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04590ff2; BYTE $0xf2   // mulsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_179

LBB0_180:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_181:
	LONG $0x04100ff2; BYTE $0xf1               // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04590ff2; BYTE $0xf2               // mulsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f1             // movsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x44590ff2; WORD $0x08f2             // mulsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f1             // movsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x44590ff2; WORD $0x10f2             // mulsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f1             // movsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x44590ff2; WORD $0x18f2             // mulsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_181
	JMP  LBB0_1751

LBB0_182:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_328
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_525
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_528
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_188
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1106
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1106

LBB0_188:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1555:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB0_1557

LBB0_1556:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_1556

LBB0_1557:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1558:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1558
	JMP  LBB0_1751

LBB0_189:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_333
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_531
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_538
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_740
	WORD $0xf631             // xor    esi, esi

LBB0_196:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_198

LBB0_197:
	LONG $0x04100ff2; BYTE $0xf1   // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04580ff2; BYTE $0xf2   // addsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_197

LBB0_198:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_199:
	LONG $0x04100ff2; BYTE $0xf1               // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04580ff2; BYTE $0xf2               // addsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f1             // movsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x44580ff2; WORD $0x08f2             // addsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f1             // movsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x44580ff2; WORD $0x10f2             // addsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f1             // movsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x44580ff2; WORD $0x18f2             // addsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_199
	JMP  LBB0_1751

LBB0_200:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB0_342
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB0_545
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB0_552
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_745
	WORD $0xf631             // xor    esi, esi

LBB0_207:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_209

LBB0_208:
	LONG $0x04100ff2; BYTE $0xf1   // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04580ff2; BYTE $0xf2   // addsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004 // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_208

LBB0_209:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_210:
	LONG $0x04100ff2; BYTE $0xf1               // movsd    xmm0, qword [rcx + 8*rsi]
	LONG $0x04580ff2; BYTE $0xf2               // addsd    xmm0, qword [rdx + 8*rsi]
	LONG $0x110f41f2; WORD $0xf004             // movsd    qword [r8 + 8*rsi], xmm0
	LONG $0x44100ff2; WORD $0x08f1             // movsd    xmm0, qword [rcx + 8*rsi + 8]
	LONG $0x44580ff2; WORD $0x08f2             // addsd    xmm0, qword [rdx + 8*rsi + 8]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x08 // movsd    qword [r8 + 8*rsi + 8], xmm0
	LONG $0x44100ff2; WORD $0x10f1             // movsd    xmm0, qword [rcx + 8*rsi + 16]
	LONG $0x44580ff2; WORD $0x10f2             // addsd    xmm0, qword [rdx + 8*rsi + 16]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x10 // movsd    qword [r8 + 8*rsi + 16], xmm0
	LONG $0x44100ff2; WORD $0x18f1             // movsd    xmm0, qword [rcx + 8*rsi + 24]
	LONG $0x44580ff2; WORD $0x18f2             // addsd    xmm0, qword [rdx + 8*rsi + 24]
	LONG $0x110f41f2; WORD $0xf044; BYTE $0x18 // movsd    qword [r8 + 8*rsi + 24], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_210
	JMP  LBB0_1751

LBB0_211:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_559
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_215
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1109
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1109

LBB0_215:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1563:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1565

LBB0_1564:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1564

LBB0_1565:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1566:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1566
	JMP  LBB0_1751

LBB0_216:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_562
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_220
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1112
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1112

LBB0_220:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1571:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1573

LBB0_1572:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1572

LBB0_1573:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1574:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1574
	JMP  LBB0_1751

LBB0_221:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_565
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_756
	WORD $0xf631             // xor    esi, esi

LBB0_226:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_228

LBB0_227:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_227

LBB0_228:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_229:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_229
	JMP  LBB0_1751

LBB0_230:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_572
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_761
	WORD $0xf631             // xor    esi, esi

LBB0_235:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_237

LBB0_236:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_236

LBB0_237:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_238:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_238
	JMP  LBB0_1751

LBB0_239:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_579
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_766
	WORD $0xff31             // xor    edi, edi

LBB0_244:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_246

LBB0_245:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_245

LBB0_246:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_247:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_247
	JMP  LBB0_1751

LBB0_248:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_586
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_252
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1115
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1115

LBB0_252:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1579:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB0_1581
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB0_1581:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB0_1751

LBB0_1582:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1582
	JMP  LBB0_1751

LBB0_253:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_589
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_774
	WORD $0xff31             // xor    edi, edi

LBB0_258:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_260

LBB0_259:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_259

LBB0_260:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_261:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_261
	JMP  LBB0_1751

LBB0_262:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_596
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_266
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1118
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1118

LBB0_266:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1587:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB0_1589
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB0_1589:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB0_1751

LBB0_1590:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1590
	JMP  LBB0_1751

LBB0_267:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_599
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_782
	WORD $0xf631             // xor    esi, esi

LBB0_272:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_274

LBB0_273:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_273

LBB0_274:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_275:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_275
	JMP  LBB0_1751

LBB0_276:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB0_606
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_787
	WORD $0xf631             // xor    esi, esi

LBB0_281:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_283

LBB0_282:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_282

LBB0_283:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_284:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_284
	JMP  LBB0_1751

LBB0_285:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_613
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_289
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1121
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1121

LBB0_289:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1595:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1597

LBB0_1596:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1596

LBB0_1597:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1598:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1598
	JMP  LBB0_1751

LBB0_290:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_616
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_795
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB0_1130

LBB0_295:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_619
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_797
	WORD $0xf631             // xor    esi, esi

LBB0_300:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_302

LBB0_301:
	LONG $0xf2048b48 // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48 // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_301

LBB0_302:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_303:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_303
	JMP  LBB0_1751

LBB0_304:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_626
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_802
	WORD $0xf631             // xor    esi, esi

LBB0_309:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_311

LBB0_310:
	LONG $0xf2048b48 // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48 // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_310

LBB0_311:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_312:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_312
	JMP  LBB0_1751

LBB0_313:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_633
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB0_807
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_809

LBB0_318:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_640
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_322
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1131
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1131

LBB0_322:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1237:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1239

LBB0_1238:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB0_1238

LBB0_1239:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_1240:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1240
	JMP  LBB0_1751

LBB0_323:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_643
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB0_815
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_817

LBB0_328:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_650
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_332
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1133
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1133

LBB0_332:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1247:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1249

LBB0_1248:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB0_1248

LBB0_1249:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_1250:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1250
	JMP  LBB0_1751

LBB0_333:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_653
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_823
	WORD $0xf631             // xor    esi, esi

LBB0_338:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_340

LBB0_339:
	LONG $0xf1048b48 // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348 // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_339

LBB0_340:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_341:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_341
	JMP  LBB0_1751

LBB0_342:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB0_660
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB0_1751
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_828
	WORD $0xf631             // xor    esi, esi

LBB0_347:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_349

LBB0_348:
	LONG $0xf1048b48 // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348 // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_348

LBB0_349:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_350:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_350
	JMP  LBB0_1751

LBB0_351:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_353
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1135
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1135

LBB0_353:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1603:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1605

LBB0_1604:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_1604

LBB0_1605:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1606:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1606
	JMP  LBB0_1751

LBB0_354:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_356
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1138
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1138

LBB0_356:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1611:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1613

LBB0_1612:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_1612

LBB0_1613:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1614:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1614
	JMP  LBB0_1751

LBB0_357:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_839
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB0_1147

LBB0_360:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_362
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1148
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1148

LBB0_362:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1619:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1621

LBB0_1620:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_1620

LBB0_1621:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1622:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1622
	JMP  LBB0_1751

LBB0_363:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_844
	WORD $0xf631             // xor    esi, esi

LBB0_366:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_368

LBB0_367:
	LONG $0x7204b70f             // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66             // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_367

LBB0_368:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_369:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_369
	JMP  LBB0_1751

LBB0_370:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_849
	WORD $0xf631             // xor    esi, esi

LBB0_373:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_375

LBB0_374:
	LONG $0x7204b70f             // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66             // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_374

LBB0_375:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_376:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_376
	JMP  LBB0_1751

LBB0_377:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_854
	WORD $0xf631             // xor    esi, esi

LBB0_380:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_382

LBB0_381:
	LONG $0x7204b70f             // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66             // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_381

LBB0_382:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_383:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_383
	JMP  LBB0_1751

LBB0_384:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_859
	WORD $0xf631             // xor    esi, esi

LBB0_387:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_389

LBB0_388:
	LONG $0x7204b70f             // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66             // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_388

LBB0_389:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_390:
	LONG $0x7204b70f               // movzx    eax, word [rdx + 2*rsi]
	LONG $0x71042b66               // sub    ax, word [rcx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7244b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rsi + 2]
	LONG $0x71442b66; BYTE $0x02   // sub    ax, word [rcx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7244b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rsi + 4]
	LONG $0x71442b66; BYTE $0x04   // sub    ax, word [rcx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7244b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rsi + 6]
	LONG $0x71442b66; BYTE $0x06   // sub    ax, word [rcx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_390
	JMP  LBB0_1751

LBB0_391:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_864
	WORD $0xf631             // xor    esi, esi

LBB0_394:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_396

LBB0_395:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72 // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_395

LBB0_396:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_397:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_397
	JMP  LBB0_1751

LBB0_398:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_869
	WORD $0xf631             // xor    esi, esi

LBB0_401:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_403

LBB0_402:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72 // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_402

LBB0_403:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_404:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_404
	JMP  LBB0_1751

LBB0_405:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_407
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1151
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1151

LBB0_407:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1257:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1259

LBB0_1258:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_1258

LBB0_1259:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_1260:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB0_1260
	JMP  LBB0_1751

LBB0_408:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_410
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1153
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1153

LBB0_410:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1627:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB0_1629
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB0_1629:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1751

LBB0_1630:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1630
	JMP  LBB0_1751

LBB0_411:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_880
	WORD $0xf631             // xor    esi, esi

LBB0_414:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_416

LBB0_415:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72 // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_415

LBB0_416:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_417:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_417
	JMP  LBB0_1751

LBB0_418:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_885
	WORD $0xf631             // xor    esi, esi

LBB0_421:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_423

LBB0_422:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72 // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_422

LBB0_423:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_424:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x04af0f66; BYTE $0x72   // imul    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x44af0f66; WORD $0x0272 // imul    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x44af0f66; WORD $0x0472 // imul    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x44af0f66; WORD $0x0672 // imul    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_424
	JMP  LBB0_1751

LBB0_425:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB0_427
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1156
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1156

LBB0_427:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1267:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1269

LBB0_1268:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB0_1268

LBB0_1269:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_1270:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB0_1270
	JMP  LBB0_1751

LBB0_428:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_430
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1158
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1158

LBB0_430:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1635:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB0_1637
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB0_1637:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1751

LBB0_1638:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_1638
	JMP  LBB0_1751

LBB0_431:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_896
	WORD $0xf631             // xor    esi, esi

LBB0_434:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_436

LBB0_435:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366             // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_435

LBB0_436:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_437:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_437
	JMP  LBB0_1751

LBB0_438:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_901
	WORD $0xf631             // xor    esi, esi

LBB0_441:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_443

LBB0_442:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366             // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_442

LBB0_443:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_444:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_444
	JMP  LBB0_1751

LBB0_445:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_906
	WORD $0xf631             // xor    esi, esi

LBB0_448:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_450

LBB0_449:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366             // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_449

LBB0_450:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_451:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_451
	JMP  LBB0_1751

LBB0_452:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB0_911
	WORD $0xf631             // xor    esi, esi

LBB0_455:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_457

LBB0_456:
	LONG $0x7104b70f             // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366             // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70 // mov    word [r8 + 2*rsi], ax
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB0_456

LBB0_457:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_458:
	LONG $0x7104b70f               // movzx    eax, word [rcx + 2*rsi]
	LONG $0x72040366               // add    ax, word [rdx + 2*rsi]
	LONG $0x04894166; BYTE $0x70   // mov    word [r8 + 2*rsi], ax
	LONG $0x7144b70f; BYTE $0x02   // movzx    eax, word [rcx + 2*rsi + 2]
	LONG $0x72440366; BYTE $0x02   // add    ax, word [rdx + 2*rsi + 2]
	LONG $0x44894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], ax
	LONG $0x7144b70f; BYTE $0x04   // movzx    eax, word [rcx + 2*rsi + 4]
	LONG $0x72440366; BYTE $0x04   // add    ax, word [rdx + 2*rsi + 4]
	LONG $0x44894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], ax
	LONG $0x7144b70f; BYTE $0x06   // movzx    eax, word [rcx + 2*rsi + 6]
	LONG $0x72440366; BYTE $0x06   // add    ax, word [rdx + 2*rsi + 6]
	LONG $0x44894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], ax
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB0_458
	JMP  LBB0_1751

LBB0_459:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_461
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1161
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1161

LBB0_461:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1643:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1645

LBB0_1644:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1644

LBB0_1645:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1646:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1646
	JMP  LBB0_1751

LBB0_462:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_464
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1164
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1164

LBB0_464:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1651:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1654
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1653:
	LONG $0x0c6e0f66; BYTE $0x8a   // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_1653

LBB0_1654:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB0_1751
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1656:
	LONG $0x0c6e0f66; BYTE $0x8a               // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c             // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6e0f66; WORD $0x048a             // movd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x04 // movd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6e0f66; WORD $0x088a             // movd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x08 // movd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6e0f66; WORD $0x0c8a             // movd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x0c // movd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1656
	JMP  LBB0_1751

LBB0_465:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_467
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1167
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1167

LBB0_467:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1661:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1663

LBB0_1662:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_1662

LBB0_1663:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1664:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1664
	JMP  LBB0_1751

LBB0_468:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_470
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1170
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1170

LBB0_470:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1669:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1672
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1671:
	LONG $0x0c6e0f66; BYTE $0x8a   // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_1671

LBB0_1672:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB0_1751
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1674:
	LONG $0x0c6e0f66; BYTE $0x8a               // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c             // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6e0f66; WORD $0x048a             // movd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x04 // movd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6e0f66; WORD $0x088a             // movd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x08 // movd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6e0f66; WORD $0x0c8a             // movd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x0c // movd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1674
	JMP  LBB0_1751

LBB0_471:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_928
	WORD $0xf631             // xor    esi, esi

LBB0_474:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_476

LBB0_475:
	LONG $0xf2048b48 // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48 // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_475

LBB0_476:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_477:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_477
	JMP  LBB0_1751

LBB0_478:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_933
	WORD $0xf631             // xor    esi, esi

LBB0_481:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_483

LBB0_482:
	LONG $0x04100ff3; BYTE $0xb2   // movss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045c0ff3; BYTE $0xb1   // subss    xmm0, dword [rcx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_482

LBB0_483:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_484:
	LONG $0x04100ff3; BYTE $0xb2               // movss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045c0ff3; BYTE $0xb1               // subss    xmm0, dword [rcx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b2             // movss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445c0ff3; WORD $0x04b1             // subss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b2             // movss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445c0ff3; WORD $0x08b1             // subss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb2             // movss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445c0ff3; WORD $0x0cb1             // subss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_484
	JMP  LBB0_1751

LBB0_485:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_938
	WORD $0xf631             // xor    esi, esi

LBB0_488:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_490

LBB0_489:
	LONG $0xf2048b48 // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48 // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_489

LBB0_490:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_491:
	LONG $0xf2048b48             // mov    rax, qword [rdx + 8*rsi]
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf2448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf2448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf2448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_491
	JMP  LBB0_1751

LBB0_492:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_943
	WORD $0xf631             // xor    esi, esi

LBB0_495:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_497

LBB0_496:
	LONG $0x04100ff3; BYTE $0xb2   // movss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045c0ff3; BYTE $0xb1   // subss    xmm0, dword [rcx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_496

LBB0_497:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_498:
	LONG $0x04100ff3; BYTE $0xb2               // movss    xmm0, dword [rdx + 4*rsi]
	LONG $0x045c0ff3; BYTE $0xb1               // subss    xmm0, dword [rcx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b2             // movss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x445c0ff3; WORD $0x04b1             // subss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b2             // movss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x445c0ff3; WORD $0x08b1             // subss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb2             // movss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x445c0ff3; WORD $0x0cb1             // subss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_498
	JMP  LBB0_1751

LBB0_499:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB0_948
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_950

LBB0_502:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_953
	WORD $0xf631             // xor    esi, esi

LBB0_505:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_507

LBB0_506:
	LONG $0x04100ff3; BYTE $0xb1   // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04590ff3; BYTE $0xb2   // mulss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_506

LBB0_507:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_508:
	LONG $0x04100ff3; BYTE $0xb1               // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04590ff3; BYTE $0xb2               // mulss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b1             // movss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x44590ff3; WORD $0x04b2             // mulss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b1             // movss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x44590ff3; WORD $0x08b2             // mulss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb1             // movss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x44590ff3; WORD $0x0cb2             // mulss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_508
	JMP  LBB0_1751

LBB0_509:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_511
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1173
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1173

LBB0_511:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1679:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1681
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1681:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1751

LBB0_1682:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1682
	JMP  LBB0_1751

LBB0_512:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_514
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1176
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1176

LBB0_514:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1687:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1690
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1689:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1689

LBB0_1690:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB0_1751
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1692:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1692
	JMP  LBB0_1751

LBB0_515:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB0_964
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_966

LBB0_518:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_969
	WORD $0xf631             // xor    esi, esi

LBB0_521:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_523

LBB0_522:
	LONG $0x04100ff3; BYTE $0xb1   // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04590ff3; BYTE $0xb2   // mulss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_522

LBB0_523:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_524:
	LONG $0x04100ff3; BYTE $0xb1               // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04590ff3; BYTE $0xb2               // mulss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b1             // movss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x44590ff3; WORD $0x04b2             // mulss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b1             // movss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x44590ff3; WORD $0x08b2             // mulss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb1             // movss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x44590ff3; WORD $0x0cb2             // mulss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_524
	JMP  LBB0_1751

LBB0_525:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB0_527
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1179
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1179

LBB0_527:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1697:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1699
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1699:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1751

LBB0_1700:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1700
	JMP  LBB0_1751

LBB0_528:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_530
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1182
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1182

LBB0_530:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1705:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB0_1708
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1707:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1707

LBB0_1708:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB0_1751
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB0_1710:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1710
	JMP  LBB0_1751

LBB0_531:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_980
	WORD $0xf631             // xor    esi, esi

LBB0_534:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_536

LBB0_535:
	LONG $0xf1048b48 // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348 // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_535

LBB0_536:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_537:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_537
	JMP  LBB0_1751

LBB0_538:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_985
	WORD $0xf631             // xor    esi, esi

LBB0_541:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_543

LBB0_542:
	LONG $0x04100ff3; BYTE $0xb1   // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04580ff3; BYTE $0xb2   // addss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_542

LBB0_543:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_544:
	LONG $0x04100ff3; BYTE $0xb1               // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04580ff3; BYTE $0xb2               // addss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b1             // movss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x44580ff3; WORD $0x04b2             // addss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b1             // movss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x44580ff3; WORD $0x08b2             // addss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb1             // movss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x44580ff3; WORD $0x0cb2             // addss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_544
	JMP  LBB0_1751

LBB0_545:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB0_990
	WORD $0xf631             // xor    esi, esi

LBB0_548:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_550

LBB0_549:
	LONG $0xf1048b48 // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348 // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949 // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB0_549

LBB0_550:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_551:
	LONG $0xf1048b48             // mov    rax, qword [rcx + 8*rsi]
	LONG $0xf2040348             // add    rax, qword [rdx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	LONG $0xf1448b48; BYTE $0x08 // mov    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf2440348; BYTE $0x08 // add    rax, qword [rdx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	LONG $0xf1448b48; BYTE $0x10 // mov    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf2440348; BYTE $0x10 // add    rax, qword [rdx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	LONG $0xf1448b48; BYTE $0x18 // mov    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf2440348; BYTE $0x18 // add    rax, qword [rdx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_551
	JMP  LBB0_1751

LBB0_552:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_995
	WORD $0xf631             // xor    esi, esi

LBB0_555:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_557

LBB0_556:
	LONG $0x04100ff3; BYTE $0xb1   // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04580ff3; BYTE $0xb2   // addss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004 // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x01c68348               // add    rsi, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB0_556

LBB0_557:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB0_1751

LBB0_558:
	LONG $0x04100ff3; BYTE $0xb1               // movss    xmm0, dword [rcx + 4*rsi]
	LONG $0x04580ff3; BYTE $0xb2               // addss    xmm0, dword [rdx + 4*rsi]
	LONG $0x110f41f3; WORD $0xb004             // movss    dword [r8 + 4*rsi], xmm0
	LONG $0x44100ff3; WORD $0x04b1             // movss    xmm0, dword [rcx + 4*rsi + 4]
	LONG $0x44580ff3; WORD $0x04b2             // addss    xmm0, dword [rdx + 4*rsi + 4]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x04 // movss    dword [r8 + 4*rsi + 4], xmm0
	LONG $0x44100ff3; WORD $0x08b1             // movss    xmm0, dword [rcx + 4*rsi + 8]
	LONG $0x44580ff3; WORD $0x08b2             // addss    xmm0, dword [rdx + 4*rsi + 8]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x08 // movss    dword [r8 + 4*rsi + 8], xmm0
	LONG $0x44100ff3; WORD $0x0cb1             // movss    xmm0, dword [rcx + 4*rsi + 12]
	LONG $0x44580ff3; WORD $0x0cb2             // addss    xmm0, dword [rdx + 4*rsi + 12]
	LONG $0x110f41f3; WORD $0xb044; BYTE $0x0c // movss    dword [r8 + 4*rsi + 12], xmm0
	LONG $0x04c68348                           // add    rsi, 4
	WORD $0x3949; BYTE $0xf2                   // cmp    r10, rsi
	JNE  LBB0_558
	JMP  LBB0_1751

LBB0_559:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_561
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1185
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1185

LBB0_561:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1715:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1717

LBB0_1716:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1716

LBB0_1717:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1718:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1718
	JMP  LBB0_1751

LBB0_562:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1003
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB0_1194

LBB0_565:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1005
	WORD $0xf631             // xor    esi, esi

LBB0_568:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_570

LBB0_569:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_569

LBB0_570:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_571:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_571
	JMP  LBB0_1751

LBB0_572:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1010
	WORD $0xf631             // xor    esi, esi

LBB0_575:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_577

LBB0_576:
	LONG $0x3204b60f         // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_576

LBB0_577:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_578:
	LONG $0x3204b60f             // movzx    eax, byte [rdx + rsi]
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3244b60f; BYTE $0x01 // movzx    eax, byte [rdx + rsi + 1]
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3244b60f; BYTE $0x02 // movzx    eax, byte [rdx + rsi + 2]
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3244b60f; BYTE $0x03 // movzx    eax, byte [rdx + rsi + 3]
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_578
	JMP  LBB0_1751

LBB0_579:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1015
	WORD $0xff31             // xor    edi, edi

LBB0_582:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_584

LBB0_583:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_583

LBB0_584:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_585:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_585
	JMP  LBB0_1751

LBB0_586:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_588
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1195
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1195

LBB0_588:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1277:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1279

LBB0_1278:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB0_1278

LBB0_1279:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1751

LBB0_1280:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1280
	JMP  LBB0_1751

LBB0_589:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1023
	WORD $0xff31             // xor    edi, edi

LBB0_592:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_594

LBB0_593:
	LONG $0x3904b60f         // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a // mul    byte [rdx + rdi]
	LONG $0x38048841         // mov    byte [r8 + rdi], al
	LONG $0x01c78348         // add    rdi, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB0_593

LBB0_594:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_595:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0x24f6; BYTE $0x3a     // mul    byte [rdx + rdi]
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	LONG $0x013a64f6             // mul    byte [rdx + rdi + 1]
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	LONG $0x023a64f6             // mul    byte [rdx + rdi + 2]
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	LONG $0x033a64f6             // mul    byte [rdx + rdi + 3]
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB0_595
	JMP  LBB0_1751

LBB0_596:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB0_598
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB0_1197
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB0_1197

LBB0_598:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1287:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB0_1289

LBB0_1288:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB0_1288

LBB0_1289:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB0_1751

LBB0_1290:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB0_1290
	JMP  LBB0_1751

LBB0_599:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1031
	WORD $0xf631             // xor    esi, esi

LBB0_602:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_604

LBB0_603:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_603

LBB0_604:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_605:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_605
	JMP  LBB0_1751

LBB0_606:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB0_1036
	WORD $0xf631             // xor    esi, esi

LBB0_609:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_611

LBB0_610:
	LONG $0x3104b60f         // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32 // add    al, byte [rdx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_610

LBB0_611:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_612:
	LONG $0x3104b60f             // movzx    eax, byte [rcx + rsi]
	WORD $0x0402; BYTE $0x32     // add    al, byte [rdx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	LONG $0x3144b60f; BYTE $0x01 // movzx    eax, byte [rcx + rsi + 1]
	LONG $0x01324402             // add    al, byte [rdx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	LONG $0x3144b60f; BYTE $0x02 // movzx    eax, byte [rcx + rsi + 2]
	LONG $0x02324402             // add    al, byte [rdx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	LONG $0x3144b60f; BYTE $0x03 // movzx    eax, byte [rcx + rsi + 3]
	LONG $0x03324402             // add    al, byte [rdx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_612
	JMP  LBB0_1751

LBB0_613:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_615
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1199
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1199

LBB0_615:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1723:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1725

LBB0_1724:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1724

LBB0_1725:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1726:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1726
	JMP  LBB0_1751

LBB0_616:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_618
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1202
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1202

LBB0_618:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1731:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_1733

LBB0_1732:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_1732

LBB0_1733:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_1734:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1734
	JMP  LBB0_1751

LBB0_619:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_1047
	WORD $0xf631             // xor    esi, esi

LBB0_622:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_624

LBB0_623:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_623

LBB0_624:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_625:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_625
	JMP  LBB0_1751

LBB0_626:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_1052
	WORD $0xf631             // xor    esi, esi

LBB0_629:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_631

LBB0_630:
	WORD $0x048b; BYTE $0xb2 // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_630

LBB0_631:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_632:
	WORD $0x048b; BYTE $0xb2     // mov    eax, dword [rdx + 4*rsi]
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b2448b             // mov    eax, dword [rdx + 4*rsi + 4]
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b2448b             // mov    eax, dword [rdx + 4*rsi + 8]
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb2448b             // mov    eax, dword [rdx + 4*rsi + 12]
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_632
	JMP  LBB0_1751

LBB0_633:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_1057
	WORD $0xf631             // xor    esi, esi

LBB0_636:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_638

LBB0_637:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f         // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_637

LBB0_638:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_639:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_639
	JMP  LBB0_1751

LBB0_640:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_642
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1205
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1205

LBB0_642:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1739:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1741
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1741:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1751

LBB0_1742:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1742
	JMP  LBB0_1751

LBB0_643:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_1065
	WORD $0xf631             // xor    esi, esi

LBB0_646:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_648

LBB0_647:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f         // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_647

LBB0_648:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_649:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	LONG $0xb204af0f             // imul    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb244af0f; BYTE $0x04 // imul    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb244af0f; BYTE $0x08 // imul    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb244af0f; BYTE $0x0c // imul    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_649
	JMP  LBB0_1751

LBB0_650:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB0_652
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB0_1208
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB0_1208

LBB0_652:
	WORD $0xc931 // xor    ecx, ecx

LBB0_1747:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB0_1749
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB0_1749:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB0_1751

LBB0_1750:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1750
	JMP  LBB0_1751

LBB0_653:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_1073
	WORD $0xf631             // xor    esi, esi

LBB0_656:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_658

LBB0_657:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2 // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_657

LBB0_658:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_659:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_659
	JMP  LBB0_1751

LBB0_660:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB0_1751
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB0_1078
	WORD $0xf631             // xor    esi, esi

LBB0_663:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB0_665

LBB0_664:
	WORD $0x048b; BYTE $0xb1 // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2 // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB0_664

LBB0_665:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB0_1751

LBB0_666:
	WORD $0x048b; BYTE $0xb1     // mov    eax, dword [rcx + 4*rsi]
	WORD $0x0403; BYTE $0xb2     // add    eax, dword [rdx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x04b1448b             // mov    eax, dword [rcx + 4*rsi + 4]
	LONG $0x04b24403             // add    eax, dword [rdx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	LONG $0x08b1448b             // mov    eax, dword [rcx + 4*rsi + 8]
	LONG $0x08b24403             // add    eax, dword [rdx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	LONG $0x0cb1448b             // mov    eax, dword [rcx + 4*rsi + 12]
	LONG $0x0cb24403             // add    eax, dword [rdx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB0_666
	JMP  LBB0_1751

LBB0_670:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8798d48         // lea    rdi, [rcx - 8]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x03eec148         // shr    rsi, 3
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x38ff8348         // cmp    rdi, 56
	JAE  LBB0_1086
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1088

LBB0_672:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_35
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_35
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1291
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_676:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_676
	JMP  LBB0_1292

LBB0_677:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_49
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_49
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1295
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_681:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_681
	JMP  LBB0_1296

LBB0_682:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_61
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_61
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1299
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_686:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_686
	JMP  LBB0_1300

LBB0_690:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_81
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_81
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1303
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_694:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_694
	JMP  LBB0_1304

LBB0_698:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_101
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_101
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1307
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_702:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_702
	JMP  LBB0_1308

LBB0_703:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_113
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_113
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1311
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_707:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_707
	JMP  LBB0_1312

LBB0_714:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_138
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_138
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1315
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_718:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x10f9             // movupd    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf804             // movupd    oword [r8 + 8*rdi], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x30f9             // movupd    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_718
	JMP  LBB0_1316

LBB0_719:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_149
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_149
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1319
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_723:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x10f9             // movupd    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf804             // movupd    oword [r8 + 8*rdi], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x30f9             // movupd    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_723
	JMP  LBB0_1320

LBB0_724:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_160
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_160
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1323
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_728:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x30f9             // movupd    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_728
	JMP  LBB0_1324

LBB0_732:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_178
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_178
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1327
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_736:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x30f9             // movupd    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_736
	JMP  LBB0_1328

LBB0_740:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_196
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_196
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1331
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_744:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x30f9             // movupd    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_744
	JMP  LBB0_1332

LBB0_745:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_207
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_207
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1335
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_749:
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x44100f66; WORD $0x20fa             // movupd    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c100f66; WORD $0x30fa             // movupd    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x30f9             // movupd    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_749
	JMP  LBB0_1336

LBB0_756:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_226
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_226
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1339
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_760:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_760
	JMP  LBB0_1340

LBB0_761:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_235
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_235
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1343
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_765:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_765
	JMP  LBB0_1344

LBB0_766:
	LONG $0x10348d4b             // lea    rsi, [r8 + r10]
	LONG $0x12048d4a             // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x11048d4a             // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6     // cmp    rsi, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xce     // cmp    rsi, rcx
	LONG $0xd6970f40             // seta    sil
	WORD $0xff31                 // xor    edi, edi
	WORD $0x8445; BYTE $0xd9     // test    r9b, r11b
	JNE  LBB0_244
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	JNE  LBB0_244
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1347
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x50 // movdqa    xmm0, oword 80[rbp] /* [rip + .LCPI0_5] */

LBB0_770:
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x646f0ff3; WORD $0x1001             // movdqu    xmm4, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0034             // movdqu    oword [r8 + rax], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm3
	LONG $0x4c6f0ff3; WORD $0x2002             // movdqu    xmm1, oword [rdx + rax + 32]
	LONG $0x546f0ff3; WORD $0x3002             // movdqu    xmm2, oword [rdx + rax + 48]
	LONG $0x5c6f0ff3; WORD $0x2001             // movdqu    xmm3, oword [rcx + rax + 32]
	LONG $0x646f0ff3; WORD $0x3001             // movdqu    xmm4, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0074; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm3
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_770
	JMP  LBB0_1348

LBB0_774:
	LONG $0x10348d4b             // lea    rsi, [r8 + r10]
	LONG $0x12048d4a             // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x11048d4a             // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6     // cmp    rsi, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xce     // cmp    rsi, rcx
	LONG $0xd6970f40             // seta    sil
	WORD $0xff31                 // xor    edi, edi
	WORD $0x8445; BYTE $0xd9     // test    r9b, r11b
	JNE  LBB0_258
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	JNE  LBB0_258
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1351
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x50 // movdqa    xmm0, oword 80[rbp] /* [rip + .LCPI0_5] */

LBB0_778:
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x646f0ff3; WORD $0x1001             // movdqu    xmm4, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0034             // movdqu    oword [r8 + rax], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm3
	LONG $0x4c6f0ff3; WORD $0x2002             // movdqu    xmm1, oword [rdx + rax + 32]
	LONG $0x546f0ff3; WORD $0x3002             // movdqu    xmm2, oword [rdx + rax + 48]
	LONG $0x5c6f0ff3; WORD $0x2001             // movdqu    xmm3, oword [rcx + rax + 32]
	LONG $0x646f0ff3; WORD $0x3001             // movdqu    xmm4, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0074; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm3
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_778
	JMP  LBB0_1352

LBB0_782:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_272
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_272
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1355
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_786:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3039             // movdqu    xmm0, oword [rcx + rdi + 48]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_786
	JMP  LBB0_1356

LBB0_787:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_281
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_281
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1359
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_791:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3039             // movdqu    xmm0, oword [rcx + rdi + 48]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_791
	JMP  LBB0_1360

LBB0_795:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc798d48         // lea    rdi, [rcx - 4]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x02eec148         // shr    rsi, 2
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x1cff8348         // cmp    rdi, 28
	JAE  LBB0_1124
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1126

LBB0_797:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_300
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_300
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1363
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_801:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_801
	JMP  LBB0_1364

LBB0_802:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_309
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_309
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1367
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_806:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_806
	JMP  LBB0_1368

LBB0_807:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB0_808:
	LONG $0xf9048b48               // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa   // imul    rax, qword [rdx + 8*rdi]
	LONG $0xf8048949               // mov    qword [r8 + 8*rdi], rax
	LONG $0xf9448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rdi + 8]
	LONG $0x44af0f48; WORD $0x08fa // imul    rax, qword [rdx + 8*rdi + 8]
	LONG $0xf8448949; BYTE $0x08   // mov    qword [r8 + 8*rdi + 8], rax
	LONG $0xf9448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rdi + 16]
	LONG $0x44af0f48; WORD $0x10fa // imul    rax, qword [rdx + 8*rdi + 16]
	LONG $0xf8448949; BYTE $0x10   // mov    qword [r8 + 8*rdi + 16], rax
	LONG $0xf9448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rdi + 24]
	LONG $0x44af0f48; WORD $0x18fa // imul    rax, qword [rdx + 8*rdi + 24]
	LONG $0xf8448949; BYTE $0x18   // mov    qword [r8 + 8*rdi + 24], rax
	LONG $0x04c78348               // add    rdi, 4
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JNE  LBB0_808

LBB0_809:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_1751
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB0_811:
	LONG $0xf9048b48             // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa // imul    rax, qword [rdx + 8*rdi]
	LONG $0xfe048948             // mov    qword [rsi + 8*rdi], rax
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JNE  LBB0_811
	JMP  LBB0_1751

LBB0_815:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB0_816:
	LONG $0xf9048b48               // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa   // imul    rax, qword [rdx + 8*rdi]
	LONG $0xf8048949               // mov    qword [r8 + 8*rdi], rax
	LONG $0xf9448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rdi + 8]
	LONG $0x44af0f48; WORD $0x08fa // imul    rax, qword [rdx + 8*rdi + 8]
	LONG $0xf8448949; BYTE $0x08   // mov    qword [r8 + 8*rdi + 8], rax
	LONG $0xf9448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rdi + 16]
	LONG $0x44af0f48; WORD $0x10fa // imul    rax, qword [rdx + 8*rdi + 16]
	LONG $0xf8448949; BYTE $0x10   // mov    qword [r8 + 8*rdi + 16], rax
	LONG $0xf9448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rdi + 24]
	LONG $0x44af0f48; WORD $0x18fa // imul    rax, qword [rdx + 8*rdi + 24]
	LONG $0xf8448949; BYTE $0x18   // mov    qword [r8 + 8*rdi + 24], rax
	LONG $0x04c78348               // add    rdi, 4
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JNE  LBB0_816

LBB0_817:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_1751
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB0_819:
	LONG $0xf9048b48             // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa // imul    rax, qword [rdx + 8*rdi]
	LONG $0xfe048948             // mov    qword [rsi + 8*rdi], rax
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JNE  LBB0_819
	JMP  LBB0_1751

LBB0_823:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_338
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_338
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1371
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_827:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30f9             // movdqu    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_827
	JMP  LBB0_1372

LBB0_828:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_347
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_347
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1375
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_832:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30f9             // movdqu    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_832
	JMP  LBB0_1376

LBB0_839:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0798d48         // lea    rdi, [rcx - 16]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x04eec148         // shr    rsi, 4
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x70ff8348         // cmp    rdi, 112
	JAE  LBB0_1141
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1143

LBB0_844:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_366
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_366
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1379
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_848:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_848
	JMP  LBB0_1380

LBB0_849:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_373
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_373
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1383
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_853:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_853
	JMP  LBB0_1384

LBB0_854:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_380
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_380
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1387
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_858:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_858
	JMP  LBB0_1388

LBB0_859:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_387
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_387
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1391
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_863:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_863
	JMP  LBB0_1392

LBB0_864:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_394
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_394
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1395
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_868:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_868
	JMP  LBB0_1396

LBB0_869:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_401
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_401
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1399
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_873:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_873
	JMP  LBB0_1400

LBB0_880:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_414
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_414
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1403
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_884:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_884
	JMP  LBB0_1404

LBB0_885:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_421
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_421
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1407
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_889:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_889
	JMP  LBB0_1408

LBB0_896:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_434
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_434
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1411
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_900:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_900
	JMP  LBB0_1412

LBB0_901:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_441
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_441
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1415
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_905:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_905
	JMP  LBB0_1416

LBB0_906:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_448
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_448
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1419
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_910:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_910
	JMP  LBB0_1420

LBB0_911:
	LONG $0x50348d4b         // lea    rsi, [r8 + 2*r10]
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x51048d4a         // lea    rax, [rcx + 2*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_455
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_455
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0 // and    esi, -16
	LONG $0xf0468d48         // lea    rax, [rsi - 16]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1423
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_915:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0x546f0ff3; WORD $0x2079             // movdqu    xmm2, oword [rcx + 2*rdi + 32]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3079             // movdqu    xmm0, oword [rcx + 2*rdi + 48]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_915
	JMP  LBB0_1424

LBB0_928:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_474
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_474
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1427
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_932:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_932
	JMP  LBB0_1428

LBB0_933:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_481
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_481
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1431
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_937:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x10   // movups    xmm2, oword [rcx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x04110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm0
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x30   // movups    xmm2, oword [rcx + 4*rdi + 48]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x44110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_937
	JMP  LBB0_1432

LBB0_938:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_488
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_488
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1435
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_942:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_942
	JMP  LBB0_1436

LBB0_943:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_495
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_495
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1439
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_947:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x10   // movups    xmm2, oword [rcx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x04110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm0
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x30   // movups    xmm2, oword [rcx + 4*rdi + 48]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x44110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_947
	JMP  LBB0_1440

LBB0_948:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB0_949:
	LONG $0xf9048b48               // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa   // imul    rax, qword [rdx + 8*rdi]
	LONG $0xf8048949               // mov    qword [r8 + 8*rdi], rax
	LONG $0xf9448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rdi + 8]
	LONG $0x44af0f48; WORD $0x08fa // imul    rax, qword [rdx + 8*rdi + 8]
	LONG $0xf8448949; BYTE $0x08   // mov    qword [r8 + 8*rdi + 8], rax
	LONG $0xf9448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rdi + 16]
	LONG $0x44af0f48; WORD $0x10fa // imul    rax, qword [rdx + 8*rdi + 16]
	LONG $0xf8448949; BYTE $0x10   // mov    qword [r8 + 8*rdi + 16], rax
	LONG $0xf9448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rdi + 24]
	LONG $0x44af0f48; WORD $0x18fa // imul    rax, qword [rdx + 8*rdi + 24]
	LONG $0xf8448949; BYTE $0x18   // mov    qword [r8 + 8*rdi + 24], rax
	LONG $0x04c78348               // add    rdi, 4
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JNE  LBB0_949

LBB0_950:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_1751
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB0_952:
	LONG $0xf9048b48             // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa // imul    rax, qword [rdx + 8*rdi]
	LONG $0xfe048948             // mov    qword [rsi + 8*rdi], rax
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JNE  LBB0_952
	JMP  LBB0_1751

LBB0_953:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_505
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_505
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1443
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_957:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x30   // movups    xmm0, oword [rcx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x44110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_957
	JMP  LBB0_1444

LBB0_964:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB0_965:
	LONG $0xf9048b48               // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa   // imul    rax, qword [rdx + 8*rdi]
	LONG $0xf8048949               // mov    qword [r8 + 8*rdi], rax
	LONG $0xf9448b48; BYTE $0x08   // mov    rax, qword [rcx + 8*rdi + 8]
	LONG $0x44af0f48; WORD $0x08fa // imul    rax, qword [rdx + 8*rdi + 8]
	LONG $0xf8448949; BYTE $0x08   // mov    qword [r8 + 8*rdi + 8], rax
	LONG $0xf9448b48; BYTE $0x10   // mov    rax, qword [rcx + 8*rdi + 16]
	LONG $0x44af0f48; WORD $0x10fa // imul    rax, qword [rdx + 8*rdi + 16]
	LONG $0xf8448949; BYTE $0x10   // mov    qword [r8 + 8*rdi + 16], rax
	LONG $0xf9448b48; BYTE $0x18   // mov    rax, qword [rcx + 8*rdi + 24]
	LONG $0x44af0f48; WORD $0x18fa // imul    rax, qword [rdx + 8*rdi + 24]
	LONG $0xf8448949; BYTE $0x18   // mov    qword [r8 + 8*rdi + 24], rax
	LONG $0x04c78348               // add    rdi, 4
	WORD $0x3948; BYTE $0xfe       // cmp    rsi, rdi
	JNE  LBB0_965

LBB0_966:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB0_1751
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB0_968:
	LONG $0xf9048b48             // mov    rax, qword [rcx + 8*rdi]
	LONG $0x04af0f48; BYTE $0xfa // imul    rax, qword [rdx + 8*rdi]
	LONG $0xfe048948             // mov    qword [rsi + 8*rdi], rax
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	JNE  LBB0_968
	JMP  LBB0_1751

LBB0_969:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_521
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_521
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1447
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_973:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x30   // movups    xmm0, oword [rcx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x44110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_973
	JMP  LBB0_1448

LBB0_980:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_534
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_534
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1451
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_984:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30f9             // movdqu    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_984
	JMP  LBB0_1452

LBB0_985:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_541
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_541
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1455
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_989:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x30   // movups    xmm0, oword [rcx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x44110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_989
	JMP  LBB0_1456

LBB0_990:
	LONG $0xd0348d4b         // lea    rsi, [r8 + 8*r10]
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0xd1048d4a         // lea    rax, [rcx + 8*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_548
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_548
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	LONG $0xfc468d48         // lea    rax, [rsi - 4]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1459
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_994:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20f9             // movdqu    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30f9             // movdqu    xmm0, oword [rcx + 8*rdi + 48]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_994
	JMP  LBB0_1460

LBB0_995:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_555
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_555
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1463
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_999:
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0
	LONG $0xba44100f; BYTE $0x20   // movups    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0xba4c100f; BYTE $0x30   // movups    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x30   // movups    xmm0, oword [rcx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x44110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB0_999
	JMP  LBB0_1464

LBB0_1003:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0                   // and    ecx, -32
	LONG $0xe0798d48                           // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x05eec148                           // shr    rsi, 5
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x07                   // and    edx, 7
	LONG $0xe0ff8148; WORD $0x0000; BYTE $0x00 // cmp    rdi, 224
	JAE  LBB0_1188
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB0_1190

LBB0_1005:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_568
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_568
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1467
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1009:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1009
	JMP  LBB0_1468

LBB0_1010:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_575
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_575
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1471
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1014:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1014
	JMP  LBB0_1472

LBB0_1015:
	LONG $0x10348d4b             // lea    rsi, [r8 + r10]
	LONG $0x12048d4a             // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x11048d4a             // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6     // cmp    rsi, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xce     // cmp    rsi, rcx
	LONG $0xd6970f40             // seta    sil
	WORD $0xff31                 // xor    edi, edi
	WORD $0x8445; BYTE $0xd9     // test    r9b, r11b
	JNE  LBB0_582
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	JNE  LBB0_582
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1475
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x50 // movdqa    xmm0, oword 80[rbp] /* [rip + .LCPI0_5] */

LBB0_1019:
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x646f0ff3; WORD $0x1001             // movdqu    xmm4, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0034             // movdqu    oword [r8 + rax], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm3
	LONG $0x4c6f0ff3; WORD $0x2002             // movdqu    xmm1, oword [rdx + rax + 32]
	LONG $0x546f0ff3; WORD $0x3002             // movdqu    xmm2, oword [rdx + rax + 48]
	LONG $0x5c6f0ff3; WORD $0x2001             // movdqu    xmm3, oword [rcx + rax + 32]
	LONG $0x646f0ff3; WORD $0x3001             // movdqu    xmm4, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0074; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm3
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1019
	JMP  LBB0_1476

LBB0_1023:
	LONG $0x10348d4b             // lea    rsi, [r8 + r10]
	LONG $0x12048d4a             // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x11048d4a             // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6     // cmp    rsi, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xce     // cmp    rsi, rcx
	LONG $0xd6970f40             // seta    sil
	WORD $0xff31                 // xor    edi, edi
	WORD $0x8445; BYTE $0xd9     // test    r9b, r11b
	JNE  LBB0_592
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	JNE  LBB0_592
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1479
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x50 // movdqa    xmm0, oword 80[rbp] /* [rip + .LCPI0_5] */

LBB0_1027:
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x646f0ff3; WORD $0x1001             // movdqu    xmm4, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0034             // movdqu    oword [r8 + rax], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm3
	LONG $0x4c6f0ff3; WORD $0x2002             // movdqu    xmm1, oword [rdx + rax + 32]
	LONG $0x546f0ff3; WORD $0x3002             // movdqu    xmm2, oword [rdx + rax + 48]
	LONG $0x5c6f0ff3; WORD $0x2001             // movdqu    xmm3, oword [rcx + rax + 32]
	LONG $0x646f0ff3; WORD $0x3001             // movdqu    xmm4, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xe9               // pmovzxbw    xmm5, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xf3               // pmovzxbw    xmm6, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf5d50f66                           // pmullw    xmm6, xmm5
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0x30380f66; BYTE $0xca               // pmovzxbw    xmm1, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xdc               // pmovzxbw    xmm3, xmm4
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0xe2d50f66                           // pmullw    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x0074; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm6
	LONG $0x7f0f41f3; WORD $0x005c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm3
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1027
	JMP  LBB0_1480

LBB0_1031:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_602
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_602
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1483
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1035:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3039             // movdqu    xmm0, oword [rcx + rdi + 48]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1035
	JMP  LBB0_1484

LBB0_1036:
	LONG $0x10348d4b         // lea    rsi, [r8 + r10]
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_609
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_609
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0 // and    esi, -32
	LONG $0xe0468d48         // lea    rax, [rsi - 32]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1487
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1040:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0x546f0ff3; WORD $0x2039             // movdqu    xmm2, oword [rcx + rdi + 32]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x3039             // movdqu    xmm0, oword [rcx + rdi + 48]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1040
	JMP  LBB0_1488

LBB0_1047:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_622
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_622
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1491
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1051:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1051
	JMP  LBB0_1492

LBB0_1052:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_629
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_629
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1495
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1056:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1056
	JMP  LBB0_1496

LBB0_1057:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_636
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_636
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1499
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1061:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1061
	JMP  LBB0_1500

LBB0_1065:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_646
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_646
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1503
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1069:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1069
	JMP  LBB0_1504

LBB0_1073:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_656
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_656
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1507
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1077:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1077
	JMP  LBB0_1508

LBB0_1078:
	LONG $0x90348d4b         // lea    rsi, [r8 + 4*r10]
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x91048d4a         // lea    rax, [rcx + 4*r10]
	WORD $0x3948; BYTE $0xd6 // cmp    rsi, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xce // cmp    rsi, rcx
	LONG $0xd7970f40         // seta    dil
	WORD $0xf631             // xor    esi, esi
	WORD $0x8445; BYTE $0xd9 // test    r9b, r11b
	JNE  LBB0_663
	WORD $0x2040; BYTE $0xf8 // and    al, dil
	JNE  LBB0_663
	WORD $0x8944; BYTE $0xd6 // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8 // and    esi, -8
	LONG $0xf8468d48         // lea    rax, [rsi - 8]
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1511
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	LONG $0xfee08348         // and    rax, -2
	WORD $0xf748; BYTE $0xd8 // neg    rax
	WORD $0xff31             // xor    edi, edi

LBB0_1082:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x546f0ff3; WORD $0x20b9             // movdqu    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x30b9             // movdqu    xmm0, oword [rcx + 4*rdi + 48]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_1082
	JMP  LBB0_1512

LBB0_1083:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1515
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1085:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1085
	JMP  LBB0_1516

LBB0_1093:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB0_1211
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1213

LBB0_1095:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB0_1221
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1223

LBB0_1097:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc718d48             // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1523
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_1099:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1099
	JMP  LBB0_1524

LBB0_1100:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc718d48             // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1533
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_1102:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1102
	JMP  LBB0_1534

LBB0_1103:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1543
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x20 // movdqa    xmm0, oword 32[rbp] /* [rip + .LCPI0_2] */

LBB0_1105:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1105
	JMP  LBB0_1544

LBB0_1106:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_1551
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x20 // movdqa    xmm0, oword 32[rbp] /* [rip + .LCPI0_2] */

LBB0_1108:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1108
	JMP  LBB0_1552

LBB0_1109:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1559
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1111:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1111
	JMP  LBB0_1560

LBB0_1112:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1567
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1114:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1114
	JMP  LBB0_1568

LBB0_1115:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1575
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x4045 // movdqa    xmm8, oword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1117:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_1117
	JMP  LBB0_1576

LBB0_1118:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB0_1583
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x4045 // movdqa    xmm8, oword 64[rbp] /* [rip + .LCPI0_4] */

LBB0_1120:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_1120
	JMP  LBB0_1584

LBB0_1121:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1591
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1123:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1123
	JMP  LBB0_1592

LBB0_1131:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB0_1231
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1233

LBB0_1133:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB0_1241
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1243

LBB0_1135:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1599
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1137:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1137
	JMP  LBB0_1600

LBB0_1138:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1607
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1140:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1140
	JMP  LBB0_1608

LBB0_1148:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1615
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1150:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1150
	JMP  LBB0_1616

LBB0_1151:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB0_1251
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1253

LBB0_1153:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1623
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1155:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_1155
	JMP  LBB0_1624

LBB0_1156:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB0_1261
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_1263

LBB0_1158:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1631
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1160:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_1160
	JMP  LBB0_1632

LBB0_1161:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1639
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1163:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1163
	JMP  LBB0_1640

LBB0_1164:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1647
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1166:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1166
	JMP  LBB0_1648

LBB0_1167:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1657
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1169:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1169
	JMP  LBB0_1658

LBB0_1170:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1665
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_1172:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1172
	JMP  LBB0_1666

LBB0_1173:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1675
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB0_1175:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_1175
	JMP  LBB0_1676

LBB0_1176:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1683
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI0_3] */

LBB0_1178:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1178
	JMP  LBB0_1684

LBB0_1179:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1693
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB0_1181:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB0_1181
	JMP  LBB0_1694

LBB0_1182:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB0_1701
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI0_3] */

LBB0_1184:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1184
	JMP  LBB0_1702

LBB0_1185:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1711
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1187:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1187
	JMP  LBB0_1712

LBB0_1195:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB0_1271
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1273

LBB0_1197:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB0_1281
	WORD $0xff31             // xor    edi, edi
	JMP  LBB0_1283

LBB0_1199:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1719
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1201:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1201
	JMP  LBB0_1720

LBB0_1202:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1727
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1204:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1204
	JMP  LBB0_1728

LBB0_1205:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1735
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1207:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1207
	JMP  LBB0_1736

LBB0_1208:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1743
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1210:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB0_1210
	JMP  LBB0_1744

LBB0_1086:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1087:
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x40 // movdqu    oword [r8 + 4*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x50 // movdqu    oword [r8 + 4*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x60 // movdqu    oword [r8 + 4*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x70 // movdqu    oword [r8 + 4*rdi + 112], xmm0
	QUAD $0x0080b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 128], xmm0
	QUAD $0x0090b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 144], xmm0
	QUAD $0x00a0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 160], xmm0
	QUAD $0x00b0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 176], xmm0
	QUAD $0x00c0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 192], xmm0
	QUAD $0x00d0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 208], xmm0
	QUAD $0x00e0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 224], xmm0
	QUAD $0x00f0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 240], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB0_1087

LBB0_1088:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_1091
	LONG $0xb8348d49         // lea    rsi, [r8 + 4*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1090:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB0_1090

LBB0_1091:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751

LBB0_1092:
	QUAD $0x000000008804c741 // mov    dword [r8 + 4*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB0_1092
	JMP  LBB0_1751

LBB0_1124:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1125:
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x40 // movdqu    oword [r8 + 8*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x50 // movdqu    oword [r8 + 8*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x60 // movdqu    oword [r8 + 8*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x70 // movdqu    oword [r8 + 8*rdi + 112], xmm0
	QUAD $0x0080f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 128], xmm0
	QUAD $0x0090f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 144], xmm0
	QUAD $0x00a0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 160], xmm0
	QUAD $0x00b0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 176], xmm0
	QUAD $0x00c0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 192], xmm0
	QUAD $0x00d0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 208], xmm0
	QUAD $0x00e0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 224], xmm0
	QUAD $0x00f0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 240], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB0_1125

LBB0_1126:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_1129
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1128:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB0_1128

LBB0_1129:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751

LBB0_1130:
	QUAD $0x00000000c804c749 // mov    qword [r8 + 8*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB0_1130
	JMP  LBB0_1751

LBB0_1141:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1142:
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x40 // movdqu    oword [r8 + 2*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x50 // movdqu    oword [r8 + 2*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x60 // movdqu    oword [r8 + 2*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x70 // movdqu    oword [r8 + 2*rdi + 112], xmm0
	QUAD $0x008078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 128], xmm0
	QUAD $0x009078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 144], xmm0
	QUAD $0x00a078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 160], xmm0
	QUAD $0x00b078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 176], xmm0
	QUAD $0x00c078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 192], xmm0
	QUAD $0x00d078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 208], xmm0
	QUAD $0x00e078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 224], xmm0
	QUAD $0x00f078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 240], xmm0
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB0_1142

LBB0_1143:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_1146
	LONG $0x78348d49         // lea    rsi, [r8 + 2*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1145:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB0_1145

LBB0_1146:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751

LBB0_1147:
	LONG $0x04c74166; WORD $0x0048; BYTE $0x00 // mov    word [r8 + 2*rcx], 0
	LONG $0x01c18348                           // add    rcx, 1
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_1147
	JMP  LBB0_1751

LBB0_1188:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1189:
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x40 // movdqu    oword [r8 + rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x50 // movdqu    oword [r8 + rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm0
	QUAD $0x008038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 128], xmm0
	QUAD $0x009038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 144], xmm0
	QUAD $0x00a038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 160], xmm0
	QUAD $0x00b038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 176], xmm0
	QUAD $0x00c038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 192], xmm0
	QUAD $0x00d038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 208], xmm0
	QUAD $0x00e038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 224], xmm0
	QUAD $0x00f038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 240], xmm0
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB0_1189

LBB0_1190:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_1193
	LONG $0x07348d4a         // lea    rsi, [rdi + r8]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_1192:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB0_1192

LBB0_1193:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751

LBB0_1194:
	LONG $0x0804c641; BYTE $0x00 // mov    byte [r8 + rcx], 0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB0_1194

LBB0_1751:
	RET

LBB0_1211:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1212:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1212

LBB0_1213:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1216
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1215:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1215

LBB0_1216:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1217

LBB0_1221:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1222:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1222

LBB0_1223:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1226
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1225:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1225

LBB0_1226:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1227

LBB0_1231:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1232:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1232

LBB0_1233:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1236
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1235:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1235

LBB0_1236:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1237

LBB0_1241:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1242:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1242

LBB0_1243:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1246
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1245:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1245

LBB0_1246:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1247

LBB0_1251:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1252:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1252

LBB0_1253:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1256
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1255:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1255

LBB0_1256:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1257

LBB0_1261:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB0_1262:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB0_1262

LBB0_1263:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_1266
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB0_1265:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB0_1265

LBB0_1266:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1267

LBB0_1271:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1272:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB0_1272

LBB0_1273:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1276
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB0_1275:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB0_1275

LBB0_1276:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1277

LBB0_1281:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB0_1282:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB0_1282

LBB0_1283:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB0_1286
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB0_1285:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB0_1285

LBB0_1286:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1287

LBB0_1291:
	WORD $0xff31 // xor    edi, edi

LBB0_1292:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1294
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1294:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_35
	JMP  LBB0_1751

LBB0_1295:
	WORD $0xff31 // xor    edi, edi

LBB0_1296:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1298
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1298:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_49
	JMP  LBB0_1751

LBB0_1299:
	WORD $0xff31 // xor    edi, edi

LBB0_1300:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1302
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1302:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_61
	JMP  LBB0_1751

LBB0_1303:
	WORD $0xff31 // xor    edi, edi

LBB0_1304:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1306
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1306:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_81
	JMP  LBB0_1751

LBB0_1307:
	WORD $0xff31 // xor    edi, edi

LBB0_1308:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1310
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1310:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_101

LBB0_1311:
	WORD $0xff31 // xor    edi, edi

LBB0_1312:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1314
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1314:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_113
	JMP  LBB0_1751

LBB0_1315:
	WORD $0xff31 // xor    edi, edi

LBB0_1316:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1318
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x10f9             // movupd    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf804             // movupd    oword [r8 + 8*rdi], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1

LBB0_1318:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_138
	JMP  LBB0_1751

LBB0_1319:
	WORD $0xff31 // xor    edi, edi

LBB0_1320:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1322
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xc25c0f66                           // subpd    xmm0, xmm2
	LONG $0x54100f66; WORD $0x10f9             // movupd    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xca5c0f66                           // subpd    xmm1, xmm2
	LONG $0x110f4166; WORD $0xf804             // movupd    oword [r8 + 8*rdi], xmm0
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1

LBB0_1322:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_149
	JMP  LBB0_1751

LBB0_1323:
	WORD $0xff31 // xor    edi, edi

LBB0_1324:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1326
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0

LBB0_1326:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_160
	JMP  LBB0_1751

LBB0_1327:
	WORD $0xff31 // xor    edi, edi

LBB0_1328:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1330
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0590f66                           // mulpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1590f66                           // mulpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0

LBB0_1330:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_178
	JMP  LBB0_1751

LBB0_1331:
	WORD $0xff31 // xor    edi, edi

LBB0_1332:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1334
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0

LBB0_1334:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_196

LBB0_1335:
	WORD $0xff31 // xor    edi, edi

LBB0_1336:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1338
	LONG $0x04100f66; BYTE $0xfa               // movupd    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c100f66; WORD $0x10fa             // movupd    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0580f66                           // addpd    xmm2, xmm0
	LONG $0x44100f66; WORD $0x10f9             // movupd    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1580f66                           // addpd    xmm0, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf844; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm0

LBB0_1338:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_207
	JMP  LBB0_1751

LBB0_1339:
	WORD $0xff31 // xor    edi, edi

LBB0_1340:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1342
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1

LBB0_1342:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_226
	JMP  LBB0_1751

LBB0_1343:
	WORD $0xff31 // xor    edi, edi

LBB0_1344:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1346
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1

LBB0_1346:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_235
	JMP  LBB0_1751

LBB0_1347:
	WORD $0xc031 // xor    eax, eax

LBB0_1348:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1350
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x446f0ff3; WORD $0x1001             // movdqu    xmm0, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe1               // pmovzxbw    xmm4, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xeb               // pmovzxbw    xmm5, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0x4d6f0f66; BYTE $0x50               // movdqa    xmm1, oword 80[rbp] /* [rip + .LCPI0_5] */
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeb670f66                           // packuswb    xmm5, xmm3
	LONG $0x30380f66; BYTE $0xda               // pmovzxbw    xmm3, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xe0               // pmovzxbw    xmm4, xmm0
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0xc2d50f66                           // pmullw    xmm0, xmm2
	LONG $0xc1db0f66                           // pand    xmm0, xmm1
	LONG $0xe3d50f66                           // pmullw    xmm4, xmm3
	LONG $0xe1db0f66                           // pand    xmm4, xmm1
	LONG $0xe0670f66                           // packuswb    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0064; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm4

LBB0_1350:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_244
	JMP  LBB0_1751

LBB0_1351:
	WORD $0xc031 // xor    eax, eax

LBB0_1352:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1354
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x446f0ff3; WORD $0x1001             // movdqu    xmm0, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe1               // pmovzxbw    xmm4, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xeb               // pmovzxbw    xmm5, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0x4d6f0f66; BYTE $0x50               // movdqa    xmm1, oword 80[rbp] /* [rip + .LCPI0_5] */
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeb670f66                           // packuswb    xmm5, xmm3
	LONG $0x30380f66; BYTE $0xda               // pmovzxbw    xmm3, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xe0               // pmovzxbw    xmm4, xmm0
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0xc2d50f66                           // pmullw    xmm0, xmm2
	LONG $0xc1db0f66                           // pand    xmm0, xmm1
	LONG $0xe3d50f66                           // pmullw    xmm4, xmm3
	LONG $0xe1db0f66                           // pand    xmm4, xmm1
	LONG $0xe0670f66                           // packuswb    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0064; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm4

LBB0_1354:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_258
	JMP  LBB0_1751

LBB0_1355:
	WORD $0xff31 // xor    edi, edi

LBB0_1356:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1358
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB0_1358:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_272

LBB0_1359:
	WORD $0xff31 // xor    edi, edi

LBB0_1360:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1362
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB0_1362:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_281
	JMP  LBB0_1751

LBB0_1363:
	WORD $0xff31 // xor    edi, edi

LBB0_1364:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1366
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1366:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_300
	JMP  LBB0_1751

LBB0_1367:
	WORD $0xff31 // xor    edi, edi

LBB0_1368:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1370
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1370:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_309
	JMP  LBB0_1751

LBB0_1371:
	WORD $0xff31 // xor    edi, edi

LBB0_1372:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1374
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB0_1374:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_338

LBB0_1375:
	WORD $0xff31 // xor    edi, edi

LBB0_1376:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1378
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB0_1378:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_347
	JMP  LBB0_1751

LBB0_1379:
	WORD $0xff31 // xor    edi, edi

LBB0_1380:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1382
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1

LBB0_1382:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_366
	JMP  LBB0_1751

LBB0_1383:
	WORD $0xff31 // xor    edi, edi

LBB0_1384:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1386
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1

LBB0_1386:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_373
	JMP  LBB0_1751

LBB0_1387:
	WORD $0xff31 // xor    edi, edi

LBB0_1388:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1390
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1

LBB0_1390:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_380
	JMP  LBB0_1751

LBB0_1391:
	WORD $0xff31 // xor    edi, edi

LBB0_1392:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1394
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1

LBB0_1394:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_387
	JMP  LBB0_1751

LBB0_1395:
	WORD $0xff31 // xor    edi, edi

LBB0_1396:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1398
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1398:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_394
	JMP  LBB0_1751

LBB0_1399:
	WORD $0xff31 // xor    edi, edi

LBB0_1400:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1402
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1402:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_401
	JMP  LBB0_1751

LBB0_1403:
	WORD $0xff31 // xor    edi, edi

LBB0_1404:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1406
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1406:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_414
	JMP  LBB0_1751

LBB0_1407:
	WORD $0xff31 // xor    edi, edi

LBB0_1408:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1410
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1d50f66                           // pmullw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1410:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_421
	JMP  LBB0_1751

LBB0_1411:
	WORD $0xff31 // xor    edi, edi

LBB0_1412:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1414
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1414:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_434

LBB0_1415:
	WORD $0xff31 // xor    edi, edi

LBB0_1416:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1418
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1418:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_441

LBB0_1419:
	WORD $0xff31 // xor    edi, edi

LBB0_1420:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1422
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1422:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_448
	JMP  LBB0_1751

LBB0_1423:
	WORD $0xff31 // xor    edi, edi

LBB0_1424:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1426
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0x146f0ff3; BYTE $0x79               // movdqu    xmm2, oword [rcx + 2*rdi]
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1079             // movdqu    xmm0, oword [rcx + 2*rdi + 16]
	LONG $0xc1fd0f66                           // paddw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB0_1426:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_455
	JMP  LBB0_1751

LBB0_1427:
	WORD $0xff31 // xor    edi, edi

LBB0_1428:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1430
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1430:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_474
	JMP  LBB0_1751

LBB0_1431:
	WORD $0xff31 // xor    edi, edi

LBB0_1432:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1434
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x10   // movups    xmm2, oword [rcx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x04110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm0
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1

LBB0_1434:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_481
	JMP  LBB0_1751

LBB0_1435:
	WORD $0xff31 // xor    edi, edi

LBB0_1436:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1438
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1438:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_488
	JMP  LBB0_1751

LBB0_1439:
	WORD $0xff31 // xor    edi, edi

LBB0_1440:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1442
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x5c0f; BYTE $0xc2       // subps    xmm0, xmm2
	LONG $0xb954100f; BYTE $0x10   // movups    xmm2, oword [rcx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xca       // subps    xmm1, xmm2
	LONG $0x04110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm0
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1

LBB0_1442:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_495
	JMP  LBB0_1751

LBB0_1443:
	WORD $0xff31 // xor    edi, edi

LBB0_1444:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1446
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0

LBB0_1446:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_505
	JMP  LBB0_1751

LBB0_1447:
	WORD $0xff31 // xor    edi, edi

LBB0_1448:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1450
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x590f; BYTE $0xd0       // mulps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xc1       // mulps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0

LBB0_1450:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_521
	JMP  LBB0_1751

LBB0_1451:
	WORD $0xff31 // xor    edi, edi

LBB0_1452:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1454
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB0_1454:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_534

LBB0_1455:
	WORD $0xff31 // xor    edi, edi

LBB0_1456:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1458
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0

LBB0_1458:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_541

LBB0_1459:
	WORD $0xff31 // xor    edi, edi

LBB0_1460:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1462
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xf9               // movdqu    xmm2, oword [rcx + 8*rdi]
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10f9             // movdqu    xmm0, oword [rcx + 8*rdi + 16]
	LONG $0xc1d40f66                           // paddq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB0_1462:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_548
	JMP  LBB0_1751

LBB0_1463:
	WORD $0xff31 // xor    edi, edi

LBB0_1464:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_1466
	LONG $0xba04100f               // movups    xmm0, oword [rdx + 4*rdi]
	LONG $0xba4c100f; BYTE $0x10   // movups    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	WORD $0x580f; BYTE $0xd0       // addps    xmm2, xmm0
	LONG $0xb944100f; BYTE $0x10   // movups    xmm0, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xc1       // addps    xmm0, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x44110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm0

LBB0_1466:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_555
	JMP  LBB0_1751

LBB0_1467:
	WORD $0xff31 // xor    edi, edi

LBB0_1468:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1470
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1

LBB0_1470:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_568
	JMP  LBB0_1751

LBB0_1471:
	WORD $0xff31 // xor    edi, edi

LBB0_1472:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1474
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1

LBB0_1474:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_575
	JMP  LBB0_1751

LBB0_1475:
	WORD $0xc031 // xor    eax, eax

LBB0_1476:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1478
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x446f0ff3; WORD $0x1001             // movdqu    xmm0, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe1               // pmovzxbw    xmm4, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xeb               // pmovzxbw    xmm5, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0x4d6f0f66; BYTE $0x50               // movdqa    xmm1, oword 80[rbp] /* [rip + .LCPI0_5] */
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeb670f66                           // packuswb    xmm5, xmm3
	LONG $0x30380f66; BYTE $0xda               // pmovzxbw    xmm3, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xe0               // pmovzxbw    xmm4, xmm0
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0xc2d50f66                           // pmullw    xmm0, xmm2
	LONG $0xc1db0f66                           // pand    xmm0, xmm1
	LONG $0xe3d50f66                           // pmullw    xmm4, xmm3
	LONG $0xe1db0f66                           // pand    xmm4, xmm1
	LONG $0xe0670f66                           // packuswb    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0064; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm4

LBB0_1478:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_582
	JMP  LBB0_1751

LBB0_1479:
	WORD $0xc031 // xor    eax, eax

LBB0_1480:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1482
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x546f0ff3; WORD $0x1002             // movdqu    xmm2, oword [rdx + rax + 16]
	LONG $0x1c6f0ff3; BYTE $0x01               // movdqu    xmm3, oword [rcx + rax]
	LONG $0x446f0ff3; WORD $0x1001             // movdqu    xmm0, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xe1               // pmovzxbw    xmm4, xmm1
	LONG $0xc9680f66                           // punpckhbw    xmm1, xmm1
	LONG $0x30380f66; BYTE $0xeb               // pmovzxbw    xmm5, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd9d50f66                           // pmullw    xmm3, xmm1
	LONG $0x4d6f0f66; BYTE $0x50               // movdqa    xmm1, oword 80[rbp] /* [rip + .LCPI0_5] */
	LONG $0xd9db0f66                           // pand    xmm3, xmm1
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeb670f66                           // packuswb    xmm5, xmm3
	LONG $0x30380f66; BYTE $0xda               // pmovzxbw    xmm3, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0x30380f66; BYTE $0xe0               // pmovzxbw    xmm4, xmm0
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0xc2d50f66                           // pmullw    xmm0, xmm2
	LONG $0xc1db0f66                           // pand    xmm0, xmm1
	LONG $0xe3d50f66                           // pmullw    xmm4, xmm3
	LONG $0xe1db0f66                           // pand    xmm4, xmm1
	LONG $0xe0670f66                           // packuswb    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0064; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm4

LBB0_1482:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JNE  LBB0_592
	JMP  LBB0_1751

LBB0_1483:
	WORD $0xff31 // xor    edi, edi

LBB0_1484:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1486
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB0_1486:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_602

LBB0_1487:
	WORD $0xff31 // xor    edi, edi

LBB0_1488:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1490
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0x146f0ff3; BYTE $0x39               // movdqu    xmm2, oword [rcx + rdi]
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x1039             // movdqu    xmm0, oword [rcx + rdi + 16]
	LONG $0xc1fc0f66                           // paddb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB0_1490:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_609

LBB0_1491:
	WORD $0xff31 // xor    edi, edi

LBB0_1492:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1494
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1494:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_622
	JMP  LBB0_1751

LBB0_1495:
	WORD $0xff31 // xor    edi, edi

LBB0_1496:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1498
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1498:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_629
	JMP  LBB0_1751

LBB0_1499:
	WORD $0xff31 // xor    edi, edi

LBB0_1500:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1502
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1502:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_636
	JMP  LBB0_1751

LBB0_1503:
	WORD $0xff31 // xor    edi, edi

LBB0_1504:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1506
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc1               // pmulld    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1506:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_646
	JMP  LBB0_1751

LBB0_1507:
	WORD $0xff31 // xor    edi, edi

LBB0_1508:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1510
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1510:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB0_1751
	JMP  LBB0_656

LBB0_1511:
	WORD $0xff31 // xor    edi, edi

LBB0_1512:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1514
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x146f0ff3; BYTE $0xb9               // movdqu    xmm2, oword [rcx + 4*rdi]
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x10b9             // movdqu    xmm0, oword [rcx + 4*rdi + 16]
	LONG $0xc1fe0f66                           // paddd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB0_1514:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JNE  LBB0_663
	JMP  LBB0_1751

LBB0_1515:
	WORD $0xff31 // xor    edi, edi

LBB0_1516:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1518
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB0_1518:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1519

LBB0_1523:
	WORD $0xff31 // xor    edi, edi

LBB0_1524:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1526
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1526:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1527

LBB0_1533:
	WORD $0xff31 // xor    edi, edi

LBB0_1534:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1536
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1536:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1537

LBB0_1543:
	WORD $0xff31 // xor    edi, edi

LBB0_1544:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1546
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, oword 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1546:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1547

LBB0_1551:
	WORD $0xff31 // xor    edi, edi

LBB0_1552:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1554
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, oword 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB0_1554:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1555

LBB0_1559:
	WORD $0xff31 // xor    edi, edi

LBB0_1560:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1562
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB0_1562:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1563

LBB0_1567:
	WORD $0xff31 // xor    edi, edi

LBB0_1568:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1570
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB0_1570:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1571

LBB0_1575:
	WORD $0xf631 // xor    esi, esi

LBB0_1576:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1578
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x40               // movdqa    xmm4, oword 64[rbp] /* [rip + .LCPI0_4] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB0_1578:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1579

LBB0_1583:
	WORD $0xf631 // xor    esi, esi

LBB0_1584:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1586
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x40               // movdqa    xmm4, oword 64[rbp] /* [rip + .LCPI0_4] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB0_1586:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1587

LBB0_1591:
	WORD $0xff31 // xor    edi, edi

LBB0_1592:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1594
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB0_1594:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1595

LBB0_1599:
	WORD $0xff31 // xor    edi, edi

LBB0_1600:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1602
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB0_1602:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1603

LBB0_1607:
	WORD $0xff31 // xor    edi, edi

LBB0_1608:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1610
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB0_1610:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1611

LBB0_1615:
	WORD $0xff31 // xor    edi, edi

LBB0_1616:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1618
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB0_1618:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1619

LBB0_1623:
	WORD $0xf631 // xor    esi, esi

LBB0_1624:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1626
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB0_1626:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1627

LBB0_1631:
	WORD $0xf631 // xor    esi, esi

LBB0_1632:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1634
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB0_1634:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1635

LBB0_1639:
	WORD $0xff31 // xor    edi, edi

LBB0_1640:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1642
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB0_1642:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1643

LBB0_1647:
	WORD $0xff31 // xor    edi, edi

LBB0_1648:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1650
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1650:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1651

LBB0_1657:
	WORD $0xff31 // xor    edi, edi

LBB0_1658:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1660
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB0_1660:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1661

LBB0_1665:
	WORD $0xff31 // xor    edi, edi

LBB0_1666:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1668
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1668:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1669

LBB0_1675:
	WORD $0xf631 // xor    esi, esi

LBB0_1676:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1678
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB0_1678:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1679

LBB0_1683:
	WORD $0xff31 // xor    edi, edi

LBB0_1684:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1686
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x30               // movdqa    xmm2, oword 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1686:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1687

LBB0_1693:
	WORD $0xf631 // xor    esi, esi

LBB0_1694:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1696
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB0_1696:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1697

LBB0_1701:
	WORD $0xff31 // xor    edi, edi

LBB0_1702:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1704
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x30               // movdqa    xmm2, oword 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1704:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1705

LBB0_1711:
	WORD $0xff31 // xor    edi, edi

LBB0_1712:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1714
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB0_1714:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB0_1751
	JMP  LBB0_1715

LBB0_1719:
	WORD $0xff31 // xor    edi, edi

LBB0_1720:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1722
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB0_1722:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1723

LBB0_1727:
	WORD $0xff31 // xor    edi, edi

LBB0_1728:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1730
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB0_1730:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1731

LBB0_1735:
	WORD $0xff31 // xor    edi, edi

LBB0_1736:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1738
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1738:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1739

LBB0_1743:
	WORD $0xff31 // xor    edi, edi

LBB0_1744:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_1746
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB0_1746:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB0_1751
	JMP  LBB0_1747

DATA LCDATA2<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA2<>+0x008(SB)/8, $0x8000000000000000
DATA LCDATA2<>+0x010(SB)/8, $0x8000000080000000
DATA LCDATA2<>+0x018(SB)/8, $0x8000000080000000
DATA LCDATA2<>+0x020(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x028(SB)/8, $0x7fffffffffffffff
DATA LCDATA2<>+0x030(SB)/8, $0x7fffffff7fffffff
DATA LCDATA2<>+0x038(SB)/8, $0x7fffffff7fffffff
DATA LCDATA2<>+0x040(SB)/8, $0x000000ff000000ff
DATA LCDATA2<>+0x048(SB)/8, $0x000000ff000000ff
DATA LCDATA2<>+0x050(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x058(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA2<>(SB), 8, $96

TEXT Â·_arithmetic_arr_scalar_sse4(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA2<>(SB), BP

	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB1_13
	LONG $0x01fe8040         // cmp    sil, 1
	JLE  LBB1_25
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB1_45
	LONG $0x04fe8040         // cmp    sil, 4
	JE   LBB1_53
	LONG $0x05fe8040         // cmp    sil, 5
	JNE  LBB1_1807
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_93
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_163
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_263
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_266
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_12
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_747
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_747

LBB1_12:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1127:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1129

LBB1_1128:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1128

LBB1_1129:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1130:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1130
	JMP  LBB1_1807

LBB1_13:
	LONG $0x08fe8040         // cmp    sil, 8
	JLE  LBB1_35
	LONG $0x09fe8040         // cmp    sil, 9
	JE   LBB1_61
	LONG $0x0bfe8040         // cmp    sil, 11
	JE   LBB1_69
	LONG $0x0cfe8040         // cmp    sil, 12
	JNE  LBB1_1807
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_100
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_168
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_269
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_272
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB1_446
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_756

LBB1_25:
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB1_77
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB1_1807
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_107
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_173
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_275
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_278
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_34
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_757
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_757

LBB1_34:
	WORD $0xf631 // xor    esi, esi

LBB1_1135:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1137

LBB1_1136:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1136

LBB1_1137:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1138:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1138
	JMP  LBB1_1807

LBB1_35:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB1_85
	LONG $0x08fe8040         // cmp    sil, 8
	JNE  LBB1_1807
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_114
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_178
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_281
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_284
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_44
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_760
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_760

LBB1_44:
	WORD $0xf631 // xor    esi, esi

LBB1_1143:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1145

LBB1_1144:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1144

LBB1_1145:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1146:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1146
	JMP  LBB1_1807

LBB1_45:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_121
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_183
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_287
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_290
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_52
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_763
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_763

LBB1_52:
	WORD $0xf631 // xor    esi, esi

LBB1_1151:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1153

LBB1_1152:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1152

LBB1_1153:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1154:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1154
	JMP  LBB1_1807

LBB1_53:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_128
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_188
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_293
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_296
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_60
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_766
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_766

LBB1_60:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1049:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1051

LBB1_1050:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB1_1050

LBB1_1051:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1807

LBB1_1052:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1052
	JMP  LBB1_1807

LBB1_61:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_135
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_193
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_299
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_302
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_68
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_768
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_768

LBB1_68:
	WORD $0xf631 // xor    esi, esi

LBB1_1159:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1161

LBB1_1160:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1160

LBB1_1161:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1162:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1162
	JMP  LBB1_1807

LBB1_69:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_142
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_198
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_305
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_308
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_76
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_771
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_771

LBB1_76:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1059:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1061

LBB1_1060:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB1_1060

LBB1_1061:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1807

LBB1_1062:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1062
	JMP  LBB1_1807

LBB1_77:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_149
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_203
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_311
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_314
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_84
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_773
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_773

LBB1_84:
	WORD $0xf631 // xor    esi, esi

LBB1_1167:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1169

LBB1_1168:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1168

LBB1_1169:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1170:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1170
	JMP  LBB1_1807

LBB1_85:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB1_156
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB1_208
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB1_317
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB1_320
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_92
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_776
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_776

LBB1_92:
	WORD $0xf631 // xor    esi, esi

LBB1_1175:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1177

LBB1_1176:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1176

LBB1_1177:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1178:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1178
	JMP  LBB1_1807

LBB1_93:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_213
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_323
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_326
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_99
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_779
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_779

LBB1_99:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1183:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1186
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_1185:
	LONG $0x0c7e0ff3; BYTE $0xca   // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1185

LBB1_1186:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB1_1807
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_1188:
	LONG $0x0c7e0ff3; BYTE $0xca               // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c             // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7e0ff3; WORD $0x08ca             // movq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x08 // movq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7e0ff3; WORD $0x10ca             // movq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x10 // movq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7e0ff3; WORD $0x18ca             // movq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x18 // movq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1188
	JMP  LBB1_1807

LBB1_100:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_218
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_329
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_332
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_106
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_782
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_782

LBB1_106:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1193:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1196
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_1195:
	LONG $0x0c7e0ff3; BYTE $0xca   // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1195

LBB1_1196:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB1_1807
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_1198:
	LONG $0x0c7e0ff3; BYTE $0xca               // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c             // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7e0ff3; WORD $0x08ca             // movq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x08 // movq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7e0ff3; WORD $0x10ca             // movq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x10 // movq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7e0ff3; WORD $0x18ca             // movq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x18 // movq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1198
	JMP  LBB1_1807

LBB1_107:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_223
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_335
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_338
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_113
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_785
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_785

LBB1_113:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1203:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1205

LBB1_1204:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85c0ff2               // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1204

LBB1_1205:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1206:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1206
	JMP  LBB1_1807

LBB1_114:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_228
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_341
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_344
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_120
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_788
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_788

LBB1_120:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1211:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1213

LBB1_1212:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85c0ff2               // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1212

LBB1_1213:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1214:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1214
	JMP  LBB1_1807

LBB1_121:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_233
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_347
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_350
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_127
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_791
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_791

LBB1_127:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1219:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1221

LBB1_1220:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8590ff2               // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1220

LBB1_1221:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1222:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1222
	JMP  LBB1_1807

LBB1_128:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_238
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_353
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_356
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_134
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_794
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_794

LBB1_134:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1227:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB1_1229

LBB1_1228:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB1_1228

LBB1_1229:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1230:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1230
	JMP  LBB1_1807

LBB1_135:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_243
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_359
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_362
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_141
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_797
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_797

LBB1_141:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1235:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1237

LBB1_1236:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8590ff2               // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1236

LBB1_1237:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1238:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1238
	JMP  LBB1_1807

LBB1_142:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_248
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_365
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_368
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_148
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_800
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_800

LBB1_148:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1243:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB1_1245

LBB1_1244:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB1_1244

LBB1_1245:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1246:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1246
	JMP  LBB1_1807

LBB1_149:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_253
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_371
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_374
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_155
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_803
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_803

LBB1_155:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1251:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1253

LBB1_1252:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1252

LBB1_1253:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1254:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1254
	JMP  LBB1_1807

LBB1_156:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB1_258
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB1_377
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB1_380
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff2         // movsd    xmm0, qword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_162
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_806
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_806

LBB1_162:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1259:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1261

LBB1_1260:
	LONG $0x0c100ff2; BYTE $0xca   // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1260

LBB1_1261:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1262:
	LONG $0x0c100ff2; BYTE $0xca               // movsd    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc80c             // movsd    qword [r8 + 8*rcx], xmm1
	LONG $0x4c100ff2; WORD $0x08ca             // movsd    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x08 // movsd    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10ca             // movsd    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x10 // movsd    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18ca             // movsd    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xc84c; BYTE $0x18 // movsd    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1262
	JMP  LBB1_1807

LBB1_163:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_383
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_167
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_809
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_809

LBB1_167:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1267:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1269

LBB1_1268:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1268

LBB1_1269:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1270:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1270
	JMP  LBB1_1807

LBB1_168:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_386
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_172
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_812
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_812

LBB1_172:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1275:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1277

LBB1_1276:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1276

LBB1_1277:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1278:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1278
	JMP  LBB1_1807

LBB1_173:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_389
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_177
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_815
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_815

LBB1_177:
	WORD $0xf631 // xor    esi, esi

LBB1_1283:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1285

LBB1_1284:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1284

LBB1_1285:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1286:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1286
	JMP  LBB1_1807

LBB1_178:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_392
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_182
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_818
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_818

LBB1_182:
	WORD $0xf631 // xor    esi, esi

LBB1_1291:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1293

LBB1_1292:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1292

LBB1_1293:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1294:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1294
	JMP  LBB1_1807

LBB1_183:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_395
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_187
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_821
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_821

LBB1_187:
	WORD $0xff31 // xor    edi, edi

LBB1_1299:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1301

LBB1_1300:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1300

LBB1_1301:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1302:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1302
	JMP  LBB1_1807

LBB1_188:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_398
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_192
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_824
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_824

LBB1_192:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1307:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB1_1309
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB1_1309:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB1_1807

LBB1_1310:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1310
	JMP  LBB1_1807

LBB1_193:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_401
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_197
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_827
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_827

LBB1_197:
	WORD $0xff31 // xor    edi, edi

LBB1_1315:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1317

LBB1_1316:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1316

LBB1_1317:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1318:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1318
	JMP  LBB1_1807

LBB1_198:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_404
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_202
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_830
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_830

LBB1_202:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1323:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB1_1325
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB1_1325:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB1_1807

LBB1_1326:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1326
	JMP  LBB1_1807

LBB1_203:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_407
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_207
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_833
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_833

LBB1_207:
	WORD $0xf631 // xor    esi, esi

LBB1_1331:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1333

LBB1_1332:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1332

LBB1_1333:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1334:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1334
	JMP  LBB1_1807

LBB1_208:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB1_410
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_212
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_836
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_836

LBB1_212:
	WORD $0xf631 // xor    esi, esi

LBB1_1339:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1341

LBB1_1340:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1340

LBB1_1341:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1342:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1342
	JMP  LBB1_1807

LBB1_213:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_413
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_217
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_839
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_839

LBB1_217:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1347:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1349

LBB1_1348:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1348

LBB1_1349:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1350:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1350
	JMP  LBB1_1807

LBB1_218:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_416
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB1_535
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_848

LBB1_223:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_419
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_227
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_849
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_849

LBB1_227:
	WORD $0xf631 // xor    esi, esi

LBB1_1355:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1357

LBB1_1356:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1356

LBB1_1357:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1358:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1358
	JMP  LBB1_1807

LBB1_228:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_422
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_232
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_852
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_852

LBB1_232:
	WORD $0xf631 // xor    esi, esi

LBB1_1363:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1365

LBB1_1364:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1364

LBB1_1365:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1366:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1366
	JMP  LBB1_1807

LBB1_233:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_425
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB1_543
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_545

LBB1_238:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_428
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_242
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_855
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_855

LBB1_242:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1069:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1071

LBB1_1070:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1070

LBB1_1071:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1807

LBB1_1072:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1072
	JMP  LBB1_1807

LBB1_243:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_431
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB1_551
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_553

LBB1_248:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_434
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_252
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_857
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_857

LBB1_252:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1079:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1081

LBB1_1080:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1080

LBB1_1081:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1807

LBB1_1082:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1082
	JMP  LBB1_1807

LBB1_253:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_437
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_257
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_859
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_859

LBB1_257:
	WORD $0xf631 // xor    esi, esi

LBB1_1371:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1373

LBB1_1372:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1372

LBB1_1373:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1374:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1374
	JMP  LBB1_1807

LBB1_258:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB1_440
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB1_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_262
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_862
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_862

LBB1_262:
	WORD $0xf631 // xor    esi, esi

LBB1_1379:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1381

LBB1_1380:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1380

LBB1_1381:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1382:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1382
	JMP  LBB1_1807

LBB1_263:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_265
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_865
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_865

LBB1_265:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1387:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1389

LBB1_1388:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1388

LBB1_1389:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1390:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1390
	JMP  LBB1_1807

LBB1_266:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_268
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_868
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_868

LBB1_268:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1395:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1397

LBB1_1396:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1396

LBB1_1397:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1398:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1398
	JMP  LBB1_1807

LBB1_269:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB1_571
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_877

LBB1_272:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_274
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_878
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_878

LBB1_274:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1403:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1405

LBB1_1404:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1404

LBB1_1405:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1406:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1406
	JMP  LBB1_1807

LBB1_275:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_277
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_881
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_881

LBB1_277:
	WORD $0xf631 // xor    esi, esi

LBB1_1411:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1413

LBB1_1412:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1412

LBB1_1413:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1414:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1414
	JMP  LBB1_1807

LBB1_278:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_280
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_884
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_884

LBB1_280:
	WORD $0xf631 // xor    esi, esi

LBB1_1419:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1421

LBB1_1420:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1420

LBB1_1421:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1422:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1422
	JMP  LBB1_1807

LBB1_281:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_283
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_887
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_887

LBB1_283:
	WORD $0xf631 // xor    esi, esi

LBB1_1427:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1429

LBB1_1428:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1428

LBB1_1429:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1430:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1430
	JMP  LBB1_1807

LBB1_284:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_286
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_890
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_890

LBB1_286:
	WORD $0xf631 // xor    esi, esi

LBB1_1435:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1437

LBB1_1436:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1436

LBB1_1437:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1438:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0xc129                   // sub    ecx, eax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1438
	JMP  LBB1_1807

LBB1_287:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_289
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_893
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_893

LBB1_289:
	WORD $0xf631 // xor    esi, esi

LBB1_1443:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1445

LBB1_1444:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66             // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1444

LBB1_1445:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1446:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1446
	JMP  LBB1_1807

LBB1_290:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_292
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_896
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_896

LBB1_292:
	WORD $0xf631 // xor    esi, esi

LBB1_1451:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1453

LBB1_1452:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66             // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1452

LBB1_1453:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1454:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1454
	JMP  LBB1_1807

LBB1_293:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_295
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_899
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_899

LBB1_295:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1089:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1091

LBB1_1090:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB1_1090

LBB1_1091:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1807

LBB1_1092:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB1_1092
	JMP  LBB1_1807

LBB1_296:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_298
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_901
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_901

LBB1_298:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1459:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_1461
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB1_1461:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1807

LBB1_1462:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1462
	JMP  LBB1_1807

LBB1_299:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_301
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_904
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_904

LBB1_301:
	WORD $0xf631 // xor    esi, esi

LBB1_1467:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1469

LBB1_1468:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66             // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1468

LBB1_1469:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1470:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1470
	JMP  LBB1_1807

LBB1_302:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_304
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_907
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_907

LBB1_304:
	WORD $0xf631 // xor    esi, esi

LBB1_1475:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1477

LBB1_1476:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66             // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1476

LBB1_1477:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1478:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	LONG $0xc8af0f66               // imul    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1478
	JMP  LBB1_1807

LBB1_305:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_307
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_910
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_910

LBB1_307:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1099:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1101

LBB1_1100:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB1_1100

LBB1_1101:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB1_1807

LBB1_1102:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB1_1102
	JMP  LBB1_1807

LBB1_308:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_310
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_912
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_912

LBB1_310:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1483:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_1485
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB1_1485:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1807

LBB1_1486:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_1486
	JMP  LBB1_1807

LBB1_311:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_313
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_915
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_915

LBB1_313:
	WORD $0xf631 // xor    esi, esi

LBB1_1491:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1493

LBB1_1492:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1     // add    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1492

LBB1_1493:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1494:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1494
	JMP  LBB1_1807

LBB1_314:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_316
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_918
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_918

LBB1_316:
	WORD $0xf631 // xor    esi, esi

LBB1_1499:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1501

LBB1_1500:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1     // add    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1500

LBB1_1501:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1502:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1502
	JMP  LBB1_1807

LBB1_317:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_319
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_921
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_921

LBB1_319:
	WORD $0xf631 // xor    esi, esi

LBB1_1507:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1509

LBB1_1508:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1     // add    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1508

LBB1_1509:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1510:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1510
	JMP  LBB1_1807

LBB1_320:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0xb70f; BYTE $0x01 // movzx    eax, word [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB1_322
	LONG $0x520c8d4a         // lea    rcx, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_924
	LONG $0x500c8d4b         // lea    rcx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_924

LBB1_322:
	WORD $0xf631 // xor    esi, esi

LBB1_1515:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1517

LBB1_1516:
	LONG $0x720cb70f             // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1     // add    cx, ax
	LONG $0x0c894166; BYTE $0x70 // mov    word [r8 + 2*rsi], cx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB1_1516

LBB1_1517:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1518:
	LONG $0x720cb70f               // movzx    ecx, word [rdx + 2*rsi]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x0c894166; BYTE $0x70   // mov    word [r8 + 2*rsi], cx
	LONG $0x724cb70f; BYTE $0x02   // movzx    ecx, word [rdx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], cx
	LONG $0x724cb70f; BYTE $0x04   // movzx    ecx, word [rdx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], cx
	LONG $0x724cb70f; BYTE $0x06   // movzx    ecx, word [rdx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc1       // add    cx, ax
	LONG $0x4c894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], cx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB1_1518
	JMP  LBB1_1807

LBB1_323:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_325
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_927
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_927

LBB1_325:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1523:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1525

LBB1_1524:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1524

LBB1_1525:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1526:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1526
	JMP  LBB1_1807

LBB1_326:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_328
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_930
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_930

LBB1_328:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1531:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1534
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_1533:
	LONG $0x0c6e0f66; BYTE $0x8a   // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1533

LBB1_1534:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB1_1807
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_1536:
	LONG $0x0c6e0f66; BYTE $0x8a               // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c             // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6e0f66; WORD $0x048a             // movd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x04 // movd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6e0f66; WORD $0x088a             // movd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x08 // movd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6e0f66; WORD $0x0c8a             // movd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x0c // movd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1536
	JMP  LBB1_1807

LBB1_329:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_331
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_933
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_933

LBB1_331:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1541:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1543

LBB1_1542:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1542

LBB1_1543:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1544:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1544
	JMP  LBB1_1807

LBB1_332:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_334
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_936
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_936

LBB1_334:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1549:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1552
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_1551:
	LONG $0x0c6e0f66; BYTE $0x8a   // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1551

LBB1_1552:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB1_1807
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_1554:
	LONG $0x0c6e0f66; BYTE $0x8a               // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c             // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6e0f66; WORD $0x048a             // movd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x04 // movd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6e0f66; WORD $0x088a             // movd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x08 // movd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6e0f66; WORD $0x0c8a             // movd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x0c // movd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1554
	JMP  LBB1_1807

LBB1_335:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_337
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_939
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_939

LBB1_337:
	WORD $0xf631 // xor    esi, esi

LBB1_1559:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1561

LBB1_1560:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1560

LBB1_1561:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1562:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1562
	JMP  LBB1_1807

LBB1_338:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_340
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_942
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_942

LBB1_340:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1567:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1569

LBB1_1568:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85c0ff3               // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1568

LBB1_1569:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1570:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1570
	JMP  LBB1_1807

LBB1_341:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_343
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_945
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_945

LBB1_343:
	WORD $0xf631 // xor    esi, esi

LBB1_1575:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1577

LBB1_1576:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1576

LBB1_1577:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1578:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1578
	JMP  LBB1_1807

LBB1_344:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_346
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_948
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_948

LBB1_346:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1583:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1585

LBB1_1584:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85c0ff3               // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1584

LBB1_1585:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1586:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc85c0ff3                           // subss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1586
	JMP  LBB1_1807

LBB1_347:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB1_648
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_650

LBB1_350:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_352
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_951
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_951

LBB1_352:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1591:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1593

LBB1_1592:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8590ff3               // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1592

LBB1_1593:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1594:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1594
	JMP  LBB1_1807

LBB1_353:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_355
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_954
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_954

LBB1_355:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1599:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1601
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1601:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1807

LBB1_1602:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1602
	JMP  LBB1_1807

LBB1_356:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_358
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_957
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_957

LBB1_358:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1607:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1610
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1609:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1609

LBB1_1610:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB1_1807
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1612:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1612
	JMP  LBB1_1807

LBB1_359:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB1_662
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_664

LBB1_362:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_364
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_960
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_960

LBB1_364:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1617:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1619

LBB1_1618:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8590ff3               // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1618

LBB1_1619:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1620:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1620
	JMP  LBB1_1807

LBB1_365:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_367
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_963
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_963

LBB1_367:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1625:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1627
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1627:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1807

LBB1_1628:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1628
	JMP  LBB1_1807

LBB1_368:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_370
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_966
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_966

LBB1_370:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1633:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB1_1636
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1635:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1635

LBB1_1636:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB1_1807
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB1_1638:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1638
	JMP  LBB1_1807

LBB1_371:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_373
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_969
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_969

LBB1_373:
	WORD $0xf631 // xor    esi, esi

LBB1_1643:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1645

LBB1_1644:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1644

LBB1_1645:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1646:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1646
	JMP  LBB1_1807

LBB1_374:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_376
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_972
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_972

LBB1_376:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1651:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1653

LBB1_1652:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8580ff3               // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1652

LBB1_1653:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1654:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1654
	JMP  LBB1_1807

LBB1_377:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8b48; BYTE $0x01 // mov    rax, qword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB1_379
	LONG $0xd20c8d4a         // lea    rcx, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_975
	LONG $0xd00c8d4b         // lea    rcx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_975

LBB1_379:
	WORD $0xf631 // xor    esi, esi

LBB1_1659:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1661

LBB1_1660:
	LONG $0xf20c8b48         // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1 // add    rcx, rax
	LONG $0xf00c8949         // mov    qword [r8 + 8*rsi], rcx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1660

LBB1_1661:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1662:
	LONG $0xf20c8b48             // mov    rcx, qword [rdx + 8*rsi]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf00c8949             // mov    qword [r8 + 8*rsi], rcx
	LONG $0xf24c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rcx
	LONG $0xf24c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rcx
	LONG $0xf24c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xf04c8949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rcx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1662
	JMP  LBB1_1807

LBB1_380:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	LONG $0x01100ff3         // movss    xmm0, dword [rcx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_382
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_978
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_978

LBB1_382:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1667:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1669

LBB1_1668:
	LONG $0x0c100ff3; BYTE $0x8a   // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8580ff3               // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB1_1668

LBB1_1669:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB1_1807

LBB1_1670:
	LONG $0x0c100ff3; BYTE $0x8a               // movss    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x880c             // movss    dword [r8 + 4*rcx], xmm1
	LONG $0x4c100ff3; WORD $0x048a             // movss    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x04 // movss    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x088a             // movss    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x08 // movss    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c8a             // movss    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x884c; BYTE $0x0c // movss    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_1670
	JMP  LBB1_1807

LBB1_383:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_385
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_981
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_981

LBB1_385:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1675:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1677

LBB1_1676:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1676

LBB1_1677:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1678:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1678
	JMP  LBB1_1807

LBB1_386:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB1_691
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB1_990

LBB1_389:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_391
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_991
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_991

LBB1_391:
	WORD $0xf631 // xor    esi, esi

LBB1_1683:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1685

LBB1_1684:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1684

LBB1_1685:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1686:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1686
	JMP  LBB1_1807

LBB1_392:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_394
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_994
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_994

LBB1_394:
	WORD $0xf631 // xor    esi, esi

LBB1_1691:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1693

LBB1_1692:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128     // sub    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1692

LBB1_1693:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1694:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc128                 // sub    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc128                 // sub    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1694
	JMP  LBB1_1807

LBB1_395:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_397
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_997
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_997

LBB1_397:
	WORD $0xff31 // xor    edi, edi

LBB1_1699:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1701

LBB1_1700:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1700

LBB1_1701:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1702:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1702
	JMP  LBB1_1807

LBB1_398:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_400
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_1000
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_1000

LBB1_400:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1109:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1111

LBB1_1110:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1110

LBB1_1111:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_1807

LBB1_1112:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1112
	JMP  LBB1_1807

LBB1_401:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x098a             // mov    cl, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_403
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_1002
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_1002

LBB1_403:
	WORD $0xff31 // xor    edi, edi

LBB1_1707:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1709

LBB1_1708:
	LONG $0x3a04b60f // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6     // mul    cl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1708

LBB1_1709:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1710:
	LONG $0x3a04b60f             // movzx    eax, byte [rdx + rdi]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rdi + 1]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rdi + 2]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rdi + 3]
	WORD $0xe1f6                 // mul    cl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB1_1710
	JMP  LBB1_1807

LBB1_404:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_406
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB1_1005
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB1_1005

LBB1_406:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1119:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB1_1121

LBB1_1120:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_1120

LBB1_1121:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB1_1807

LBB1_1122:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB1_1122
	JMP  LBB1_1807

LBB1_407:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_409
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1007
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1007

LBB1_409:
	WORD $0xf631 // xor    esi, esi

LBB1_1715:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1717

LBB1_1716:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1716

LBB1_1717:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1718:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1718
	JMP  LBB1_1807

LBB1_410:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018a             // mov    al, byte [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB1_412
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1010
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1010

LBB1_412:
	WORD $0xf631 // xor    esi, esi

LBB1_1723:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1725

LBB1_1724:
	LONG $0x320cb60f // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100     // add    cl, al
	LONG $0x300c8841 // mov    byte [r8 + rsi], cl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB1_1724

LBB1_1725:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1726:
	LONG $0x320cb60f             // movzx    ecx, byte [rdx + rsi]
	WORD $0xc100                 // add    cl, al
	LONG $0x300c8841             // mov    byte [r8 + rsi], cl
	LONG $0x324cb60f; BYTE $0x01 // movzx    ecx, byte [rdx + rsi + 1]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x01 // mov    byte [r8 + rsi + 1], cl
	LONG $0x324cb60f; BYTE $0x02 // movzx    ecx, byte [rdx + rsi + 2]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x02 // mov    byte [r8 + rsi + 2], cl
	LONG $0x324cb60f; BYTE $0x03 // movzx    ecx, byte [rdx + rsi + 3]
	WORD $0xc100                 // add    cl, al
	LONG $0x304c8841; BYTE $0x03 // mov    byte [r8 + rsi + 3], cl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1726
	JMP  LBB1_1807

LBB1_413:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_415
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1013
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1013

LBB1_415:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1731:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1733

LBB1_1732:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1732

LBB1_1733:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1734:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1734
	JMP  LBB1_1807

LBB1_416:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_418
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1016
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1016

LBB1_418:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1739:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1741

LBB1_1740:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1740

LBB1_1741:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1742:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1742
	JMP  LBB1_1807

LBB1_419:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_421
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1019
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1019

LBB1_421:
	WORD $0xf631 // xor    esi, esi

LBB1_1747:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1749

LBB1_1748:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1748

LBB1_1749:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1750:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1750
	JMP  LBB1_1807

LBB1_422:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_424
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1022
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1022

LBB1_424:
	WORD $0xf631 // xor    esi, esi

LBB1_1755:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1757

LBB1_1756:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129             // sub    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1756

LBB1_1757:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1758:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc129                 // sub    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1758
	JMP  LBB1_1807

LBB1_425:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_427
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1025
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1025

LBB1_427:
	WORD $0xf631 // xor    esi, esi

LBB1_1763:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1765

LBB1_1764:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1764

LBB1_1765:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1766:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1766
	JMP  LBB1_1807

LBB1_428:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_430
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1028
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1028

LBB1_430:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1771:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1773
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1773:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1807

LBB1_1774:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1774
	JMP  LBB1_1807

LBB1_431:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_433
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1031
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1031

LBB1_433:
	WORD $0xf631 // xor    esi, esi

LBB1_1779:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1781

LBB1_1780:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8 // imul    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1780

LBB1_1781:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1782:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xc8     // imul    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1782
	JMP  LBB1_1807

LBB1_434:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_436
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1034
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1034

LBB1_436:
	WORD $0xc931 // xor    ecx, ecx

LBB1_1787:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB1_1789
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB1_1789:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB1_1807

LBB1_1790:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_1790
	JMP  LBB1_1807

LBB1_437:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_439
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1037
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1037

LBB1_439:
	WORD $0xf631 // xor    esi, esi

LBB1_1795:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1797

LBB1_1796:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1796

LBB1_1797:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1798:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1798
	JMP  LBB1_1807

LBB1_440:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB1_1807
	WORD $0x018b             // mov    eax, dword [rcx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB1_442
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB1_1040
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB1_1040

LBB1_442:
	WORD $0xf631 // xor    esi, esi

LBB1_1803:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB1_1805

LBB1_1804:
	WORD $0x0c8b; BYTE $0xb2 // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101             // add    ecx, eax
	LONG $0xb00c8941         // mov    dword [r8 + 4*rsi], ecx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB1_1804

LBB1_1805:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB1_1807

LBB1_1806:
	WORD $0x0c8b; BYTE $0xb2     // mov    ecx, dword [rdx + 4*rsi]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb00c8941             // mov    dword [r8 + 4*rsi], ecx
	LONG $0x04b24c8b             // mov    ecx, dword [rdx + 4*rsi + 4]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], ecx
	LONG $0x08b24c8b             // mov    ecx, dword [rdx + 4*rsi + 8]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], ecx
	LONG $0x0cb24c8b             // mov    ecx, dword [rdx + 4*rsi + 12]
	WORD $0xc101                 // add    ecx, eax
	LONG $0xb04c8941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], ecx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB1_1806
	JMP  LBB1_1807

LBB1_446:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8798d48         // lea    rdi, [rcx - 8]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x03eec148         // shr    rsi, 3
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x38ff8348         // cmp    rdi, 56
	JAE  LBB1_750
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_752

LBB1_535:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc798d48         // lea    rdi, [rcx - 4]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x02eec148         // shr    rsi, 2
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x1cff8348         // cmp    rdi, 28
	JAE  LBB1_842
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_844

LBB1_543:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB1_544:
	LONG $0xfa0c8b48             // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf80c8949             // mov    qword [r8 + 8*rdi], rcx
	LONG $0xfa4c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rdi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rcx
	LONG $0xfa4c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rdi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rcx
	LONG $0xfa4c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rdi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rcx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB1_544

LBB1_545:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_1807
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB1_547:
	LONG $0xfa0c8b48         // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48         // imul    rcx, rax
	LONG $0xfe0c8948         // mov    qword [rsi + 8*rdi], rcx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB1_547
	JMP  LBB1_1807

LBB1_551:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB1_552:
	LONG $0xfa0c8b48             // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf80c8949             // mov    qword [r8 + 8*rdi], rcx
	LONG $0xfa4c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rdi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rcx
	LONG $0xfa4c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rdi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rcx
	LONG $0xfa4c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rdi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rcx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB1_552

LBB1_553:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_1807
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB1_555:
	LONG $0xfa0c8b48         // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48         // imul    rcx, rax
	LONG $0xfe0c8948         // mov    qword [rsi + 8*rdi], rcx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB1_555
	JMP  LBB1_1807

LBB1_571:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0798d48         // lea    rdi, [rcx - 16]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x04eec148         // shr    rsi, 4
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x70ff8348         // cmp    rdi, 112
	JAE  LBB1_871
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_873

LBB1_648:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB1_649:
	LONG $0xfa0c8b48             // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf80c8949             // mov    qword [r8 + 8*rdi], rcx
	LONG $0xfa4c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rdi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rcx
	LONG $0xfa4c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rdi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rcx
	LONG $0xfa4c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rdi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rcx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB1_649

LBB1_650:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_1807
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB1_652:
	LONG $0xfa0c8b48         // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48         // imul    rcx, rax
	LONG $0xfe0c8948         // mov    qword [rsi + 8*rdi], rcx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB1_652
	JMP  LBB1_1807

LBB1_662:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB1_663:
	LONG $0xfa0c8b48             // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf80c8949             // mov    qword [r8 + 8*rdi], rcx
	LONG $0xfa4c8b48; BYTE $0x08 // mov    rcx, qword [rdx + 8*rdi + 8]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rcx
	LONG $0xfa4c8b48; BYTE $0x10 // mov    rcx, qword [rdx + 8*rdi + 16]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rcx
	LONG $0xfa4c8b48; BYTE $0x18 // mov    rcx, qword [rdx + 8*rdi + 24]
	LONG $0xc8af0f48             // imul    rcx, rax
	LONG $0xf84c8949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rcx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB1_663

LBB1_664:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB1_1807
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xfa148d48         // lea    rdx, [rdx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB1_666:
	LONG $0xfa0c8b48         // mov    rcx, qword [rdx + 8*rdi]
	LONG $0xc8af0f48         // imul    rcx, rax
	LONG $0xfe0c8948         // mov    qword [rsi + 8*rdi], rcx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB1_666
	JMP  LBB1_1807

LBB1_691:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0                   // and    ecx, -32
	LONG $0xe0798d48                           // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x05eec148                           // shr    rsi, 5
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x07                   // and    edx, 7
	LONG $0xe0ff8148; WORD $0x0000; BYTE $0x00 // cmp    rdi, 224
	JAE  LBB1_984
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB1_986

LBB1_747:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1123
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_749:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_749
	JMP  LBB1_1124

LBB1_757:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1131
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_759:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_759
	JMP  LBB1_1132

LBB1_760:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1139
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_762:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_762
	JMP  LBB1_1140

LBB1_763:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1147
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_765:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_765
	JMP  LBB1_1148

LBB1_766:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB1_1043
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_1045

LBB1_768:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1155
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_770:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_770
	JMP  LBB1_1156

LBB1_771:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB1_1053
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_1055

LBB1_773:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1163
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_775:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_775
	JMP  LBB1_1164

LBB1_776:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1171
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_778:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_778
	JMP  LBB1_1172

LBB1_779:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc718d48             // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1179
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_781:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_781
	JMP  LBB1_1180

LBB1_782:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc718d48             // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1189
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_784:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_784
	JMP  LBB1_1190

LBB1_785:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1199
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_787:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_787
	JMP  LBB1_1200

LBB1_788:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1207
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_790:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_790
	JMP  LBB1_1208

LBB1_791:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1215
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_793:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_793
	JMP  LBB1_1216

LBB1_794:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1223
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x20 // movdqa    xmm0, oword 32[rbp] /* [rip + .LCPI1_2] */

LBB1_796:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_796
	JMP  LBB1_1224

LBB1_797:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1231
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_799:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_799
	JMP  LBB1_1232

LBB1_800:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1239
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x20 // movdqa    xmm0, oword 32[rbp] /* [rip + .LCPI1_2] */

LBB1_802:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_802
	JMP  LBB1_1240

LBB1_803:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1247
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_805:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_805
	JMP  LBB1_1248

LBB1_806:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1255
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_808:
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20fa             // movupd    xmm2, oword [rdx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30fa             // movupd    xmm3, oword [rdx + 8*rdi + 48]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_808
	JMP  LBB1_1256

LBB1_809:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1263
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_811:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_811
	JMP  LBB1_1264

LBB1_812:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1271
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_814:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_814
	JMP  LBB1_1272

LBB1_815:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1279
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_817:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_817
	JMP  LBB1_1280

LBB1_818:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1287
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_820:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_820
	JMP  LBB1_1288

LBB1_821:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1295
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x50 // movdqa    xmm3, oword 80[rbp] /* [rip + .LCPI1_5] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB1_823:
	LONG $0x2c6f0ff3; BYTE $0x02               // movdqu    xmm5, oword [rdx + rax]
	LONG $0x746f0ff3; WORD $0x1002             // movdqu    xmm6, oword [rdx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2002             // movdqu    xmm5, oword [rdx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3002             // movdqu    xmm6, oword [rdx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_823
	JMP  LBB1_1296

LBB1_824:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1303
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x4045 // movdqa    xmm8, oword 64[rbp] /* [rip + .LCPI1_4] */

LBB1_826:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_826
	JMP  LBB1_1304

LBB1_827:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1311
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x50 // movdqa    xmm3, oword 80[rbp] /* [rip + .LCPI1_5] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB1_829:
	LONG $0x2c6f0ff3; BYTE $0x02               // movdqu    xmm5, oword [rdx + rax]
	LONG $0x746f0ff3; WORD $0x1002             // movdqu    xmm6, oword [rdx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2002             // movdqu    xmm5, oword [rdx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3002             // movdqu    xmm6, oword [rdx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_829
	JMP  LBB1_1312

LBB1_830:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB1_1319
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x4045 // movdqa    xmm8, oword 64[rbp] /* [rip + .LCPI1_4] */

LBB1_832:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_832
	JMP  LBB1_1320

LBB1_833:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1327
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_835:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_835
	JMP  LBB1_1328

LBB1_836:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1335
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_838:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_838
	JMP  LBB1_1336

LBB1_839:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1343
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_841:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_841
	JMP  LBB1_1344

LBB1_849:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1351
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_851:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_851
	JMP  LBB1_1352

LBB1_852:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1359
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_854:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_854
	JMP  LBB1_1360

LBB1_855:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB1_1063
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_1065

LBB1_857:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB1_1073
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_1075

LBB1_859:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1367
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_861:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_861
	JMP  LBB1_1368

LBB1_862:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1375
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_864:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_864
	JMP  LBB1_1376

LBB1_865:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1383
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_867:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_867
	JMP  LBB1_1384

LBB1_868:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1391
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_870:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_870
	JMP  LBB1_1392

LBB1_878:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1399
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_880:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_880
	JMP  LBB1_1400

LBB1_881:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1407
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_883:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_883
	JMP  LBB1_1408

LBB1_884:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1415
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_886:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_886
	JMP  LBB1_1416

LBB1_887:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1423
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_889:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_889
	JMP  LBB1_1424

LBB1_890:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1431
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_892:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_892
	JMP  LBB1_1432

LBB1_893:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1439
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_895:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_895
	JMP  LBB1_1440

LBB1_896:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1447
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_898:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_898
	JMP  LBB1_1448

LBB1_899:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB1_1083
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_1085

LBB1_901:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1455
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_903:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_903
	JMP  LBB1_1456

LBB1_904:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1463
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_906:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_906
	JMP  LBB1_1464

LBB1_907:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1471
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_909:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_909
	JMP  LBB1_1472

LBB1_910:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB1_1093
	WORD $0xc031             // xor    eax, eax
	JMP  LBB1_1095

LBB1_912:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1479
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_914:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_914
	JMP  LBB1_1480

LBB1_915:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1487
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_917:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_917
	JMP  LBB1_1488

LBB1_918:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1495
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_920:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_920
	JMP  LBB1_1496

LBB1_921:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1503
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_923:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_923
	JMP  LBB1_1504

LBB1_924:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf04e8d48             // lea    rcx, [rsi - 16]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1511
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_926:
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x207a             // movdqu    xmm1, oword [rdx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x307a             // movdqu    xmm2, oword [rdx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_926
	JMP  LBB1_1512

LBB1_927:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1519
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_929:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_929
	JMP  LBB1_1520

LBB1_930:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1527
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_932:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_932
	JMP  LBB1_1528

LBB1_933:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1537
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_935:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_935
	JMP  LBB1_1538

LBB1_936:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1545
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_938:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_938
	JMP  LBB1_1546

LBB1_939:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1555
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_941:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_941
	JMP  LBB1_1556

LBB1_942:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1563
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_944:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_944
	JMP  LBB1_1564

LBB1_945:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1571
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_947:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_947
	JMP  LBB1_1572

LBB1_948:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1579
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_950:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_950
	JMP  LBB1_1580

LBB1_951:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1587
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_953:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_953
	JMP  LBB1_1588

LBB1_954:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1595
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB1_956:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_956
	JMP  LBB1_1596

LBB1_957:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1603
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI1_3] */

LBB1_959:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_959
	JMP  LBB1_1604

LBB1_960:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1613
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_962:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_962
	JMP  LBB1_1614

LBB1_963:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1621
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB1_965:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB1_965
	JMP  LBB1_1622

LBB1_966:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB1_1629
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI1_3] */

LBB1_968:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_968
	JMP  LBB1_1630

LBB1_969:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1639
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_971:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_971
	JMP  LBB1_1640

LBB1_972:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1647
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_974:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_974
	JMP  LBB1_1648

LBB1_975:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc4e8d48             // lea    rcx, [rsi - 4]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1655
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_977:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_977
	JMP  LBB1_1656

LBB1_978:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1663
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_980:
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xba54100f; BYTE $0x20   // movups    xmm2, oword [rdx + 4*rdi + 32]
	LONG $0xba5c100f; BYTE $0x30   // movups    xmm3, oword [rdx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB1_980
	JMP  LBB1_1664

LBB1_981:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1671
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_983:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_983
	JMP  LBB1_1672

LBB1_991:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1679
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_993:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_993
	JMP  LBB1_1680

LBB1_994:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1687
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_996:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_996
	JMP  LBB1_1688

LBB1_997:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1695
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x50 // movdqa    xmm3, oword 80[rbp] /* [rip + .LCPI1_5] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB1_999:
	LONG $0x2c6f0ff3; BYTE $0x02               // movdqu    xmm5, oword [rdx + rax]
	LONG $0x746f0ff3; WORD $0x1002             // movdqu    xmm6, oword [rdx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2002             // movdqu    xmm5, oword [rdx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3002             // movdqu    xmm6, oword [rdx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_999
	JMP  LBB1_1696

LBB1_1000:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB1_1103
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_1105

LBB1_1002:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_1703
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x50 // movdqa    xmm3, oword 80[rbp] /* [rip + .LCPI1_5] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB1_1004:
	LONG $0x2c6f0ff3; BYTE $0x02               // movdqu    xmm5, oword [rdx + rax]
	LONG $0x746f0ff3; WORD $0x1002             // movdqu    xmm6, oword [rdx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2002             // movdqu    xmm5, oword [rdx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3002             // movdqu    xmm6, oword [rdx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1004
	JMP  LBB1_1704

LBB1_1005:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB1_1113
	WORD $0xff31             // xor    edi, edi
	JMP  LBB1_1115

LBB1_1007:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1711
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1009:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1009
	JMP  LBB1_1712

LBB1_1010:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xc8     // movzx    ecx, al
	LONG $0xc16e0f66             // movd    xmm0, ecx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1719
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1012:
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x203a             // movdqu    xmm1, oword [rdx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x303a             // movdqu    xmm2, oword [rdx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1012
	JMP  LBB1_1720

LBB1_1013:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1727
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_1015:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1015
	JMP  LBB1_1728

LBB1_1016:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1735
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_1018:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1018
	JMP  LBB1_1736

LBB1_1019:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1743
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1021:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1021
	JMP  LBB1_1744

LBB1_1022:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1751
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1024:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1024
	JMP  LBB1_1752

LBB1_1025:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1759
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1027:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1027
	JMP  LBB1_1760

LBB1_1028:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1767
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_1030:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1030
	JMP  LBB1_1768

LBB1_1031:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1775
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1033:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1033
	JMP  LBB1_1776

LBB1_1034:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1783
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_1036:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB1_1036
	JMP  LBB1_1784

LBB1_1037:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1791
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1039:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1039
	JMP  LBB1_1792

LBB1_1040:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf84e8d48             // lea    rcx, [rsi - 8]
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_1799
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0xfee18348             // and    rcx, -2
	WORD $0xf748; BYTE $0xd9     // neg    rcx
	WORD $0xff31                 // xor    edi, edi

LBB1_1042:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c18348                           // add    rcx, 2
	JNE  LBB1_1042
	JMP  LBB1_1800

LBB1_750:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_751:
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x40 // movdqu    oword [r8 + 4*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x50 // movdqu    oword [r8 + 4*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x60 // movdqu    oword [r8 + 4*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x70 // movdqu    oword [r8 + 4*rdi + 112], xmm0
	QUAD $0x0080b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 128], xmm0
	QUAD $0x0090b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 144], xmm0
	QUAD $0x00a0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 160], xmm0
	QUAD $0x00b0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 176], xmm0
	QUAD $0x00c0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 192], xmm0
	QUAD $0x00d0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 208], xmm0
	QUAD $0x00e0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 224], xmm0
	QUAD $0x00f0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 240], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB1_751

LBB1_752:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_755
	LONG $0xb8348d49         // lea    rsi, [r8 + 4*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_754:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_754

LBB1_755:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807

LBB1_756:
	QUAD $0x000000008804c741 // mov    dword [r8 + 4*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB1_756
	JMP  LBB1_1807

LBB1_842:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_843:
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x40 // movdqu    oword [r8 + 8*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x50 // movdqu    oword [r8 + 8*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x60 // movdqu    oword [r8 + 8*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x70 // movdqu    oword [r8 + 8*rdi + 112], xmm0
	QUAD $0x0080f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 128], xmm0
	QUAD $0x0090f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 144], xmm0
	QUAD $0x00a0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 160], xmm0
	QUAD $0x00b0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 176], xmm0
	QUAD $0x00c0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 192], xmm0
	QUAD $0x00d0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 208], xmm0
	QUAD $0x00e0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 224], xmm0
	QUAD $0x00f0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 240], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB1_843

LBB1_844:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_847
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_846:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_846

LBB1_847:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807

LBB1_848:
	QUAD $0x00000000c804c749 // mov    qword [r8 + 8*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB1_848
	JMP  LBB1_1807

LBB1_871:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_872:
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x40 // movdqu    oword [r8 + 2*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x50 // movdqu    oword [r8 + 2*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x60 // movdqu    oword [r8 + 2*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x70 // movdqu    oword [r8 + 2*rdi + 112], xmm0
	QUAD $0x008078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 128], xmm0
	QUAD $0x009078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 144], xmm0
	QUAD $0x00a078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 160], xmm0
	QUAD $0x00b078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 176], xmm0
	QUAD $0x00c078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 192], xmm0
	QUAD $0x00d078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 208], xmm0
	QUAD $0x00e078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 224], xmm0
	QUAD $0x00f078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 240], xmm0
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB1_872

LBB1_873:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_876
	LONG $0x78348d49         // lea    rsi, [r8 + 2*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_875:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_875

LBB1_876:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807

LBB1_877:
	LONG $0x04c74166; WORD $0x0048; BYTE $0x00 // mov    word [r8 + 2*rcx], 0
	LONG $0x01c18348                           // add    rcx, 1
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB1_877
	JMP  LBB1_1807

LBB1_984:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_985:
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x40 // movdqu    oword [r8 + rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x50 // movdqu    oword [r8 + rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm0
	QUAD $0x008038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 128], xmm0
	QUAD $0x009038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 144], xmm0
	QUAD $0x00a038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 160], xmm0
	QUAD $0x00b038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 176], xmm0
	QUAD $0x00c038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 192], xmm0
	QUAD $0x00d038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 208], xmm0
	QUAD $0x00e038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 224], xmm0
	QUAD $0x00f038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 240], xmm0
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB1_985

LBB1_986:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_989
	LONG $0x07348d4a         // lea    rsi, [rdi + r8]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB1_988:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_988

LBB1_989:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807

LBB1_990:
	LONG $0x0804c641; BYTE $0x00 // mov    byte [r8 + rcx], 0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB1_990

LBB1_1807:
	RET

LBB1_1043:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_1044:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_1044

LBB1_1045:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1048
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_1047:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_1047

LBB1_1048:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1049

LBB1_1053:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_1054:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_1054

LBB1_1055:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1058
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_1057:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_1057

LBB1_1058:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1059

LBB1_1063:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_1064:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_1064

LBB1_1065:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1068
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_1067:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_1067

LBB1_1068:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1069

LBB1_1073:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_1074:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_1074

LBB1_1075:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1078
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_1077:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_1077

LBB1_1078:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1079

LBB1_1083:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_1084:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_1084

LBB1_1085:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1088
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_1087:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_1087

LBB1_1088:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1089

LBB1_1093:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB1_1094:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB1_1094

LBB1_1095:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_1098
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_1097:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB1_1097

LBB1_1098:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1099

LBB1_1103:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_1104:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB1_1104

LBB1_1105:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB1_1108
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB1_1107:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB1_1107

LBB1_1108:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1109

LBB1_1113:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB1_1114:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB1_1114

LBB1_1115:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB1_1118
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB1_1117:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB1_1117

LBB1_1118:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1119

LBB1_1123:
	WORD $0xff31 // xor    edi, edi

LBB1_1124:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1126
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1126:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1127

LBB1_1131:
	WORD $0xff31 // xor    edi, edi

LBB1_1132:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1134
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1134:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1135

LBB1_1139:
	WORD $0xff31 // xor    edi, edi

LBB1_1140:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1142
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1142:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1143

LBB1_1147:
	WORD $0xff31 // xor    edi, edi

LBB1_1148:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1150
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1150:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1151

LBB1_1155:
	WORD $0xff31 // xor    edi, edi

LBB1_1156:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1158
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1158:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1159

LBB1_1163:
	WORD $0xff31 // xor    edi, edi

LBB1_1164:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1166
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1166:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1167

LBB1_1171:
	WORD $0xff31 // xor    edi, edi

LBB1_1172:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1174
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1174:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1175

LBB1_1179:
	WORD $0xff31 // xor    edi, edi

LBB1_1180:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1182
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB1_1182:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1183

LBB1_1189:
	WORD $0xff31 // xor    edi, edi

LBB1_1190:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1192
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB1_1192:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1193

LBB1_1199:
	WORD $0xff31 // xor    edi, edi

LBB1_1200:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1202
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_1202:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1203

LBB1_1207:
	WORD $0xff31 // xor    edi, edi

LBB1_1208:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1210
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd15c0f66                           // subpd    xmm2, xmm1
	LONG $0xd95c0f66                           // subpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_1210:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1211

LBB1_1215:
	WORD $0xff31 // xor    edi, edi

LBB1_1216:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1218
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_1218:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1219

LBB1_1223:
	WORD $0xff31 // xor    edi, edi

LBB1_1224:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1226
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, oword 32[rbp] /* [rip + .LCPI1_2] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB1_1226:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1227

LBB1_1231:
	WORD $0xff31 // xor    edi, edi

LBB1_1232:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1234
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_1234:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1235

LBB1_1239:
	WORD $0xff31 // xor    edi, edi

LBB1_1240:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1242
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, oword 32[rbp] /* [rip + .LCPI1_2] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB1_1242:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1243

LBB1_1247:
	WORD $0xff31 // xor    edi, edi

LBB1_1248:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1250
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_1250:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1251

LBB1_1255:
	WORD $0xff31 // xor    edi, edi

LBB1_1256:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1258
	LONG $0x14100f66; BYTE $0xfa               // movupd    xmm2, oword [rdx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10fa             // movupd    xmm3, oword [rdx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB1_1258:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1259

LBB1_1263:
	WORD $0xff31 // xor    edi, edi

LBB1_1264:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1266
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1266:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1267

LBB1_1271:
	WORD $0xff31 // xor    edi, edi

LBB1_1272:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1274
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1274:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1275

LBB1_1279:
	WORD $0xff31 // xor    edi, edi

LBB1_1280:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1282
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1282:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1283

LBB1_1287:
	WORD $0xff31 // xor    edi, edi

LBB1_1288:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1290
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1290:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1291

LBB1_1295:
	WORD $0xc031 // xor    eax, eax

LBB1_1296:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1298
	LONG $0x146f0ff3; BYTE $0x02               // movdqu    xmm2, oword [rdx + rax]
	LONG $0x5c6f0ff3; WORD $0x1002             // movdqu    xmm3, oword [rdx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x50               // movdqa    xmm4, oword 80[rbp] /* [rip + .LCPI1_5] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB1_1298:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1807
	JMP  LBB1_1299

LBB1_1303:
	WORD $0xf631 // xor    esi, esi

LBB1_1304:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1306
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x40               // movdqa    xmm4, oword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB1_1306:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1307

LBB1_1311:
	WORD $0xc031 // xor    eax, eax

LBB1_1312:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1314
	LONG $0x146f0ff3; BYTE $0x02               // movdqu    xmm2, oword [rdx + rax]
	LONG $0x5c6f0ff3; WORD $0x1002             // movdqu    xmm3, oword [rdx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x50               // movdqa    xmm4, oword 80[rbp] /* [rip + .LCPI1_5] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB1_1314:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1807
	JMP  LBB1_1315

LBB1_1319:
	WORD $0xf631 // xor    esi, esi

LBB1_1320:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1322
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x40               // movdqa    xmm4, oword 64[rbp] /* [rip + .LCPI1_4] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB1_1322:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1323

LBB1_1327:
	WORD $0xff31 // xor    edi, edi

LBB1_1328:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1330
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1330:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1331

LBB1_1335:
	WORD $0xff31 // xor    edi, edi

LBB1_1336:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1338
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1338:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1339

LBB1_1343:
	WORD $0xff31 // xor    edi, edi

LBB1_1344:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1346
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1346:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1347

LBB1_1351:
	WORD $0xff31 // xor    edi, edi

LBB1_1352:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1354
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1354:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1355

LBB1_1359:
	WORD $0xff31 // xor    edi, edi

LBB1_1360:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1362
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1362:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1363

LBB1_1367:
	WORD $0xff31 // xor    edi, edi

LBB1_1368:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1370
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1370:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1371

LBB1_1375:
	WORD $0xff31 // xor    edi, edi

LBB1_1376:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1378
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1378:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1379

LBB1_1383:
	WORD $0xff31 // xor    edi, edi

LBB1_1384:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1386
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1386:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1387

LBB1_1391:
	WORD $0xff31 // xor    edi, edi

LBB1_1392:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1394
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1394:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1395

LBB1_1399:
	WORD $0xff31 // xor    edi, edi

LBB1_1400:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1402
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1402:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1403

LBB1_1407:
	WORD $0xff31 // xor    edi, edi

LBB1_1408:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1410
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1410:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1411

LBB1_1415:
	WORD $0xff31 // xor    edi, edi

LBB1_1416:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1418
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1418:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1419

LBB1_1423:
	WORD $0xff31 // xor    edi, edi

LBB1_1424:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1426
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1426:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1427

LBB1_1431:
	WORD $0xff31 // xor    edi, edi

LBB1_1432:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1434
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8f90f66                           // psubw    xmm1, xmm0
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1434:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1435

LBB1_1439:
	WORD $0xff31 // xor    edi, edi

LBB1_1440:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1442
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1442:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1443

LBB1_1447:
	WORD $0xff31 // xor    edi, edi

LBB1_1448:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1450
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1450:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1451

LBB1_1455:
	WORD $0xf631 // xor    esi, esi

LBB1_1456:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1458
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB1_1458:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1459

LBB1_1463:
	WORD $0xff31 // xor    edi, edi

LBB1_1464:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1466
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1466:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1467

LBB1_1471:
	WORD $0xff31 // xor    edi, edi

LBB1_1472:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1474
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1474:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1475

LBB1_1479:
	WORD $0xf631 // xor    esi, esi

LBB1_1480:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1482
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB1_1482:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1483

LBB1_1487:
	WORD $0xff31 // xor    edi, edi

LBB1_1488:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1490
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1490:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1491

LBB1_1495:
	WORD $0xff31 // xor    edi, edi

LBB1_1496:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1498
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1498:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1499

LBB1_1503:
	WORD $0xff31 // xor    edi, edi

LBB1_1504:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1506
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1506:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1507

LBB1_1511:
	WORD $0xff31 // xor    edi, edi

LBB1_1512:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1514
	LONG $0x0c6f0ff3; BYTE $0x7a               // movdqu    xmm1, oword [rdx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x107a             // movdqu    xmm2, oword [rdx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB1_1514:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1515

LBB1_1519:
	WORD $0xff31 // xor    edi, edi

LBB1_1520:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1522
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1522:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1523

LBB1_1527:
	WORD $0xff31 // xor    edi, edi

LBB1_1528:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1530
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1530:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1531

LBB1_1537:
	WORD $0xff31 // xor    edi, edi

LBB1_1538:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1540
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1540:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1541

LBB1_1545:
	WORD $0xff31 // xor    edi, edi

LBB1_1546:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1548
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1548:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1549

LBB1_1555:
	WORD $0xff31 // xor    edi, edi

LBB1_1556:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1558
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1558:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1559

LBB1_1563:
	WORD $0xff31 // xor    edi, edi

LBB1_1564:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1566
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1566:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1567

LBB1_1571:
	WORD $0xff31 // xor    edi, edi

LBB1_1572:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1574
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8fb0f66                           // psubq    xmm1, xmm0
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1574:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1575

LBB1_1579:
	WORD $0xff31 // xor    edi, edi

LBB1_1580:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1582
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x5c0f; BYTE $0xd1       // subps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd9       // subps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1582:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1583

LBB1_1587:
	WORD $0xff31 // xor    edi, edi

LBB1_1588:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1590
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1590:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1591

LBB1_1595:
	WORD $0xf631 // xor    esi, esi

LBB1_1596:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1598
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB1_1598:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1599

LBB1_1603:
	WORD $0xff31 // xor    edi, edi

LBB1_1604:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1606
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x30               // movdqa    xmm2, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1606:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1607

LBB1_1613:
	WORD $0xff31 // xor    edi, edi

LBB1_1614:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1616
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1616:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1617

LBB1_1621:
	WORD $0xf631 // xor    esi, esi

LBB1_1622:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1624
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB1_1624:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1625

LBB1_1629:
	WORD $0xff31 // xor    edi, edi

LBB1_1630:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1632
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x30               // movdqa    xmm2, oword 48[rbp] /* [rip + .LCPI1_3] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1632:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1633

LBB1_1639:
	WORD $0xff31 // xor    edi, edi

LBB1_1640:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1642
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1642:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1643

LBB1_1647:
	WORD $0xff31 // xor    edi, edi

LBB1_1648:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1650
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1650:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1651

LBB1_1655:
	WORD $0xff31 // xor    edi, edi

LBB1_1656:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1658
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB1_1658:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1659

LBB1_1663:
	WORD $0xff31 // xor    edi, edi

LBB1_1664:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB1_1666
	LONG $0xba14100f               // movups    xmm2, oword [rdx + 4*rdi]
	LONG $0xba5c100f; BYTE $0x10   // movups    xmm3, oword [rdx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB1_1666:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1667

LBB1_1671:
	WORD $0xff31 // xor    edi, edi

LBB1_1672:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1674
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1674:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB1_1807
	JMP  LBB1_1675

LBB1_1679:
	WORD $0xff31 // xor    edi, edi

LBB1_1680:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1682
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1682:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1683

LBB1_1687:
	WORD $0xff31 // xor    edi, edi

LBB1_1688:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1690
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8f80f66                           // psubb    xmm1, xmm0
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1690:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1691

LBB1_1695:
	WORD $0xc031 // xor    eax, eax

LBB1_1696:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1698
	LONG $0x146f0ff3; BYTE $0x02               // movdqu    xmm2, oword [rdx + rax]
	LONG $0x5c6f0ff3; WORD $0x1002             // movdqu    xmm3, oword [rdx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x50               // movdqa    xmm4, oword 80[rbp] /* [rip + .LCPI1_5] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB1_1698:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1807
	JMP  LBB1_1699

LBB1_1703:
	WORD $0xc031 // xor    eax, eax

LBB1_1704:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1706
	LONG $0x146f0ff3; BYTE $0x02               // movdqu    xmm2, oword [rdx + rax]
	LONG $0x5c6f0ff3; WORD $0x1002             // movdqu    xmm3, oword [rdx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x50               // movdqa    xmm4, oword 80[rbp] /* [rip + .LCPI1_5] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB1_1706:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB1_1807
	JMP  LBB1_1707

LBB1_1711:
	WORD $0xff31 // xor    edi, edi

LBB1_1712:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1714
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1714:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1715

LBB1_1719:
	WORD $0xff31 // xor    edi, edi

LBB1_1720:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1722
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x546f0ff3; WORD $0x103a             // movdqu    xmm2, oword [rdx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB1_1722:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1723

LBB1_1727:
	WORD $0xff31 // xor    edi, edi

LBB1_1728:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1730
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1730:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1731

LBB1_1735:
	WORD $0xff31 // xor    edi, edi

LBB1_1736:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1738
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1738:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1739

LBB1_1743:
	WORD $0xff31 // xor    edi, edi

LBB1_1744:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1746
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1746:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1747

LBB1_1751:
	WORD $0xff31 // xor    edi, edi

LBB1_1752:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1754
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fa0f66                           // psubd    xmm1, xmm0
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1754:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1755

LBB1_1759:
	WORD $0xff31 // xor    edi, edi

LBB1_1760:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1762
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1762:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1763

LBB1_1767:
	WORD $0xff31 // xor    edi, edi

LBB1_1768:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1770
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1770:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1771

LBB1_1775:
	WORD $0xff31 // xor    edi, edi

LBB1_1776:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1778
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1778:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1779

LBB1_1783:
	WORD $0xff31 // xor    edi, edi

LBB1_1784:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1786
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB1_1786:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB1_1807
	JMP  LBB1_1787

LBB1_1791:
	WORD $0xff31 // xor    edi, edi

LBB1_1792:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1794
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1794:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1795

LBB1_1799:
	WORD $0xff31 // xor    edi, edi

LBB1_1800:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB1_1802
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB1_1802:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB1_1807
	JMP  LBB1_1803

DATA LCDATA3<>+0x000(SB)/8, $0x8000000000000000
DATA LCDATA3<>+0x008(SB)/8, $0x8000000000000000
DATA LCDATA3<>+0x010(SB)/8, $0x8000000080000000
DATA LCDATA3<>+0x018(SB)/8, $0x8000000080000000
DATA LCDATA3<>+0x020(SB)/8, $0x7fffffffffffffff
DATA LCDATA3<>+0x028(SB)/8, $0x7fffffffffffffff
DATA LCDATA3<>+0x030(SB)/8, $0x7fffffff7fffffff
DATA LCDATA3<>+0x038(SB)/8, $0x7fffffff7fffffff
DATA LCDATA3<>+0x040(SB)/8, $0x000000ff000000ff
DATA LCDATA3<>+0x048(SB)/8, $0x000000ff000000ff
DATA LCDATA3<>+0x050(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA3<>+0x058(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA3<>(SB), 8, $96

TEXT Â·_arithmetic_scalar_arr_sse4(SB), $0-48

	MOVQ typ+0(FP), DI
	MOVQ op+8(FP), SI
	MOVQ inLeft+16(FP), DX
	MOVQ inRight+24(FP), CX
	MOVQ out+32(FP), R8
	MOVQ len+40(FP), R9
	LEAQ LCDATA3<>(SB), BP

	LONG $0x06fe8040         // cmp    sil, 6
	JG   LBB2_13
	LONG $0x01fe8040         // cmp    sil, 1
	JLE  LBB2_25
	LONG $0x02fe8040         // cmp    sil, 2
	JE   LBB2_45
	LONG $0x04fe8040         // cmp    sil, 4
	JE   LBB2_53
	LONG $0x05fe8040         // cmp    sil, 5
	JNE  LBB2_1807
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_93
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_163
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_263
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_266
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_12
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_747
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_747

LBB2_12:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1127:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1129

LBB2_1128:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1128

LBB2_1129:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1130:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1130
	JMP  LBB2_1807

LBB2_13:
	LONG $0x08fe8040         // cmp    sil, 8
	JLE  LBB2_35
	LONG $0x09fe8040         // cmp    sil, 9
	JE   LBB2_61
	LONG $0x0bfe8040         // cmp    sil, 11
	JE   LBB2_69
	LONG $0x0cfe8040         // cmp    sil, 12
	JNE  LBB2_1807
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_100
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_168
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_269
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_272
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JAE  LBB2_446
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_756

LBB2_25:
	WORD $0x8440; BYTE $0xf6 // test    sil, sil
	JE   LBB2_77
	LONG $0x01fe8040         // cmp    sil, 1
	JNE  LBB2_1807
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_107
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_173
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_275
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_278
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_34
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_757
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_757

LBB2_34:
	WORD $0xf631 // xor    esi, esi

LBB2_1135:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1137

LBB2_1136:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1136

LBB2_1137:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1138:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1138
	JMP  LBB2_1807

LBB2_35:
	LONG $0x07fe8040         // cmp    sil, 7
	JE   LBB2_85
	LONG $0x08fe8040         // cmp    sil, 8
	JNE  LBB2_1807
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_114
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_178
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_281
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_284
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_44
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_760
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_760

LBB2_44:
	WORD $0xf631 // xor    esi, esi

LBB2_1143:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1145

LBB2_1144:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1144

LBB2_1145:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1146:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1146
	JMP  LBB2_1807

LBB2_45:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_121
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_183
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_287
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_290
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_52
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_763
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_763

LBB2_52:
	WORD $0xf631 // xor    esi, esi

LBB2_1151:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1153

LBB2_1152:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1152

LBB2_1153:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1154:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1154
	JMP  LBB2_1807

LBB2_53:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_128
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_188
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_293
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_296
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_60
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_766
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_766

LBB2_60:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1049:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1051

LBB2_1050:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB2_1050

LBB2_1051:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1807

LBB2_1052:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1052
	JMP  LBB2_1807

LBB2_61:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_135
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_193
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_299
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_302
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_68
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_768
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_768

LBB2_68:
	WORD $0xf631 // xor    esi, esi

LBB2_1159:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1161

LBB2_1160:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1160

LBB2_1161:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1162:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1162
	JMP  LBB2_1807

LBB2_69:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_142
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_198
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_305
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_308
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_76
	LONG $0x92048d4a         // lea    rax, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_771
	LONG $0x90048d4b         // lea    rax, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_771

LBB2_76:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1059:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1061

LBB2_1060:
	WORD $0x3c8b; BYTE $0x8a // mov    edi, dword [rdx + 4*rcx]
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc68348         // add    rsi, -1
	JNE  LBB2_1060

LBB2_1061:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1807

LBB2_1062:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1062
	JMP  LBB2_1807

LBB2_77:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_149
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_203
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_311
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_314
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_84
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_773
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_773

LBB2_84:
	WORD $0xf631 // xor    esi, esi

LBB2_1167:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1169

LBB2_1168:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1168

LBB2_1169:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1170:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1170
	JMP  LBB2_1807

LBB2_85:
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JG   LBB2_156
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JLE  LBB2_208
	WORD $0xff83; BYTE $0x04 // cmp    edi, 4
	JE   LBB2_317
	WORD $0xff83; BYTE $0x05 // cmp    edi, 5
	JE   LBB2_320
	WORD $0xff83; BYTE $0x06 // cmp    edi, 6
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_92
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_776
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_776

LBB2_92:
	WORD $0xf631 // xor    esi, esi

LBB2_1175:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1177

LBB2_1176:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1176

LBB2_1177:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1178:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1178
	JMP  LBB2_1807

LBB2_93:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_213
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_323
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_326
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_99
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_779
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_779

LBB2_99:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1183:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1186
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_1185:
	LONG $0x0c7e0ff3; BYTE $0xca   // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1185

LBB2_1186:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB2_1807
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_1188:
	LONG $0x0c7e0ff3; BYTE $0xca               // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c             // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7e0ff3; WORD $0x08ca             // movq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x08 // movq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7e0ff3; WORD $0x10ca             // movq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x10 // movq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7e0ff3; WORD $0x18ca             // movq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x18 // movq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_1188
	JMP  LBB2_1807

LBB2_100:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_218
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_329
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_332
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_106
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_782
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_782

LBB2_106:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1193:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1196
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_1195:
	LONG $0x0c7e0ff3; BYTE $0xca   // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1195

LBB2_1196:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB2_1807
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_1198:
	LONG $0x0c7e0ff3; BYTE $0xca               // movq    xmm1, qword [rdx + 8*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc80c             // movq    qword [r8 + 8*rcx], xmm1
	LONG $0x4c7e0ff3; WORD $0x08ca             // movq    xmm1, qword [rdx + 8*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x08 // movq    qword [r8 + 8*rcx + 8], xmm1
	LONG $0x4c7e0ff3; WORD $0x10ca             // movq    xmm1, qword [rdx + 8*rcx + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x10 // movq    qword [r8 + 8*rcx + 16], xmm1
	LONG $0x4c7e0ff3; WORD $0x18ca             // movq    xmm1, qword [rdx + 8*rcx + 24]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd60f4166; WORD $0xc84c; BYTE $0x18 // movq    qword [r8 + 8*rcx + 24], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_1198
	JMP  LBB2_1807

LBB2_107:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_223
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_335
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_338
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_113
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_785
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_785

LBB2_113:
	WORD $0xd231 // xor    edx, edx

LBB2_1203:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1205

LBB2_1204:
	LONG $0xc8280f66               // movapd    xmm1, xmm0
	LONG $0x0c5c0ff2; BYTE $0xd1   // subsd    xmm1, qword [rcx + 8*rdx]
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1204

LBB2_1205:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1206:
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x0c5c0ff2; BYTE $0xd1               // subsd    xmm1, qword [rcx + 8*rdx]
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x08d1             // subsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x10d1             // subsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x18d1             // subsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1206
	JMP  LBB2_1807

LBB2_114:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_228
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_341
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_344
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_120
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_788
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_788

LBB2_120:
	WORD $0xd231 // xor    edx, edx

LBB2_1211:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1213

LBB2_1212:
	LONG $0xc8280f66               // movapd    xmm1, xmm0
	LONG $0x0c5c0ff2; BYTE $0xd1   // subsd    xmm1, qword [rcx + 8*rdx]
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1212

LBB2_1213:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1214:
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x0c5c0ff2; BYTE $0xd1               // subsd    xmm1, qword [rcx + 8*rdx]
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x08d1             // subsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x10d1             // subsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0xc8280f66                           // movapd    xmm1, xmm0
	LONG $0x4c5c0ff2; WORD $0x18d1             // subsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1214
	JMP  LBB2_1807

LBB2_121:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_233
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_347
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_350
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_127
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_791
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_791

LBB2_127:
	WORD $0xd231 // xor    edx, edx

LBB2_1219:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1221

LBB2_1220:
	LONG $0x0c100ff2; BYTE $0xd1   // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8590ff2               // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1220

LBB2_1221:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1222:
	LONG $0x0c100ff2; BYTE $0xd1               // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c100ff2; WORD $0x08d1             // movsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10d1             // movsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18d1             // movsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1222
	JMP  LBB2_1807

LBB2_128:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_238
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_353
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_356
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_134
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_794
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_794

LBB2_134:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1227:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB2_1229

LBB2_1228:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB2_1228

LBB2_1229:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1230:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1230
	JMP  LBB2_1807

LBB2_135:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_243
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_359
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_362
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_141
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_797
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_797

LBB2_141:
	WORD $0xd231 // xor    edx, edx

LBB2_1235:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1237

LBB2_1236:
	LONG $0x0c100ff2; BYTE $0xd1   // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8590ff2               // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1236

LBB2_1237:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1238:
	LONG $0x0c100ff2; BYTE $0xd1               // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c100ff2; WORD $0x08d1             // movsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10d1             // movsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18d1             // movsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0xc8590ff2                           // mulsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1238
	JMP  LBB2_1807

LBB2_142:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_248
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_365
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_368
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_148
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_800
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_800

LBB2_148:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1243:
	QUAD $0xffffffffffffbe48; WORD $0x7fff // mov    rsi, 9223372036854775807
	WORD $0x8949; BYTE $0xc9               // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1               // not    r9
	WORD $0x014d; BYTE $0xd1               // add    r9, r10
	WORD $0x894c; BYTE $0xd0               // mov    rax, r10
	LONG $0x03e08348                       // and    rax, 3
	JE   LBB2_1245

LBB2_1244:
	LONG $0xca3c8b48         // mov    rdi, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf7 // and    rdi, rsi
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB2_1244

LBB2_1245:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1246:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	WORD $0x2148; BYTE $0xf0     // and    rax, rsi
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1246
	JMP  LBB2_1807

LBB2_149:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_253
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_371
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_374
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_155
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_803
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_803

LBB2_155:
	WORD $0xd231 // xor    edx, edx

LBB2_1251:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1253

LBB2_1252:
	LONG $0x0c100ff2; BYTE $0xd1   // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1252

LBB2_1253:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1254:
	LONG $0x0c100ff2; BYTE $0xd1               // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c100ff2; WORD $0x08d1             // movsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10d1             // movsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18d1             // movsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1254
	JMP  LBB2_1807

LBB2_156:
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JLE  LBB2_258
	WORD $0xff83; BYTE $0x09 // cmp    edi, 9
	JE   LBB2_377
	WORD $0xff83; BYTE $0x0b // cmp    edi, 11
	JE   LBB2_380
	WORD $0xff83; BYTE $0x0c // cmp    edi, 12
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff2         // movsd    xmm0, qword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_162
	LONG $0xc1148d48         // lea    rdx, [rcx + 8*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_806
	LONG $0xc0148d49         // lea    rdx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_806

LBB2_162:
	WORD $0xd231 // xor    edx, edx

LBB2_1259:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1261

LBB2_1260:
	LONG $0x0c100ff2; BYTE $0xd1   // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1260

LBB2_1261:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1262:
	LONG $0x0c100ff2; BYTE $0xd1               // movsd    xmm1, qword [rcx + 8*rdx]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd00c             // movsd    qword [r8 + 8*rdx], xmm1
	LONG $0x4c100ff2; WORD $0x08d1             // movsd    xmm1, qword [rcx + 8*rdx + 8]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x08 // movsd    qword [r8 + 8*rdx + 8], xmm1
	LONG $0x4c100ff2; WORD $0x10d1             // movsd    xmm1, qword [rcx + 8*rdx + 16]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x10 // movsd    qword [r8 + 8*rdx + 16], xmm1
	LONG $0x4c100ff2; WORD $0x18d1             // movsd    xmm1, qword [rcx + 8*rdx + 24]
	LONG $0xc8580ff2                           // addsd    xmm1, xmm0
	LONG $0x110f41f2; WORD $0xd04c; BYTE $0x18 // movsd    qword [r8 + 8*rdx + 24], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1262
	JMP  LBB2_1807

LBB2_163:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_383
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_167
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_809
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_809

LBB2_167:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1267:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1269

LBB2_1268:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1268

LBB2_1269:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1270:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1270
	JMP  LBB2_1807

LBB2_168:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_386
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_172
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_812
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_812

LBB2_172:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1275:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1277

LBB2_1276:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1276

LBB2_1277:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1278:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1278
	JMP  LBB2_1807

LBB2_173:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_389
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8a44; BYTE $0x1a // mov    r11b, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_177
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_815
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_815

LBB2_177:
	WORD $0xf631 // xor    esi, esi

LBB2_1283:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1285

LBB2_1284:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1284

LBB2_1285:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1286:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1286
	JMP  LBB2_1807

LBB2_178:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_392
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8a44; BYTE $0x1a // mov    r11b, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_182
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_818
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_818

LBB2_182:
	WORD $0xf631 // xor    esi, esi

LBB2_1291:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1293

LBB2_1292:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1292

LBB2_1293:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1294:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1294
	JMP  LBB2_1807

LBB2_183:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_395
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_187
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_821
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_821

LBB2_187:
	WORD $0xff31 // xor    edi, edi

LBB2_1299:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1301

LBB2_1300:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1300

LBB2_1301:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1302:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1302
	JMP  LBB2_1807

LBB2_188:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_398
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_192
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_824
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_824

LBB2_192:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1307:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB2_1309
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB2_1309:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB2_1807

LBB2_1310:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1310
	JMP  LBB2_1807

LBB2_193:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_401
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_197
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_827
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_827

LBB2_197:
	WORD $0xff31 // xor    edi, edi

LBB2_1315:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1317

LBB2_1316:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1316

LBB2_1317:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1318:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1318
	JMP  LBB2_1807

LBB2_198:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_404
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_202
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_830
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_830

LBB2_202:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1323:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	LONG $0x01c2f641         // test    r10b, 1
	JE   LBB2_1325
	LONG $0x0a3cbe0f         // movsx    edi, byte [rdx + rcx]
	WORD $0xf889             // mov    eax, edi
	WORD $0xf8c1; BYTE $0x07 // sar    eax, 7
	WORD $0xc701             // add    edi, eax
	WORD $0xc731             // xor    edi, eax
	LONG $0x083c8841         // mov    byte [r8 + rcx], dil
	LONG $0x01c98348         // or    rcx, 1

LBB2_1325:
	WORD $0x014c; BYTE $0xd6 // add    rsi, r10
	JE   LBB2_1807

LBB2_1326:
	LONG $0x0a04be0f             // movsx    eax, byte [rdx + rcx]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44be0f; BYTE $0x01 // movsx    eax, byte [rdx + rcx + 1]
	WORD $0xc689                 // mov    esi, eax
	WORD $0xfec1; BYTE $0x07     // sar    esi, 7
	WORD $0xf001                 // add    eax, esi
	WORD $0xf031                 // xor    eax, esi
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1326
	JMP  LBB2_1807

LBB2_203:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_407
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028a             // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_207
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_833
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_833

LBB2_207:
	WORD $0xf631 // xor    esi, esi

LBB2_1331:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1333

LBB2_1332:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1332

LBB2_1333:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1334:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1334
	JMP  LBB2_1807

LBB2_208:
	WORD $0xff83; BYTE $0x02 // cmp    edi, 2
	JE   LBB2_410
	WORD $0xff83; BYTE $0x03 // cmp    edi, 3
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028a             // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_212
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_836
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_836

LBB2_212:
	WORD $0xf631 // xor    esi, esi

LBB2_1339:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1341

LBB2_1340:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1340

LBB2_1341:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1342:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1342
	JMP  LBB2_1807

LBB2_213:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_413
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_217
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_839
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_839

LBB2_217:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1347:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1349

LBB2_1348:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1348

LBB2_1349:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1350:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1350
	JMP  LBB2_1807

LBB2_218:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_416
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JAE  LBB2_535
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_848

LBB2_223:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_419
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_227
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_849
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_849

LBB2_227:
	WORD $0xf631 // xor    esi, esi

LBB2_1355:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1357

LBB2_1356:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1356

LBB2_1357:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1358:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1358
	JMP  LBB2_1807

LBB2_228:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_422
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_232
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_852
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_852

LBB2_232:
	WORD $0xf631 // xor    esi, esi

LBB2_1363:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1365

LBB2_1364:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1364

LBB2_1365:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1366:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1366
	JMP  LBB2_1807

LBB2_233:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_425
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB2_543
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_545

LBB2_238:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_428
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_242
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_855
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_855

LBB2_242:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1069:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1071

LBB2_1070:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1070

LBB2_1071:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1807

LBB2_1072:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1072
	JMP  LBB2_1807

LBB2_243:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_431
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB2_551
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_553

LBB2_248:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_434
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_252
	LONG $0xd2048d4a         // lea    rax, [rdx + 8*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_857
	LONG $0xd0048d4b         // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_857

LBB2_252:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1079:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1081

LBB2_1080:
	LONG $0xca3c8b48 // mov    rdi, qword [rdx + 8*rcx]
	LONG $0xc83c8949 // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1080

LBB2_1081:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1807

LBB2_1082:
	LONG $0xca048b48             // mov    rax, qword [rdx + 8*rcx]
	LONG $0xc8048949             // mov    qword [r8 + 8*rcx], rax
	LONG $0xca448b48; BYTE $0x08 // mov    rax, qword [rdx + 8*rcx + 8]
	LONG $0xc8448949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rax
	LONG $0xca448b48; BYTE $0x10 // mov    rax, qword [rdx + 8*rcx + 16]
	LONG $0xc8448949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rax
	LONG $0xca448b48; BYTE $0x18 // mov    rax, qword [rdx + 8*rcx + 24]
	LONG $0xc8448949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1082
	JMP  LBB2_1807

LBB2_253:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_437
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_257
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_859
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_859

LBB2_257:
	WORD $0xf631 // xor    esi, esi

LBB2_1371:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1373

LBB2_1372:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1372

LBB2_1373:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1374:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1374
	JMP  LBB2_1807

LBB2_258:
	WORD $0xff83; BYTE $0x07 // cmp    edi, 7
	JE   LBB2_440
	WORD $0xff83; BYTE $0x08 // cmp    edi, 8
	JNE  LBB2_1807
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_262
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_862
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_862

LBB2_262:
	WORD $0xf631 // xor    esi, esi

LBB2_1379:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1381

LBB2_1380:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1380

LBB2_1381:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1382:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1382
	JMP  LBB2_1807

LBB2_263:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_265
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_865
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_865

LBB2_265:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1387:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1389

LBB2_1388:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1388

LBB2_1389:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1390:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1390
	JMP  LBB2_1807

LBB2_266:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_268
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_868
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_868

LBB2_268:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1395:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1397

LBB2_1396:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1396

LBB2_1397:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1398:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1398
	JMP  LBB2_1807

LBB2_269:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JAE  LBB2_571
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_877

LBB2_272:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_274
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_878
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_878

LBB2_274:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1403:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1405

LBB2_1404:
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4a342b66             // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48 // mov    word [r8 + 2*rcx], si
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1404

LBB2_1405:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1406:
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a342b66               // sub    si, word [rdx + 2*rcx]
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x02   // sub    si, word [rdx + 2*rcx + 2]
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x04   // sub    si, word [rdx + 2*rcx + 4]
	LONG $0x74894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], si
	WORD $0xf631                   // xor    esi, esi
	LONG $0x4a742b66; BYTE $0x06   // sub    si, word [rdx + 2*rcx + 6]
	LONG $0x74894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], si
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1406
	JMP  LBB2_1807

LBB2_275:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_277
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_881
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_881

LBB2_277:
	WORD $0xf631 // xor    esi, esi

LBB2_1411:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1413

LBB2_1412:
	WORD $0xc289                 // mov    edx, eax
	LONG $0x71142b66             // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1412

LBB2_1413:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1414:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1414
	JMP  LBB2_1807

LBB2_278:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_280
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_884
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_884

LBB2_280:
	WORD $0xf631 // xor    esi, esi

LBB2_1419:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1421

LBB2_1420:
	WORD $0xc289                 // mov    edx, eax
	LONG $0x71142b66             // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1420

LBB2_1421:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1422:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1422
	JMP  LBB2_1807

LBB2_281:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_283
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_887
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_887

LBB2_283:
	WORD $0xf631 // xor    esi, esi

LBB2_1427:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1429

LBB2_1428:
	WORD $0xc289                 // mov    edx, eax
	LONG $0x71142b66             // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1428

LBB2_1429:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1430:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1430
	JMP  LBB2_1807

LBB2_284:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_286
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_890
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_890

LBB2_286:
	WORD $0xf631 // xor    esi, esi

LBB2_1435:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1437

LBB2_1436:
	WORD $0xc289                 // mov    edx, eax
	LONG $0x71142b66             // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1436

LBB2_1437:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1438:
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71142b66               // sub    dx, word [rcx + 2*rsi]
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x02   // sub    dx, word [rcx + 2*rsi + 2]
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x04   // sub    dx, word [rcx + 2*rsi + 4]
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	WORD $0xc289                   // mov    edx, eax
	LONG $0x71542b66; BYTE $0x06   // sub    dx, word [rcx + 2*rsi + 6]
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1438
	JMP  LBB2_1807

LBB2_287:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_289
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_893
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_893

LBB2_289:
	WORD $0xf631 // xor    esi, esi

LBB2_1443:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1445

LBB2_1444:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66             // imul    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1444

LBB2_1445:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1446:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1446
	JMP  LBB2_1807

LBB2_290:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_292
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_896
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_896

LBB2_292:
	WORD $0xf631 // xor    esi, esi

LBB2_1451:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1453

LBB2_1452:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66             // imul    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1452

LBB2_1453:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1454:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1454
	JMP  LBB2_1807

LBB2_293:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_295
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_899
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_899

LBB2_295:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1089:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1091

LBB2_1090:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB2_1090

LBB2_1091:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1807

LBB2_1092:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB2_1092
	JMP  LBB2_1807

LBB2_296:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_298
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_901
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_901

LBB2_298:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1459:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB2_1461
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB2_1461:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1807

LBB2_1462:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1462
	JMP  LBB2_1807

LBB2_299:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_301
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_904
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_904

LBB2_301:
	WORD $0xf631 // xor    esi, esi

LBB2_1467:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1469

LBB2_1468:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66             // imul    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1468

LBB2_1469:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1470:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1470
	JMP  LBB2_1807

LBB2_302:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_304
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_907
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_907

LBB2_304:
	WORD $0xf631 // xor    esi, esi

LBB2_1475:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1477

LBB2_1476:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66             // imul    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1476

LBB2_1477:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1478:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	LONG $0xd0af0f66               // imul    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1478
	JMP  LBB2_1807

LBB2_305:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_307
	LONG $0x52048d4a         // lea    rax, [rdx + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_910
	LONG $0x50048d4b         // lea    rax, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_910

LBB2_307:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1099:
	WORD $0x8948; BYTE $0xc8 // mov    rax, rcx
	WORD $0xf748; BYTE $0xd0 // not    rax
	WORD $0x014c; BYTE $0xd0 // add    rax, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1101

LBB2_1100:
	LONG $0x4a3cb70f             // movzx    edi, word [rdx + 2*rcx]
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c18348             // add    rcx, 1
	LONG $0xffc68348             // add    rsi, -1
	JNE  LBB2_1100

LBB2_1101:
	LONG $0x03f88348 // cmp    rax, 3
	JB   LBB2_1807

LBB2_1102:
	LONG $0x4a04b70f               // movzx    eax, word [rdx + 2*rcx]
	LONG $0x04894166; BYTE $0x48   // mov    word [r8 + 2*rcx], ax
	LONG $0x4a44b70f; BYTE $0x02   // movzx    eax, word [rdx + 2*rcx + 2]
	LONG $0x44894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], ax
	LONG $0x4a44b70f; BYTE $0x04   // movzx    eax, word [rdx + 2*rcx + 4]
	LONG $0x44894166; WORD $0x0448 // mov    word [r8 + 2*rcx + 4], ax
	LONG $0x4a44b70f; BYTE $0x06   // movzx    eax, word [rdx + 2*rcx + 6]
	LONG $0x44894166; WORD $0x0648 // mov    word [r8 + 2*rcx + 6], ax
	LONG $0x04c18348               // add    rcx, 4
	WORD $0x3949; BYTE $0xca       // cmp    r10, rcx
	JNE  LBB2_1102
	JMP  LBB2_1807

LBB2_308:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_310
	LONG $0x420c8d48         // lea    rcx, [rdx + 2*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_912
	LONG $0x400c8d49         // lea    rcx, [r8 + 2*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_912

LBB2_310:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1483:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x01a8                 // test    al, 1
	JE   LBB2_1485
	LONG $0x4a3cbf0f             // movsx    edi, word [rdx + 2*rcx]
	WORD $0x8941; BYTE $0xf9     // mov    r9d, edi
	LONG $0x0ff9c141             // sar    r9d, 15
	WORD $0x0144; BYTE $0xcf     // add    edi, r9d
	WORD $0x3144; BYTE $0xcf     // xor    edi, r9d
	LONG $0x3c894166; BYTE $0x48 // mov    word [r8 + 2*rcx], di
	LONG $0x01c98348             // or    rcx, 1

LBB2_1485:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1807

LBB2_1486:
	LONG $0x4a34bf0f               // movsx    esi, word [rdx + 2*rcx]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x34894166; BYTE $0x48   // mov    word [r8 + 2*rcx], si
	LONG $0x4a74bf0f; BYTE $0x02   // movsx    esi, word [rdx + 2*rcx + 2]
	WORD $0xf789                   // mov    edi, esi
	WORD $0xffc1; BYTE $0x0f       // sar    edi, 15
	WORD $0xfe01                   // add    esi, edi
	WORD $0xfe31                   // xor    esi, edi
	LONG $0x74894166; WORD $0x0248 // mov    word [r8 + 2*rcx + 2], si
	LONG $0x02c18348               // add    rcx, 2
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_1486
	JMP  LBB2_1807

LBB2_311:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_313
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_915
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_915

LBB2_313:
	WORD $0xf631 // xor    esi, esi

LBB2_1491:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1493

LBB2_1492:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2     // add    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1492

LBB2_1493:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1494:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1494
	JMP  LBB2_1807

LBB2_314:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_316
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_918
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_918

LBB2_316:
	WORD $0xf631 // xor    esi, esi

LBB2_1499:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1501

LBB2_1500:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2     // add    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1500

LBB2_1501:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1502:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1502
	JMP  LBB2_1807

LBB2_317:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_319
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_921
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_921

LBB2_319:
	WORD $0xf631 // xor    esi, esi

LBB2_1507:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1509

LBB2_1508:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2     // add    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1508

LBB2_1509:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1510:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1510
	JMP  LBB2_1807

LBB2_320:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0xb70f; BYTE $0x02 // movzx    eax, word [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x10f98341         // cmp    r9d, 16
	JB   LBB2_322
	LONG $0x51148d4a         // lea    rdx, [rcx + 2*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_924
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_924

LBB2_322:
	WORD $0xf631 // xor    esi, esi

LBB2_1515:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1517

LBB2_1516:
	LONG $0x7114b70f             // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2     // add    dx, ax
	LONG $0x14894166; BYTE $0x70 // mov    word [r8 + 2*rsi], dx
	LONG $0x01c68348             // add    rsi, 1
	LONG $0xffc78348             // add    rdi, -1
	JNE  LBB2_1516

LBB2_1517:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1518:
	LONG $0x7114b70f               // movzx    edx, word [rcx + 2*rsi]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x14894166; BYTE $0x70   // mov    word [r8 + 2*rsi], dx
	LONG $0x7154b70f; BYTE $0x02   // movzx    edx, word [rcx + 2*rsi + 2]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0270 // mov    word [r8 + 2*rsi + 2], dx
	LONG $0x7154b70f; BYTE $0x04   // movzx    edx, word [rcx + 2*rsi + 4]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0470 // mov    word [r8 + 2*rsi + 4], dx
	LONG $0x7154b70f; BYTE $0x06   // movzx    edx, word [rcx + 2*rsi + 6]
	WORD $0x0166; BYTE $0xc2       // add    dx, ax
	LONG $0x54894166; WORD $0x0670 // mov    word [r8 + 2*rsi + 6], dx
	LONG $0x04c68348               // add    rsi, 4
	WORD $0x3949; BYTE $0xf2       // cmp    r10, rsi
	JNE  LBB2_1518
	JMP  LBB2_1807

LBB2_323:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_325
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_927
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_927

LBB2_325:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1523:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1525

LBB2_1524:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1524

LBB2_1525:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1526:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1526
	JMP  LBB2_1807

LBB2_326:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_328
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_930
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_930

LBB2_328:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1531:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1534
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_1533:
	LONG $0x0c6e0f66; BYTE $0x8a   // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1533

LBB2_1534:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB2_1807
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_1536:
	LONG $0x0c6e0f66; BYTE $0x8a               // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c             // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6e0f66; WORD $0x048a             // movd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x04 // movd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6e0f66; WORD $0x088a             // movd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x08 // movd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6e0f66; WORD $0x0c8a             // movd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x0c // movd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_1536
	JMP  LBB2_1807

LBB2_329:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_331
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_933
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_933

LBB2_331:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1541:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1543

LBB2_1542:
	WORD $0xf631     // xor    esi, esi
	LONG $0xca342b48 // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949 // mov    qword [r8 + 8*rcx], rsi
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1542

LBB2_1543:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1544:
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca342b48             // sub    rsi, qword [rdx + 8*rcx]
	LONG $0xc8348949             // mov    qword [r8 + 8*rcx], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x08 // sub    rsi, qword [rdx + 8*rcx + 8]
	LONG $0xc8748949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x10 // sub    rsi, qword [rdx + 8*rcx + 16]
	LONG $0xc8748949; BYTE $0x10 // mov    qword [r8 + 8*rcx + 16], rsi
	WORD $0xf631                 // xor    esi, esi
	LONG $0xca742b48; BYTE $0x18 // sub    rsi, qword [rdx + 8*rcx + 24]
	LONG $0xc8748949; BYTE $0x18 // mov    qword [r8 + 8*rcx + 24], rsi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1544
	JMP  LBB2_1807

LBB2_332:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_334
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_936
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_936

LBB2_334:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1549:
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6     // not    rsi
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1552
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_1551:
	LONG $0x0c6e0f66; BYTE $0x8a   // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66               // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x01c18348               // add    rcx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1551

LBB2_1552:
	LONG $0x03fe8348             // cmp    rsi, 3
	JB   LBB2_1807
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_1554:
	LONG $0x0c6e0f66; BYTE $0x8a               // movd    xmm1, dword [rdx + 4*rcx]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x880c             // movd    dword [r8 + 4*rcx], xmm1
	LONG $0x4c6e0f66; WORD $0x048a             // movd    xmm1, dword [rdx + 4*rcx + 4]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x04 // movd    dword [r8 + 4*rcx + 4], xmm1
	LONG $0x4c6e0f66; WORD $0x088a             // movd    xmm1, dword [rdx + 4*rcx + 8]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x08 // movd    dword [r8 + 4*rcx + 8], xmm1
	LONG $0x4c6e0f66; WORD $0x0c8a             // movd    xmm1, dword [rdx + 4*rcx + 12]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0x7e0f4166; WORD $0x884c; BYTE $0x0c // movd    dword [r8 + 4*rcx + 12], xmm1
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_1554
	JMP  LBB2_1807

LBB2_335:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_337
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_939
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_939

LBB2_337:
	WORD $0xf631 // xor    esi, esi

LBB2_1559:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1561

LBB2_1560:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1560

LBB2_1561:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1562:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1562
	JMP  LBB2_1807

LBB2_338:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_340
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_942
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_942

LBB2_340:
	WORD $0xd231 // xor    edx, edx

LBB2_1567:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1569

LBB2_1568:
	WORD $0x280f; BYTE $0xc8       // movaps    xmm1, xmm0
	LONG $0x0c5c0ff3; BYTE $0x91   // subss    xmm1, dword [rcx + 4*rdx]
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1568

LBB2_1569:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1570:
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x0c5c0ff3; BYTE $0x91               // subss    xmm1, dword [rcx + 4*rdx]
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0491             // subss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0891             // subss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0c91             // subss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1570
	JMP  LBB2_1807

LBB2_341:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b4c; BYTE $0x1a // mov    r11, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_343
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_945
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_945

LBB2_343:
	WORD $0xf631 // xor    esi, esi

LBB2_1575:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1577

LBB2_1576:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf1042b48         // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949         // mov    qword [r8 + 8*rsi], rax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1576

LBB2_1577:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1578:
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1042b48             // sub    rax, qword [rcx + 8*rsi]
	LONG $0xf0048949             // mov    qword [r8 + 8*rsi], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x08 // sub    rax, qword [rcx + 8*rsi + 8]
	LONG $0xf0448949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x10 // sub    rax, qword [rcx + 8*rsi + 16]
	LONG $0xf0448949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0xf1442b48; BYTE $0x18 // sub    rax, qword [rcx + 8*rsi + 24]
	LONG $0xf0448949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1578
	JMP  LBB2_1807

LBB2_344:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_346
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_948
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_948

LBB2_346:
	WORD $0xd231 // xor    edx, edx

LBB2_1583:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1585

LBB2_1584:
	WORD $0x280f; BYTE $0xc8       // movaps    xmm1, xmm0
	LONG $0x0c5c0ff3; BYTE $0x91   // subss    xmm1, dword [rcx + 4*rdx]
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1584

LBB2_1585:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1586:
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x0c5c0ff3; BYTE $0x91               // subss    xmm1, dword [rcx + 4*rdx]
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0491             // subss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0891             // subss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	WORD $0x280f; BYTE $0xc8                   // movaps    xmm1, xmm0
	LONG $0x4c5c0ff3; WORD $0x0c91             // subss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1586
	JMP  LBB2_1807

LBB2_347:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB2_648
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_650

LBB2_350:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_352
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_951
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_951

LBB2_352:
	WORD $0xd231 // xor    edx, edx

LBB2_1591:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1593

LBB2_1592:
	LONG $0x0c100ff3; BYTE $0x91   // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8590ff3               // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1592

LBB2_1593:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1594:
	LONG $0x0c100ff3; BYTE $0x91               // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c100ff3; WORD $0x0491             // movss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x0891             // movss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c91             // movss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1594
	JMP  LBB2_1807

LBB2_353:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_355
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_954
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_954

LBB2_355:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1599:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1601
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1601:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1807

LBB2_1602:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1602
	JMP  LBB2_1807

LBB2_356:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_358
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_957
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_957

LBB2_358:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1607:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1610
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1609:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1609

LBB2_1610:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB2_1807
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1612:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1612
	JMP  LBB2_1807

LBB2_359:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8944; BYTE $0xce // mov    esi, r9d
	LONG $0xff7e8d48         // lea    rdi, [rsi - 1]
	WORD $0x8941; BYTE $0xf1 // mov    r9d, esi
	LONG $0x03e18341         // and    r9d, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JAE  LBB2_662
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_664

LBB2_362:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_364
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_960
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_960

LBB2_364:
	WORD $0xd231 // xor    edx, edx

LBB2_1617:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1619

LBB2_1618:
	LONG $0x0c100ff3; BYTE $0x91   // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8590ff3               // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1618

LBB2_1619:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1620:
	LONG $0x0c100ff3; BYTE $0x91               // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c100ff3; WORD $0x0491             // movss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x0891             // movss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c91             // movss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0xc8590ff3                           // mulss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1620
	JMP  LBB2_1807

LBB2_365:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_367
	LONG $0xc20c8d48         // lea    rcx, [rdx + 8*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_963
	LONG $0xc00c8d49         // lea    rcx, [r8 + 8*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_963

LBB2_367:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1625:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1627
	LONG $0xca0c8b4c         // mov    r9, qword [rdx + 8*rcx]
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xf748; BYTE $0xdf // neg    rdi
	LONG $0xf94c0f49         // cmovl    rdi, r9
	LONG $0xc83c8949         // mov    qword [r8 + 8*rcx], rdi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1627:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1807

LBB2_1628:
	LONG $0xca348b48             // mov    rsi, qword [rdx + 8*rcx]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc83c8949             // mov    qword [r8 + 8*rcx], rdi
	LONG $0xca748b48; BYTE $0x08 // mov    rsi, qword [rdx + 8*rcx + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xf748; BYTE $0xdf     // neg    rdi
	LONG $0xfe4c0f48             // cmovl    rdi, rsi
	LONG $0xc87c8949; BYTE $0x08 // mov    qword [r8 + 8*rcx + 8], rdi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1628
	JMP  LBB2_1807

LBB2_368:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_370
	LONG $0x920c8d4a         // lea    rcx, [rdx + 4*r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_966
	LONG $0x900c8d4b         // lea    rcx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_966

LBB2_370:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1633:
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1     // not    r9
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	LONG $0x03e78348             // and    rdi, 3
	JE   LBB2_1636
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1635:
	WORD $0x048b; BYTE $0x8a // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021             // and    eax, esi
	LONG $0x88048941         // mov    dword [r8 + 4*rcx], eax
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1635

LBB2_1636:
	LONG $0x03f98349             // cmp    r9, 3
	JB   LBB2_1807
	LONG $0xffffffbe; BYTE $0x7f // mov    esi, 2147483647

LBB2_1638:
	WORD $0x048b; BYTE $0x8a     // mov    eax, dword [rdx + 4*rcx]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88048941             // mov    dword [r8 + 4*rcx], eax
	LONG $0x048a448b             // mov    eax, dword [rdx + 4*rcx + 4]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], eax
	LONG $0x088a448b             // mov    eax, dword [rdx + 4*rcx + 8]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], eax
	LONG $0x0c8a448b             // mov    eax, dword [rdx + 4*rcx + 12]
	WORD $0xf021                 // and    eax, esi
	LONG $0x88448941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], eax
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1638
	JMP  LBB2_1807

LBB2_371:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_373
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_969
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_969

LBB2_373:
	WORD $0xf631 // xor    esi, esi

LBB2_1643:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1645

LBB2_1644:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1644

LBB2_1645:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1646:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1646
	JMP  LBB2_1807

LBB2_374:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_376
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_972
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_972

LBB2_376:
	WORD $0xd231 // xor    edx, edx

LBB2_1651:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1653

LBB2_1652:
	LONG $0x0c100ff3; BYTE $0x91   // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8580ff3               // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1652

LBB2_1653:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1654:
	LONG $0x0c100ff3; BYTE $0x91               // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c100ff3; WORD $0x0491             // movss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x0891             // movss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c91             // movss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1654
	JMP  LBB2_1807

LBB2_377:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b48; BYTE $0x02 // mov    rax, qword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x04f98341         // cmp    r9d, 4
	JB   LBB2_379
	LONG $0xd1148d4a         // lea    rdx, [rcx + 8*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_975
	LONG $0xd0148d4b         // lea    rdx, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_975

LBB2_379:
	WORD $0xf631 // xor    esi, esi

LBB2_1659:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1661

LBB2_1660:
	LONG $0xf1148b48         // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2 // add    rdx, rax
	LONG $0xf0148949         // mov    qword [r8 + 8*rsi], rdx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1660

LBB2_1661:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1662:
	LONG $0xf1148b48             // mov    rdx, qword [rcx + 8*rsi]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0148949             // mov    qword [r8 + 8*rsi], rdx
	LONG $0xf1548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rsi + 8]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x08 // mov    qword [r8 + 8*rsi + 8], rdx
	LONG $0xf1548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rsi + 16]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x10 // mov    qword [r8 + 8*rsi + 16], rdx
	LONG $0xf1548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rsi + 24]
	WORD $0x0148; BYTE $0xc2     // add    rdx, rax
	LONG $0xf0548949; BYTE $0x18 // mov    qword [r8 + 8*rsi + 24], rdx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1662
	JMP  LBB2_1807

LBB2_380:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	LONG $0x02100ff3         // movss    xmm0, dword [rdx]
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_382
	LONG $0x81148d48         // lea    rdx, [rcx + 4*rax]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_978
	LONG $0x80148d49         // lea    rdx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_978

LBB2_382:
	WORD $0xd231 // xor    edx, edx

LBB2_1667:
	WORD $0x8948; BYTE $0xd6 // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1669

LBB2_1668:
	LONG $0x0c100ff3; BYTE $0x91   // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8580ff3               // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x01c28348               // add    rdx, 1
	LONG $0xffc78348               // add    rdi, -1
	JNE  LBB2_1668

LBB2_1669:
	LONG $0x03fe8348 // cmp    rsi, 3
	JB   LBB2_1807

LBB2_1670:
	LONG $0x0c100ff3; BYTE $0x91               // movss    xmm1, dword [rcx + 4*rdx]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x900c             // movss    dword [r8 + 4*rdx], xmm1
	LONG $0x4c100ff3; WORD $0x0491             // movss    xmm1, dword [rcx + 4*rdx + 4]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x04 // movss    dword [r8 + 4*rdx + 4], xmm1
	LONG $0x4c100ff3; WORD $0x0891             // movss    xmm1, dword [rcx + 4*rdx + 8]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x08 // movss    dword [r8 + 4*rdx + 8], xmm1
	LONG $0x4c100ff3; WORD $0x0c91             // movss    xmm1, dword [rcx + 4*rdx + 12]
	LONG $0xc8580ff3                           // addss    xmm1, xmm0
	LONG $0x110f41f3; WORD $0x904c; BYTE $0x0c // movss    dword [r8 + 4*rdx + 12], xmm1
	LONG $0x04c28348                           // add    rdx, 4
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JNE  LBB2_1670
	JMP  LBB2_1807

LBB2_383:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_385
	LONG $0x120c8d4a         // lea    rcx, [rdx + r10]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_981
	LONG $0x100c8d4b         // lea    rcx, [r8 + r10]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_981

LBB2_385:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1675:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1677

LBB2_1676:
	LONG $0x0a04b60f         // movzx    eax, byte [rdx + rcx]
	WORD $0xf631             // xor    esi, esi
	WORD $0x2840; BYTE $0xc6 // sub    sil, al
	LONG $0x08348841         // mov    byte [r8 + rcx], sil
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1676

LBB2_1677:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1678:
	WORD $0xc031                 // xor    eax, eax
	WORD $0x042a; BYTE $0x0a     // sub    al, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x010a442a             // sub    al, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	WORD $0xc031                 // xor    eax, eax
	LONG $0x020a442a             // sub    al, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	WORD $0xf631                 // xor    esi, esi
	WORD $0x2840; BYTE $0xc6     // sub    sil, al
	LONG $0x08748841; BYTE $0x03 // mov    byte [r8 + rcx + 3], sil
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1678
	JMP  LBB2_1807

LBB2_386:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JAE  LBB2_691
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB2_990

LBB2_389:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8a44; BYTE $0x1a // mov    r11b, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_391
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_991
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_991

LBB2_391:
	WORD $0xf631 // xor    esi, esi

LBB2_1683:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1685

LBB2_1684:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1684

LBB2_1685:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1686:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1686
	JMP  LBB2_1807

LBB2_392:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8a44; BYTE $0x1a // mov    r11b, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_394
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_994
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_994

LBB2_394:
	WORD $0xf631 // xor    esi, esi

LBB2_1691:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1693

LBB2_1692:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042a; BYTE $0x31 // sub    al, byte [rcx + rsi]
	LONG $0x30048841         // mov    byte [r8 + rsi], al
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1692

LBB2_1693:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1694:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042a; BYTE $0x31     // sub    al, byte [rcx + rsi]
	LONG $0x30048841             // mov    byte [r8 + rsi], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0131442a             // sub    al, byte [rcx + rsi + 1]
	LONG $0x30448841; BYTE $0x01 // mov    byte [r8 + rsi + 1], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0231442a             // sub    al, byte [rcx + rsi + 2]
	LONG $0x30448841; BYTE $0x02 // mov    byte [r8 + rsi + 2], al
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0331442a             // sub    al, byte [rcx + rsi + 3]
	LONG $0x30448841; BYTE $0x03 // mov    byte [r8 + rsi + 3], al
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1694
	JMP  LBB2_1807

LBB2_395:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_397
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_997
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_997

LBB2_397:
	WORD $0xff31 // xor    edi, edi

LBB2_1699:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1701

LBB2_1700:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1700

LBB2_1701:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1702:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1702
	JMP  LBB2_1807

LBB2_398:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_400
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_1000
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_1000

LBB2_400:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1109:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1111

LBB2_1110:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1110

LBB2_1111:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_1807

LBB2_1112:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1112
	JMP  LBB2_1807

LBB2_401:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x128a             // mov    dl, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_403
	LONG $0x11048d4a         // lea    rax, [rcx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_1002
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JBE  LBB2_1002

LBB2_403:
	WORD $0xff31 // xor    edi, edi

LBB2_1707:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1709

LBB2_1708:
	LONG $0x3904b60f // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6     // mul    dl
	LONG $0x38048841 // mov    byte [r8 + rdi], al
	LONG $0x01c78348 // add    rdi, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1708

LBB2_1709:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1710:
	LONG $0x3904b60f             // movzx    eax, byte [rcx + rdi]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38048841             // mov    byte [r8 + rdi], al
	LONG $0x3944b60f; BYTE $0x01 // movzx    eax, byte [rcx + rdi + 1]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x01 // mov    byte [r8 + rdi + 1], al
	LONG $0x3944b60f; BYTE $0x02 // movzx    eax, byte [rcx + rdi + 2]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x02 // mov    byte [r8 + rdi + 2], al
	LONG $0x3944b60f; BYTE $0x03 // movzx    eax, byte [rcx + rdi + 3]
	WORD $0xe2f6                 // mul    dl
	LONG $0x38448841; BYTE $0x03 // mov    byte [r8 + rdi + 3], al
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3949; BYTE $0xfa     // cmp    r10, rdi
	JNE  LBB2_1710
	JMP  LBB2_1807

LBB2_404:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_406
	LONG $0x12048d4a         // lea    rax, [rdx + r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	JBE  LBB2_1005
	LONG $0x10048d4b         // lea    rax, [r8 + r10]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	JBE  LBB2_1005

LBB2_406:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1119:
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0xf748; BYTE $0xd7 // not    rdi
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	LONG $0x03e68348         // and    rsi, 3
	JE   LBB2_1121

LBB2_1120:
	LONG $0x0a04b60f // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841 // mov    byte [r8 + rcx], al
	LONG $0x01c18348 // add    rcx, 1
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB2_1120

LBB2_1121:
	LONG $0x03ff8348 // cmp    rdi, 3
	JB   LBB2_1807

LBB2_1122:
	LONG $0x0a04b60f             // movzx    eax, byte [rdx + rcx]
	LONG $0x08048841             // mov    byte [r8 + rcx], al
	LONG $0x0a44b60f; BYTE $0x01 // movzx    eax, byte [rdx + rcx + 1]
	LONG $0x08448841; BYTE $0x01 // mov    byte [r8 + rcx + 1], al
	LONG $0x0a44b60f; BYTE $0x02 // movzx    eax, byte [rdx + rcx + 2]
	LONG $0x08448841; BYTE $0x02 // mov    byte [r8 + rcx + 2], al
	LONG $0x0a44b60f; BYTE $0x03 // movzx    eax, byte [rdx + rcx + 3]
	LONG $0x08448841; BYTE $0x03 // mov    byte [r8 + rcx + 3], al
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xca     // cmp    r10, rcx
	JNE  LBB2_1122
	JMP  LBB2_1807

LBB2_407:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028a             // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_409
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1007
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1007

LBB2_409:
	WORD $0xf631 // xor    esi, esi

LBB2_1715:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1717

LBB2_1716:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1716

LBB2_1717:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1718:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1718
	JMP  LBB2_1807

LBB2_410:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028a             // mov    al, byte [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x20f98341         // cmp    r9d, 32
	JB   LBB2_412
	LONG $0x11148d4a         // lea    rdx, [rcx + r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1010
	LONG $0x10148d4b         // lea    rdx, [r8 + r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1010

LBB2_412:
	WORD $0xf631 // xor    esi, esi

LBB2_1723:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1725

LBB2_1724:
	LONG $0x3114b60f // movzx    edx, byte [rcx + rsi]
	WORD $0xc200     // add    dl, al
	LONG $0x30148841 // mov    byte [r8 + rsi], dl
	LONG $0x01c68348 // add    rsi, 1
	LONG $0xffc78348 // add    rdi, -1
	JNE  LBB2_1724

LBB2_1725:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1726:
	LONG $0x3114b60f             // movzx    edx, byte [rcx + rsi]
	WORD $0xc200                 // add    dl, al
	LONG $0x30148841             // mov    byte [r8 + rsi], dl
	LONG $0x3154b60f; BYTE $0x01 // movzx    edx, byte [rcx + rsi + 1]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x01 // mov    byte [r8 + rsi + 1], dl
	LONG $0x3154b60f; BYTE $0x02 // movzx    edx, byte [rcx + rsi + 2]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x02 // mov    byte [r8 + rsi + 2], dl
	LONG $0x3154b60f; BYTE $0x03 // movzx    edx, byte [rcx + rsi + 3]
	WORD $0xc200                 // add    dl, al
	LONG $0x30548841; BYTE $0x03 // mov    byte [r8 + rsi + 3], dl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1726
	JMP  LBB2_1807

LBB2_413:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_415
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_1013
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_1013

LBB2_415:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1731:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1733

LBB2_1732:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1732

LBB2_1733:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1734:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1734
	JMP  LBB2_1807

LBB2_416:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_418
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_1016
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_1016

LBB2_418:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1739:
	WORD $0x8949; BYTE $0xc9 // mov    r9, rcx
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1741

LBB2_1740:
	WORD $0xf631             // xor    esi, esi
	WORD $0x342b; BYTE $0x8a // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941         // mov    dword [r8 + 4*rcx], esi
	LONG $0x01c18348         // add    rcx, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1740

LBB2_1741:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1742:
	WORD $0xf631                 // xor    esi, esi
	WORD $0x342b; BYTE $0x8a     // sub    esi, dword [rdx + 4*rcx]
	LONG $0x88348941             // mov    dword [r8 + 4*rcx], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x048a742b             // sub    esi, dword [rdx + 4*rcx + 4]
	LONG $0x88748941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x088a742b             // sub    esi, dword [rdx + 4*rcx + 8]
	LONG $0x88748941; BYTE $0x08 // mov    dword [r8 + 4*rcx + 8], esi
	WORD $0xf631                 // xor    esi, esi
	LONG $0x0c8a742b             // sub    esi, dword [rdx + 4*rcx + 12]
	LONG $0x88748941; BYTE $0x0c // mov    dword [r8 + 4*rcx + 12], esi
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1742
	JMP  LBB2_1807

LBB2_419:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_421
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1019
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1019

LBB2_421:
	WORD $0xf631 // xor    esi, esi

LBB2_1747:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1749

LBB2_1748:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1748

LBB2_1749:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1750:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1750
	JMP  LBB2_1807

LBB2_422:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8b44; BYTE $0x1a // mov    r11d, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_424
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1022
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1022

LBB2_424:
	WORD $0xf631 // xor    esi, esi

LBB2_1755:
	WORD $0x8948; BYTE $0xf2 // mov    rdx, rsi
	WORD $0xf748; BYTE $0xd2 // not    rdx
	WORD $0x014c; BYTE $0xd2 // add    rdx, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1757

LBB2_1756:
	WORD $0x8944; BYTE $0xd8 // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1 // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941         // mov    dword [r8 + 4*rsi], eax
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1756

LBB2_1757:
	LONG $0x03fa8348 // cmp    rdx, 3
	JB   LBB2_1807

LBB2_1758:
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	WORD $0x042b; BYTE $0xb1     // sub    eax, dword [rcx + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x04b1442b             // sub    eax, dword [rcx + 4*rsi + 4]
	LONG $0xb0448941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x08b1442b             // sub    eax, dword [rcx + 4*rsi + 8]
	LONG $0xb0448941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], eax
	WORD $0x8944; BYTE $0xd8     // mov    eax, r11d
	LONG $0x0cb1442b             // sub    eax, dword [rcx + 4*rsi + 12]
	LONG $0xb0448941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], eax
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1758
	JMP  LBB2_1807

LBB2_425:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_427
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1025
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1025

LBB2_427:
	WORD $0xf631 // xor    esi, esi

LBB2_1763:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1765

LBB2_1764:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1764

LBB2_1765:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1766:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1766
	JMP  LBB2_1807

LBB2_428:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_430
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_1028
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_1028

LBB2_430:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1771:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1773
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1773:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1807

LBB2_1774:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1774
	JMP  LBB2_1807

LBB2_431:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_433
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1031
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1031

LBB2_433:
	WORD $0xf631 // xor    esi, esi

LBB2_1779:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1781

LBB2_1780:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0 // imul    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1780

LBB2_1781:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1782:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xaf0f; BYTE $0xd0     // imul    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1782
	JMP  LBB2_1807

LBB2_434:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x8944; BYTE $0xc8 // mov    eax, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_436
	LONG $0x820c8d48         // lea    rcx, [rdx + 4*rax]
	WORD $0x394c; BYTE $0xc1 // cmp    rcx, r8
	JBE  LBB2_1034
	LONG $0x800c8d49         // lea    rcx, [r8 + 4*rax]
	WORD $0x3948; BYTE $0xd1 // cmp    rcx, rdx
	JBE  LBB2_1034

LBB2_436:
	WORD $0xc931 // xor    ecx, ecx

LBB2_1787:
	WORD $0x8948; BYTE $0xce // mov    rsi, rcx
	WORD $0xf748; BYTE $0xd6 // not    rsi
	WORD $0x01a8             // test    al, 1
	JE   LBB2_1789
	LONG $0x8a0c8b44         // mov    r9d, dword [rdx + 4*rcx]
	WORD $0x8944; BYTE $0xcf // mov    edi, r9d
	WORD $0xdff7             // neg    edi
	LONG $0xf94c0f41         // cmovl    edi, r9d
	LONG $0x883c8941         // mov    dword [r8 + 4*rcx], edi
	LONG $0x01c98348         // or    rcx, 1

LBB2_1789:
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	JE   LBB2_1807

LBB2_1790:
	WORD $0x348b; BYTE $0x8a     // mov    esi, dword [rdx + 4*rcx]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x883c8941             // mov    dword [r8 + 4*rcx], edi
	LONG $0x048a748b             // mov    esi, dword [rdx + 4*rcx + 4]
	WORD $0xf789                 // mov    edi, esi
	WORD $0xdff7                 // neg    edi
	WORD $0x4c0f; BYTE $0xfe     // cmovl    edi, esi
	LONG $0x887c8941; BYTE $0x04 // mov    dword [r8 + 4*rcx + 4], edi
	LONG $0x02c18348             // add    rcx, 2
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_1790
	JMP  LBB2_1807

LBB2_437:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_439
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1037
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1037

LBB2_439:
	WORD $0xf631 // xor    esi, esi

LBB2_1795:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1797

LBB2_1796:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1796

LBB2_1797:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1798:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1798
	JMP  LBB2_1807

LBB2_440:
	WORD $0x8545; BYTE $0xc9 // test    r9d, r9d
	JLE  LBB2_1807
	WORD $0x028b             // mov    eax, dword [rdx]
	WORD $0x8945; BYTE $0xca // mov    r10d, r9d
	LONG $0x08f98341         // cmp    r9d, 8
	JB   LBB2_442
	LONG $0x91148d4a         // lea    rdx, [rcx + 4*r10]
	WORD $0x394c; BYTE $0xc2 // cmp    rdx, r8
	JBE  LBB2_1040
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JBE  LBB2_1040

LBB2_442:
	WORD $0xf631 // xor    esi, esi

LBB2_1803:
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	LONG $0x03e78348         // and    rdi, 3
	JE   LBB2_1805

LBB2_1804:
	WORD $0x148b; BYTE $0xb1 // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201             // add    edx, eax
	LONG $0xb0148941         // mov    dword [r8 + 4*rsi], edx
	LONG $0x01c68348         // add    rsi, 1
	LONG $0xffc78348         // add    rdi, -1
	JNE  LBB2_1804

LBB2_1805:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB2_1807

LBB2_1806:
	WORD $0x148b; BYTE $0xb1     // mov    edx, dword [rcx + 4*rsi]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0148941             // mov    dword [r8 + 4*rsi], edx
	LONG $0x04b1548b             // mov    edx, dword [rcx + 4*rsi + 4]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x04 // mov    dword [r8 + 4*rsi + 4], edx
	LONG $0x08b1548b             // mov    edx, dword [rcx + 4*rsi + 8]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x08 // mov    dword [r8 + 4*rsi + 8], edx
	LONG $0x0cb1548b             // mov    edx, dword [rcx + 4*rsi + 12]
	WORD $0xc201                 // add    edx, eax
	LONG $0xb0548941; BYTE $0x0c // mov    dword [r8 + 4*rsi + 12], edx
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JNE  LBB2_1806
	JMP  LBB2_1807

LBB2_446:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8798d48         // lea    rdi, [rcx - 8]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x03eec148         // shr    rsi, 3
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x38ff8348         // cmp    rdi, 56
	JAE  LBB2_750
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_752

LBB2_535:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc798d48         // lea    rdi, [rcx - 4]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x02eec148         // shr    rsi, 2
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x1cff8348         // cmp    rdi, 28
	JAE  LBB2_842
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_844

LBB2_543:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB2_544:
	LONG $0xf9148b48             // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8148949             // mov    qword [r8 + 8*rdi], rdx
	LONG $0xf9548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rdi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rdx
	LONG $0xf9548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rdi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rdx
	LONG $0xf9548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rdi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rdx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB2_544

LBB2_545:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_1807
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB2_547:
	LONG $0xf9148b48         // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48         // imul    rdx, rax
	LONG $0xfe148948         // mov    qword [rsi + 8*rdi], rdx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB2_547
	JMP  LBB2_1807

LBB2_551:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB2_552:
	LONG $0xf9148b48             // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8148949             // mov    qword [r8 + 8*rdi], rdx
	LONG $0xf9548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rdi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rdx
	LONG $0xf9548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rdi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rdx
	LONG $0xf9548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rdi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rdx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB2_552

LBB2_553:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_1807
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB2_555:
	LONG $0xf9148b48         // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48         // imul    rdx, rax
	LONG $0xfe148948         // mov    qword [rsi + 8*rdi], rdx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB2_555
	JMP  LBB2_1807

LBB2_571:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0798d48         // lea    rdi, [rcx - 16]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x04eec148         // shr    rsi, 4
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf289             // mov    edx, esi
	WORD $0xe283; BYTE $0x07 // and    edx, 7
	LONG $0x70ff8348         // cmp    rdi, 112
	JAE  LBB2_871
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_873

LBB2_648:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB2_649:
	LONG $0xf9148b48             // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8148949             // mov    qword [r8 + 8*rdi], rdx
	LONG $0xf9548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rdi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rdx
	LONG $0xf9548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rdi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rdx
	LONG $0xf9548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rdi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rdx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB2_649

LBB2_650:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_1807
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB2_652:
	LONG $0xf9148b48         // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48         // imul    rdx, rax
	LONG $0xfe148948         // mov    qword [rsi + 8*rdi], rdx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB2_652
	JMP  LBB2_1807

LBB2_662:
	WORD $0xe683; BYTE $0xfc // and    esi, -4
	WORD $0xff31             // xor    edi, edi

LBB2_663:
	LONG $0xf9148b48             // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8148949             // mov    qword [r8 + 8*rdi], rdx
	LONG $0xf9548b48; BYTE $0x08 // mov    rdx, qword [rcx + 8*rdi + 8]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x08 // mov    qword [r8 + 8*rdi + 8], rdx
	LONG $0xf9548b48; BYTE $0x10 // mov    rdx, qword [rcx + 8*rdi + 16]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x10 // mov    qword [r8 + 8*rdi + 16], rdx
	LONG $0xf9548b48; BYTE $0x18 // mov    rdx, qword [rcx + 8*rdi + 24]
	LONG $0xd0af0f48             // imul    rdx, rax
	LONG $0xf8548949; BYTE $0x18 // mov    qword [r8 + 8*rdi + 24], rdx
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xfe     // cmp    rsi, rdi
	JNE  LBB2_663

LBB2_664:
	WORD $0x854d; BYTE $0xc9 // test    r9, r9
	JE   LBB2_1807
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0xf90c8d48         // lea    rcx, [rcx + 8*rdi]
	WORD $0xff31             // xor    edi, edi

LBB2_666:
	LONG $0xf9148b48         // mov    rdx, qword [rcx + 8*rdi]
	LONG $0xd0af0f48         // imul    rdx, rax
	LONG $0xfe148948         // mov    qword [rsi + 8*rdi], rdx
	LONG $0x01c78348         // add    rdi, 1
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	JNE  LBB2_666
	JMP  LBB2_1807

LBB2_691:
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0xe0                   // and    ecx, -32
	LONG $0xe0798d48                           // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x05eec148                           // shr    rsi, 5
	LONG $0x01c68348                           // add    rsi, 1
	WORD $0xf289                               // mov    edx, esi
	WORD $0xe283; BYTE $0x07                   // and    edx, 7
	LONG $0xe0ff8148; WORD $0x0000; BYTE $0x00 // cmp    rdi, 224
	JAE  LBB2_984
	WORD $0xff31                               // xor    edi, edi
	JMP  LBB2_986

LBB2_747:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1123
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_749:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_749
	JMP  LBB2_1124

LBB2_757:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x6e0f4166; BYTE $0xc3 // movd    xmm0, r11d
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1131
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_759:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb85c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_759
	JMP  LBB2_1132

LBB2_760:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x6e0f4166; BYTE $0xc3 // movd    xmm0, r11d
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1139
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_762:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb85c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_762
	JMP  LBB2_1140

LBB2_763:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1147
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_765:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_765
	JMP  LBB2_1148

LBB2_766:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB2_1043
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_1045

LBB2_768:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1155
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_770:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_770
	JMP  LBB2_1156

LBB2_771:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8418d48         // lea    rax, [rcx - 8]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x03efc148         // shr    rdi, 3
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB2_1053
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_1055

LBB2_773:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1163
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_775:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_775
	JMP  LBB2_1164

LBB2_776:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1171
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_778:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_778
	JMP  LBB2_1172

LBB2_779:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc718d48             // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1179
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_781:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_781
	JMP  LBB2_1180

LBB2_782:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc718d48             // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1189
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI2_0] */

LBB2_784:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_784
	JMP  LBB2_1190

LBB2_785:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1199
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_787:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xd1280f66                           // movapd    xmm2, xmm1
	LONG $0xd35c0f66                           // subpd    xmm2, xmm3
	LONG $0x110f4166; WORD $0xf824             // movupd    oword [r8 + 8*rdi], xmm4
	LONG $0x110f4166; WORD $0xf854; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xd1280f66                           // movapd    xmm2, xmm1
	LONG $0xd35c0f66                           // subpd    xmm2, xmm3
	LONG $0x110f4166; WORD $0xf864; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm4
	LONG $0x110f4166; WORD $0xf854; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_787
	JMP  LBB2_1200

LBB2_788:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1207
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_790:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xd1280f66                           // movapd    xmm2, xmm1
	LONG $0xd35c0f66                           // subpd    xmm2, xmm3
	LONG $0x110f4166; WORD $0xf824             // movupd    oword [r8 + 8*rdi], xmm4
	LONG $0x110f4166; WORD $0xf854; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xd1280f66                           // movapd    xmm2, xmm1
	LONG $0xd35c0f66                           // subpd    xmm2, xmm3
	LONG $0x110f4166; WORD $0xf864; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm4
	LONG $0x110f4166; WORD $0xf854; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_790
	JMP  LBB2_1208

LBB2_791:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1215
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_793:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_793
	JMP  LBB2_1216

LBB2_794:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1223
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x20 // movdqa    xmm0, oword 32[rbp] /* [rip + .LCPI2_2] */

LBB2_796:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_796
	JMP  LBB2_1224

LBB2_797:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1231
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_799:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_799
	JMP  LBB2_1232

LBB2_800:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc     // and    ecx, -4
	LONG $0xfc418d48             // lea    rax, [rcx - 4]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1239
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x20 // movdqa    xmm0, oword 32[rbp] /* [rip + .LCPI2_2] */

LBB2_802:
	LONG $0x0c6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10fa             // movdqu    xmm2, oword [rdx + 8*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20fa             // movdqu    xmm1, oword [rdx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30fa             // movdqu    xmm2, oword [rdx + 8*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_802
	JMP  LBB2_1240

LBB2_803:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1247
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_805:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_805
	JMP  LBB2_1248

LBB2_806:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xfc // and    edx, -4
	LONG $0xc8120ff2         // movddup    xmm1, xmm0
	LONG $0xfc728d48         // lea    rsi, [rdx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1255
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_808:
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3
	LONG $0x54100f66; WORD $0x20f9             // movupd    xmm2, oword [rcx + 8*rdi + 32]
	LONG $0x5c100f66; WORD $0x30f9             // movupd    xmm3, oword [rcx + 8*rdi + 48]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf854; BYTE $0x20 // movupd    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x30 // movupd    oword [r8 + 8*rdi + 48], xmm3
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_808
	JMP  LBB2_1256

LBB2_809:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1263
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_811:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_811
	JMP  LBB2_1264

LBB2_812:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1271
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_814:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_814
	JMP  LBB2_1272

LBB2_815:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xd3b60f41             // movzx    edx, r11b
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1279
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_817:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x385c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_817
	JMP  LBB2_1280

LBB2_818:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xd3b60f41             // movzx    edx, r11b
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1287
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_820:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x385c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_820
	JMP  LBB2_1288

LBB2_821:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc2     // movzx    eax, dl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1295
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x50 // movdqa    xmm3, oword 80[rbp] /* [rip + .LCPI2_5] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB2_823:
	LONG $0x2c6f0ff3; BYTE $0x01               // movdqu    xmm5, oword [rcx + rax]
	LONG $0x746f0ff3; WORD $0x1001             // movdqu    xmm6, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2001             // movdqu    xmm5, oword [rcx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3001             // movdqu    xmm6, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_823
	JMP  LBB2_1296

LBB2_824:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1303
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x4045 // movdqa    xmm8, oword 64[rbp] /* [rip + .LCPI2_4] */

LBB2_826:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_826
	JMP  LBB2_1304

LBB2_827:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc2     // movzx    eax, dl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1311
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x50 // movdqa    xmm3, oword 80[rbp] /* [rip + .LCPI2_5] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB2_829:
	LONG $0x2c6f0ff3; BYTE $0x01               // movdqu    xmm5, oword [rcx + rax]
	LONG $0x746f0ff3; WORD $0x1001             // movdqu    xmm6, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2001             // movdqu    xmm5, oword [rcx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3001             // movdqu    xmm6, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_829
	JMP  LBB2_1312

LBB2_830:
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0       // and    ecx, -16
	LONG $0xf0718d48               // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1       // mov    r9, rsi
	LONG $0x04e9c149               // shr    r9, 4
	LONG $0x01c18349               // add    r9, 1
	WORD $0x8548; BYTE $0xf6       // test    rsi, rsi
	JE   LBB2_1319
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	LONG $0xfee78348               // and    rdi, -2
	WORD $0xf748; BYTE $0xdf       // neg    rdi
	WORD $0xf631                   // xor    esi, esi
	LONG $0x6f0f4466; WORD $0x4045 // movdqa    xmm8, oword 64[rbp] /* [rip + .LCPI2_4] */

LBB2_832:
	LONG $0x21380f66; WORD $0x3264; BYTE $0x0c // pmovsxbd    xmm4, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x08 // pmovsxbd    xmm1, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x04 // pmovsxbd    xmm3, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x3214             // pmovsxbd    xmm2, dword [rdx + rsi]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xe0fe0f66                           // paddd    xmm4, xmm0
	LONG $0xcffe0f66                           // paddd    xmm1, xmm7
	LONG $0xdefe0f66                           // paddd    xmm3, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xdeef0f66                           // pxor    xmm3, xmm6
	LONG $0xcfef0f66                           // pxor    xmm1, xmm7
	LONG $0xe0ef0f66                           // pxor    xmm4, xmm0
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3014             // movdqu    oword [r8 + rsi], xmm2
	LONG $0x21380f66; WORD $0x3264; BYTE $0x1c // pmovsxbd    xmm4, dword [rdx + rsi + 28]
	LONG $0x21380f66; WORD $0x324c; BYTE $0x18 // pmovsxbd    xmm1, dword [rdx + rsi + 24]
	LONG $0x21380f66; WORD $0x325c; BYTE $0x14 // pmovsxbd    xmm3, dword [rdx + rsi + 20]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x10 // pmovsxbd    xmm2, dword [rdx + rsi + 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xe0720f66; BYTE $0x07               // psrad    xmm0, 7
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xe7fe0f66                           // paddd    xmm4, xmm7
	LONG $0xcefe0f66                           // paddd    xmm1, xmm6
	LONG $0xddfe0f66                           // paddd    xmm3, xmm5
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0xddef0f66                           // pxor    xmm3, xmm5
	LONG $0xceef0f66                           // pxor    xmm1, xmm6
	LONG $0xe7ef0f66                           // pxor    xmm4, xmm7
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xdb0f4166; BYTE $0xc8               // pand    xmm1, xmm8
	LONG $0x2b380f66; BYTE $0xcc               // packusdw    xmm1, xmm4
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0x2b380f66; BYTE $0xd3               // packusdw    xmm2, xmm3
	LONG $0xd1670f66                           // packuswb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0x10 // movdqu    oword [r8 + rsi + 16], xmm2
	LONG $0x20c68348                           // add    rsi, 32
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_832
	JMP  LBB2_1320

LBB2_833:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xd0     // movzx    edx, al
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1327
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_835:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_835
	JMP  LBB2_1328

LBB2_836:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xd0     // movzx    edx, al
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1335
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_838:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_838
	JMP  LBB2_1336

LBB2_839:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1343
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_841:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_841
	JMP  LBB2_1344

LBB2_849:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4966; BYTE $0xc3 // movq    xmm0, r11
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1351
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_851:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf85c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_851
	JMP  LBB2_1352

LBB2_852:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4966; BYTE $0xc3 // movq    xmm0, r11
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1359
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_854:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf85c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_854
	JMP  LBB2_1360

LBB2_855:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB2_1063
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_1065

LBB2_857:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc418d48         // lea    rax, [rcx - 4]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x02efc148         // shr    rdi, 2
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB2_1073
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_1075

LBB2_859:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1367
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_861:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_861
	JMP  LBB2_1368

LBB2_862:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1375
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_864:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_864
	JMP  LBB2_1376

LBB2_865:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1383
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_867:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_867
	JMP  LBB2_1384

LBB2_868:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1391
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_870:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_870
	JMP  LBB2_1392

LBB2_878:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0718d48         // lea    rsi, [rcx - 16]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x04e9c149         // shr    r9, 4
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1399
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_880:
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7814             // movdqu    oword [r8 + 2*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x207a             // movdqu    xmm0, oword [rdx + 2*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x307a             // movdqu    xmm1, oword [rdx + 2*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f90f66                           // psubw    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f90f66                           // psubw    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_880
	JMP  LBB2_1400

LBB2_881:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1407
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_883:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x785c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_883
	JMP  LBB2_1408

LBB2_884:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1415
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_886:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x785c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_886
	JMP  LBB2_1416

LBB2_887:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1423
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_889:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x785c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_889
	JMP  LBB2_1424

LBB2_890:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1431
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_892:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf90f66                           // psubw    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x785c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_892
	JMP  LBB2_1432

LBB2_893:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1439
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_895:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_895
	JMP  LBB2_1440

LBB2_896:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1447
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_898:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_898
	JMP  LBB2_1448

LBB2_899:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB2_1083
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_1085

LBB2_901:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1455
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_903:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_903
	JMP  LBB2_1456

LBB2_904:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1463
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_906:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_906
	JMP  LBB2_1464

LBB2_907:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1471
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_909:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_909
	JMP  LBB2_1472

LBB2_910:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf0 // and    ecx, -16
	LONG $0xf0418d48         // lea    rax, [rcx - 16]
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	LONG $0x04efc148         // shr    rdi, 4
	LONG $0x01c78348         // add    rdi, 1
	WORD $0xfe89             // mov    esi, edi
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x30f88348         // cmp    rax, 48
	JAE  LBB2_1093
	WORD $0xc031             // xor    eax, eax
	JMP  LBB2_1095

LBB2_912:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1479
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_914:
	LONG $0x23380f66; WORD $0x724c; BYTE $0x08 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x7214             // pmovsxwd    xmm2, qword [rdx + 2*rsi]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7014             // movdqu    oword [r8 + 2*rsi], xmm2
	LONG $0x23380f66; WORD $0x724c; BYTE $0x18 // pmovsxwd    xmm1, qword [rdx + 2*rsi + 24]
	LONG $0x23380f66; WORD $0x7254; BYTE $0x10 // pmovsxwd    xmm2, qword [rdx + 2*rsi + 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x0f               // psrad    xmm4, 15
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xd3fe0f66                           // paddd    xmm2, xmm3
	LONG $0xd3ef0f66                           // pxor    xmm2, xmm3
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0x0e3a0f66; WORD $0xaac8             // pblendw    xmm1, xmm0, 170
	LONG $0x0e3a0f66; WORD $0xaad0             // pblendw    xmm2, xmm0, 170
	LONG $0x2b380f66; BYTE $0xd1               // packusdw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x7054; BYTE $0x10 // movdqu    oword [r8 + 2*rsi + 16], xmm2
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_914
	JMP  LBB2_1480

LBB2_915:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1487
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_917:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_917
	JMP  LBB2_1488

LBB2_918:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1495
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_920:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_920
	JMP  LBB2_1496

LBB2_921:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1503
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_923:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_923
	JMP  LBB2_1504

LBB2_924:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf0     // and    esi, -16
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700ff2; BYTE $0xe0 // pshuflw    xmm0, xmm0, 224
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf0568d48             // lea    rdx, [rsi - 16]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x04e9c149             // shr    r9, 4
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1511
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_926:
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2079             // movdqu    xmm1, oword [rcx + 2*rdi + 32]
	LONG $0x546f0ff3; WORD $0x3079             // movdqu    xmm2, oword [rcx + 2*rdi + 48]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x784c; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm2
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_926
	JMP  LBB2_1512

LBB2_927:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1519
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_929:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_929
	JMP  LBB2_1520

LBB2_930:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1527
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_932:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_932
	JMP  LBB2_1528

LBB2_933:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1537
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_935:
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf814             // movdqu    oword [r8 + 8*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20fa             // movdqu    xmm0, oword [rdx + 8*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30fa             // movdqu    xmm1, oword [rdx + 8*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fb0f66                           // psubq    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fb0f66                           // psubq    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_935
	JMP  LBB2_1538

LBB2_936:
	WORD $0xc189                 // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1545
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x10 // movdqa    xmm0, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_938:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8ef0f66                           // pxor    xmm1, xmm0
	LONG $0xd0ef0f66                           // pxor    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_938
	JMP  LBB2_1546

LBB2_939:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4966; BYTE $0xc3 // movq    xmm0, r11
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1555
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_941:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf85c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_941
	JMP  LBB2_1556

LBB2_942:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1563
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_944:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd3       // subps    xmm2, xmm3
	LONG $0x24110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm4
	LONG $0x54110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm2
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd3       // subps    xmm2, xmm3
	LONG $0x64110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm4
	LONG $0x54110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_944
	JMP  LBB2_1564

LBB2_945:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4966; BYTE $0xc3 // movq    xmm0, r11
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1571
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_947:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafb0f66                           // psubq    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf85c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm1
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_947
	JMP  LBB2_1572

LBB2_948:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1579
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_950:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd3       // subps    xmm2, xmm3
	LONG $0x24110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm4
	LONG $0x54110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm2
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x280f; BYTE $0xd1       // movaps    xmm2, xmm1
	WORD $0x5c0f; BYTE $0xd3       // subps    xmm2, xmm3
	LONG $0x64110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm4
	LONG $0x54110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_950
	JMP  LBB2_1580

LBB2_951:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1587
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_953:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_953
	JMP  LBB2_1588

LBB2_954:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1595
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB2_956:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_956
	JMP  LBB2_1596

LBB2_957:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1603
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI2_3] */

LBB2_959:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_959
	JMP  LBB2_1604

LBB2_960:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1613
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_962:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_962
	JMP  LBB2_1614

LBB2_963:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xfc // and    ecx, -4
	LONG $0xfc718d48         // lea    rsi, [rcx - 4]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x02e9c149         // shr    r9, 2
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1621
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	LONG $0xfee78348         // and    rdi, -2
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xf631             // xor    esi, esi

LBB2_965:
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f2             // movdqu    xmm1, oword [rdx + 8*rsi + 32]
	LONG $0x546f0ff3; WORD $0x30f2             // movdqu    xmm2, oword [rdx + 8*rsi + 48]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcb               // blendvpd    xmm1, xmm3, xmm0
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf04c; BYTE $0x20 // movupd    oword [r8 + 8*rsi + 32], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x30 // movupd    oword [r8 + 8*rsi + 48], xmm2
	LONG $0x08c68348                           // add    rsi, 8
	LONG $0x02c78348                           // add    rdi, 2
	JNE  LBB2_965
	JMP  LBB2_1622

LBB2_966:
	WORD $0x8944; BYTE $0xd1     // mov    ecx, r10d
	WORD $0xe183; BYTE $0xf8     // and    ecx, -8
	LONG $0xf8718d48             // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE   LBB2_1629
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xff31                 // xor    edi, edi
	LONG $0x456f0f66; BYTE $0x30 // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI2_3] */

LBB2_968:
	LONG $0x0c6f0ff3; BYTE $0xba               // movdqu    xmm1, oword [rdx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10ba             // movdqu    xmm2, oword [rdx + 4*rdi + 16]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20ba             // movdqu    xmm1, oword [rdx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30ba             // movdqu    xmm2, oword [rdx + 4*rdi + 48]
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_968
	JMP  LBB2_1630

LBB2_969:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1639
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_971:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_971
	JMP  LBB2_1640

LBB2_972:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1647
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_974:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_974
	JMP  LBB2_1648

LBB2_975:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xfc     // and    esi, -4
	LONG $0x6e0f4866; BYTE $0xc0 // movq    xmm0, rax
	LONG $0xc0700f66; BYTE $0x44 // pshufd    xmm0, xmm0, 68
	LONG $0xfc568d48             // lea    rdx, [rsi - 4]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x02e9c149             // shr    r9, 2
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1655
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_977:
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20f9             // movdqu    xmm1, oword [rcx + 8*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30f9             // movdqu    xmm2, oword [rcx + 8*rdi + 48]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm2
	LONG $0x08c78348                           // add    rdi, 8
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_977
	JMP  LBB2_1656

LBB2_978:
	WORD $0xc289             // mov    edx, eax
	WORD $0xe283; BYTE $0xf8 // and    edx, -8
	WORD $0x280f; BYTE $0xc8 // movaps    xmm1, xmm0
	LONG $0x00c8c60f         // shufps    xmm1, xmm0, 0
	LONG $0xf8728d48         // lea    rsi, [rdx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1663
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_980:
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3
	LONG $0xb954100f; BYTE $0x20   // movups    xmm2, oword [rcx + 4*rdi + 32]
	LONG $0xb95c100f; BYTE $0x30   // movups    xmm3, oword [rcx + 4*rdi + 48]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x54110f41; WORD $0x20b8 // movups    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x5c110f41; WORD $0x30b8 // movups    oword [r8 + 4*rdi + 48], xmm3
	LONG $0x10c78348               // add    rdi, 16
	LONG $0x02c68348               // add    rsi, 2
	JNE  LBB2_980
	JMP  LBB2_1664

LBB2_981:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0718d48         // lea    rsi, [rcx - 32]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x05e9c149         // shr    r9, 5
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1671
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_983:
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3814             // movdqu    oword [r8 + rdi], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x203a             // movdqu    xmm0, oword [rdx + rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x303a             // movdqu    xmm1, oword [rdx + rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0f80f66                           // psubb    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1f80f66                           // psubb    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_983
	JMP  LBB2_1672

LBB2_991:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xd3b60f41             // movzx    edx, r11b
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1679
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_993:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x385c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_993
	JMP  LBB2_1680

LBB2_994:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	LONG $0xd3b60f41             // movzx    edx, r11b
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1687
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_996:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcaf80f66                           // psubb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x385c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm1
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_996
	JMP  LBB2_1688

LBB2_997:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc2     // movzx    eax, dl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1695
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x50 // movdqa    xmm3, oword 80[rbp] /* [rip + .LCPI2_5] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB2_999:
	LONG $0x2c6f0ff3; BYTE $0x01               // movdqu    xmm5, oword [rcx + rax]
	LONG $0x746f0ff3; WORD $0x1001             // movdqu    xmm6, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2001             // movdqu    xmm5, oword [rcx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3001             // movdqu    xmm6, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_999
	JMP  LBB2_1696

LBB2_1000:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB2_1103
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_1105

LBB2_1002:
	WORD $0x8944; BYTE $0xd7     // mov    edi, r10d
	WORD $0xe783; BYTE $0xe0     // and    edi, -32
	WORD $0xb60f; BYTE $0xc2     // movzx    eax, dl
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0478d48             // lea    rax, [rdi - 32]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	LONG $0x30380f66; BYTE $0xc8 // pmovzxbw    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB2_1703
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xfee68348             // and    rsi, -2
	WORD $0xf748; BYTE $0xde     // neg    rsi
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd06f0f66             // movdqa    xmm2, xmm0
	LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x50 // movdqa    xmm3, oword 80[rbp] /* [rip + .LCPI2_5] */
	LONG $0xe06f0f66             // movdqa    xmm4, xmm0
	LONG $0xe4680f66             // punpckhbw    xmm4, xmm4

LBB2_1004:
	LONG $0x2c6f0ff3; BYTE $0x01               // movdqu    xmm5, oword [rcx + rax]
	LONG $0x746f0ff3; WORD $0x1001             // movdqu    xmm6, oword [rcx + rax + 16]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x003c             // movdqu    oword [r8 + rax], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm5
	LONG $0x6c6f0ff3; WORD $0x2001             // movdqu    xmm5, oword [rcx + rax + 32]
	LONG $0x746f0ff3; WORD $0x3001             // movdqu    xmm6, oword [rcx + rax + 48]
	LONG $0x30380f66; BYTE $0xfd               // pmovzxbw    xmm7, xmm5
	LONG $0xed680f66                           // punpckhbw    xmm5, xmm5
	LONG $0xead50f66                           // pmullw    xmm5, xmm2
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfbdb0f66                           // pand    xmm7, xmm3
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0x30380f66; BYTE $0xee               // pmovzxbw    xmm5, xmm6
	LONG $0xf6680f66                           // punpckhbw    xmm6, xmm6
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0xf3db0f66                           // pand    xmm6, xmm3
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebdb0f66                           // pand    xmm5, xmm3
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0x7f0f41f3; WORD $0x007c; BYTE $0x20 // movdqu    oword [r8 + rax + 32], xmm7
	LONG $0x7f0f41f3; WORD $0x006c; BYTE $0x30 // movdqu    oword [r8 + rax + 48], xmm5
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1004
	JMP  LBB2_1704

LBB2_1005:
	WORD $0x8944; BYTE $0xd1 // mov    ecx, r10d
	WORD $0xe183; BYTE $0xe0 // and    ecx, -32
	LONG $0xe0798d48         // lea    rdi, [rcx - 32]
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	LONG $0x05eec148         // shr    rsi, 5
	LONG $0x01c68348         // add    rsi, 1
	WORD $0xf089             // mov    eax, esi
	WORD $0xe083; BYTE $0x03 // and    eax, 3
	LONG $0x60ff8348         // cmp    rdi, 96
	JAE  LBB2_1113
	WORD $0xff31             // xor    edi, edi
	JMP  LBB2_1115

LBB2_1007:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xd0     // movzx    edx, al
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1711
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1009:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1009
	JMP  LBB2_1712

LBB2_1010:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xe0     // and    esi, -32
	WORD $0xb60f; BYTE $0xd0     // movzx    edx, al
	LONG $0xc26e0f66             // movd    xmm0, edx
	LONG $0xc9ef0f66             // pxor    xmm1, xmm1
	LONG $0x00380f66; BYTE $0xc1 // pshufb    xmm0, xmm1
	LONG $0xe0568d48             // lea    rdx, [rsi - 32]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x05e9c149             // shr    r9, 5
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1719
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1012:
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x2039             // movdqu    xmm1, oword [rcx + rdi + 32]
	LONG $0x546f0ff3; WORD $0x3039             // movdqu    xmm2, oword [rcx + rdi + 48]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm2
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1012
	JMP  LBB2_1720

LBB2_1013:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1727
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_1015:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1015
	JMP  LBB2_1728

LBB2_1016:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1735
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_1018:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb814             // movdqu    oword [r8 + 4*rdi], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0fa0f66                           // psubd    xmm2, xmm0
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0xc1fa0f66                           // psubd    xmm0, xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm2
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1018
	JMP  LBB2_1736

LBB2_1019:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x6e0f4166; BYTE $0xc3 // movd    xmm0, r11d
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1743
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1021:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb85c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1021
	JMP  LBB2_1744

LBB2_1022:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0x6e0f4166; BYTE $0xc3 // movd    xmm0, r11d
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1751
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1024:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcafa0f66                           // psubd    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb85c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm3
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1024
	JMP  LBB2_1752

LBB2_1025:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1759
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1027:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1027
	JMP  LBB2_1760

LBB2_1028:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1767
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_1030:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1030
	JMP  LBB2_1768

LBB2_1031:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1775
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1033:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1033
	JMP  LBB2_1776

LBB2_1034:
	WORD $0xc189             // mov    ecx, eax
	WORD $0xe183; BYTE $0xf8 // and    ecx, -8
	LONG $0xf8718d48         // lea    rsi, [rcx - 8]
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0x03e9c149         // shr    r9, 3
	LONG $0x01c18349         // add    r9, 1
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1783
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	LONG $0xfee68348         // and    rsi, -2
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_1036:
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1
	LONG $0x446f0ff3; WORD $0x20ba             // movdqu    xmm0, oword [rdx + 4*rdi + 32]
	LONG $0x4c6f0ff3; WORD $0x30ba             // movdqu    xmm1, oword [rdx + 4*rdi + 48]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm1
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c68348                           // add    rsi, 2
	JNE  LBB2_1036
	JMP  LBB2_1784

LBB2_1037:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1791
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1039:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1039
	JMP  LBB2_1792

LBB2_1040:
	WORD $0x8944; BYTE $0xd6     // mov    esi, r10d
	WORD $0xe683; BYTE $0xf8     // and    esi, -8
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0xc0700f66; BYTE $0x00 // pshufd    xmm0, xmm0, 0
	LONG $0xf8568d48             // lea    rdx, [rsi - 8]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x03e9c149             // shr    r9, 3
	LONG $0x01c18349             // add    r9, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_1799
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0xfee28348             // and    rdx, -2
	WORD $0xf748; BYTE $0xda     // neg    rdx
	WORD $0xff31                 // xor    edi, edi

LBB2_1042:
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0x20b9             // movdqu    xmm1, oword [rcx + 4*rdi + 32]
	LONG $0x546f0ff3; WORD $0x30b9             // movdqu    xmm2, oword [rcx + 4*rdi + 48]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm2
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB2_1042
	JMP  LBB2_1800

LBB2_750:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_751:
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x20 // movdqu    oword [r8 + 4*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x30 // movdqu    oword [r8 + 4*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x40 // movdqu    oword [r8 + 4*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x50 // movdqu    oword [r8 + 4*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x60 // movdqu    oword [r8 + 4*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x70 // movdqu    oword [r8 + 4*rdi + 112], xmm0
	QUAD $0x0080b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 128], xmm0
	QUAD $0x0090b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 144], xmm0
	QUAD $0x00a0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 160], xmm0
	QUAD $0x00b0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 176], xmm0
	QUAD $0x00c0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 192], xmm0
	QUAD $0x00d0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 208], xmm0
	QUAD $0x00e0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 224], xmm0
	QUAD $0x00f0b8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 4*rdi + 240], xmm0
	LONG $0x40c78348                           // add    rdi, 64
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB2_751

LBB2_752:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_755
	LONG $0xb8348d49         // lea    rsi, [r8 + 4*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_754:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB2_754

LBB2_755:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807

LBB2_756:
	QUAD $0x000000008804c741 // mov    dword [r8 + 4*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB2_756
	JMP  LBB2_1807

LBB2_842:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_843:
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x20 // movdqu    oword [r8 + 8*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x30 // movdqu    oword [r8 + 8*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x40 // movdqu    oword [r8 + 8*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x50 // movdqu    oword [r8 + 8*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x60 // movdqu    oword [r8 + 8*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x70 // movdqu    oword [r8 + 8*rdi + 112], xmm0
	QUAD $0x0080f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 128], xmm0
	QUAD $0x0090f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 144], xmm0
	QUAD $0x00a0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 160], xmm0
	QUAD $0x00b0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 176], xmm0
	QUAD $0x00c0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 192], xmm0
	QUAD $0x00d0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 208], xmm0
	QUAD $0x00e0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 224], xmm0
	QUAD $0x00f0f8847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 8*rdi + 240], xmm0
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB2_843

LBB2_844:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_847
	LONG $0xf8348d49         // lea    rsi, [r8 + 8*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_846:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB2_846

LBB2_847:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807

LBB2_848:
	QUAD $0x00000000c804c749 // mov    qword [r8 + 8*rcx], 0
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3948; BYTE $0xc8 // cmp    rax, rcx
	JNE  LBB2_848
	JMP  LBB2_1807

LBB2_871:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_872:
	LONG $0x7f0f41f3; WORD $0x7804             // movdqu    oword [r8 + 2*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x20 // movdqu    oword [r8 + 2*rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x30 // movdqu    oword [r8 + 2*rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x40 // movdqu    oword [r8 + 2*rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x50 // movdqu    oword [r8 + 2*rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x60 // movdqu    oword [r8 + 2*rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x70 // movdqu    oword [r8 + 2*rdi + 112], xmm0
	QUAD $0x008078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 128], xmm0
	QUAD $0x009078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 144], xmm0
	QUAD $0x00a078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 160], xmm0
	QUAD $0x00b078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 176], xmm0
	QUAD $0x00c078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 192], xmm0
	QUAD $0x00d078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 208], xmm0
	QUAD $0x00e078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 224], xmm0
	QUAD $0x00f078847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + 2*rdi + 240], xmm0
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB2_872

LBB2_873:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_876
	LONG $0x78348d49         // lea    rsi, [r8 + 2*rdi]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_875:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB2_875

LBB2_876:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807

LBB2_877:
	LONG $0x04c74166; WORD $0x0048; BYTE $0x00 // mov    word [r8 + 2*rcx], 0
	LONG $0x01c18348                           // add    rcx, 1
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB2_877
	JMP  LBB2_1807

LBB2_984:
	LONG $0xf8e68348         // and    rsi, -8
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_985:
	LONG $0x7f0f41f3; WORD $0x3804             // movdqu    oword [r8 + rdi], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x20 // movdqu    oword [r8 + rdi + 32], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x30 // movdqu    oword [r8 + rdi + 48], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x40 // movdqu    oword [r8 + rdi + 64], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x50 // movdqu    oword [r8 + rdi + 80], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm0
	QUAD $0x008038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 128], xmm0
	QUAD $0x009038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 144], xmm0
	QUAD $0x00a038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 160], xmm0
	QUAD $0x00b038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 176], xmm0
	QUAD $0x00c038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 192], xmm0
	QUAD $0x00d038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 208], xmm0
	QUAD $0x00e038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 224], xmm0
	QUAD $0x00f038847f0f41f3; WORD $0x0000     // movdqu    oword [r8 + rdi + 240], xmm0
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // add    rdi, 256
	LONG $0x08c68348                           // add    rsi, 8
	JNE  LBB2_985

LBB2_986:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_989
	LONG $0x07348d4a         // lea    rsi, [rdi + r8]
	LONG $0x10c68348         // add    rsi, 16
	WORD $0xf748; BYTE $0xda // neg    rdx
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB2_988:
	LONG $0x467f0ff3; BYTE $0xf0 // movdqu    oword [rsi - 16], xmm0
	LONG $0x067f0ff3             // movdqu    oword [rsi], xmm0
	LONG $0x20c68348             // add    rsi, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB2_988

LBB2_989:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807

LBB2_990:
	LONG $0x0804c641; BYTE $0x00 // mov    byte [r8 + rcx], 0
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE  LBB2_990

LBB2_1807:
	RET

LBB2_1043:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_1044:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_1044

LBB2_1045:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1048
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_1047:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_1047

LBB2_1048:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1049

LBB2_1053:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_1054:
	LONG $0x8204100f                           // movups    xmm0, oword [rdx + 4*rax]
	LONG $0x824c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 4*rax + 16]
	LONG $0x04110f41; BYTE $0x80               // movups    oword [r8 + 4*rax], xmm0
	LONG $0x4c110f41; WORD $0x1080             // movups    oword [r8 + 4*rax + 16], xmm1
	LONG $0x8244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 4*rax + 32]
	LONG $0x824c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 4*rax + 48]
	LONG $0x44110f41; WORD $0x2080             // movups    oword [r8 + 4*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3080             // movups    oword [r8 + 4*rax + 48], xmm1
	LONG $0x8244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 4*rax + 64]
	LONG $0x824c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 4*rax + 80]
	LONG $0x44110f41; WORD $0x4080             // movups    oword [r8 + 4*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5080             // movups    oword [r8 + 4*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6082             // movdqu    xmm0, oword [rdx + 4*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7082             // movdqu    xmm1, oword [rdx + 4*rax + 112]
	LONG $0x7f0f41f3; WORD $0x8044; BYTE $0x60 // movdqu    oword [r8 + 4*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x804c; BYTE $0x70 // movdqu    oword [r8 + 4*rax + 112], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_1054

LBB2_1055:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1058
	QUAD $0x0000001085048d48 // lea    rax, [4*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_1057:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_1057

LBB2_1058:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1059

LBB2_1063:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_1064:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_1064

LBB2_1065:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1068
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_1067:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_1067

LBB2_1068:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1069

LBB2_1073:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_1074:
	LONG $0xc204100f                           // movups    xmm0, oword [rdx + 8*rax]
	LONG $0xc24c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 8*rax + 16]
	LONG $0x04110f41; BYTE $0xc0               // movups    oword [r8 + 8*rax], xmm0
	LONG $0x4c110f41; WORD $0x10c0             // movups    oword [r8 + 8*rax + 16], xmm1
	LONG $0xc244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 8*rax + 32]
	LONG $0xc24c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 8*rax + 48]
	LONG $0x44110f41; WORD $0x20c0             // movups    oword [r8 + 8*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x30c0             // movups    oword [r8 + 8*rax + 48], xmm1
	LONG $0xc244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 8*rax + 64]
	LONG $0xc24c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 8*rax + 80]
	LONG $0x44110f41; WORD $0x40c0             // movups    oword [r8 + 8*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x50c0             // movups    oword [r8 + 8*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x60c2             // movdqu    xmm0, oword [rdx + 8*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x70c2             // movdqu    xmm1, oword [rdx + 8*rax + 112]
	LONG $0x7f0f41f3; WORD $0xc044; BYTE $0x60 // movdqu    oword [r8 + 8*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0xc04c; BYTE $0x70 // movdqu    oword [r8 + 8*rax + 112], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_1074

LBB2_1075:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1078
	QUAD $0x00000010c5048d48 // lea    rax, [8*rax + 16]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_1077:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_1077

LBB2_1078:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1079

LBB2_1083:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_1084:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_1084

LBB2_1085:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1088
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_1087:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_1087

LBB2_1088:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1089

LBB2_1093:
	LONG $0xfce78348         // and    rdi, -4
	WORD $0xf748; BYTE $0xdf // neg    rdi
	WORD $0xc031             // xor    eax, eax

LBB2_1094:
	LONG $0x4204100f                           // movups    xmm0, oword [rdx + 2*rax]
	LONG $0x424c100f; BYTE $0x10               // movups    xmm1, oword [rdx + 2*rax + 16]
	LONG $0x04110f41; BYTE $0x40               // movups    oword [r8 + 2*rax], xmm0
	LONG $0x4c110f41; WORD $0x1040             // movups    oword [r8 + 2*rax + 16], xmm1
	LONG $0x4244100f; BYTE $0x20               // movups    xmm0, oword [rdx + 2*rax + 32]
	LONG $0x424c100f; BYTE $0x30               // movups    xmm1, oword [rdx + 2*rax + 48]
	LONG $0x44110f41; WORD $0x2040             // movups    oword [r8 + 2*rax + 32], xmm0
	LONG $0x4c110f41; WORD $0x3040             // movups    oword [r8 + 2*rax + 48], xmm1
	LONG $0x4244100f; BYTE $0x40               // movups    xmm0, oword [rdx + 2*rax + 64]
	LONG $0x424c100f; BYTE $0x50               // movups    xmm1, oword [rdx + 2*rax + 80]
	LONG $0x44110f41; WORD $0x4040             // movups    oword [r8 + 2*rax + 64], xmm0
	LONG $0x4c110f41; WORD $0x5040             // movups    oword [r8 + 2*rax + 80], xmm1
	LONG $0x446f0ff3; WORD $0x6042             // movdqu    xmm0, oword [rdx + 2*rax + 96]
	LONG $0x4c6f0ff3; WORD $0x7042             // movdqu    xmm1, oword [rdx + 2*rax + 112]
	LONG $0x7f0f41f3; WORD $0x4044; BYTE $0x60 // movdqu    oword [r8 + 2*rax + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x404c; BYTE $0x70 // movdqu    oword [r8 + 2*rax + 112], xmm1
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x04c78348                           // add    rdi, 4
	JNE  LBB2_1094

LBB2_1095:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB2_1098
	WORD $0x0148; BYTE $0xc0 // add    rax, rax
	LONG $0x10c08348         // add    rax, 16
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_1097:
	LONG $0x446f0ff3; WORD $0xf002             // movdqu    xmm0, oword [rdx + rax - 16]
	LONG $0x0c6f0ff3; BYTE $0x02               // movdqu    xmm1, oword [rdx + rax]
	LONG $0x7f0f41f3; WORD $0x0044; BYTE $0xf0 // movdqu    oword [r8 + rax - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x000c             // movdqu    oword [r8 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	JNE  LBB2_1097

LBB2_1098:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1099

LBB2_1103:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_1104:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB2_1104

LBB2_1105:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB2_1108
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB2_1107:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB2_1107

LBB2_1108:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1109

LBB2_1113:
	LONG $0xfce68348         // and    rsi, -4
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0xff31             // xor    edi, edi

LBB2_1114:
	LONG $0x3a04100f                           // movups    xmm0, oword [rdx + rdi]
	LONG $0x3a4c100f; BYTE $0x10               // movups    xmm1, oword [rdx + rdi + 16]
	LONG $0x04110f41; BYTE $0x38               // movups    oword [r8 + rdi], xmm0
	LONG $0x4c110f41; WORD $0x1038             // movups    oword [r8 + rdi + 16], xmm1
	LONG $0x3a44100f; BYTE $0x20               // movups    xmm0, oword [rdx + rdi + 32]
	LONG $0x3a4c100f; BYTE $0x30               // movups    xmm1, oword [rdx + rdi + 48]
	LONG $0x44110f41; WORD $0x2038             // movups    oword [r8 + rdi + 32], xmm0
	LONG $0x4c110f41; WORD $0x3038             // movups    oword [r8 + rdi + 48], xmm1
	LONG $0x3a44100f; BYTE $0x40               // movups    xmm0, oword [rdx + rdi + 64]
	LONG $0x3a4c100f; BYTE $0x50               // movups    xmm1, oword [rdx + rdi + 80]
	LONG $0x44110f41; WORD $0x4038             // movups    oword [r8 + rdi + 64], xmm0
	LONG $0x4c110f41; WORD $0x5038             // movups    oword [r8 + rdi + 80], xmm1
	LONG $0x446f0ff3; WORD $0x603a             // movdqu    xmm0, oword [rdx + rdi + 96]
	LONG $0x4c6f0ff3; WORD $0x703a             // movdqu    xmm1, oword [rdx + rdi + 112]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x60 // movdqu    oword [r8 + rdi + 96], xmm0
	LONG $0x7f0f41f3; WORD $0x384c; BYTE $0x70 // movdqu    oword [r8 + rdi + 112], xmm1
	LONG $0x80ef8348                           // sub    rdi, -128
	LONG $0x04c68348                           // add    rsi, 4
	JNE  LBB2_1114

LBB2_1115:
	WORD $0x8548; BYTE $0xc0 // test    rax, rax
	JE   LBB2_1118
	LONG $0x10c78348         // add    rdi, 16
	WORD $0xf748; BYTE $0xd8 // neg    rax

LBB2_1117:
	LONG $0x446f0ff3; WORD $0xf03a             // movdqu    xmm0, oword [rdx + rdi - 16]
	LONG $0x0c6f0ff3; BYTE $0x3a               // movdqu    xmm1, oword [rdx + rdi]
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0xf0 // movdqu    oword [r8 + rdi - 16], xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	JNE  LBB2_1117

LBB2_1118:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1119

LBB2_1123:
	WORD $0xff31 // xor    edi, edi

LBB2_1124:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1126
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1126:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1127

LBB2_1131:
	WORD $0xff31 // xor    edi, edi

LBB2_1132:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1134
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB2_1134:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1135

LBB2_1139:
	WORD $0xff31 // xor    edi, edi

LBB2_1140:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1142
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB2_1142:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1143

LBB2_1147:
	WORD $0xff31 // xor    edi, edi

LBB2_1148:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1150
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1150:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1151

LBB2_1155:
	WORD $0xff31 // xor    edi, edi

LBB2_1156:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1158
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1158:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1159

LBB2_1163:
	WORD $0xff31 // xor    edi, edi

LBB2_1164:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1166
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1166:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1167

LBB2_1171:
	WORD $0xff31 // xor    edi, edi

LBB2_1172:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1174
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1174:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1175

LBB2_1179:
	WORD $0xff31 // xor    edi, edi

LBB2_1180:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1182
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB2_1182:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1183

LBB2_1189:
	WORD $0xff31 // xor    edi, edi

LBB2_1190:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1192
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x00               // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB2_1192:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1193

LBB2_1199:
	WORD $0xff31 // xor    edi, edi

LBB2_1200:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1202
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xcb5c0f66                           // subpd    xmm1, xmm3
	LONG $0x110f4166; WORD $0xf824             // movupd    oword [r8 + 8*rdi], xmm4
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1

LBB2_1202:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1203

LBB2_1207:
	WORD $0xff31 // xor    edi, edi

LBB2_1208:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1210
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xe1280f66                           // movapd    xmm4, xmm1
	LONG $0xe25c0f66                           // subpd    xmm4, xmm2
	LONG $0xcb5c0f66                           // subpd    xmm1, xmm3
	LONG $0x110f4166; WORD $0xf824             // movupd    oword [r8 + 8*rdi], xmm4
	LONG $0x110f4166; WORD $0xf84c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm1

LBB2_1210:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1211

LBB2_1215:
	WORD $0xff31 // xor    edi, edi

LBB2_1216:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1218
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB2_1218:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1219

LBB2_1223:
	WORD $0xff31 // xor    edi, edi

LBB2_1224:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1226
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, oword 32[rbp] /* [rip + .LCPI2_2] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB2_1226:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1227

LBB2_1231:
	WORD $0xff31 // xor    edi, edi

LBB2_1232:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1234
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1590f66                           // mulpd    xmm2, xmm1
	LONG $0xd9590f66                           // mulpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB2_1234:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1235

LBB2_1239:
	WORD $0xff31 // xor    edi, edi

LBB2_1240:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1242
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, oword 32[rbp] /* [rip + .LCPI2_2] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xf804             // movdqu    oword [r8 + 8*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xf84c; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm1

LBB2_1242:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1243

LBB2_1247:
	WORD $0xff31 // xor    edi, edi

LBB2_1248:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1250
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB2_1250:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1251

LBB2_1255:
	WORD $0xff31 // xor    edi, edi

LBB2_1256:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1258
	LONG $0x14100f66; BYTE $0xf9               // movupd    xmm2, oword [rcx + 8*rdi]
	LONG $0x5c100f66; WORD $0x10f9             // movupd    xmm3, oword [rcx + 8*rdi + 16]
	LONG $0xd1580f66                           // addpd    xmm2, xmm1
	LONG $0xd9580f66                           // addpd    xmm3, xmm1
	LONG $0x110f4166; WORD $0xf814             // movupd    oword [r8 + 8*rdi], xmm2
	LONG $0x110f4166; WORD $0xf85c; BYTE $0x10 // movupd    oword [r8 + 8*rdi + 16], xmm3

LBB2_1258:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1259

LBB2_1263:
	WORD $0xff31 // xor    edi, edi

LBB2_1264:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1266
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1266:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1267

LBB2_1271:
	WORD $0xff31 // xor    edi, edi

LBB2_1272:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1274
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1274:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1275

LBB2_1279:
	WORD $0xff31 // xor    edi, edi

LBB2_1280:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1282
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB2_1282:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1283

LBB2_1287:
	WORD $0xff31 // xor    edi, edi

LBB2_1288:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1290
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB2_1290:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1291

LBB2_1295:
	WORD $0xc031 // xor    eax, eax

LBB2_1296:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1298
	LONG $0x146f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rcx + rax]
	LONG $0x5c6f0ff3; WORD $0x1001             // movdqu    xmm3, oword [rcx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x50               // movdqa    xmm4, oword 80[rbp] /* [rip + .LCPI2_5] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB2_1298:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1807
	JMP  LBB2_1299

LBB2_1303:
	WORD $0xf631 // xor    esi, esi

LBB2_1304:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1306
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x40               // movdqa    xmm4, oword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB2_1306:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1307

LBB2_1311:
	WORD $0xc031 // xor    eax, eax

LBB2_1312:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1314
	LONG $0x146f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rcx + rax]
	LONG $0x5c6f0ff3; WORD $0x1001             // movdqu    xmm3, oword [rcx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x50               // movdqa    xmm4, oword 80[rbp] /* [rip + .LCPI2_5] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB2_1314:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1807
	JMP  LBB2_1315

LBB2_1319:
	WORD $0xf631 // xor    esi, esi

LBB2_1320:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1322
	LONG $0x21380f66; WORD $0x325c; BYTE $0x0c // pmovsxbd    xmm3, dword [rdx + rsi + 12]
	LONG $0x21380f66; WORD $0x3244; BYTE $0x08 // pmovsxbd    xmm0, dword [rdx + rsi + 8]
	LONG $0x21380f66; WORD $0x3254; BYTE $0x04 // pmovsxbd    xmm2, dword [rdx + rsi + 4]
	LONG $0x21380f66; WORD $0x320c             // pmovsxbd    xmm1, dword [rdx + rsi]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe4720f66; BYTE $0x07               // psrad    xmm4, 7
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe5720f66; BYTE $0x07               // psrad    xmm5, 7
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xe6720f66; BYTE $0x07               // psrad    xmm6, 7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xe7720f66; BYTE $0x07               // psrad    xmm7, 7
	LONG $0xdffe0f66                           // paddd    xmm3, xmm7
	LONG $0xc6fe0f66                           // paddd    xmm0, xmm6
	LONG $0xd5fe0f66                           // paddd    xmm2, xmm5
	LONG $0xccfe0f66                           // paddd    xmm1, xmm4
	LONG $0xccef0f66                           // pxor    xmm1, xmm4
	LONG $0xd5ef0f66                           // pxor    xmm2, xmm5
	LONG $0xc6ef0f66                           // pxor    xmm0, xmm6
	LONG $0xdfef0f66                           // pxor    xmm3, xmm7
	LONG $0x656f0f66; BYTE $0x40               // movdqa    xmm4, oword 64[rbp] /* [rip + .LCPI2_4] */
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xc4db0f66                           // pand    xmm0, xmm4
	LONG $0x2b380f66; BYTE $0xc3               // packusdw    xmm0, xmm3
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xccdb0f66                           // pand    xmm1, xmm4
	LONG $0x2b380f66; BYTE $0xca               // packusdw    xmm1, xmm2
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x300c             // movdqu    oword [r8 + rsi], xmm1

LBB2_1322:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1323

LBB2_1327:
	WORD $0xff31 // xor    edi, edi

LBB2_1328:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1330
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1330:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1331

LBB2_1335:
	WORD $0xff31 // xor    edi, edi

LBB2_1336:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1338
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1338:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1339

LBB2_1343:
	WORD $0xff31 // xor    edi, edi

LBB2_1344:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1346
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1346:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1347

LBB2_1351:
	WORD $0xff31 // xor    edi, edi

LBB2_1352:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1354
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB2_1354:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1355

LBB2_1359:
	WORD $0xff31 // xor    edi, edi

LBB2_1360:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1362
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB2_1362:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1363

LBB2_1367:
	WORD $0xff31 // xor    edi, edi

LBB2_1368:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1370
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1370:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1371

LBB2_1375:
	WORD $0xff31 // xor    edi, edi

LBB2_1376:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1378
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1378:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1379

LBB2_1383:
	WORD $0xff31 // xor    edi, edi

LBB2_1384:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1386
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1386:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1387

LBB2_1391:
	WORD $0xff31 // xor    edi, edi

LBB2_1392:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1394
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1394:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1395

LBB2_1399:
	WORD $0xff31 // xor    edi, edi

LBB2_1400:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1402
	LONG $0x046f0ff3; BYTE $0x7a               // movdqu    xmm0, oword [rdx + 2*rdi]
	LONG $0x4c6f0ff3; WORD $0x107a             // movdqu    xmm1, oword [rdx + 2*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f90f66                           // psubw    xmm3, xmm0
	LONG $0xd1f90f66                           // psubw    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1402:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1403

LBB2_1407:
	WORD $0xff31 // xor    edi, edi

LBB2_1408:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1410
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB2_1410:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1411

LBB2_1415:
	WORD $0xff31 // xor    edi, edi

LBB2_1416:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1418
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB2_1418:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1419

LBB2_1423:
	WORD $0xff31 // xor    edi, edi

LBB2_1424:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1426
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB2_1426:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1427

LBB2_1431:
	WORD $0xff31 // xor    edi, edi

LBB2_1432:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1434
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f90f66                           // psubw    xmm3, xmm1
	LONG $0xc2f90f66                           // psubw    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x781c             // movdqu    oword [r8 + 2*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x7844; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm0

LBB2_1434:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1435

LBB2_1439:
	WORD $0xff31 // xor    edi, edi

LBB2_1440:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1442
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1442:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1443

LBB2_1447:
	WORD $0xff31 // xor    edi, edi

LBB2_1448:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1450
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1450:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1451

LBB2_1455:
	WORD $0xf631 // xor    esi, esi

LBB2_1456:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1458
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB2_1458:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1459

LBB2_1463:
	WORD $0xff31 // xor    edi, edi

LBB2_1464:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1466
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1466:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1467

LBB2_1471:
	WORD $0xff31 // xor    edi, edi

LBB2_1472:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1474
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8d50f66                           // pmullw    xmm1, xmm0
	LONG $0xd0d50f66                           // pmullw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1474:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1475

LBB2_1479:
	WORD $0xf631 // xor    esi, esi

LBB2_1480:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1482
	LONG $0x23380f66; WORD $0x7244; BYTE $0x08 // pmovsxwd    xmm0, qword [rdx + 2*rsi + 8]
	LONG $0x23380f66; WORD $0x720c             // pmovsxwd    xmm1, qword [rdx + 2*rsi]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xe2720f66; BYTE $0x0f               // psrad    xmm2, 15
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xe3720f66; BYTE $0x0f               // psrad    xmm3, 15
	LONG $0xc3fe0f66                           // paddd    xmm0, xmm3
	LONG $0xcafe0f66                           // paddd    xmm1, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0xc3ef0f66                           // pxor    xmm0, xmm3
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x0e3a0f66; WORD $0xaac2             // pblendw    xmm0, xmm2, 170
	LONG $0x0e3a0f66; WORD $0xaaca             // pblendw    xmm1, xmm2, 170
	LONG $0x2b380f66; BYTE $0xc8               // packusdw    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x700c             // movdqu    oword [r8 + 2*rsi], xmm1

LBB2_1482:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1483

LBB2_1487:
	WORD $0xff31 // xor    edi, edi

LBB2_1488:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1490
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1490:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1491

LBB2_1495:
	WORD $0xff31 // xor    edi, edi

LBB2_1496:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1498
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1498:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1499

LBB2_1503:
	WORD $0xff31 // xor    edi, edi

LBB2_1504:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1506
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1506:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1507

LBB2_1511:
	WORD $0xff31 // xor    edi, edi

LBB2_1512:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1514
	LONG $0x0c6f0ff3; BYTE $0x79               // movdqu    xmm1, oword [rcx + 2*rdi]
	LONG $0x546f0ff3; WORD $0x1079             // movdqu    xmm2, oword [rcx + 2*rdi + 16]
	LONG $0xc8fd0f66                           // paddw    xmm1, xmm0
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x780c             // movdqu    oword [r8 + 2*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x7854; BYTE $0x10 // movdqu    oword [r8 + 2*rdi + 16], xmm2

LBB2_1514:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1515

LBB2_1519:
	WORD $0xff31 // xor    edi, edi

LBB2_1520:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1522
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1522:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1523

LBB2_1527:
	WORD $0xff31 // xor    edi, edi

LBB2_1528:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1530
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI2_1] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1530:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1531

LBB2_1537:
	WORD $0xff31 // xor    edi, edi

LBB2_1538:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1540
	LONG $0x046f0ff3; BYTE $0xfa               // movdqu    xmm0, oword [rdx + 8*rdi]
	LONG $0x4c6f0ff3; WORD $0x10fa             // movdqu    xmm1, oword [rdx + 8*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fb0f66                           // psubq    xmm3, xmm0
	LONG $0xd1fb0f66                           // psubq    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1540:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1541

LBB2_1545:
	WORD $0xff31 // xor    edi, edi

LBB2_1546:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1548
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI2_1] */
	LONG $0xc2ef0f66                           // pxor    xmm0, xmm2
	LONG $0xcaef0f66                           // pxor    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1548:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1549

LBB2_1555:
	WORD $0xff31 // xor    edi, edi

LBB2_1556:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1558
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB2_1558:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1559

LBB2_1563:
	WORD $0xff31 // xor    edi, edi

LBB2_1564:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1566
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x5c0f; BYTE $0xcb       // subps    xmm1, xmm3
	LONG $0x24110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm4
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1

LBB2_1566:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1567

LBB2_1571:
	WORD $0xff31 // xor    edi, edi

LBB2_1572:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1574
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fb0f66                           // psubq    xmm3, xmm1
	LONG $0xc2fb0f66                           // psubq    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xf81c             // movdqu    oword [r8 + 8*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xf844; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm0

LBB2_1574:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1575

LBB2_1579:
	WORD $0xff31 // xor    edi, edi

LBB2_1580:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1582
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x280f; BYTE $0xe1       // movaps    xmm4, xmm1
	WORD $0x5c0f; BYTE $0xe2       // subps    xmm4, xmm2
	WORD $0x5c0f; BYTE $0xcb       // subps    xmm1, xmm3
	LONG $0x24110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm4
	LONG $0x4c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm1

LBB2_1582:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1583

LBB2_1587:
	WORD $0xff31 // xor    edi, edi

LBB2_1588:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1590
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB2_1590:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1591

LBB2_1595:
	WORD $0xf631 // xor    esi, esi

LBB2_1596:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1598
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB2_1598:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1599

LBB2_1603:
	WORD $0xff31 // xor    edi, edi

LBB2_1604:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1606
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x30               // movdqa    xmm2, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1606:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1607

LBB2_1613:
	WORD $0xff31 // xor    edi, edi

LBB2_1614:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1616
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x590f; BYTE $0xd1       // mulps    xmm2, xmm1
	WORD $0x590f; BYTE $0xd9       // mulps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB2_1616:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1617

LBB2_1621:
	WORD $0xf631 // xor    esi, esi

LBB2_1622:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1624
	LONG $0x0c6f0ff3; BYTE $0xf2               // movdqu    xmm1, oword [rdx + 8*rsi]
	LONG $0x546f0ff3; WORD $0x10f2             // movdqu    xmm2, oword [rdx + 8*rsi + 16]
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xe4ef0f66                           // pxor    xmm4, xmm4
	LONG $0xe1fb0f66                           // psubq    xmm4, xmm1
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0x15380f66; BYTE $0xcc               // blendvpd    xmm1, xmm4, xmm0
	LONG $0xdafb0f66                           // psubq    xmm3, xmm2
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x15380f66; BYTE $0xd3               // blendvpd    xmm2, xmm3, xmm0
	LONG $0x110f4166; WORD $0xf00c             // movupd    oword [r8 + 8*rsi], xmm1
	LONG $0x110f4166; WORD $0xf054; BYTE $0x10 // movupd    oword [r8 + 8*rsi + 16], xmm2

LBB2_1624:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1625

LBB2_1629:
	WORD $0xff31 // xor    edi, edi

LBB2_1630:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1632
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x556f0f66; BYTE $0x30               // movdqa    xmm2, oword 48[rbp] /* [rip + .LCPI2_3] */
	LONG $0xc2db0f66                           // pand    xmm0, xmm2
	LONG $0xcadb0f66                           // pand    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1632:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1633

LBB2_1639:
	WORD $0xff31 // xor    edi, edi

LBB2_1640:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1642
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1642:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1643

LBB2_1647:
	WORD $0xff31 // xor    edi, edi

LBB2_1648:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1650
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB2_1650:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1651

LBB2_1655:
	WORD $0xff31 // xor    edi, edi

LBB2_1656:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1658
	LONG $0x0c6f0ff3; BYTE $0xf9               // movdqu    xmm1, oword [rcx + 8*rdi]
	LONG $0x546f0ff3; WORD $0x10f9             // movdqu    xmm2, oword [rcx + 8*rdi + 16]
	LONG $0xc8d40f66                           // paddq    xmm1, xmm0
	LONG $0xd0d40f66                           // paddq    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xf80c             // movdqu    oword [r8 + 8*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xf854; BYTE $0x10 // movdqu    oword [r8 + 8*rdi + 16], xmm2

LBB2_1658:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1659

LBB2_1663:
	WORD $0xff31 // xor    edi, edi

LBB2_1664:
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB2_1666
	LONG $0xb914100f               // movups    xmm2, oword [rcx + 4*rdi]
	LONG $0xb95c100f; BYTE $0x10   // movups    xmm3, oword [rcx + 4*rdi + 16]
	WORD $0x580f; BYTE $0xd1       // addps    xmm2, xmm1
	WORD $0x580f; BYTE $0xd9       // addps    xmm3, xmm1
	LONG $0x14110f41; BYTE $0xb8   // movups    oword [r8 + 4*rdi], xmm2
	LONG $0x5c110f41; WORD $0x10b8 // movups    oword [r8 + 4*rdi + 16], xmm3

LBB2_1666:
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	JE   LBB2_1807
	JMP  LBB2_1667

LBB2_1671:
	WORD $0xff31 // xor    edi, edi

LBB2_1672:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1674
	LONG $0x046f0ff3; BYTE $0x3a               // movdqu    xmm0, oword [rdx + rdi]
	LONG $0x4c6f0ff3; WORD $0x103a             // movdqu    xmm1, oword [rdx + rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8f80f66                           // psubb    xmm3, xmm0
	LONG $0xd1f80f66                           // psubb    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1674:
	WORD $0x394c; BYTE $0xd1 // cmp    rcx, r10
	JE   LBB2_1807
	JMP  LBB2_1675

LBB2_1679:
	WORD $0xff31 // xor    edi, edi

LBB2_1680:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1682
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB2_1682:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1683

LBB2_1687:
	WORD $0xff31 // xor    edi, edi

LBB2_1688:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1690
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9f80f66                           // psubb    xmm3, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x381c             // movdqu    oword [r8 + rdi], xmm3
	LONG $0x7f0f41f3; WORD $0x3844; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm0

LBB2_1690:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1691

LBB2_1695:
	WORD $0xc031 // xor    eax, eax

LBB2_1696:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1698
	LONG $0x146f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rcx + rax]
	LONG $0x5c6f0ff3; WORD $0x1001             // movdqu    xmm3, oword [rcx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x50               // movdqa    xmm4, oword 80[rbp] /* [rip + .LCPI2_5] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB2_1698:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1807
	JMP  LBB2_1699

LBB2_1703:
	WORD $0xc031 // xor    eax, eax

LBB2_1704:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1706
	LONG $0x146f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rcx + rax]
	LONG $0x5c6f0ff3; WORD $0x1001             // movdqu    xmm3, oword [rcx + rax + 16]
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe4680f66                           // punpckhbw    xmm4, xmm4
	LONG $0x30380f66; BYTE $0xea               // pmovzxbw    xmm5, xmm2
	LONG $0xd2680f66                           // punpckhbw    xmm2, xmm2
	LONG $0xd4d50f66                           // pmullw    xmm2, xmm4
	LONG $0x656f0f66; BYTE $0x50               // movdqa    xmm4, oword 80[rbp] /* [rip + .LCPI2_5] */
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xecdb0f66                           // pand    xmm5, xmm4
	LONG $0xea670f66                           // packuswb    xmm5, xmm2
	LONG $0xc0680f66                           // punpckhbw    xmm0, xmm0
	LONG $0x30380f66; BYTE $0xd3               // pmovzxbw    xmm2, xmm3
	LONG $0xdb680f66                           // punpckhbw    xmm3, xmm3
	LONG $0xd8d50f66                           // pmullw    xmm3, xmm0
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xd1d50f66                           // pmullw    xmm2, xmm1
	LONG $0xd4db0f66                           // pand    xmm2, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f41f3; WORD $0x002c             // movdqu    oword [r8 + rax], xmm5
	LONG $0x7f0f41f3; WORD $0x0054; BYTE $0x10 // movdqu    oword [r8 + rax + 16], xmm2

LBB2_1706:
	WORD $0x394c; BYTE $0xd7 // cmp    rdi, r10
	JE   LBB2_1807
	JMP  LBB2_1707

LBB2_1711:
	WORD $0xff31 // xor    edi, edi

LBB2_1712:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1714
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1714:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1715

LBB2_1719:
	WORD $0xff31 // xor    edi, edi

LBB2_1720:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1722
	LONG $0x0c6f0ff3; BYTE $0x39               // movdqu    xmm1, oword [rcx + rdi]
	LONG $0x546f0ff3; WORD $0x1039             // movdqu    xmm2, oword [rcx + rdi + 16]
	LONG $0xc8fc0f66                           // paddb    xmm1, xmm0
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x380c             // movdqu    oword [r8 + rdi], xmm1
	LONG $0x7f0f41f3; WORD $0x3854; BYTE $0x10 // movdqu    oword [r8 + rdi + 16], xmm2

LBB2_1722:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1723

LBB2_1727:
	WORD $0xff31 // xor    edi, edi

LBB2_1728:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1730
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1730:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1731

LBB2_1735:
	WORD $0xff31 // xor    edi, edi

LBB2_1736:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1738
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xdbef0f66                           // pxor    xmm3, xmm3
	LONG $0xd8fa0f66                           // psubd    xmm3, xmm0
	LONG $0xd1fa0f66                           // psubd    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1738:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1739

LBB2_1743:
	WORD $0xff31 // xor    edi, edi

LBB2_1744:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1746
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB2_1746:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1747

LBB2_1751:
	WORD $0xff31 // xor    edi, edi

LBB2_1752:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1754
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9fa0f66                           // psubd    xmm3, xmm1
	LONG $0xc2fa0f66                           // psubd    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0xb81c             // movdqu    oword [r8 + 4*rdi], xmm3
	LONG $0x7f0f41f3; WORD $0xb844; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm0

LBB2_1754:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1755

LBB2_1759:
	WORD $0xff31 // xor    edi, edi

LBB2_1760:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1762
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1762:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1763

LBB2_1767:
	WORD $0xff31 // xor    edi, edi

LBB2_1768:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1770
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1770:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1771

LBB2_1775:
	WORD $0xff31 // xor    edi, edi

LBB2_1776:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1778
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0x40380f66; BYTE $0xc8               // pmulld    xmm1, xmm0
	LONG $0x40380f66; BYTE $0xd0               // pmulld    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1778:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1779

LBB2_1783:
	WORD $0xff31 // xor    edi, edi

LBB2_1784:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1786
	LONG $0x046f0ff3; BYTE $0xba               // movdqu    xmm0, oword [rdx + 4*rdi]
	LONG $0x4c6f0ff3; WORD $0x10ba             // movdqu    xmm1, oword [rdx + 4*rdi + 16]
	LONG $0x1e380f66; BYTE $0xc0               // pabsd    xmm0, xmm0
	LONG $0x1e380f66; BYTE $0xc9               // pabsd    xmm1, xmm1
	LONG $0x7f0f41f3; WORD $0xb804             // movdqu    oword [r8 + 4*rdi], xmm0
	LONG $0x7f0f41f3; WORD $0xb84c; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm1

LBB2_1786:
	WORD $0x3948; BYTE $0xc1 // cmp    rcx, rax
	JE   LBB2_1807
	JMP  LBB2_1787

LBB2_1791:
	WORD $0xff31 // xor    edi, edi

LBB2_1792:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1794
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1794:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1795

LBB2_1799:
	WORD $0xff31 // xor    edi, edi

LBB2_1800:
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB2_1802
	LONG $0x0c6f0ff3; BYTE $0xb9               // movdqu    xmm1, oword [rcx + 4*rdi]
	LONG $0x546f0ff3; WORD $0x10b9             // movdqu    xmm2, oword [rcx + 4*rdi + 16]
	LONG $0xc8fe0f66                           // paddd    xmm1, xmm0
	LONG $0xd0fe0f66                           // paddd    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0xb80c             // movdqu    oword [r8 + 4*rdi], xmm1
	LONG $0x7f0f41f3; WORD $0xb854; BYTE $0x10 // movdqu    oword [r8 + 4*rdi + 16], xmm2

LBB2_1802:
	WORD $0x394c; BYTE $0xd6 // cmp    rsi, r10
	JE   LBB2_1807
	JMP  LBB2_1803
