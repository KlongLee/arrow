% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute.R
\name{match_arrow}
\alias{match_arrow}
\alias{is_in}
\title{\code{match} and \code{\%in\%} for Arrow objects}
\usage{
match_arrow(x, table, ...)

is_in(x, table, ...)
}
\arguments{
\item{x}{\code{Array} or \code{ChunkedArray}}

\item{table}{\code{Array}, \code{ChunkedArray}, or R vector lookup table.}

\item{...}{additional arguments, ignored}
}
\value{
\code{match_arrow()} returns an \code{int32}-type \code{Array} of the same length
as \code{x} with the (0-based) indexes into \code{table}. \code{is_in()} returns a
\code{boolean}-type \code{Array} of the same length as \code{x} with values indicating
per element of \code{x} it it is present in \code{table}.
}
\description{
\code{base::match()} is not a generic, so we can't just define Arrow methods for
it. This function exposes the analogous functions in the Arrow C++ library.
}
\examples{
# note that the returned value is 0-indexed
cars_tbl <- Table$create(name = rownames(mtcars), mtcars)
match_arrow(Array$create("Mazda RX4 Wag"), cars_tbl$name)

is_in(Array$create("Mazda RX4 Wag"), cars_tbl$name)

# Although there are multiple matches, you are returned the index of the first 
# match, as with the base R equivalent
match(4, mtcars$cyl) # 1-indexed
match_arrow(Array$create(4), cars_tbl$cyl) # 0-indexed

# If you specify a vector or Array, you get the indices of the first matches
match(c(4, 6, 8), mtcars$cyl)
match_arrow(Array$create(c(4, 6, 8)), cars_tbl$cyl)

# If x is a vector, returns a vector; if x is an Array, returns an Array
is_in(c(4, 6, 8), mtcars$cyl) # returns vector
is_in(Array$create(c(4, 6, 8)), cars_tbl$cyl) # returns Array
}
