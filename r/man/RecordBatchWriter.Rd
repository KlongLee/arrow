% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/record-batch-writer.R
\docType{class}
\name{RecordBatchWriter}
\alias{RecordBatchWriter}
\alias{RecordBatchStreamWriter}
\alias{RecordBatchFileWriter}
\title{RecordBatchWriter classes}
\description{
\code{RecordBatchFileWriter} and \code{RecordBatchStreamWriter} are
interfaces for writing record batches to either the binary file or streaming
format.
}
\section{Usage}{
\preformatted{writer <- RecordBatchStreamWriter$create(sink, schema)

writer$write_batch(batch)
writer$write_table(table)
writer$close()
}
}

\section{Factory}{


The \code{RecordBatchFileWriter$create()} and \code{RecordBatchStreamWriter$create()}
factory methods instantiate the object and
take a single argument, named according to the class:
\itemize{
\item \code{sink} A character file name or an \code{OutputStream}.
\item \code{schema} A \link{Schema} for the data to be written.
}
}

\section{Methods}{

\itemize{
\item \verb{$write(x)}: Write a \link{RecordBatch}, \link{Table}, or \code{data.frame}, dispatching
to the methods below appropriately
\item \verb{$write_batch(batch)}: Write a \code{RecordBatch} to stream
\item \verb{$write_table(table)}: Write a \code{Table} to stream
\item \verb{$close()}: close stream
}
}

\examples{
\donttest{
tf <- tempfile()
on.exit(unlink(tf))

batch <- record_batch(iris)

# This opens a connection to the file in Arrow
file_obj <- FileOutputStream$create(tf)
# Pass that to a RecordBatchWriter to write data conforming to a schema
writer <- RecordBatchFileWriter$create(file_obj, batch$schema)
writer$write(batch)
# You may write additional batches to the stream, provided that they have
# the same schema.
# Call "close" on the writer to indicate end-of-file/stream
writer$close()
# Then, close the connection--closing the IPC message does not close the file
file_obj$close()

# Now, we have a file we can read from. Same pattern: open file connection,
# then pass it to a RecordBatchReader
read_file_obj <- ReadableFile$create(tf)
reader <- RecordBatchFileReader$create(read_file_obj)
# RecordBatchFileReader knows how many batches it has (StreamReader does not)
reader$num_record_batches
# We could consume the Reader by calling $read_next_batch() until all are,
# consumed, or we can call $read_table() to pull them all into a Table
tab <- reader$read_table()
# Call as.data.frame to turn that Table into an R data.frame
df <- as.data.frame(tab)
# This should be the same data we sent
all.equal(df, iris, check.attributes = FALSE)
# Unlike the Writers, we don't have to close RecordBatchReaders,
# but we do still need to close the file connection
read_file_obj$close()
}
}
