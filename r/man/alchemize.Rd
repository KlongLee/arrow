% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alchemize.R, R/duckdb.R
\name{alchemize}
\alias{alchemize}
\alias{alchemize_to_duckdb}
\alias{alchemize_to_python}
\alias{alchemize_to_python.Dataset}
\alias{alchemize_to_arrow}
\alias{alchemize_to_arrow.pyarrow.lib.RecordBatchReader}
\alias{alchemize_to_duckdb.Dataset}
\alias{alchemize_to_duckdb.Table}
\alias{alchemize_to_duckdb.arrow_dplyr_query}
\title{Transform a data structure from one engine to another}
\usage{
alchemize_to_duckdb(x, ...)

alchemize_to_python(x, ...)

\method{alchemize_to_python}{Dataset}(x, ...)

alchemize_to_arrow(x, ...)

\method{alchemize_to_arrow}{pyarrow.lib.RecordBatchReader}(x, ...)

\method{alchemize_to_duckdb}{Dataset}(x, ...)

\method{alchemize_to_duckdb}{Table}(x, ...)

\method{alchemize_to_duckdb}{arrow_dplyr_query}(x, ...)
}
\arguments{
\item{x}{the object to alchemize}

\item{...}{arguments passed to other functions}
}
\value{
An object with a reference to the the alchemized data
}
\description{
The \verb{alchemize_*} family of functions take data in one context (e.g. Arrow data in an R
session, Arrow data in a Python session) and transform it into a form usable
by another context: (e.g. Arrow data in a Python session, a (virtual) table in
a DuckDB session). All of these functions use Arrow's C-interface and data is
not serialized or moved when it is alchemized, instead it is made available for
a subprocess of the new context (e.g. Python through reticulate or the DuckDB
engine).
}
\details{
The return value is for each function in the family based on what is at the
end of the function name:
\itemize{
\item \code{alchemize_to_duckdb} - returns a dbplyr-based \code{tbl} with the Arrow data
registered as a (virtual) table in DuckDB. The \code{tbl} can be used in dplyr
pipelines, or you can write DuckDB queries using the table name (by default
\code{"arrow_"} with numbers following it) given in the \code{tbl}. If you would like
to use a specific, pre-existent connection to DuckDB use the \code{con} argument
to pass the connection to use. By default, these tables are automatically
cleaned up when the \code{tbl} is removed from the session (and garbage collection
occurs on that), to disable this, pass \code{auto_disconnect = FALSE}.
\item \code{alchemize_to_python} - returns a reticulate-based python object. This is
the same as the interface using the \code{r_to_py} functions.
}
}
