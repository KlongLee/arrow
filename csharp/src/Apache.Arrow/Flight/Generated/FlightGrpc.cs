// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Format/Flight.proto
// </auto-generated>
// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// <p>
// http://www.apache.org/licenses/LICENSE-2.0
// <p>
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Apache.Arrow.Flight.Protocol {
  /// <summary>
  ///
  /// A flight service is an endpoint for retrieving or storing Arrow data. A
  /// flight service can expose one or more predefined endpoints that can be
  /// accessed using the Arrow Flight Protocol. Additionally, a flight service
  /// can expose a set of actions that are available.
  /// </summary>
  public static partial class FlightService
  {
    static readonly string __ServiceName = "arrow.flight.protocol.FlightService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.HandshakeRequest> __Marshaller_arrow_flight_protocol_HandshakeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.HandshakeRequest.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.HandshakeResponse> __Marshaller_arrow_flight_protocol_HandshakeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.HandshakeResponse.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.Criteria> __Marshaller_arrow_flight_protocol_Criteria = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.Criteria.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.FlightInfo> __Marshaller_arrow_flight_protocol_FlightInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.FlightInfo.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.FlightDescriptor> __Marshaller_arrow_flight_protocol_FlightDescriptor = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.FlightDescriptor.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.SchemaResult> __Marshaller_arrow_flight_protocol_SchemaResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.SchemaResult.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.Ticket> __Marshaller_arrow_flight_protocol_Ticket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.Ticket.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.FlightData> __Marshaller_arrow_flight_protocol_FlightData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.FlightData.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.PutResult> __Marshaller_arrow_flight_protocol_PutResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.PutResult.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.Action> __Marshaller_arrow_flight_protocol_Action = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.Action.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.Result> __Marshaller_arrow_flight_protocol_Result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.Result.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.Empty> __Marshaller_arrow_flight_protocol_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.Empty.Parser));
    static readonly grpc::Marshaller<global::Apache.Arrow.Flight.Protocol.ActionType> __Marshaller_arrow_flight_protocol_ActionType = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Apache.Arrow.Flight.Protocol.ActionType.Parser));

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.HandshakeRequest, global::Apache.Arrow.Flight.Protocol.HandshakeResponse> __Method_Handshake = new grpc::Method<global::Apache.Arrow.Flight.Protocol.HandshakeRequest, global::Apache.Arrow.Flight.Protocol.HandshakeResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Handshake",
        __Marshaller_arrow_flight_protocol_HandshakeRequest,
        __Marshaller_arrow_flight_protocol_HandshakeResponse);

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.Criteria, global::Apache.Arrow.Flight.Protocol.FlightInfo> __Method_ListFlights = new grpc::Method<global::Apache.Arrow.Flight.Protocol.Criteria, global::Apache.Arrow.Flight.Protocol.FlightInfo>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListFlights",
        __Marshaller_arrow_flight_protocol_Criteria,
        __Marshaller_arrow_flight_protocol_FlightInfo);

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.FlightDescriptor, global::Apache.Arrow.Flight.Protocol.FlightInfo> __Method_GetFlightInfo = new grpc::Method<global::Apache.Arrow.Flight.Protocol.FlightDescriptor, global::Apache.Arrow.Flight.Protocol.FlightInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFlightInfo",
        __Marshaller_arrow_flight_protocol_FlightDescriptor,
        __Marshaller_arrow_flight_protocol_FlightInfo);

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.FlightDescriptor, global::Apache.Arrow.Flight.Protocol.SchemaResult> __Method_GetSchema = new grpc::Method<global::Apache.Arrow.Flight.Protocol.FlightDescriptor, global::Apache.Arrow.Flight.Protocol.SchemaResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSchema",
        __Marshaller_arrow_flight_protocol_FlightDescriptor,
        __Marshaller_arrow_flight_protocol_SchemaResult);

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.Ticket, global::Apache.Arrow.Flight.Protocol.FlightData> __Method_DoGet = new grpc::Method<global::Apache.Arrow.Flight.Protocol.Ticket, global::Apache.Arrow.Flight.Protocol.FlightData>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "DoGet",
        __Marshaller_arrow_flight_protocol_Ticket,
        __Marshaller_arrow_flight_protocol_FlightData);

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.PutResult> __Method_DoPut = new grpc::Method<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.PutResult>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "DoPut",
        __Marshaller_arrow_flight_protocol_FlightData,
        __Marshaller_arrow_flight_protocol_PutResult);

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.FlightData> __Method_DoExchange = new grpc::Method<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.FlightData>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "DoExchange",
        __Marshaller_arrow_flight_protocol_FlightData,
        __Marshaller_arrow_flight_protocol_FlightData);

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.Action, global::Apache.Arrow.Flight.Protocol.Result> __Method_DoAction = new grpc::Method<global::Apache.Arrow.Flight.Protocol.Action, global::Apache.Arrow.Flight.Protocol.Result>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "DoAction",
        __Marshaller_arrow_flight_protocol_Action,
        __Marshaller_arrow_flight_protocol_Result);

    static readonly grpc::Method<global::Apache.Arrow.Flight.Protocol.Empty, global::Apache.Arrow.Flight.Protocol.ActionType> __Method_ListActions = new grpc::Method<global::Apache.Arrow.Flight.Protocol.Empty, global::Apache.Arrow.Flight.Protocol.ActionType>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListActions",
        __Marshaller_arrow_flight_protocol_Empty,
        __Marshaller_arrow_flight_protocol_ActionType);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Apache.Arrow.Flight.Protocol.FlightReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FlightService</summary>
    [grpc::BindServiceMethod(typeof(FlightService), "BindService")]
    public abstract partial class FlightServiceBase
    {
      /// <summary>
      ///
      /// Handshake between client and server. Depending on the server, the
      /// handshake may be required to determine the token that should be used for
      /// future operations. Both request and response are streams to allow multiple
      /// round-trips depending on auth mechanism.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Handshake(grpc::IAsyncStreamReader<global::Apache.Arrow.Flight.Protocol.HandshakeRequest> requestStream, grpc::IServerStreamWriter<global::Apache.Arrow.Flight.Protocol.HandshakeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Get a list of available streams given a particular criteria. Most flight
      /// services will expose one or more streams that are readily available for
      /// retrieval. This api allows listing the streams available for
      /// consumption. A user can also provide a criteria. The criteria can limit
      /// the subset of streams that can be listed via this interface. Each flight
      /// service allows its own definition of how to consume criteria.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListFlights(global::Apache.Arrow.Flight.Protocol.Criteria request, grpc::IServerStreamWriter<global::Apache.Arrow.Flight.Protocol.FlightInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// For a given FlightDescriptor, get information about how the flight can be
      /// consumed. This is a useful interface if the consumer of the interface
      /// already can identify the specific flight to consume. This interface can
      /// also allow a consumer to generate a flight stream through a specified
      /// descriptor. For example, a flight descriptor might be something that
      /// includes a SQL statement or a Pickled Python operation that will be
      /// executed. In those cases, the descriptor will not be previously available
      /// within the list of available streams provided by ListFlights but will be
      /// available for consumption for the duration defined by the specific flight
      /// service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Apache.Arrow.Flight.Protocol.FlightInfo> GetFlightInfo(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// For a given FlightDescriptor, get the Schema as described in Schema.fbs::Schema
      /// This is used when a consumer needs the Schema of flight stream. Similar to
      /// GetFlightInfo this interface may generate a new flight that was not previously
      /// available in ListFlights.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Apache.Arrow.Flight.Protocol.SchemaResult> GetSchema(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Retrieve a single stream associated with a particular descriptor
      /// associated with the referenced ticket. A Flight can be composed of one or
      /// more streams where each stream can be retrieved using a separate opaque
      /// ticket that the flight service uses for managing a collection of streams.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task DoGet(global::Apache.Arrow.Flight.Protocol.Ticket request, grpc::IServerStreamWriter<global::Apache.Arrow.Flight.Protocol.FlightData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Push a stream to the flight service associated with a particular
      /// flight stream. This allows a client of a flight service to upload a stream
      /// of data. Depending on the particular flight service, a client consumer
      /// could be allowed to upload a single stream per descriptor or an unlimited
      /// number. In the latter, the service might implement a 'seal' action that
      /// can be applied to a descriptor once all streams are uploaded.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task DoPut(grpc::IAsyncStreamReader<global::Apache.Arrow.Flight.Protocol.FlightData> requestStream, grpc::IServerStreamWriter<global::Apache.Arrow.Flight.Protocol.PutResult> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Open a bidirectional data channel for a given descriptor. This
      /// allows clients to send and receive arbitrary Arrow data and
      /// application-specific metadata in a single logical stream. In
      /// contrast to DoGet/DoPut, this is more suited for clients
      /// offloading computation (rather than storage) to a Flight service.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task DoExchange(grpc::IAsyncStreamReader<global::Apache.Arrow.Flight.Protocol.FlightData> requestStream, grpc::IServerStreamWriter<global::Apache.Arrow.Flight.Protocol.FlightData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Flight services can support an arbitrary number of simple actions in
      /// addition to the possible ListFlights, GetFlightInfo, DoGet, DoPut
      /// operations that are potentially available. DoAction allows a flight client
      /// to do a specific action against a flight service. An action includes
      /// opaque request and response objects that are specific to the type action
      /// being undertaken.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task DoAction(global::Apache.Arrow.Flight.Protocol.Action request, grpc::IServerStreamWriter<global::Apache.Arrow.Flight.Protocol.Result> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// A flight service exposes all of the available action types that it has
      /// along with descriptions. This allows different flight consumers to
      /// understand the capabilities of the flight service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListActions(global::Apache.Arrow.Flight.Protocol.Empty request, grpc::IServerStreamWriter<global::Apache.Arrow.Flight.Protocol.ActionType> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FlightService</summary>
    public partial class FlightServiceClient : grpc::ClientBase<FlightServiceClient>
    {
      /// <summary>Creates a new client for FlightService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FlightServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FlightService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FlightServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FlightServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FlightServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// Handshake between client and server. Depending on the server, the
      /// handshake may be required to determine the token that should be used for
      /// future operations. Both request and response are streams to allow multiple
      /// round-trips depending on auth mechanism.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Apache.Arrow.Flight.Protocol.HandshakeRequest, global::Apache.Arrow.Flight.Protocol.HandshakeResponse> Handshake(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Handshake(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Handshake between client and server. Depending on the server, the
      /// handshake may be required to determine the token that should be used for
      /// future operations. Both request and response are streams to allow multiple
      /// round-trips depending on auth mechanism.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Apache.Arrow.Flight.Protocol.HandshakeRequest, global::Apache.Arrow.Flight.Protocol.HandshakeResponse> Handshake(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Handshake, null, options);
      }
      /// <summary>
      ///
      /// Get a list of available streams given a particular criteria. Most flight
      /// services will expose one or more streams that are readily available for
      /// retrieval. This api allows listing the streams available for
      /// consumption. A user can also provide a criteria. The criteria can limit
      /// the subset of streams that can be listed via this interface. Each flight
      /// service allows its own definition of how to consume criteria.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Apache.Arrow.Flight.Protocol.FlightInfo> ListFlights(global::Apache.Arrow.Flight.Protocol.Criteria request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFlights(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Get a list of available streams given a particular criteria. Most flight
      /// services will expose one or more streams that are readily available for
      /// retrieval. This api allows listing the streams available for
      /// consumption. A user can also provide a criteria. The criteria can limit
      /// the subset of streams that can be listed via this interface. Each flight
      /// service allows its own definition of how to consume criteria.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Apache.Arrow.Flight.Protocol.FlightInfo> ListFlights(global::Apache.Arrow.Flight.Protocol.Criteria request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListFlights, null, options, request);
      }
      /// <summary>
      ///
      /// For a given FlightDescriptor, get information about how the flight can be
      /// consumed. This is a useful interface if the consumer of the interface
      /// already can identify the specific flight to consume. This interface can
      /// also allow a consumer to generate a flight stream through a specified
      /// descriptor. For example, a flight descriptor might be something that
      /// includes a SQL statement or a Pickled Python operation that will be
      /// executed. In those cases, the descriptor will not be previously available
      /// within the list of available streams provided by ListFlights but will be
      /// available for consumption for the duration defined by the specific flight
      /// service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Apache.Arrow.Flight.Protocol.FlightInfo GetFlightInfo(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFlightInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// For a given FlightDescriptor, get information about how the flight can be
      /// consumed. This is a useful interface if the consumer of the interface
      /// already can identify the specific flight to consume. This interface can
      /// also allow a consumer to generate a flight stream through a specified
      /// descriptor. For example, a flight descriptor might be something that
      /// includes a SQL statement or a Pickled Python operation that will be
      /// executed. In those cases, the descriptor will not be previously available
      /// within the list of available streams provided by ListFlights but will be
      /// available for consumption for the duration defined by the specific flight
      /// service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Apache.Arrow.Flight.Protocol.FlightInfo GetFlightInfo(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFlightInfo, null, options, request);
      }
      /// <summary>
      ///
      /// For a given FlightDescriptor, get information about how the flight can be
      /// consumed. This is a useful interface if the consumer of the interface
      /// already can identify the specific flight to consume. This interface can
      /// also allow a consumer to generate a flight stream through a specified
      /// descriptor. For example, a flight descriptor might be something that
      /// includes a SQL statement or a Pickled Python operation that will be
      /// executed. In those cases, the descriptor will not be previously available
      /// within the list of available streams provided by ListFlights but will be
      /// available for consumption for the duration defined by the specific flight
      /// service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Apache.Arrow.Flight.Protocol.FlightInfo> GetFlightInfoAsync(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFlightInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// For a given FlightDescriptor, get information about how the flight can be
      /// consumed. This is a useful interface if the consumer of the interface
      /// already can identify the specific flight to consume. This interface can
      /// also allow a consumer to generate a flight stream through a specified
      /// descriptor. For example, a flight descriptor might be something that
      /// includes a SQL statement or a Pickled Python operation that will be
      /// executed. In those cases, the descriptor will not be previously available
      /// within the list of available streams provided by ListFlights but will be
      /// available for consumption for the duration defined by the specific flight
      /// service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Apache.Arrow.Flight.Protocol.FlightInfo> GetFlightInfoAsync(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFlightInfo, null, options, request);
      }
      /// <summary>
      ///
      /// For a given FlightDescriptor, get the Schema as described in Schema.fbs::Schema
      /// This is used when a consumer needs the Schema of flight stream. Similar to
      /// GetFlightInfo this interface may generate a new flight that was not previously
      /// available in ListFlights.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Apache.Arrow.Flight.Protocol.SchemaResult GetSchema(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// For a given FlightDescriptor, get the Schema as described in Schema.fbs::Schema
      /// This is used when a consumer needs the Schema of flight stream. Similar to
      /// GetFlightInfo this interface may generate a new flight that was not previously
      /// available in ListFlights.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Apache.Arrow.Flight.Protocol.SchemaResult GetSchema(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSchema, null, options, request);
      }
      /// <summary>
      ///
      /// For a given FlightDescriptor, get the Schema as described in Schema.fbs::Schema
      /// This is used when a consumer needs the Schema of flight stream. Similar to
      /// GetFlightInfo this interface may generate a new flight that was not previously
      /// available in ListFlights.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Apache.Arrow.Flight.Protocol.SchemaResult> GetSchemaAsync(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// For a given FlightDescriptor, get the Schema as described in Schema.fbs::Schema
      /// This is used when a consumer needs the Schema of flight stream. Similar to
      /// GetFlightInfo this interface may generate a new flight that was not previously
      /// available in ListFlights.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Apache.Arrow.Flight.Protocol.SchemaResult> GetSchemaAsync(global::Apache.Arrow.Flight.Protocol.FlightDescriptor request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSchema, null, options, request);
      }
      /// <summary>
      ///
      /// Retrieve a single stream associated with a particular descriptor
      /// associated with the referenced ticket. A Flight can be composed of one or
      /// more streams where each stream can be retrieved using a separate opaque
      /// ticket that the flight service uses for managing a collection of streams.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Apache.Arrow.Flight.Protocol.FlightData> DoGet(global::Apache.Arrow.Flight.Protocol.Ticket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieve a single stream associated with a particular descriptor
      /// associated with the referenced ticket. A Flight can be composed of one or
      /// more streams where each stream can be retrieved using a separate opaque
      /// ticket that the flight service uses for managing a collection of streams.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Apache.Arrow.Flight.Protocol.FlightData> DoGet(global::Apache.Arrow.Flight.Protocol.Ticket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_DoGet, null, options, request);
      }
      /// <summary>
      ///
      /// Push a stream to the flight service associated with a particular
      /// flight stream. This allows a client of a flight service to upload a stream
      /// of data. Depending on the particular flight service, a client consumer
      /// could be allowed to upload a single stream per descriptor or an unlimited
      /// number. In the latter, the service might implement a 'seal' action that
      /// can be applied to a descriptor once all streams are uploaded.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.PutResult> DoPut(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoPut(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Push a stream to the flight service associated with a particular
      /// flight stream. This allows a client of a flight service to upload a stream
      /// of data. Depending on the particular flight service, a client consumer
      /// could be allowed to upload a single stream per descriptor or an unlimited
      /// number. In the latter, the service might implement a 'seal' action that
      /// can be applied to a descriptor once all streams are uploaded.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.PutResult> DoPut(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_DoPut, null, options);
      }
      /// <summary>
      ///
      /// Open a bidirectional data channel for a given descriptor. This
      /// allows clients to send and receive arbitrary Arrow data and
      /// application-specific metadata in a single logical stream. In
      /// contrast to DoGet/DoPut, this is more suited for clients
      /// offloading computation (rather than storage) to a Flight service.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.FlightData> DoExchange(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoExchange(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Open a bidirectional data channel for a given descriptor. This
      /// allows clients to send and receive arbitrary Arrow data and
      /// application-specific metadata in a single logical stream. In
      /// contrast to DoGet/DoPut, this is more suited for clients
      /// offloading computation (rather than storage) to a Flight service.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.FlightData> DoExchange(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_DoExchange, null, options);
      }
      /// <summary>
      ///
      /// Flight services can support an arbitrary number of simple actions in
      /// addition to the possible ListFlights, GetFlightInfo, DoGet, DoPut
      /// operations that are potentially available. DoAction allows a flight client
      /// to do a specific action against a flight service. An action includes
      /// opaque request and response objects that are specific to the type action
      /// being undertaken.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Apache.Arrow.Flight.Protocol.Result> DoAction(global::Apache.Arrow.Flight.Protocol.Action request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Flight services can support an arbitrary number of simple actions in
      /// addition to the possible ListFlights, GetFlightInfo, DoGet, DoPut
      /// operations that are potentially available. DoAction allows a flight client
      /// to do a specific action against a flight service. An action includes
      /// opaque request and response objects that are specific to the type action
      /// being undertaken.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Apache.Arrow.Flight.Protocol.Result> DoAction(global::Apache.Arrow.Flight.Protocol.Action request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_DoAction, null, options, request);
      }
      /// <summary>
      ///
      /// A flight service exposes all of the available action types that it has
      /// along with descriptions. This allows different flight consumers to
      /// understand the capabilities of the flight service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Apache.Arrow.Flight.Protocol.ActionType> ListActions(global::Apache.Arrow.Flight.Protocol.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListActions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// A flight service exposes all of the available action types that it has
      /// along with descriptions. This allows different flight consumers to
      /// understand the capabilities of the flight service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Apache.Arrow.Flight.Protocol.ActionType> ListActions(global::Apache.Arrow.Flight.Protocol.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListActions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FlightServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FlightServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FlightServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Handshake, serviceImpl.Handshake)
          .AddMethod(__Method_ListFlights, serviceImpl.ListFlights)
          .AddMethod(__Method_GetFlightInfo, serviceImpl.GetFlightInfo)
          .AddMethod(__Method_GetSchema, serviceImpl.GetSchema)
          .AddMethod(__Method_DoGet, serviceImpl.DoGet)
          .AddMethod(__Method_DoPut, serviceImpl.DoPut)
          .AddMethod(__Method_DoExchange, serviceImpl.DoExchange)
          .AddMethod(__Method_DoAction, serviceImpl.DoAction)
          .AddMethod(__Method_ListActions, serviceImpl.ListActions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FlightServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Handshake, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Apache.Arrow.Flight.Protocol.HandshakeRequest, global::Apache.Arrow.Flight.Protocol.HandshakeResponse>(serviceImpl.Handshake));
      serviceBinder.AddMethod(__Method_ListFlights, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Apache.Arrow.Flight.Protocol.Criteria, global::Apache.Arrow.Flight.Protocol.FlightInfo>(serviceImpl.ListFlights));
      serviceBinder.AddMethod(__Method_GetFlightInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Apache.Arrow.Flight.Protocol.FlightDescriptor, global::Apache.Arrow.Flight.Protocol.FlightInfo>(serviceImpl.GetFlightInfo));
      serviceBinder.AddMethod(__Method_GetSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Apache.Arrow.Flight.Protocol.FlightDescriptor, global::Apache.Arrow.Flight.Protocol.SchemaResult>(serviceImpl.GetSchema));
      serviceBinder.AddMethod(__Method_DoGet, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Apache.Arrow.Flight.Protocol.Ticket, global::Apache.Arrow.Flight.Protocol.FlightData>(serviceImpl.DoGet));
      serviceBinder.AddMethod(__Method_DoPut, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.PutResult>(serviceImpl.DoPut));
      serviceBinder.AddMethod(__Method_DoExchange, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Apache.Arrow.Flight.Protocol.FlightData, global::Apache.Arrow.Flight.Protocol.FlightData>(serviceImpl.DoExchange));
      serviceBinder.AddMethod(__Method_DoAction, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Apache.Arrow.Flight.Protocol.Action, global::Apache.Arrow.Flight.Protocol.Result>(serviceImpl.DoAction));
      serviceBinder.AddMethod(__Method_ListActions, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Apache.Arrow.Flight.Protocol.Empty, global::Apache.Arrow.Flight.Protocol.ActionType>(serviceImpl.ListActions));
    }

  }
}
#endregion
